Automatic Web Service Composition with
Abstraction and Refinement
Hyunyoung Kil
Wonhong Nam
Dongwon Lee
The Pennsylvania State University , University Park , PA 16802 , USA
{hykil , wnam , dongwon}@psu.edu
ABSTRACT The behavioral description based Web Service Composition ( WSC ) problem aims at the automatic construction of a coordinator web service that controls a set of web services to reach a goal state . However , solving the WSC problem exactly with a realistic model is doubly exponential in the number of variables in web service descriptions . In this paper , we propose a novel efficient approximation based algorithm using automatic abstraction and refinement to dramatically reduce the number of variables needed to solve the problem . Categories and Subject Descriptors H35 [ Information Storage and Retrieval ] : Online Information Services—Web based services General Terms : Algorithms , Experimentation Keywords : Service Composition , Abstraction , Refinement 1 .
INTRODUCTION
Web services are software systems designed to support machine to machine interoperation over the Web . The Web Service Composition ( WSC ) problem in this paper is , given a set W of ( behavioral descriptions of ) web services and a reachability goal G , to automatically synthesize a coordinator web service c that controls W to satisfy G .
Despite abundant researches on the WSC problem , only a few [ 4 , 3 , 2 ] employ realistic models ( ie , with incomplete information ) for WSC on behavioral descriptions . Since this problem is known to be doubly exponential in the number of variables in web service descriptions [ 2 ] , studying efficient approximation approaches is required . Therefore , we present a novel approach to solve this computationally hard problem , using abstraction and refinement . To the best of our knowledge , it is the first attempt to apply automatic abstraction technique to the WSC problem . We describe a preliminary implementation , and demonstrate that our automatic abstract refinement technique can solve efficiently 3 sets of realistic problems—8 instances . 2 . WEB SERVICE COMPOSITION
Suppose that clients want to reserve both of a flight ticket and a hotel room for a particular destination and a period , and there exist only an airline reservation ( AR ) web service and a hotel reservation ( HR ) web service separately . Clearly , we want to combine these web services rather than implementing a new one . One way to combine them is to construct a coordinator web service ( Travel agency system ) which communicates with each web service to book up both a flight ticket and a hotel room . Fig 1 presents this example .
Copyright is held by the author/owner(s ) . WWW 2009 , April 20–24 , 2009 , Madrid , Spain . ACM 978 1 60558 487 4/09/04 .
Figure 1 : Travel agency system
A web service w is a 5 tuple ( X , X I , X O , Init , T ) where : • X is a finite set of variables that w controls . A state s of w is a valuation for every variable in X . We denote a set of all the states as S . • X I is a finite set of input variables which w reads from its environment ; X ∩ X I = ∅ , and every variable x ∈ X ∪ X I has a finite domain . A state in for inputs is a valuation for every variable in X I .
• X O ⊆ X is a finite set of output variables . • Init(X ) is an initial predicate over X . • T ( X , X I , X ) is a transition predicate over X ∪X I∪X . For a set X of variables , we denote the set of primed variables of X as X = {x | x ∈ X} , which represents a set of variables encoding the successor states . For a state s over X , let s[Y ] where Y ⊆ X denote the valuation over Y obtained by restricting s to Y . Note that the process model for any web service described in WS BPEL or OWL S can be easily transformed into our representation above . In the WSC problem , given a set W of available web services , every web service in W communicates only with their coordinator but not with each other . Based on this assumption , a set W = {w1,··· , wn} of web services can be represented by a tuple ( X , X I , X O , Init , T ) by a general cartesian product of each web service . c , X O c , X O c , Init c , Tc ) where X I = X O
Since a coordinator is also a web service , it is a tuple c = ( Xc , X I c , Init c , Tc ) . Although Tc can define a nondeterministic transition relation , in this problem , we want only a deterministic transition relation for c . Given a set W = ( X , X I , X O , Init , T ) of web services and a coordinator c = ( Xc , X I c and X O = X I c , we can define an execution tree , denoted by W ||c , which represents the composition of W and c as follows : • Each node ( s , sc ) in W ||c is in S × Sc . ( s , sc ) is the root node iff Init(s ) = true and Init c(sc ) = true . • Each node ( s , sc ) has a set of child nodes , {(s , sc ) | )=true , in c= T ( s , in , s)=true , in=sc[X I ] , Tc(sc , in c , sc s[X O]} . Intuitively , the web services W , by receiving the input in from the current state sc of the coordinator , collectively proceeds from s to the next state s ,
Travel AgencySystemReserve/CancelAccept/RefuseOffer/NotAvailIn/Out datesLocationAccept/RefuseReserve/CancelOffer/NotAvailARHRReserve bothor CancelDatesFrom/To CitiesDatesFrom/To CitiesUserWWW 2009 MADRID!Poster Sessions : Thursday , April 23 , 20091121 and then the coordinator , by receiving the input in c from the new state s of W , proceeds from sc to sc . A goal G is a set of states to reach , and specified as a predicate . Given a set W of web services , a coordinator c , and a goal G , we define W ||c |= G if every path ( s0 , sc 0)··· ( sn , sc n ) in the execution tree W ||c reaches a goal state eventually ( ie , sn ∈ G ) . Formally , given a set W of web services and a goal G , the WSC problem in this paper is to construct a coordinator c such that W ||c |= G . Theorem 1 . The WSC problem with no internal variable ( ie , X = X O ) is EXP hard , and the WSC problem for a general case is 2 EXP hard [ 2 ] . 3 . ABSTRACTION AND REFINEMENT
Theorem 1 implies that more efforts to devise efficient approximation solutions to the WSC problem be needed . In this paper , therefore , we propose an approximation based algorithm . Algorithm 1 presents a high level description of our algorithm . First , we abstract a given web service set W into W Abs , which has less variables than W but includes all the behaviors of W . Given a set of web services W ( X , X I , X O , Init , T ) and a set Y ⊆ X of variables , the abstraction of W with respect to Y is WY ( XY , X I Y = X I , and X O
Y , X O Y = X O .
Y , Init Y , TY ) where :
• XY = Y , X I • For every sY ∈ SY , Init Y ( sY ) = true iff ∃s ∈ S . ( Init(s ) Y ) = true iff ∃s , s ∈ • For every sY , s
= true ) ∧ ( sY = s[Y ] ) . S . ( T ( s , in , s ) = true ) ∧ ( sY = s[Y ] ) ∧ ( s
Y = s[Y ] ) . Since the abstraction WY contains all the behaviors of W ,
Y ∈ SY , TY ( sY , in , s
WY satisfies the following property . Theorem 2 . Given a set W of web services and a goal G , if a coordinator web service c satisfies W Abs||c |= G where W Abs is an abstraction of W , then c satisfies W ||c |= G .
In Algorithm 1 , the procedure Abstraction constructs abstract web services WY for the given variable set Y . Since our first abstraction is performed with Y = X I ∪ X O ( lines 1–2 ) , WY includes no internal variable and in this case we can exploit the procedure WSC NoInternalVars that is more efficient ( ie , EXP hard ) . WSC NoInternalVars ( line 3 ) and WSC General ( line 8 ) try to construct a coordinator c for a given web services WY wihtout/with internal variables , respectively . If we find a coordinator c such that WY ||c |= G , then c also satisfies W ||c |= G by Theorem 2 . Otherwise , we refine WY by adding variables , and try to find c for the new abstraction ( lines 5–9 ) . For selecting variables to be added , we construct a variable dependency graph that is a directed graph , in which each vertex is a variable and a directed edge from x to y exists iff the value of y depends on x ( eg , y := x ) . We then cluster variables according to the number of hops to variables appearing in a given goal predicate G . In every iteration of our algorithm , we add a set of variables that is closest to variables in G ( ie , 1hop , 2 hop , ··· ) . We repeat the abstration/refinement step until we identify a coordinator c satisfying WY ||c |= G or the variable set used for abstraction equals to the original variable set . The later case implies no solution for the given problem . Although from the second loop , we should employ a general algorithm WSC General that is 2 EXP , once we identify a coordinator using small abstract web services , searching space is shrunken ( double )exponentially in the number of variables that we save . In Algorithm 1 , the procedures , WSC NoInternalVars and WSC General , can be
Algorithm 1 : Abs/Ref Web Service Composition
Input : A set W of web services and a goal G . Output : A coordinate web service c . Y := X I ∪ X O ; WY := Abstraction(W , Y ) ; if ( (c := WSC NoInternalVars(WY , G ) ) = null ) then while ( (NewVars := SelectNewVariables(W , G ) ) = null ) do return c ;
Y := Y ∪ NewVars ; WY := Abstraction(W , Y ) ; if ( (c := WSC General(WY , G ) ) = null ) then return c ;
1 2 3 4
5 6 7 8 9
10 return null ;
Table 1 : Experiment result
Problem T var
I/O var
Basic
TAS1 TAS2 TAS3 P&S1 P&S2 P&S3 VOS1 VOS2
36 70 111 43 48 59 57 67
18 24 25 17 18 20 17 17
0.1 32.5 >7200.0 3.1 56.0 2003.2 64.8 2940.8
Abs/Ref 0.1 25.6 2589.7 3.2 43.1 1244.9 18.2 520.8
S var
8 12 12 15 15 20 18 23 implemented by using automated planning on complete information and incomplete information , respectively .
To demonstrate that our tool efficiently synthesizes coordinator web services , we compared a basic algorithm [ 4 ] ( ie , without abstarction/refinement ) and our method with 3 sets of realistic examples ( 8 instances ) ; Travel agency system ( TAS ) explained in Section 2 , Producer and shipper ( P&S ) [ 4 ] , and Virtual online shop ( VOS ) [ 1 ] . All experiments were performed on a PC using a 2.4GHz Pentium processor , 2GB memory and a Linux OS . Table 1 presents the number of total variables ( T var ) and input/output variables ( I/O var ) in boolean . It also shows the total execution time in seconds for a basic algorithm ( Basic ) [ 4 ] and our method ( Abs/Ref ) , and the number of boolean variables that we saved ( S var ) . Our experiment shows that our technique outperforms the basic algorithm in 6 instances ( 1 tie ) .
4 . CONCLUSION
We have proposed an automatic technique for WSC problems based on abstraction and refinement . Our preliminary experiment shows promising results . As future work , we plan to investigate other abstraction methods and various refinement techniques in order to early converge the conclusion . Finally , it is worth pointing out that our approach can readily be adopted for other WSC methods such as knowledge level composition [ 3 ] .
5 . REFERENCES [ 1 ] F . Barbon , P . Traverso , M . Pistore , and M . Trainotti .
Run time monitoring of instances and classes of web service compositions . In Proc . of ICWS , pages 63–71 , 2006 .
[ 2 ] H . Kil , W . Nam , and D . Lee . Computational complexity of web service composition based on behavioral descriptions . In Proc . of ICTAI , pages 359–363 , 2008 .
[ 3 ] M . Pistore , A . Marconi , P . Bertoli , and P . Traverso .
Automated composition of web services by planning at the knowledge level . In Proc . of IJCAI , pages 1252–1259 , 2005 .
[ 4 ] P . Traverso and M . Pistore . Automated composition of semantic web services into executable processes . In Proc . of ISWC , pages 380–394 , 2004 .
WWW 2009 MADRID!Poster Sessions : Thursday , April 23 , 20091122
