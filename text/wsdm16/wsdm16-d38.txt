Extracting Search Query Patterns via the Pairwise Coupled
Topic Model
Takuya Konishi†§ takuya ko@niiacjp
Takuya Ohwa†§
Sumio Fujita‡ takuyaohwa@niiacjp sufujita@yahoo corp.jp
Kazushi Ikeda* kazushi@isnaistjp
Kohei Hayashi†§ kohei h@niiacjp
†National Institute of Informatics
§JST , ERATO , Kawarabayashi Large Graph Project
‡Yahoo Japan Corporation *Nara Institute of Science and Technology
ABSTRACT A fundamental yet new challenge in information retrieval is the identification of patterns behind search queries . For example , the query “ NY restaurant ” and “ boston hotel ” shares the common pattern “ LOCATION SERVICE ” . However , because of the diversity of real queries , existing approaches require data preprocessing by humans or specifying the target query domains , which hinders their applicability .
We propose a probabilistic topic model that assumes that each term ( eg , “ NY ” ) has a topic ( LOCATION ) . The key idea is that we consider topic co occurrence in a query rather than a topic sequence , which significantly reduces computational cost yet enables us to acquire coherent topics without the preprocessing . Using two real query datasets , we demonstrate that the obtained topics are intelligible by humans , and are highly accurate in keyword prediction and query generation tasks .
Keywords Search queries ; Query intent analysis ; Topic model
1 .
INTRODUCTION
When people want to find new information on the Internet , they commonly use search engines . Users interact with search engines by queries , and their intents and personal backgrounds are expected to be preserved in query logs .
Extracting the low dimensional hidden structures behind search queries is an essential task to obtain user information . This is motivated by our intuition that , while real queries are diverse and unorganized and the number of possible queries are nearly infinite , most real queries fall into a combination of a few terms from multiple categories . For example , the query “ NY restaurant ” consists of two terms “ NY ” and “ restaurant ” . Clearly , “ NY ” indicates LOCATION and “ restaurant ” specifies the type of SERVICE . If we know such is a relationships , we can infer that the user wants to
WSDM’16 , February 22–25 , 2016 , San Francisco , CA , USA . cfl 2016 Copyright held by the owner/author(s ) .
ACM ISBN 978 1 4503 3716 8/16/02 . DOI : http://dxdoiorg/101145/28357762835794 use SERVICE and s/he lives in/will go to LOCATION in the near future . Such knowledge provides a rich interpretation about user needs and is beneficial for better search experiences in related applications . Query recommendation in Internet advertising is a typical example [ 2 , 15 ] . For advertising clients , extracted query patterns can be used to suggest cost effective queries , ie , less known and having low advertising rate but expected to have the same advertising performance as hot keywords . Furthermore , interpretable query patterns are potentially applicable to predicting click through rate [ 11 ] , profiling users [ 9 ] , improving search results [ 17 ] , and query expansion [ 21 ] .
The identification of such categories and is a relationships has emerged as a new area in information retrieval ( IR ) . This is referred to as query templates [ 1 ] and several approaches has been proposed to solve this task [ 1 , 8 , 14 ] . Although such approaches have demonstrated the usefulness of query templates for real applications , they have several limitations . First , they need the specification of target domain beforehand [ 1 , 14 ] , ie , we must collect queries that are related to a certain theme , such as automobiles , travels , and movies . This preprocessing reduces the number of queries and the diversity drastically . However , it loses the generality and much useful information , such as cross domain knowledge . Another issue is that the need for human assistance [ 8 ] . While humans can identify the term category relationships with high accuracy , its expensive resource cost and low throughput hampers the applicability to large scale query logs . In addition , due to the expensive computational cost , the number of the category ( K ) is considerably restricted to be small such as K ≃ 6 .
Topic models [ 3 , 4 , 22 ] are alternatives to solve the query template task . Topic models learn the relationships between a term and a category as a topic from a large number of documents ( ie , queries ) in an unsupervised manner . Desirably , topic models are feasible with K ≥ 100 categories . However , they typically assume that each document contains many terms and are not suitable for query logs , which are extremely sparse [ 3 , 4 ] . In addition , there is no straightforward way to incorporate information from a sequence of topics . For example , a topic sequence ( LOCATION , SERVICE ) appears frequently in real queries , but ( SERVICE , SERVICE ) is very rare . Exploiting such correlation information will further improve the performance .
To address the above issues , we propose the pairwise coupled topic model ( PCTM)—a probabilistic topic model for
655 query logs . The PCTM approximates the co occurrence information over queries by topic pairs , which significantly enriches the model and overcomes the brevity and sparseness of queries . On the basis of the approximation , we derive a fully Bayesian inference algorithm with collapsed Gibbs sampling , which handles queries as a collection of term pairs and significantly reduces computational cost from O(KM ) to O(M 2K 2 ) where M is the length of a query . In the PCTM , M is essentially very small and we can manage sufficient sizes of K as K ≃ 100 . Moreover , by exploiting the sparsity of the topic correlation , we develop an efficient computation technique for the collapsed Gibbs sampling .
Our contributions are summarized as follows .
Versatility : The PCTM can handle queries of any domains , and it is not necessary to specify them . In addition , the PCTM does not require human assistance .
Extracting sparse cross domain relation : The PCTM estimates topic co occurrence as a sparse covariance matrix , which gives us cross domain knowledge as an interpretable network of topics .
Computational Efficiency : Our computational trick reduces the sampling cost from O(K 2 ) to O(K ) with almost no expense .
Our study primarily focuses on extracting the structures that commonly appear among search queries , rather than adapting specific information retrieval tasks . Thus , we evaluate the PCTM with respect to the following three fundamental viewpoints : the coherence of estimated topics , the accuracy of keyword prediction where the model infer a term given other terms in the query , and the ability of query generation . These abilities are key in many applications . For example , coherent topics help practitioners to understand the results of specific IR tasks in a deeper way . Keyword prediction is used for query suggestion and spelling correction . Generating natural queries is necessary for query recommendation in Internet advertising .
2 . MODELING QUERY LOGS
2.1 Problem Definition
Given a set of queries , we would like to obtain the following knowledge : ( a ) a set of distinct categories of terms used in query logs , ( b ) is a relationships between the categories and terms , and ( c ) a mapping from a query to query pattern represented by a sequence of the categories . Let us explain the detail by using an example . Suppose we have the query , “ chicago hotel cheapest ” where “ chicago ” , “ hotel ” , and “ cheapest ” are instances of the categories LOCATION , SERVICE , and CONDITION respectively . Such categories are related to many other terms , eg , LOCATION is associated with a variety of terms that indicate the names of places . Note that a term can possibly belong to multiple categories , eg , “ chicago ” may be associated with a MOVIE category in other queries . With such many to many relationships , the query pattern is recovered as a sequence of categories ( LOCATION , SERVICE , CONDITION ) .
We notice that it is difficult to obtain the category information from any other external resources in advance ( eg , dictionaries and thesauruses ) because the concepts defined by external resources do not always correspond to desirable categories that reflect the actual query activities . For example , both “ houston ” and “ miami ” are names of places ; however , queries containing “ houston ” and queries contain ing “ miami ” could be very different in terms of user intent and personal backgrounds . The former is in a residential area , and would likely be used with DAILYLIFE keywords , such as “ houston apartment ” or “ houston job ” . In contrast , the latter is in a resort area and would likely be used with TRAVEL keywords , such as “ miami hotel ” or “ miami restaurant ” . Treating these two terms as the same category loses such query specific information .
2.2 Naive Query Model
To obtain knowledge from query logs , we consider a simple probabilistic model of a query based on a topic model . Suppose we have an M long query q = ( w1 , . . . , wM ) where each term wm ∈ {1 , . . . , V } has a latent topic zm ∈ {1 , . . . , K} and these terms are conditionally independent given the topics . Under this assumption , the joint probability of q and z = ( z1 , . . . , zM ) is expressed as follows : p(q , z ) = p(z)p(q|z )
= p(z1 , . . . , zM ) Ywm∈q p(wm|zm ) .
( 1 )
This formulation satisfies the requirements mentioned in Section 2.1 : ( a ) categories ( ie , topics ) are represented as the latent variables z , ( b ) is a relationships between wm and zm are represented as term distribution p(wm|zm ) that indicates the probability of term occurrences given a topic , and ( c ) a sequence of the categories is represented as a topic sequence ( z1 , . . . , zM ) , and p(z1 , . . . , zM ) is the distribution that indicates the probability of the occurrences of the topic sequence . Note that representing is a relationships by the term distribution enables that one term can be associated with multiple topics .
Without loss of generality , model ( 1 ) is rewritten as a product of the multinomial distribution for terms and the tensor variate multinomial distribution for a topic sequence as follows : p(q , z ) = πz1,,zM Ywm∈q
φwm,zm .
( 2 )
φwm,zm denotes the probability of the term wm given topic zm , and πz1,,zM denotes the probability of the topic sequence ( z1 , . . . , zM ) ; thus , πz1,,zM can be considered as an M th order tensor having KM elements , which represent the probabilities of all possible sequences of topics z1 , . . . , zM .
Model ( 2 ) is general and flexible ; however , it requires huge computational cost in parameter estimation . Bayesian inference needs to marginalize the latent variables z , which is equivalent to computing a summation of all possible values of πz1,,zM in Eq ( 2 ) and this requires O(KM ) computation . Even though query length M is relatively small compared to that of normal documents , practically M could be more than 10 in real query logs and it would easily make parameter estimation computationally infeasible .
3 . PCTM : PAIRWISE COUPLED TOPIC MODEL
As discussed above , the main computational cost of model ( 2 ) arises from the full dependency of p(z1 , . . . , zM ) . In this section , we consider relaxation of this assumption .
3.1 Pairwise Decomposition of Topics
Our key idea is that , in most queries , the full dependency of a topic sequence is sufficiently approximated by a col
656 lection of pairwise relationships among topics . For example , let us reconsider query “ chicago hotel cheapest ” . Here , we can recognize that “ chicago ” is used as LOCATION rather than MOVIE because it is jointly used with “ hotel ” . Similarly , “ hotel cheapest ” sufficiently determines the context of both “ hotel ” and “ cheapest ” . Therefore , in this example , two term pairs “ chicago hotel ” and “ hotel cheapest ” are sufficient to estimate the intent of this query .
By following this observation , we assume that p(z1 , . . . , zM ) is decomposed as the product of the second order tensors with respect to z . For example , if M = 3 , the joint probability of topics is written as : p(z1 , z2 , z3 ) ∝ ( Ψ(z1 , z2)Ψ(z1 , z3)Ψ(z2 , z3 ) )
1
2 ,
( 3 )
1
M −1 = 1 where Ψ(· , · ) is a potential function representing a pairwise interaction of topics . Note that we introduce exponential weight 2 for later convenience . While a general potential function takes unnormalized and unconstrained real values , we suppose the each potential indicates the probabilities of the occurrence of topic pairs . In spite of such definition , Eq ( 3 ) requires normalizing constant because of dependencies between potentials . Eq ( 3 ) can be generalized as follows : this model satisfies requirements ( a ) and ( b ) described in Section 22 We will discuss ( c ) in Section 34
Compared to model ( 5 ) , model ( 6 ) drastically reduces the computational cost . Since all latent variables are independent in p(b , x ) , we can separately take the marginalization with respect to topic pairs , which reduces computational cost from the topic sequence O(KM ) to the sum of topic pairs O(M 2K 2 ) .
On the basis of model ( 6 ) , we construct the PCTM for the set of queries . Suppose we have N ≥ M term pairs obtained by decomposing M queries.1 Let B = {bi}N i=1 = {(wi,1 , wi,2)}N i=1 denote the term pairs and X = {xi}N i=1 = {(zi,1 , zi,2)}N i=1 denote the corresponding topic pairs . By introducing the Dirichlet prior distributions p(φk|β ) ≡ Dir(φk|β1 ) ( k = 1 , . . . , K ) and p(ψ|γ ) ≡ Dir(ψ|γ1 ) , the joint distribution of the PCTM is given as p(B , X , φ , ψ|β , γ ) =
N
Yi=1 p(bi|xi , φ)p(xi|ψ ) p(φk|β)p(ψ|γ )
=
N
Yi=1 p(wi,1|zi,1 , φ)p(wi,2|zi,2 , φ)p(xi|ψ )
K
Yk=1 Yk=1
K p(φk|β)p(ψ|γ ) ,
( 7 ) p(z1 , . . . , zM ) ∝ Y(i,j)∈BM
Ψ(zi , zj )
1
M −1
,
( 4 ) where φ = {φk}K k=1 . where BM is the set of all possible pair indices in an M long sequence , ie , |BM | = M C2 = M ( M − 1)/2 . Substituting decomposition ( 4 ) into model ( 1 ) yields : p(q , z ) ∝ Ywm∈q p(wm|zm ) Y(i,j)∈BM
Ψ(zi , zj )
1
M −1
∝ Y(i,j)∈BM p(wi|zi)p(wj|zj)Ψ(zi , zj )
1
M −1
.
( 5 )
Interestingly , Eq ( 5 ) implies that pairwise decomposition of topics ( 3 ) allows us to deal with the entire model as the product of the sub model with respect to term pairs ( wi , wj ) and topic pairs ( zi , zj ) for ( i , j ) ∈ BM .
3.2 Modeling Terms and Topic Pairs
Model ( 5 ) yet has an issue of the computational cost . The parameters of the potentials depend on the normalizing constant , which requires O(KM ) computation . i=1 = {(wi,1 , wi,2)}|BM |
To avoid this , we decompose queries into term pairs and directly model the term pairs . We introduce new variables : b = {bi}|BM | i=1 denotes all possible term pairs in an M long query and x = {xi}|BM | i=1 = {(zi,1 , zi,2)}|BM | denotes the corresponding topic pairs . Differently from Eq ( 5 ) , all the term and topic pairs are defined as different variables . The new model is then described as i=1 p(b , x ) =
|BM |
Yi=1 p(bi|xi)p(xi ) ,
( 6 ) where p(bi|xi ) = p(wi,1|zi,1)p(wi,2|zi,2 ) = φwi,1,zi,1 φwi,2,zi,2 , p(xi ) = p(zi,1 , zi,2 ) = ψzi,1,zi,2 . p(xi ) is the K × K matrix variate multinomial distribution where the parameter ψ·,· represents the probability of topic co occurrence , ie , the covariance of topics . As in Eq ( 1 ) ,
3.3 Inference Algorithm
We infer the parameters by collapsed Gibbs sampling that enable Bayesian inference , which is more robust and effective for avoiding overfitting than point estimation by eg the EM algorithm . The joint distribution after marginalizing out φ and ψ is given as : p(B , X|β , γ ) = Z p(B|X , φ)p(φ|β)dφZ p(X|ψ)p(ψ|γ)dψ
Γ(β)V K K QV = Γ(V β ) Yk=1 k=1QK Γ(γ)K 2 QK
Γ(K 2γ ) v=1 Γ(nv|k + β ) Γ(n·|k + V β ) l=1 Γ(nk,l + γ )
Γ(N + K 2γ )
,
( 8 ) where Γ(· ) is the gamma function , nv|k = PN Iv[wi,2]Ik[zi,2 ] , n·|k = PV v=1 nv|k , and nk,l = PN
( Ia[b ] is an indicator function that takes 1 when a = b ) . Note that the marginalization has the closed form solution as in Eq ( 8 ) because of the inconsistency of the topics introduced in Eq ( 6 ) . This makes expensive sampling of φ and ψ unnecessary , whereas original model ( 5 ) requires .
Iv[wi,1]Ik[zi,1]+ Ik[zi,1]Il[zi,2 ] i=1 i=1
Samples of X are obtained by the following conditional distribution : p(xi = ( k , l)|B−i , bi = ( wi,1 , wi,2 ) , X −i )
( n−i k,l + γ )
( n−i k,k + γ )
( n−i wi,1 |k ( n−i ·|k ( n−i wi,1 |k
+β)(n−i wi,2 |l
+β )
+V β)(n−i ·|l +β)(n−i
+V β )
+β ) wi,2 |k
( n−i ·|k
+1+V β)(n−i ·|k
+V β )
( k 6= l )
( k = l )
,
( 9 )
∝
 
1Hereafter , we ignore single term queries so that each query contains two terms or more . We also assume that a query does not include the same terms ; thus , we eliminate duplicate terms , eg , we convert “ NY NY restaurant ” to “ NY restaurant ” .
657 Algorithm 1 Collapsed Gibbs sampling for the PCTM for all term pairs i =1 . . . N do for all topic pairs ( k , l ) =(1,1 ) . . . ( K , K ) do
Compute the probability p(xi = ( k , l)|B , X −i ) end for Sample the topic pair xi end for where the notation −i indicates the set of variables or the counts excluding the variable at the ith position . We compute Eq ( 9 ) for all term pairs as summarized in Algorithm 1 . The mechanism of learning topics with the PCTM may not intuitive . While other topic models ( eg , latent Dirichlet allocation ( LDA ) [ 4 ] ) learn topics by term co occurrence , the PCTM does not use this information explicitly in the modeling level . However , the PCTM does use this information during inference . This is why the PCTM can learn coherent topics . By following Algorithm 1 , let us explain this with a simple example . Suppose we observe a term pair b1=( “ chicago ” , “ hotel ” ) as a first data query . Since nw|k and nk,l are initialized randomly , the topics of “ chicago ” and “ hotel ” are sampled randomly . Let “ chicago ” and “ hotel ” be assigned to topic 1 and topic 2 respectively . These assignments increase nchicago|topic1 , nhotel|topic2 , and ntopic1,topic2 . Next , suppose we observe a term pair b2=( “ ny ” , “ hotel ” ) . Here , “ hotel ” will be assigned to topic 2 because nhotel|topic2 is higher . Now , “ ny ” will be assigned to topic 1 because , while nny|topic1 and nny|topic2 are still random , ntopic1,topic2 is higher . In this example , although “ chicago ” and “ ny ” are never co occurred in b1 and b2 , they are assigned to the same topic 1 .
We estimate the integrated φ and ψ as follows :
ˆφv,k = nv|k + β n·|k + V β and
ˆψk,l = nk,l + γ N + K 2γ
,
( 10 ) where nv|k , n·|k and nk,l are computed by the obtained samples of topic pairs from Algorithm 1 .
3.4 Recovering Topic Sequences with Topic In consistency
As mentioned , changing formulation from Eq ( 5 ) to Eq ( 6 ) improves computational complexity . However , Eq ( 6 ) looses information about queries , and it causes the topic inconsistency problem . Given a query “ chicago hotel cheapest ” , consider two term pairs b1 = ( “ chicago ” , “ hotel ” ) and b2 = ( “ chicago ” , “ cheapest ” ) . In Eq ( 5 ) , z1,1 and z2,1 are treated as the same variable . However , in Eq ( 6 ) , they are different variables , and the estimated topics can be different . This problem becomes an obstacle for satisfying the requirement ( c ) of Section 21
To avoid this , we consider an approximate way to recover the most probable topic sequence . Consider an M long query q = ( w1 , . . . , wM ) with a topic sequence z = ( z1 , . . . , zM ) . In the PCTM , the posterior of the topic pair xi given the term pair bi and the estimated parameters ˆφ and ˆψ is written as follows : p(xi|bi , ˆφ , ˆψ)kl = k′=1PK PK l′=1
ˆψk,l ˆφwi,1,k ˆφwi,2,l
ˆψk′,l′ ˆφwi,1,k′ ˆφwi,2,l′
.
( 11 )
By combining with Bayes’ rule , we approximate the poste
Figure 1 : Estimated ˆψ from the AOL dataset ( see Section 5 for more details ) rior of the topic sequence by the following Markov chain : p(z|q ) ≈ p(z1 , z2|q)p(z3|z2 , q)p(z4|z3 , q ) . . . p(zM |zM −1 , q ) ≈ p(x1|b1)p(x2|1|b2)p(x3|2|b3 ) . . . p(xM −1|M −2|bM −1 ) ( 12 ) where p(xi|i−1|bi)kl = p(xi|bi)kl p(zi,1|bi)l
= p(xi|bi)kl
Pk p(xi|bi)kl
( 13 ) denotes the conditional posterior of zi,2 given zi,1 . The last line of Eq ( 12 ) enables us to compute the most probable sequence of topics by forward algorithms , such as the Viterbi algorithm [ 18 ] .
3.5 Speeding up Gibbs Sampling
Collapsed Gibbs sampling ( Algorithm 1 ) requires O(K 2 ) computations to check the probabilities of each topic pair , and the total complexity amounts to O(N K 2 ) . While this is significantly better than that of the naive model ( 1 ) , the K 2 term is sometimes problematic when K is large .
Surprisingly , by exploiting the property of query logs , we can reduce the O(K 2 ) computation to O(K ) . The key assumption is that , in a query , a topic co occurs with only a few specific topics . For example , a topic SERVICE co occurs frequently with LOCATION , but rarely with other topics such as MOVIE , ELECTRONICS and TOY . Moreover , if the number of frequently co occurred topics is O(1 ) for each topic , the total number of meaningful topic pairs is bounded by O(K ) . In such case , estimated ˆψ is supposed to be very sparse . In fact , as demonstrated in Figure 1 , we observe that this assumption is fairly reasonable for real query logs .
On the basis of the above property , we propose a fast sampling algorithm that skips unnecessary probability computations in the collapsed Gibbs sampling,2 which we refer to as conditioned sampling . First , we define that topic pair ( k , l ) is active if nk,l > 0 in current samples ; otherwise inactive ( ie , nk,l = 0 ) . Then , we consider to divide topic pairs into the two sets S and ¯S ; S is the set of a few active topic pairs having high probability , and ¯S is the set of many other inactive topic pairs having low probability . Let µ denote the total probability of the active topic pairs .
Now we consider to sample xi from Eq ( 9 ) . For each topic pair xi , we flip a biased coin such that p(head ) = µ . If it comes up heads ( tails ) , we sample xi by computing Eq ( 9 ) among only S ( ¯S ) . In most cases , xi is sampled
2Similar techniques are used in [ 23 ] .
658 Algorithm 2 Conditioned sampling for the PCTM for all term pairs i =1 . . . N do
Compute the probability µ Choose S or ¯S according to µ if Select S then for all active topic pairs ( k , l ) in S do
Compute the probability p(xi = ( k , l)|B , X −i ) end for Sample the topic pair xi else for all inactive topic pairs ( k , l ) in ¯S do
Compute the probability p(xi = ( k , l)|B , X −i ) end for Sample the topic pair xi end if end for from S because µ is larger than 1 − µ . In addition , sampling from S is more tractable than the exact sampling because we compute Eq ( 9 ) for only a few active topic pairs . Conversely , sampling from ¯S requires O(K 2 ) ; however because 1 − µ is sufficiently small , this procedure rarely occurs . Taken together , the average time complexity per xi is O(µ|S| + ( 1 − µ)(K 2 − |S|) ) . Here we assume two conditions : ( i ) |S| = O(K ) , which we discussed above , and ( ii ) 1 − µ = O(1/K ) . Under these conditions , µ|S| = O(K ) and ( 1−µ)(K 2−|S| ) = O(K ) , and the total complexity is reduced to O(K ) . Whole the procedures are summarized as in Algorithm 2 . Now we check the validity of condition ( ii ) . Substituting zero into all the counts such as n−i k,l in Eq ( 9 ) yields p(xi = ( k , l)|B , X −i ) ∝ γ ( we ignore 1/V 2 because it is constant ) , which implies that 1 − µ has O(K 2γ ) probability . Because its normalizer is approximately given by N + K 2γ ( see the update equation of ˆψ ( 10) ) , 1 − µ = O(1/K ) unless N > K 3γ . Here , we empirically found that the PCTM with the small γ such as O(1/K 2 ) performs well . Instead , as long as using such small γ , the condition is relaxed to N > K , which is obviously satisfied .
Note that , if we know the true value of µ = PiP(k,l)∈S p(xi =
( k , l)|B , X −i ) , the obtained samples from the above procedure are exactly the same as the original sampler . However , the computation of µ requires the summation of Eq ( 9 ) , taking O(N K 2 ) . Therefore , as an approximation , we use the following probability :
µ = X(k,l)∈S p(xi = ( k , l)|X −i ) =
N − 1 + |S|γ N − 1 + K 2γ
,
( 14 ) which we can compute in constant time . Note that Eq ( 14 ) is the total probability of the active topic pairs with assuming that B is generated by the model , instead of the observed B . Therefore , it may have a small deviation from the true µ ; however , we empirically confirmed that the obtained samples have almost the same quality as the exact ones ( Section 56 )
4 . RELATED WORK
4.1 Topic Models for Search Logs
Topic models have been widely used for modeling search log datasets with different motivations . One motivation has been to improve search results based on search log histories [ 5 , 9 , 17 ] . For example , Harvey et al . proposed a topic model that incorporates search engine users for user profiling to improve personalized searches [ 9 ] . Other researchers have explored topic models for traditional search log tasks , such as predicting click through rates [ 11 , 12 ] . Jiang et al . proposed a topic model for some information included in search logs , such as URLs and timestamps [ 11 ] . Search logs are valuable sources of information for obtaining web based knowledges . Xu et al . proposed a topic model for named entity mining with an efficient semi supervised learning algorithm [ 20 ] .
As in the above models , topic models have been used for modeling search log datasets that contain not only queries and other information , such as users , time stamps , URLs , and click through logs . On the other hand , we focus on modeling the queries themselves . In our setting , we require only raw queries , which extends the range of application .
4.2 Query Templates
Query template methods have been explored to obtain query patterns [ 1 , 8 , 14 ] . Agarwal et al . advocated concepts of query templates and proposed a probabilistic inference framework for mining templates based on tripartite graphs among queries , websites , and templates [ 1 ] . Han et al . studied a human assisted method for analyzing query templates that incorporates crowdsourcing for query interpretation [ 8 ] . Pandey and Punera proposed a probabilistic generative model for queries and query templates [ 14 ] . In that model , templates are defined as a topic sequence without duplication , which is not an actual topic assignment for each term . Given a template per query , the model generates the number of terms assigned to the topics included in the template with the Poisson distribution and assigns the topics for each term . For example , the query “ toyota 2002 seat cover ” is assumed to have a template ( BRAND , YEAR , PARTS ) and is generated by the topic assignments ( BRAND , YEAR , PARTS , PARTS ) , that is , the model generates “ toyota ” from BRAND , “ 2002 ” from YEAR , and “ seat ” and “ cover ” from PARTS .
Although these methods have been demonstrated to extract meaningful query patterns , they only dealt with queries in a particular domain . This restriction improves the quality of query templates for that domain ; however , it must perform preprocessing to limit target domains by using such as query classification . For example , one proposed method [ 1 ] assumes that is a relationships in a domain are given a priori using other methods , such as named entity mining , and they only focused on query pattern extraction . Another proposed model [ 14 ] does not employ assumptions about domains ; however , it also requires domain limitation due to the computational cost that arises from the dependencies among topics . Compared to those methods , we tackle a more challenging task , ie , extraction of category and query patterns simultaneously without domain limitation and other preprocessing methods .
4.3 Relation to Other Topic Models
The PCTM is related to other topic models , including LDA [ 4 ] , the most popular topic model . We can apply LDA to query logs by considering a single query as a document ; however the performance may not be good due to the following reasons . First , although LDA assumes that a topic assigned to a term is drawn from a document specific topic
659 !" #$ % " &’(’)*+, #* !
!"#$%"&!
)*+, #* !
./’’’’’+*)0$1+$&0!
./’’’’’+*)0$1+$&0!
2$3’456!
273’8956!
Figure 2 : Generative processes of ( a ) BTM and ( b ) PCTM distribution , short texts such as queries have no more than a few terms in a document . This would cause the sparsity problem , ie , LDA suffers from the lack of information for each query in estimating the topic distribution [ 22 ] . Moreover , if a dataset contains D documents , LDA has a parameter of size D × K , and since D is normally very large in query logs , we must consider memory usage for parameter inference carefully . In contrast , the PCTM has only one distribution that generates topic pairs over the dataset . This avoids the sparsity problem , and the topic pair distribution is represented by a K 2 matrix , which does not depend on the number of documents . In the parameter inference , LDA requires O(K ) computation to check the probability of a single term . Therefore , if the average length of documents is L , the total time complexity is O(DLK ) .
Yan et al . proposed the biterm topic model ( BTM ) [ 22 ] . While the BTM and PCTM can be considered topic models for term pairs , the key difference is that the BTM assumes that a term pair shares the same topic . This assumption leads a great success of the BTM in application to short texts because term pairs in general short texts would rarely take completely different topics . However this assumption is not suitable for modeling queries because a query consists of multiple terms having a variety of topics .
To clarify this difference , we illustrate the generative processes of the BTM and PCTM in Figure 2 . Recall the example “ NY restaurant ” mentioned in Section 1 . The BTM assigns the same topic for every two terms . Thus , because the location names and service names , such as “ NY ” and “ restaurant ” , frequently appear in the same queries , the BTM estimates them as an integrated topic of SERVICE and LOCATION . Such mixing of topics is not desirable in terms of the interpretability . In contrast , the PCTM assigns a topic pair for every two terms . This allows to learn SERVICE and LOCATION as different topics .
The correlated topic model ( CTM ) has been proposed to extract topics and their correlations from documents [ 3 ] . The CTM assumes the logistic normal distribution to model the correlation and was shown to be successful meaningful topic correlation from the academic journal dataset . However , since the CTM also models topic distribution for each document , it would suffer from the sparsity problem as discussed in LDA . Moreover , while a variational inference algorithm has been proposed , there is no analytical solution and it requires to perform the conjugate gradient method for
Table 1 : Summary of the query log datasets where D is the number of documents , V is the number of terms in the vocabulary , and M is the number of terms in a query .
D
V
Yahoo AOL
996K 15K 583K 14K
Average M Language Japanese English
2.31 2.77 the parameter inference , which uses huge amount of memory space .
Note that the PCTM has the same structure as the product space mixture model ( PMM ) [ 10 ] . Compared to the PMM , we provide the following three contributions : we associate the PMM with a fully dependent topic model ( 2 ) , we demonstrate applicability to query log modeling , and we formulate a fully Bayesian framework and derive an efficient inference algorithm with collapsed Gibbs sampling rather than an annealed EM algorithm [ 10 ] .
5 . EXPERIMENTS
5.1 Setting
We prepared two real query logs : AOL and Yahoo! Japan datasets . The AOL dataset consists of approximately 20 million queries [ 16 ] . The Yahoo! Japan dataset consists of approximately 600 million queries sampled from one week search logs . In our experiments , we examined the abilities of the PCTM for typical queries . To conduct such experiments , we performed the following preprocessing . We eliminated queries from the datasets that included low frequency terms or stop words . We then performed random sampling to reduce the data size . This preprocessing extracted typical queries randomly ; while the domains of queries were still diverse . In addition , for the AOL dataset , we performed stemming with the Porter ’s algorithm3 . Table 1 summarizes the preprocessed datasets .
Throughout the experiments , we compared the PCTM with the LDA and BTM . As explained in Section 4.3 , LDA handles a query as a document . Note that we also attempted to evaluate the CTM with an R implementation4 ; however , this did not work in our experimental environment5 due to memory overflow . All models were inferred with collapsed Gibbs sampling . We iterated 1,000 samples for the LDA and BTM , and 500 samples for the PCTM . We obtained the last sample in a Markov chain and made use of this sample to estimate parameters , which was required in some experiments . In all experiments and the models , the number of topics was fixed to 100 , and β , which is a common hyperparameter , was fixed to 01 6 Since α of LDA is a sensitive parameter [ 19 ] , we assumed an asymmetric prior and estimated by using Minka ’s fixed point iteration [ 13 ] . For α of the BTM and γ of the PCTM , we assumed a symmetric prior and used fixed values ; we set α of the BTM to 50 K and γ of the PCTM to K 2 [ 22 ] . 7 50
3http://tartarus.org/martin/PorterStemmer/ 4http://cranr projectorg/web/packages/topicmodels/indexhtml 5CPU:Intel Corei7 3770 3.40GHz , Memory:16GB RAM 6For the LDA and BTM , we follow the notation of hyperparameters from [ 7 ] and [ 22 ] , respectively . 7While we did not estimate α of the BTM and γ of the
660 Figure 3 : Results of the word intrusion task . Each panel shows the results for the number of displayed terms . 5.2 Human Evaluation of Topic Quality
In our first experiment , we investigated the interpretability of estimated topics for humans , ie , how natural and meaningful topics are compared to human knowledge . We conducted three evaluation tasks via crowdsourcing : word intrusion and topic intrusion tasks proposed in [ 6 ] , and query selection task , which we explain in detail in the following subsections . In these experiments , we used the Yahoo! dataset , and the tasks were performed through using the Yahoo! Japan crowdsourcing service . All jobs contained ten tasks and were assigned to eight different workers [ 6 ] .
Figure 4 : Results of the topic intrusion task performed this task with varying T ( 3 , 5 , and 8 ) . Note that as the number of displayed terms increased , topics became more identifiable . We used 50 queries in total , which were chosen randomly from the dataset . As the same manner of the word intrusion task , we evaluated the performance by the precision . Note that we excluded LDA from this experiment because the estimated topic distributions were very sparse ; thus , we could not select three relevant topics .
For the BTM and PCTM , to collect relevant topics for a given query , we estimate topic probability of the query by taking the average of the topic probability of the term pairs . In the BTM , the probability of topic zq in an M long query q is expressed as follows :
521 Word Intrusion
The word intrusion task evaluated the cohesion of a group of terms belonging to the same topic . In this task , several terms that belong to the same topic , except for one term ( an intruder ) , were displayed and , a crowdworker attempted to locate the intruder . The intruder was selected randomly at low probability in the topic , but at high probability in another topic . The other displayed terms were selected with high probability in the topic . Therefore , if the topic was significantly cohesive , the intruder was clearly isolated from the other terms , and the crowdworker could find the intruder easily . We performed this task by varying the number of displayed terms ( 6 and 8 ) . We used 50 topics , from which a large number of terms were assigned in the last samples of the inference . Performance was measured according to the precision of intruders detection . We compute the fraction of intruder detection by 8 workers for each topic .
The results are shown in Figure 3 . At first glance , we see that LDA looks worse than the BTM and PCTM . In fact , there was significant difference8 between LDA and the BTM , while the difference was not detected between LDA and the PCTM . Although the PCTM was slightly worse than the BTM , the difference was not significant . We discuss the reason why the performances of the BTM and PCTM are nearly the same in Section 6 .
522 Topic Intrusion
The topic intrusion task examined how relevant topics were assigned to queries . For each task , we displayed a query and four topics such that three of the topics were the most relevant to the query but the remaining topic was chosen randomly from the top 10 most irrelevant topics . Then , similar to the word intrusion task , a crowdworker attempted to identify the irrelevant topic . Each topic was represented as T terms having the top T highest probability in the topic . We
PCTM , these prior effects will be relatively less than that of LDA because topic ( topic pair ) distribution is shared among all the latent variables . 8 In terms of the one side paired t test with 95 % confidence . p(zq|q)k =
2
M ( M − 1 ) Xbi∈B(q ) p(zi|bi)k ,
( 15 ) where B(q ) is the set of term pairs in q and p(zi|bi)k is the posterior probability of topic zi = k given term pair bi , which can be estimated in the same manner as Eq ( 11 ) . For the PCTM , we first compute the probability of topic pair xq in query q : p(xq|q)kl =
2
M ( M − 1 ) Xbi∈B(q ) p(xi|bi)kl ,
( 16 ) where p(xi|bi)kl is given by Eq ( 11 ) . To obtain the probability of individual topic zq , we then compute the following probability : p(zq|q)k =
1 2
K
Xl=1 p(xq|q)kl + p(xq|q)lk ,
( 17 ) ie , we take the average for each element and its diagonal element and marginalize out topic l .
The results are shown in Figure 4 . We observe that there was no significant difference8 between the BTM and PCTM ; however , the performances of the PCTM tends to increase as the number of displayed terms increases . This is in contrast to the BTM , in which performance does not change with respect to the number of displayed terms . This implies that the PCTM obtained more coherent topics ; thus , crowdworkers could use the increased terms as meaningful information effectively .
523 Query Selection
The query selection task evaluates how topic models recover a user intent as a query pattern . In each task , we display an actual ( target ) query and three groups of artificial queries , which are respectively generated by LDA , the BTM , and the PCTM . We let crowdworkers infer the search intent of the target query and then select a group having the most number of queries that have the same intent . For example , we consider a target query as “ NY restaurant ” in which the intent is assumed to be ( LOCATION SERVICE ) . If a
661 Figure 5 : Results of the query selection task crowdworker infer the intent correctly , a group consisting of ( LOCATION SERVICE) queries , such as “ chicago lottery ” and “ florida hotel ” , should be selected .
We randomly selected 300 2 long queries from the training dataset and used as the target queries . For these 2 long target queries , we estimated the topic pair which takes maximum posterior probability at the end of the inference . For each model , we fixed the length of generated queries to 2 and selected by the following procedure . Given the estimated topic pair in a target query , we compute the posterior probability of 2 long queries , ie , term pairs . For the PCTM , we computed the probability of term pair b = ( w1 , w2 ) given topic pair x = ( z1 , z2 ) and the estimated parameter ˆφ as follows : p(b = ( w1 , w2)|x = ( z1 , z2 ) , ˆφ ) = ˆφw1,z1
ˆφw2,z2 .
( 18 )
The BTM and LDA computed the probabilities in the same manner . Finally , we used the top 5 term pairs taking the most high probability as the displayed queries . We measured the score which is the fraction of the selected by 8 workers for each target query .
The results are shown in Figure 5 . The PCTM was significant better8 than the BTM and LDA . This means that the PCTM could obtain topic pairs where the intents are closer to ones interpreted by humans than the others .
5.3 Keyword Prediction
In this experiment , we evaluated performance in terms of keyword prediction , ie , given several terms as a part of a query , we attempted to predict the term that a user will input next . From the whole dataset , we randomly selected 10 % of the queries and picked one term for each query as test data . We repeated this procedure 10 times and created training and testing datasets . We randomly initialized the latent variables for each trial . Then , after learning the parameters with the training dataset , we calculated the perplexity for each dataset using the last 100 samples for prediction .
While LDA can perform this experiment simply without modifications , the BTM and PCTM could not . Therefore , we computed the predictive probability for a single term rather than for a term pair . We computed this by assuming that the positions of missing terms in the test queries were known in advance , and that the set of term pairs preserved the missing positions . We regarded missing terms as latent variables in the models and performed collapsed Gibbs sampling on these variables in the parameter inference . The sample of the jth term in the ith term pair was obtained by following the conditional distribution in the PCTM : p(wi,j = v|B−i,j , X −i , xi = ( k , l ) ) = n−i wi,j |k + β n−i ·|k + V β
,
( 19 )
Figure 6 : Results of the keyword prediction task . Lower perplexity indicates the better performance . where B−i,j denotes that the set of term pairs excluding only wi,j . The samples of the BTM were obtained in the same manner . After parameter inference , the predictive probability of missing term wi,j was calculated by Eq ( 19 ) . We then took the average of the terms , which was contained in separate term pairs but was identical in a query.9
The results are shown in Figure 6 . For both datasets , the PCTM outperformed the BTM . Indeed , the PCTM was significantly better8 than the BTM in both datasets .
5.4 Query Generation
In this experiment , we investigated the ability of the topic models as query generators , which is important for query recommendation application in Internet advertising . To evaluate the performance , we learned each model by using training data and computed the top 10,000 most frequent 2long queries . Then , we measured AUC against the test queries , which we randomly selected another 100,000 2 long queries10 . In addition , we investigated the total number of generated queries detected in the test data . Note that , while we also performed query generation in the query selection task ( Section 523 ) , the evaluation criterion is different in terms of that the query selection takes the user intent into account ; this experiment purely evaluate how the topic models can generate natural queries , regardless of the user intents . We computed the probability of term pair b = ( w1 , w2 ) whose topic pair is marginalized out as follows : p(b = ( w1 , w2)| ˆφ , ˆψ ) = Xz1 Xz2
ˆφw1,z1
ˆφw2,z2
ˆψz1,z2 .
( 20 )
The probabilities of the BTM and LDA are computed in the same way as the PCTM . Note that we computed the document specific parameters of LDA from estimated α .
The results are shown in Table 2 . The AUC of the PCTM was higher than the BTM and LDA in both datasets . This result implies that the occurrence probability of a query computed by the PCTM reflects the occurrence of the real query logs . Moreover , the PCTM detected the most queries from test data in both datasets . The result indicates the PCTM has more natural generative process for real query logs than the BTM and LDA .
5.5 Estimated Topics and Topic Co occurrences
Here , we compare the obtained topics as a qualitative evaluation using the AOL dataset . We show the LOCATION
9Compared to the training dataset of LDA , that of the BTM and PCTM includes the position information about the missing terms . Since LDA does not require such information in the traditional way to compute the perplexity , we did not perform the sampling of the missing terms for LDA . 10We allowed the test data to include queries consisting of duplicate terms , such as “ NY NY ” and “ restaurant restaurant ” .
662 Table 2 : Results of AUC and the total number of detected queries in the query generation task
Yahoo AUC LDA 0.5743 BTM 0.5729 PCTM 0.6021
AOL 0.5634 0.6080 0.6144
Total num . Yahoo AOL 632 1,437 1,880
LDA BTM PCTM
645 2,173 3,196
Table 3 : Estimated topics about location
LDA
Top 20 terms lottery state universe florida lotto california ny texas unit ohio map michigan job pa georgia result nj illinois virginia service san la vegas diego hotel francisco antonio
BTM casino california nevada jose nv mission citi cabo reno valley mexico grand lo florida ny texas san nj ohio chicago
PCTM nc virginia nyc houston fl va pa lo orlando michigan angel la california topic in Table 3 ; for each model , we selected a topic such that the most number of terms related to locations in the top 20 topic terms were used . The result shows that the PCTM obtained the most cohesive topic that only contains the terms related to location , while the BTM and LDA topics are corrupted by some non geographical terms , such as “ lottery ” and “ hotel ” . This is a reasonable result for LDA because it counts the topic probability for every document , ( ie , query ) and a document is extremely short ; thus , terms appearing in the same query were likely to be assigned to the same topic . A similar interpretation holds for the BTM . As described in Section 4.3 , the BTM mitigates the brevity problem of queries and assumes that term pairs must be assigned to the same topic , which causes contamination of “ not geographical but jointly used ” terms , such as “ hotel ” .
Figure 1 shows ˆψ , which represents the relationships among topics , ie , ˆψkl indicates the probability of how often topics k and l are jointly used in term pairs . Note that in Figure 1 the elements are shown in gray where nk,l in Eq ( 10 ) takes 0 , which shows that ˆψ is actually very sparse . This indicates that each topic co occurs with only a few other topics . This result agrees with common sense ; people possibly search “ NY hotel ” but not “ lottery hotel ” .
An unique advantage of the PCTM compared to the LDA and BTM is that we obtain the relationship among topics as ˆψ . Figure 7 represents relationships among “ public ” topics , which we see that topic 3 represents public facilities and is associated with topics about location ( topic 4 ) , public service ( topic 0 ) , and job ( topic 1 ) . We clearly observe that the PCTM could obtain the network of topics that is very reasonable to our general knowledge . This is a surprising result because the PCTM is a fully unsupervised approach and we did not use any human resources .
5.6 Scalability
In this experiment , we compared the methods with various K as 30 , 50 , and 100 by using the AOL dataset . First , we checked |S| , the size of S , in exact and conditioned sampling . Figure 8 describes the changes of the size in 500 iterations for each setting . We see that , the sizes of both sampling
Topic : 3 county college school record court community ohio public depart library
6.80E 5
Topic : 4 state florida texas california ohio washington ny unit carolina virginia
1.79E 6
0.048
6.29E 4
0.051
Topic : 0 credit federal map tax health child busy school medic secure
Topic : 2 state lottery university map park tax newspaper job real school
2.27E 4
Topic : 1 union credit job form plan service report quest insure test
0.0037
Figure 7 : A subgraph of topic relationships estimated by the PCTM . We put an edge between the topics if the corresponding entry of ˆψ has larger probability than N +K 2γ . For each topic , the top10 terms are displayed . For each edge , we show the value of ˆψ and the larger value indicates the strong connectivity .
γ
Figure 8 : Transitions of the size of S behaved in surprisingly similar ways . Another interesting observation is that , all the sizes were fluctuated between about 150 and 200 , ie , |S| = O(1 ) and it suffices condition ( i ) in Section 35
Next , we evaluated how conditioned sampling reduces the actual runtime . We compared all the models in addition to the PCTM with conditioned sampling . Note that we fixed all the elements of α in LDA to 50/K for fair comparisons . The results are shown in Table 4 . As expected , LDA , the BTM , and the PCTM with the conditioned sampler run in O(K ) time , whereas the normal PCTM required O(K 2 ) .
Finally , we compared exact and conditioned sampling by the keyword prediction task in Section 53 The results are shown in Table 5 , telling us that conditioned sampling keeps the same performance as exact sampling .
6 . CONCLUSION AND DISCUSSION
We have proposed a new probabilistic topic model for query logs . The PCTM can capture topic co occurrences in a query , which make topics more coherent without limiting the target domain of queries . For model learning , we derived a fully Bayesian inference algorithm with the efficient computational trick for the collapsed Gibbs sampler . We have examined three types of experiments , ie , crowdsourcing , keyword prediction , and query generation tasks .
We discuss four concerns of the PCTM for future improve ments .
Firstly , sometimes the PCTM learns overlapped topics ,
663 Table 4 : Comparisons of the runtime ( in minutes )
LDA BTM
PCTM ( Exact )
PCTM ( Conditioned )
K = 30 K = 50 K = 100
5.02 8.12
239.79 104.82
7.2
12.84 657.80 153.56
14.31 24.57
2621.02 276.50
Acknowledgments We thank Naomi Sasaya , Nobuyuki Shimizu , Yoshiko Takeuchi , and Shinichi Tsuzaki for providing helpful comments and organizing the crowdsourcing tasks . KI was supported by MEXT Kakenhi 15H01620 . KH was supported by MEXT Kakenhi 15K16055 .
Table 5 : Perplexity of exact and conditioned sampling
Exact
Conditioned
K = 30 K = 50 K = 100 1057.96 1451.14 1450.16 1054.38
1242.66 1240.03 ie , the topics having almost the same term distributions . This is caused by the flexibility of the PCTM . Further regularization to remove such redundancy is an important future work of the PCTM .
Secondly , the number of latent variables increases quadratically with query length . Although this situation is fairly better than the approximation of Eq ( 5 ) where the number is the same as query length but the computational cost grows exponentially , it still may cause scaling issues for very long queries . One practical option is just eliminating such long queries before learning the model . This does not affect to the performance significantly because the long queries are quite rare in real datasets .
Thirdly , we discuss that the PCTM did not significantly outperform the BTM in the word and topic intrusion tasks . While the PCTM can obtain separated topic representation as described in Section 4.3 , we found that this property did not seem to contribute to the improvement in the both tasks . For example , in the word intrusion task , even though we displayed “ hotel ” and “ florida ” included in the integrated topic LOCATION & SERVICE estimated by the BTM , crowdworkers possibly infer that these terms are associated with each other more than the other intruder term , because people frequently use location and service names in web search . Conversely , in the query selection task , the PCTM significantly outperformed the BTM because this task requires the separability of topics for what crowdworkers can recognize query intents . In contrast to the word and topic intrusion tasks , the PCTM significantly outperformed the LDA and BTM with respect to keyword prediction , which is a similar characteristic to the CTM ; The CTM may select an intruder from highly correlated topics in word intrusion . This results in degenerating the performance because the intruder from the correlated topic confuses crowdworkers [ 6 ] . The PCTM seems to have the same problem since it incorporates such correlations between topics .
Fourthly , although the conditioned sampler of the PCTM significantly reduces the computational cost , the runtime is still slower than LDA and the BTM . The main reason is S , the set of active topic pairs , is too large in the initial state . In fact , when K = 100 , 74 % of the runtime was for first 100 iterations . This implies some good initialization for topic pairs may reduce the runtime significantly . For example , the topic distributions obtained by LDA can be useful for the initialization .
7 . REFERENCES [ 1 ] G . Agarwal , G . Kabra , and K . C C Chang . Towards rich query interpretation : Walking back and forth for mining query templates . In WWW , 2010 .
[ 2 ] R . Agrawal , A . Gupta , Y . Prabhu , and M . Varma .
Multi label learning with millions of labels : Recommending advertiser bid phrases for web pages . In WWW , 2013 .
[ 3 ] D . M . Blei and J . D . Lafferty . A correlated topic model of science . The Annals of Applied Statistics , 1(1):17–35 , 2007 .
[ 4 ] D . M . Blei , A . Y . Ng , and M . I . Jordan . Latent Dirichlet allocation . JMLR , 3:993–1022 , 2003 .
[ 5 ] M . J . Carman , F . Crestani , M . Harvey , and M . Baillie .
Towards query log based personalization using topic models . In CIKM , 2010 .
[ 6 ] J . Chang , J . Boyd Graber , C . Wang , S . Gerrish , and D . M .
Blei . Reading tea leaves : How humans interpret topic models . In NIPS , 2009 .
[ 7 ] T . L . Griffiths and M . Steyvers . Finding scientific topics .
PNAS , 101:5228–5235 , 2004 .
[ 8 ] J . Han , J . Fan , and L . Zhou . Crowdsourcing assisted query structure interpretation . In IJCAI , 2013 .
[ 9 ] M . Harvey , F . Crestani , and M . J . Carman . Building user profiles from topic models for personalised search . In CIKM , 2013 .
[ 10 ] T . Hofmann and J . Puzicha . Statistical models for co occurrence data . Technical report , Massachusetts Institute of Technology Artificial Intelligence Laboratory , 1998 .
[ 11 ] D . Jiang , K . W . T . Leung , W . Ng , and H . Li . Beyond click graph : Topic modeling for search engine query log analysis . In DASFAA , 2013 .
[ 12 ] D . Jiang and W . Ng . Mining web search topics with diverse spatiotemporal patterns . In SIGIR , 2013 .
[ 13 ] T . P . Minka . Estimating a Dirichlet distribution . Technical report , Microsoft , 2000 .
[ 14 ] S . Pandey and K . Punera . Unsupervised extraction of template structure in web search queries . In WWW , 2012 .
[ 15 ] S . Pandey , K . Punera , M . Fontoura , and V . Josifovski . Estimating advertisability of tail queries for sponsored search . In SIGIR , 2010 .
[ 16 ] G . Pass , A . Chowdhury , and C . Torgeson . A picture of search . In Proceedings of the 1st International Conference on Scalable Information Systems , 2006 .
[ 17 ] W . Song , Y . Zhang , T . Liu , and S . Li . Bridging topic modeling and personalized search . In COLING , 2010 .
[ 18 ] A . Viterbi . Error bounds for convolutional codes and an asymptotically optimum decoding algorithm . IEEE Transactions on Information Theory , 13(2):260–269 , 2006 . [ 19 ] H . M . Wallach , D . Mimno , and A . McCallum . Rethinking
LDA : Why priors matter . In NIPS , 2009 .
[ 20 ] G . Xu , S H Yang , and H . Li . Named entity mining from click through data using weakly supervised latent Dirichlet allocation . In SIGKDD , 2009 .
[ 21 ] J . Xu and W . B . Croft . Query expansion using local and global document analysis . In SIGIR , 1996 .
[ 22 ] X . Yan , J . Guo , Y . Lan , and X . Cheng . A biterm topic model for short texts . In WWW , 2013 .
[ 23 ] L . Yao , D . Mimno , and A . McCallum . Efficient methods for topic model inference on streaming document collections . In SIGKDD , 2009 .
664
