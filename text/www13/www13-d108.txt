An Error Driven Approach to Query Segmentation
Wei Zhang§
∗ , Yunbo Cao‡ , Chin Yew Lin‡ , Jian Su§ , Chew Lim Tan†
§Institute for Infocomm Research
‡Microsoft Research Asia
{zhangw3,sujian}@i2ra staredusg , {yunbocao,cyl}@microsoftcom , tancl@compnusedusg
†National University of Singapore
ABSTRACT Query segmentation is the task of splitting a query into a sequence of non overlapping segments that completely cover all tokens in the query . The majority of query segmentation methods are unsupervised . In this paper , we propose an error driven approach to query segmentation ( EDQS ) with the help of search logs , which enables unsupervised training with guidance from the system specific errors . In EDQS , we first detect the system ’s errors by examining the consistency among the segmentations of similar queries . Then , a model is trained by the detected errors to select the correct segmentation of a new query from the top n outputs of the system . Our evaluation results show that EDQS can significantly boost the performance of state of the art query segmentation methods on a publicly available data set .
Categories and Subject Descriptors H33 [ Information Systems ] : Information Search and Retrieval—Query Formulation
Keywords Query Segmentation , Search Log Mining , Error Driven
1 .
INTRODUCTION
Tokens ( or words ) of the queries for search engine are not independent or unordered symbols but rather ordered and structured words and phrases with syntactic relationships . Understanding the structure of a query is crucial for achieving better search performance . Query segmentation ( QS ) , a process of splitting a query into a sequence of non overlapping segments that completely cover all tokens in the query , aims to address these challenges . It requires that every segment rendered is a phrase or a semantic unit . More formally , let q = [ w1 , w2 , · · · , wn ] denote a query consisting of n keywords . A segment s = [ wi , · · · , wj](1 ≤ i ≤ j ≤ n ) is a subsequence of the query . A segmentation S = [ s1|s2| · · · |sK ] for query q is then defined as a sequence of non overlapping segments . ‘|’ denotes a segmentation boundary . If we assume there is no order dependency of s , we can then treat S as a set {sk}K k=1 .
∗Wei Zhang did this work when he was an intern at Microsoft Research Asia .
Copyright is held by the author/owner(s ) WWW 2013 Companion , May 13–17 , 2013 , Rio de Janeiro , Brazil . 2013 ACM 978 1 4503 2038 2/13/05˙ .
The majority of query segmentation methods are unsupervised , however , they are not as accurate as supervised methods due to the lack of guidance from labeled data . In this paper , we propose an error driven approach to query segmentation ( EDQS ) with the help of search logs , which enables unsupervised training with guidance from the system specific errors . EDQS first assumes the existence of a base segmentation system ( hereafter referred to as ‘base segmenter ’ ) which is able to output top n segmentations for any query . Then it tries to learn a correction model capable of replacing the rank 1 segmentation ( if it is incorrect ) with a ‘rank k’(k > 1 ) segmentation ( if one exists ) from the output of the base segmenter . Our study on three state of the art systems shows that for more than 25 % of queries the correct segmentations are not ranked as top 1 but included in the top 5 results , which implies the potential of EDQS .
EDQS can be illustrated by the following flowchart . First , a query q is fed into a base segmenter ( an implementation of any previous approach ) . As a result , a set of segmentations {Si}n i=1 regarding q are generated . Subscript i denotes the rank of the corresponding segmentation . Next , {Si}n i=1 are fed into a correction model . The correction model tries every possible replacement Si ( i > 1 ) for the rank 1 segmentation S1 ( as indicated by the curved arrows ) . The trial ends with two possible results : ( a ) None of the replacements is valid ( meaning that S1 is correct ) ; and ( b ) one segmentation S∗ i ( i∗ > 1 ) is the most likely replacement and thus chosen as the final segmentation for q ( eg , the replacement indicated by the solid curve ) . q base segmenter −−−−−−−−−−−−→
S1 S2 S3 · · · Sn correction model −−−−−−−−−−−−−→
S1 S2 S3 · · · Sn
Next , we detail the keys to our proposal include : how to automatically detect the system specific errors and then how to use the detected errors to learn a correction model .
2 . SYSTEM SPECIFIC ERROR DETECTION
Our method to detect the system specific errors is motivated by the observation : Queries with a similar intent tend to have consistent segmentation results . We say that a set of queries have similar intents if and only if they lead to the same set of web documents ( ie , URLs ) . For example , when issuing to a web search engine any of the three queries in Table 1 , we search for the same set of web pages which can provide ‘free download of Adobe writer’ . We denote such a set of queries as ‘query intent set’ . More Formally ,
Definition 1 . A query intent set QIN T is a set of queries satisfying the following conditions : a ) Tq∈QIN T U rls(q ) 6= ∅ ;
|QIN T | > c . b ) where |QIN T | denotes the number of elements in QIN T , and c is set to 2 in our experiments .
Rank 1 Segmentation Result download adobe | writer free | adobe writer | download free | adobe writer
Rank 2 Segmentation Result download | adobe writer free | adobe | writer | download free adobe | writer
Table 1 : Segmentation results for queries with a similar intent ( Results in bold are considered ‘correct’ . )
For the queries in the same query intent set , naturally we wish to explain them in the same way and thus require that their segmentations be consistent with each other . We define the consistency cst(S , S ) between segmentations S and S as the number of segments they share , ie ,
′
′
′ cst(S , S
) = |S ∩ S
′
|
( 1 )
In Table 1 , if we check only the ‘rank 1’ results , we observe that the segmentation ‘download adobe | writer’ disagrees with the other two , which is not what we expect to have . Instead , we expect to have the bolded segmentations in which none of the individual segments for one query disagrees with the segments for another query . Thus , we propose to detect the errors of rank 1 segmentation and select ‘correct’ segmentations from top n segmentation results that are about m queries in the same query intent sets as follows ,
( j∗
1 , · · · , j∗ m ) = arg max
( 1≤j1 ,··· ,jm ≤n
′
1≤i,i
X ≤m 1≤j
′
≤n cst(Siji , S
′ )
′ i j
− X cst(Siji , Siji ) )
1≤i≤m
( 2 )
Given one selected segmentation Siji , the objective is to sum up the consistencies between itself and any of the rest n ∗ m − 1 segmentations . Thus , by this objective , we choose the segmentations that are agreed with by most top n segmentations . Finally , we can generate the instances to train the correction model as follows :
The likelihood of a local transformation x being valid can be estimated with a binary classifier . We employ SVM as the classifier . Given an instance x , SVM assigns a score to it based on f ( x ) = wT x + b , where w denotes a weight vector and b denotes an intercept . Given a replacement ( Sq1 7→ Sqj , y ) where y ∈ {0 , 1} , a set of labeled data for the binary classifier is prepared as : {x , y}x∈T ( Sq1 7→Sqj ) . By considering all the replacements in Dq , we will have a final training data set {(xi , yi)}N i=1 for SVM .
On the basis of that , we can do the correction for a new f ( x ) > query as follows : If for certain j ( j > 1 )
0 , we will use the segmentation with arg max 1<j≤n as its index to replace the top 1 segmentation ; Otherwise , we will keep using the top 1 segmentation . Table 2 describes the features for representing a local transformation x .
Px∈T ( Sq1 7→Sqj )
Px∈T ( Sq1 7→Sqj ) f ( x )
Lexical MI Semantic Rank Direction Positionlef t Positionright word wi , word wi+1 , word pair < wi , wi+1 > Mutual Information MI(wi , wi+1),MI(s1 , s2 ) Freebase categories of s1 , s2 , s3 j , the rank of the candidate segmentation 1 , if “ wiwi+1 7→ wi|wi+1 ” ; 0 , reverse . Number of words from the decision position to the beginning/end of query .
Table 2 : The features for classifier . s1,s2 and s3 denote the segment ( including wi , wi+1 , or both ) of rank 1 segmentation or candidate segmentation .
4 . EXPERIMENTS
Following Hagen et al . [ 3 ] , we evaluate a QS system by query accuracy Accqry , break accuracy Accbrk and segment F score F sg . We use two data sets as introduced in [ 1 ] and [ 2 ] , denoted as BW07 and WQ10 . We mainly utilized three unsupervised systems as base segmenters . They are described in [ 2 ] , [ 3 ] and [ 4 ] , denoted as BaseH 1 , BaseH 2 and BaseCN respectively . They can represent the state ofthe art QS performance .
Table 3 reports the QS results . Comparing each pair of ‘Base’ and ‘EDQS’ , we can see that EDQS proposed in this paper can be successfully spliced onto different base segmenters and significantly improves them over different data sets under the three evaluation metrics . ( p < 0.05 , t test ) .
Dq = fl {(Sq1 7→ Sqj , 0)}j6=1
{(Sq1 7→ Sqj∗ , 1)} if j∗ = 1 otherwise
( 3 )
Data Set Measure
BaseCN
BaseH 1
BaseH 2
Base EDQS Base EDQS
Base EDQS
Note that this training set is generated based on a particular base segmenter , and thus the detected errors are systemspecific .
3 . CORRECTION MODEL
The decision of whether or not to correct Sq1 to Sqj can be made by collectively considering one or multiple local transformations in the form of ‘wiwi+1 7→ wi|wi+1’ or ‘wi|wi+1 7→ ‘wiwi+1 7→ wi|wi+1’ means that Sq1 does not inwiwi+1’ . clude a segment boundary between tokens wi and wi+1 and Sqj does ; ‘wi|wi+1 7→ wiwi+1’ means the reverse .
Let T ( Sq1 7→ Sqj ) denote the set of all possible local transformations from Sq1 to Sqj and x denote one element from the set ( ie , one local transformation ) . If we know the likelihood f ( x ) of every individual transformation x being valid , the likelihood of replacing Sq1 by Sqj can then be estimated as Px∈T ( Sq1 7→Sqj ) f ( x ) .
BW07
WQ10
Accqry Accbrk F sg Accqry Accbrk F sg
62.2 85.1 74.5 52.8 80.5 67.8
67.2 90.0 79.6 60.4 84.7 72.7
64.6 86.1 75.8 57.0 83.5 71.2
66.2 87.3 78.4 67.9 89.6 79.0
65.6 87.6 78.6 59.1 84.4 72.1
66.8 88.7 79.5 67.6 89.5 78.8
Table 3 : Performance on query segmentation
5 . REFERENCES [ 1 ] S . Bergsma and Q . I . Wang . Learning noun phrase query segmentation . In EMNLP CoNLL , 2007 .
[ 2 ] M . Hagen , M . Potthast , B . Stein , and C . Br¨autigam .
The power of naive query segmentation . In SIGIR , 2010 .
[ 3 ] M . Hagen , M . Potthast , B . Stein , and C . Br¨autigam .
Query segmentation revisited . In WWW , 2011 .
[ 4 ] K . M . Risvik , T . Mikolajewski , and P . Boros . Query segmentation for web search . In WWW , 2003 .
