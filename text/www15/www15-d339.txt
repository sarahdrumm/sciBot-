Rapido : A Sketching Tool for Web API Designers
Ronnie Mitra
Director of API Design
CA Technologies ronniemitra@gmailcom
ABSTRACT Well designed Web APIs must provide high levels of usability and must “ get it right ” on the first release . One strategy for accomplishing this feat is to identify usability issues early in the design process before a public release . Sketching is a useful way of improving the user experience early in the design phase . Designers can create many sketches and learn from them . The Rapido tool is designed to automate the Web API sketching process and help designers improve usability in an iterative fashion . Keywords API , design , sketching , REST , Web API , usability 1 . INTRODUCTION Over the years , a number of books , papers and talks have been published to provide design guidance for Web API Designers . The expert advice in this domain often highlights three important characteristics for well designed APIs :
 APIs should provide ‘just enough’ functionality to meet user requirements
 APIs should follow a user centered design approach  APIs should not break existing applications
This advice presents an interesting challenge for the modern API designer . They must create interfaces that provide good user experiences within the constraint of limiting breaking changes . Joshua Bloch illustrates this challenge in one of his maxims for good design : “ Public APIs , like diamonds , are forever . You have one chance to get it right so give it your best . ” [ 1 ] This paper introduces sketching as a method for improving API user experiences in the design phase , before implementation . It also introduces a tool called Rapido that has been created to facilitate the act of sketching web APIs . 2 . SKETCHING An implicit but important part of many design processes is the sketching phase . Sketching has been proposed as a formal component of many design processes including interaction design [ 2 ] , mechanical design [ 3 ] and engineering[4 ] . In broad terms , a sketch is a form of design that includes relatively less detail than a formal design . Sketches carry connotations of being formed quickly and effortlessly .
Copyright is held by the International World Wide Web Conference Committee ( IW3C2 ) . IW3C2 reserves the right to provide a hyperlink to the author's site if the Material is used in electronic media . WWW 2015 Companion , May 18–22 , 2015 , Florence , Italy . ACM 978 1 4503 3473 0/15/05 . http://dxdoiorg/101145/27409082743040 to produce many experimental concepts
They often capture abstract thoughts from a designer ’s mind and can be used to record experimentation with new ideas that might otherwise be forgotten . In his book “ Sketching User Experiences ” , Bill Buxton highlights the importance of sketching in all design processes and identifies that sketching is central to design thinking and learning[5 ] . Buxton also explains how sketches can be used to improve the user experience within an interaction design context by allowing designers that are iteratively refined in pursuit of the best final concept . For the Web API designer , sketching offers a method to achieve rapid design iterations at the beginning of a design process . By creating a sketch , reviewing it and applying the lessons learned to a new sketch a designer can identify and solve usability problems in the early phases of design . When incorporated into a design process that includes user testing and prototype development , the designer can improve the odds that the overall user experience will be improved . There are many ways to produce sketches , but we will focus on four popular sketching methods and discuss the benefits and limitations of each . 2.1 Drawing A simple and accessible method for sketching is to put pencil to paper , marker to whiteboard or digital pen to canvas . Drawing can be a powerful way of representing the memories or abstractions of the human mind . While the quality level of a drawing may differ depending on the artist ’s level of artistic skill , the use of a drawing to communicate an idea is as central to the human experience as spoken language[6 ] .
211 Benefits One of the great advantages to drawing a sketch is the ease with which one can start . Almost every designer should be capable of effortlessly creating a doodle . This simple act doesn’t require strenuous thought regarding the process of drawing . But , these rough sketches can provide a sufficient level detail to capture the important aspects of an early phase design regardless of their aesthetic appeal . The human proficiency for drawing simple images and the speed at which a low fidelity drawing can be rendered makes it easy for the sketch artist to draw many sketches in a short time , disposing of sketches as they go . For example , a designer considering a CRUD API might initially draw the low fidelity sketch depicted in figure 1 using simple boxes and lines .
1509 the res an ith fidelity ers art nd or hes to ful to on a page can be des no guidance f sign . The design basic rules th draw an effectiv as for ner hat ve reedom to draw a eneficial . The bl ave little experie sketch must u r chosen API st and experiment o lank page provid ence in API des understand the tyle in order to hs is that it foste Designers that sta ith new ideas an by the physical oose . with new featur rfaces that defy tion limits . and concepts wi tch .
PI Sketch ’s great strength hing process . D o experiment wi bounded only b medium they cho ketch interfaces tandards , or inter and implementat pture new ideas of the drawn sket ing a CRUD AP F Figure 1 Drawi drawing method’ A Another of the d within the sketch e experimentation w nvas are free to w with a blank can mitless fashion , c concepts in a lim s of the specific m d digital constraints designer might sk F For example , a d orm to existing st th hat do not confo nding of system e existing understan innovate and cap T The freedom to i owerful features o li ittle effort are po ions 2 212 Limitati ol , drawn sketch ecific drawing to ner is using a spe U Unless the design ple , it is difficult tion . For examp API implementat are ill suited for A a h in gh in ntroduce enoug nto sketch for a usef im mplementation a and the medium itself cannot easi ily be translated m machine code . In n addition , the fr li imiting as it is be d designers who ha w who draws a c characterize their in nterface sketch . C Capturing a high s sketch . While , d a abstract entities a c capture higher fid p parameters and m la abour intensive e
2.2 Writing 2 g sketch is a visu W While the drawn written’ sketch is a abstract idea , a ‘w T The actual langua age used for the ner familiar with in nstance , a design eir HTTP based m might sketch the also sketch th d designer might d describing it in an n email on a mail s 221 Benefits 2 g , writing is a A As with drawing d store abstract i c communicate and concepts either d describe abstract o of writing out e early designs of d to adopt . s sketching method become particul W Written sketches ed . Designers no la anguages are use c can be communic cated in a commo t can be invoke g gain an API that ocialization of th te estability and so p prototype implem mentation time . ual representation a literal represen sketch can take h the Ruby progr d API in Ruby heir API is ps ling list . larly powerful w ot only get the be on , standardized ed . This can gr he interface as w when programmin enefit a sketch th language , but al reatly increase th well as reduce th an also be difficu suited to captur s of an interface n . For example , or an interface ca some form of too ult when drawing ring the importa e , it is difficult listing operation an easily become oling . n of the designer ntation . many forms . F ramming languag code . The sam seudo code wh level of detail ca drawing is welland relationship delity information message bodies fo exercise without common metho ideas . We are in visually or litera f the API is a od for humans nherently driven ally [ 6 ] , so the a natural and ea g a ant to ns , e a ng hat so he he
For ge me en to to act asy r ’s g or coding an ypes and can be a Limitations gh writing an A lementability , de emselves focusin han the abstract d ng phase . dition , when ske ge , designers can syntax , error ant for implem ms related to the g an API as a ms . Designers m have crafted and ns rather than sta worse , if the prog me language tha n sketch , prototy delity , disposable lt .
UML ML ( Unified Mo andard for mode addresses five vie el abstract system used for sketchi wing and writing
Writing prototyp 222 Althoug its impl find the rather th sketchin In addi languag correct importa problem Writing problem they h iteration Even w the sam between low fid difficul
2.3 U The UM used sta UML a to mode When u the draw
API is a natu an effective optio ural way to bui on for sketching a ild powerful as well .
API in a program esigners who tak ng on very detail design decisions mming language c ke this approach m ed implementati s that should be th can improve may quickly on decisions he focus in a etching an API n become focused handling and mentation instea interface . a first step can may grow emoti d they may re arting over with a gramming langua at will be used f ype and build is e e sketch in this t design in a p d on solving the code readabili ad of the abst programming problems of ty that are tract design n also present d ionally attached e use code betw a new idea . age used to sketc for implementati easily blurred . M type of circumst disposability to the code ween sketch ch the API is ion , the line Maintaining a tance is very odeling Languag eling object orien ews of software ms like Web API ing , UML offers g methods . ge ) is an existing nted software sy architecture and Is [ 9 ] . s a specialized f g and widely ystems . The can be used form of both
L Diagram for a an object based A
API ormally defined standardization h merge aiding the ML tools can a impr
ML is that it is fo This modeling s ed tooling to em ddition , some UM ased on the ch . UML based sketc oes not prescribe UML is that it do ork based archite n fact , any netwo with this sketchin ng method , prov . ity for designers . model , and offers a has made it e process of auto generate roving the how an API ecture should viding a high
Figure 2 UML
Benefits t feature of UM able syntax . T e for UML base creation . In add ation code ba mentability of a U er advantage of U be designed . In e to be depicted w f experimentabili Limitations
231 A great predicta possible UML c applicat implem Anothe should be able level of 232 Howev API de use and ver , UML's flexib esigners[7 ] . The d not for the spec bility also presen modeling langu cific domain of W nts a usability c uage is designed Web API design . challenge for d for general
1510 F For example , UR ty ypes and vocabu a and method taxo g gain enough expe to o their own dom O One solution to s specific modelin O Object Constrain U UML designed H However , as of la anguage has not In n addition , the s U UML based sket p possess the appro li imiting the appea A A designer who tr ranslate abstract H However , learnin in nterface can pres F Finally , some UM m method for cod c This code[7 ] . d documentation la m modeling languag
2.4 Interfac 2 T There is an emerg to o describe Web c constantly evolvi in nclude WADL , S S Service descriptio s support sketchin d describe relevant U Ultimately , using s sketching in code li imitations that w H However , in rec b been released wit h high level of u s sketching an AP d described in the e editor provided b
RLs , query param ularies must all onomy of a UML ertise with the UM ain problems . this problem m ng language that nt Language ( OC for object or f this writing a emerged . yntax of UML p tch cannot be sh opriate level of U al of UML as a s is competent w t thought to a ng the modelin sent a difficult ch ML users use the de generation o perception of anguage may lim ge for informal sk meters , HTTP no be mapped to t L class diagram ML language to menclature , med the class , proper m . Designers mu be able to apply dia rty ust y it might be to imp t uses UML . CL ) was original iented analysis popular UML plement a doma For example , th ly an extension and design[10 based Web A ain he of 0 ] . API
A lso it , kly PI . an ization problem . presents a sociali rs unless they al hared with other UML knowledge e to understand d . sketching method be able to quick with UML will b conceptual ver rsion of the AP hile designing a ng language wh hallenge . e modeling langu or documentatio f UML as a mit the designer ’s ketching . uage primarily as on of productio programming s desire to use th s a on or he ce Descriptio ging set of servic and REST APIs ing , but at the tim Swagger , RAML on formats are n ng activities , bu details of an inte g a format langu e . It shares all o were highlighted i ent years many th editing tools to usability to desi PI much easier . Blueprint descr y the format auth on Editors ce description fo s . The list of des me of this writin L and Blueprint [ not usually design ut their ability erface makes them uage to sketch a of the characteri in section 32 service descrip o support them . igners and mak For example ription format u hors [ 12 ] ( See Fi mpt is ces ormats that attem cription formats ng popular choic 8 ] . ned specifically to document an m a natural fit . an API is akin istics , benefits an to nd to nd tion formats hav These tools offer ke the process , an API can b using a web base gure 3 ) . ve r a of be ed
F Figure 3 Apiar ry.io : an editor f s 241 Benefits 2 on editors are po S Service descriptio task of rapid in to o support the t A Although design ners must learn ption language , e p particular descrip w will facilitate that t task during the for the Blueprin nt language owerful because nterface descrip n the format an editors with high design effort . they are designe ption compositio nd syntax of th levels of usabili ed on . he ity cription format w that makes it ea on . This means t working prototyp cost of creation tored makes th ner can easily p ng over again cription format th akes many desig designers to go or has created . xperiment with in use , they are con This leads to th ner ’s mental mod nguages are clos ucts . This can re nter do not share e description edi ace model that is ods . This lack o ners and reviewe een elements of th est service desc The be tem or workflow ecosyst o implementatio phase to est sketches into w their be ition , the low c In addi text can be st which disposa ability . A design design by startin sketch d Limitations 242 ng a service desc Utilizin e interfaces ma describ it difficult for d makes tion format autho descript designers can ex While d of the format in syntax the form rmat provides . the format design reflect t many format lan Also , m ngines and produ API eng igner and implan the desi , many interface Finally , on of the interfa depictio sketching metho UML s ifficult for design more di ationships betwe and rela 3 . RA APIDO o[11 ] is an exper Rapido sketchin ng with both vi ment is to build experim y and with just en quickly s . features apido tool is purp The Ra latively low fide to a rel as writ tten programmin ample , designer For exa ment conditional implem information . header A Rapi ido user typicall sketch : 1 . ch project Create a sketc 2 . abulary Define a voca 3 . PI Sketch the AP Model respon 4 . nse data 5 . PI description Export an AP With th he exception of th he first project c re visited or skip process can be r sketch p depend dencies between s stages . 3.1 P ation Project Crea etching an API in gin the act of ske To beg ch project . At t eate a new sketc first cre decide w what style of AP PI will be sketche do supports two sent time , Rapid At pres pectively . The Hypermedia ” resp and “ H that are primari ased interfaces web ba rmedia ” style “ Hyper allows designe hyperm media controls . rposefully design lity sketch when ng languages or rs can only defi or error handlin rimental tool des isual and literal a tool that help nough detail to c ly follows these tools provide asy to move from that designers can pes . combined with his method well perform many ite a complete m the sketch n easily turn the ease at l suited for erations of a hat is specifically gn tasks easier , beyond the mo y designed to but it also odel that the nterfaces that con nstrained by the he design of int del . sely associated w educe the implem the same tool ec itors lack the ho s provided in the of visualization ers to perceive th he interface . nform to the features that terfaces that with runtime mentability if cosystem . olistic visual e drawing or can make it he transitions signed to facilita methods . The ps designers cre capture important ate web API goal of the ate sketches t API design ned to constrain n compared to m service descrip fine static respon ng and cannot e the designer methods such tion editors . nses , cannot edit protocol steps when cre eating a new creation step , eac pped entirely as ch step in the there are no n Rapido , the de this stage , the de ed . API styles calle “ CRUD ” style i ily object based ers to sketch esigner must esigner must ed “ CRUD ” is useful for d , while the APIs with
1511 3.2 Vocabu 3 A A unique feature b begin by creating m made of the wor in nterface . F For example , whe w we might start b ‘ course’ . lary Definit e of the Rapido s g a vocabulary rds that are exp tion sketching proces for their API . T pected to appear ss is that designe The vocabulary r frequently in th ers is he en sketching an A by including wor
API for a system rds such as ‘stud m of student recor dent’ , ‘report’ an rds nd
F Figure 4 Vocab B Beginning with a th hink about the in d designer can con a and relationships o of how these conc T The words that a la ater sketching p o only promotes co th he typing effort f It t is important to c captured in the to s sketching functi m meanings of word 3.3 Sketchin 3 T The CRUD sket m method view of a r esonate with mo b blocks of the CRU W When sketching w with a blank can c clicking on the r r esource of the CR bulary Editor a list of relevant nterface in its mo nsider the interfa that it is compos cepts are connect are defined in thi hase automatica onsistency of the for the Rapido us note that the se ool . The words ons of Rapido ds in this list . ng CRUD A tching canvas re a web API . This st designers as th UD API concept a new CRUD st nvas and a sing root node , the d RUD API . words allows th ost abstract terms ace based on the sed of without so ted or implemen is vocabulary sta ally as type ahea e API ’s vocabula ser . emantics of this v are simply a list cannot take a to he ies em he API designer s . At this stage th e objects , activiti olving the proble nted . age are used in th ad hints . This n ary , it also reduc he not ces vocabulary are n t of strings and th advantage of th not he he
APIs eflects an object s perspective of A hese components tual model . tyle API , the des gle root node ( se designer is able t , URI and HTT API design shou s form the buildin
TP uld ng signer is present ee Figure 5 ) . B to create the fir ed By rst
F Figure 5 – The b
A A ‘wizard’ for re e enter the URI , all r esource ( see Fig blank CRUD can nvas esource creation lowed methods a gure 6 ) . Once cr is presented and and query parame reated , the Rapid d the designer ca eter details for th do tool provides an his s a visual r name , U representation o URI and allowed of the resource t d methods . that includes its s descriptive
Figure Designe resourc tool is child re earlier , the par pre pop For exa resourc resourc child re The ser formal used co for RES on an a API des
6 Creating C ers can also com ces they create . by clicking on t esource creation w except for the f rent resource ’s U pulated URI or ov ample , we might ce with a URI of ce of students th esource could hav rialization of pa standard for CR onvention and is ST design . The U assumed popular signers .
CRUD Objects mpose parent chi The simplest w the ‘plus’ icon o workflow is iden fact that the URI URI . The design verwrite it comp t sketch a collec f “ /students ” . W hat points to a sp ve a URI of “ /stu arent child relatio RUD style APIs . recommended in URI pre populat rity of this conve between the n the Rapido source . The ard described pulated with ppend to this ild relationships way to do this in of an existing res ntical to the wiza I field is pre pop ner is free to ap pletely . ction of student records as a ketch a child We could also sk record . This pecific student r ” . udents/student_1 URI is not a onships in the U s a regularly . However , it is n many best prac ctices guides cluded based tion feature is inc CRUD style ention amongst
7 Modeling ob RUD sketching iately conceptua The structural ele unity for design ment with differe level of fidelity are accessible fo to discourage d delity sketch at th bject relationsh g canvas is inte alize the object an ements of the AP ners to play wit ent conceptual mo y , none of the r or viewing or edi designers from in he beginning of t ips ended to let R and relationship m PI are exposed , p th the API holi odels . request or respon ting . This is by nvesting too muc the design proces
Rapido users model of the providing an istically and nse message design . The ch time in a ss .
Sketching H ferent type of ers . In Rapido , a agram . diagrams can be media application erring resource r ate to another , su ism ” [ 13 ] . Amun
Hypermedia canvas is pres a hypermedia AP
APIs sented to hyper PI is sketched as rmedia API an informal e useful for des ns . Zuzak , Budi representations f uggests the usage ndsen and Richa signing and con iselic and Delac for transitioning e of a state trans ardson recommen nceptualizing suggest that agents from sition system nd drawing a
Figure The CR immedi API . T opportu experim At this details a goal is high fid
3.4 S A diffe designe state dia State d hyperm “ transfe one stat formali
1512 s state machine as [ 14 ] . W When a designer p presented with a tr ransitions to new tr ransitions to oth q quickly sketch a w an early step in a hypermedia A
API design proce ess r begins a hyper a single home st w application stat er application sta web of state trans rmedia sketch in tate from which tes . All applicati ates . The goal i sitions ( see Figur n Rapido , they a h they may crea ion states can hav in this canvas is re 8 ) . are ate ve to hing a hyperme ethod for creatin that has been y has support fo y , but the goal is
F Figure 8 Sketch T The particular m th he media type R Rapido currently m media types only th he future . F For example , w when sketching a c create a transition n to a new child to the Collectio th hat is specific c choose what type e of link we wan w what the target sh hould be ( see Fig c contains visual c cues that are re d different types o f Collection+JSO colour and pattern n . c dia API ng transitions dif selected during r the Collection to extend suppor ffers depending o g project creatio n+JSON and HA rt to other types on on . AL in a Collection+JS item by steppin on+JSON specif nt , where it shou gure 9 ) . In turn , elevant to this m ON links can be
SON API we ca ng though a wiza fication . We ca uld be located an , the state diagra media type . Th e differentiated b an ard an nd am he by
F Figure 9 Creat T The fidelity of th In n this view , des c cannot edit or vie d designer cannot c changes . T The Rapido canv th hat require a min ing new Collect he hypermedia sk signers can mod ew the response model condition ion+JSON tran ketch canvas is in del the states an messages thems nal logic or dec nsitions ntended to be low w . but nd transitions , b selves . Further , th he ate cision based sta vas is meant to su nimum of effort a upport quick , low and investment . w fidelity sketch hes
Editing API gh the CRUD ge level editing lar state or resour o ’s message edito or JSON , HAL a highlighting and gure 10 ) . ers are free to se or state node t the validity of t cation , it does no lows designers t ng important id
3.5 E Althoug messag particul Rapido aides fo syntax ( see Fig Designe respons signal t specific This all capturin syntax .
I Message D and hypermedia g , designers are urce if they wish t or is a simple tex and Collection+J d type ahead hin ata a canvases do e able to “ zoom to sketch the mes xt based editor w JSON editing . T nts for the suppo not support m in ” to a ssage data . with usability This includes orted formats construct any t that they have ch the data entered ot prevent the use to sketch the res deas without be text based respo hosen . While the d based on the m er from saving ar ponse data in br ing bound by t onse for the e editor may media type ’s rbitrary data . road strokes , the rules of
Figure In addi hand sy contain transitio impact higher f A dow requires added d 3.6 I Rapido service implem on the s
10 Editing res ition , designers o yntax to create ns a token delim on is automatica the low fidelity fidelity details . wnside to provi s additional inve design effort can Implementa o sketches can be description for menter ’s preferred sketch . sponse data of hypermedia A transitions betw mited by the stri ally created . Thi y canvas view of
APIs are able to ween states . Wh ings “ $( “ and “ s facility allows f the system whi o use a short hen a string “ ) ” , a state designers to ile sketching iding a message estment on the pa reduce the dispo ability e exported into ei rmats . This ma d editor or toolin e editing facilit art of the API de osability of the sk ty is that it signer . This ketch . ither the WADL akes it possible ng to create proto or Blueprint e to use the otypes based
Figure
11 Exporting a Rapido sketch h
1513 in in improved the sketch resulting
3.7 Benefits The main strength of the Rapido tool is that it combines the holistic , low fidelity , visual properties of the drawing method with the higher fidelity literal properties of the writing method . The visual nature of the sketching canvas also affords designers the ability to “ play ” with their designs , experimenting with different types of transitions and relationships . Finally , the lack of support for dynamic responses , logical flows and message header detail may discourage designers from investing too much time levels of disposability .
3.8 Limitations While the low fidelity of the Rapido tool helps designers create many disposable sketches , it prevents them from capturing important detailed characteristics of their APIs such as security controls , error handling and logical behavior . Another challenge is that the focus on specialized support for CRUD conventions and hypermedia formats hinders broader experimentation . For example , it is difficult to use Rapido to design a new hypermedia media type or a new message format . In addition , the current set of media types and service description formats is limited . This limits the usefulness of the tool to communities of users who use these particular formats . Hopefully in the future additional media types and formats will be supported . Finally , many of the design decisions made for the Rapido tools are based on assumptions and hypothesis about user behaviour . In practice , the sketching needs of API designers may not be accurately reflected in the interaction design of the tool .
4 . CONCLUSION API designers who are interested in producing high quality interfaces should consider incorporating a sketching method into their design process . While there are many different ways to sketch an API , the Rapido tool attempts to consolidate the benefits from the most popular methods to provide a sketching process with good disposability , experimentability , socializability and learnability . By unbundling the sketching experience from the design , prototype and implementation experience Rapido attempts to provide a higher quality sketching experience for designers .
5 . REFERENCES [ 1 ] Joshua Bloch . 2006 . How to design a good API and why it matters . In Companion to the 21st ACM SIGPLAN symposium on Object oriented programming systems , languages , and applications ( OOPSLA '06 ) . ACM , New York , NY , USA , 506 507 . DOI=101145/11766171176622 http://doiacmorg/101145/11766171176622
[ 2 ] Bill Verplank . 2009 . Interaction Design Sketchbook . [ 3 ] David G . Ullman , Stephen Wood , David Craig . The importance of drawing in the mechanical design process . Computers & Graphics 14 , 2 ( 1990 ) , 263 274 . [ 4 ] Drawing Gym , Teaching Engineers to Draw . : http://wwwuclacuk/drawing gym/ Accessed : March 9th , 2015
[ 5 ] Bill Buxton . 2007 . Sketching User Experiences : Getting the
Design Right and the Right Design . Morgan Kaufmann Publishers Inc . , San Francisco , CA , USA .
[ 6 ] Neil Cohn . 2012 . Explaining ‘I Can’t Draw’ : Parallels between the Structure and Development of Language and Drawing .
[ 7 ] Marian Petre . 2013 . UML in practice . In Proceedings of the
2013 International Conference on Software Engineering ( ICSE '13 ) . IEEE Press , Piscataway , NJ , USA , 722 731 .
[ 8 ] Ole Lensmar . An Overview of REST Metadata Formats : http://apiuxcom/2013/04/09/rest metadata formats/ Accessed : March 8th , 2015 .
[ 9 ] Grady Booch , James Rumbaugh , and Ivar Jacobson . 1999 . The
Unified Modeling Language User Guide . Addison Wesley Longman Publishing Co . , Inc . , Redwood City , CA , USA .
[ 10 ] The Object Constraint Language : Precise Modeling With Uml
( Addison Wesley Object Technology Series ) ( 13 October 1998 ) by Jos B . Warmer , Anneke G . Kleppe
[ 11 ] Ronnie Mitra , Rapido : http://wwwrapidodesignercom [ 12 ] Apiary . http://apiaryio/ Accessed : March 9th , 2015 [ 13 ] I . Zuzak , I . Budiselic , and G . Delac . 2011 . A FINITE STATE
MACHINE APPROACH FOR MODELING AND ANALYZING RESTFUL SYSTEMS .
[ 14 ] M . Amundsen , L . Richardson . 2012 . RESTFul Web APIs .
O’Reilly Media .
1514
