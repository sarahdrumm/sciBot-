Jyun Yu Jiang†∗
†Department of Computer Science and Information Engineering , National Taiwan University
, Chin Yew Lin‡ and Pu Jen Cheng† ‡Microsoft Research Asia
Entity driven Type Hierarchy Construction for Freebase jyunyujiang@gmailcom , cyl@microsoft.com , pjcheng@csientuedutw
ABSTRACT The hierarchical structure of a knowledge base system can lead to various valuable applications ; however , many knowledge base systems do not have such property . In this paper , we propose an entity driven approach to automatically construct the hierarchical structure of entities for knowledge base systems . By deriving type dependencies from entity information , the initial graph of types will be constructed , and then modified to become a hierarchical structure by several graph algorithms . Experimental results show the effectiveness of our method in terms of constructing reasonable type hierarchy for knowledge base systems . Categories and Subject Descriptors I24 [ Artificial Intelligence ] : Knowledge Representation Formalisms and Methods Keywords Knowledge Base ; Entity Type ; Type Hierarchy . 1 .
INTRODUCTION
Modern knowledge base systems record abundant information about myriads of entities . Most of them exploit entity types to categorize entities . For example , each entity in Freebase [ 2 ] has several types . However , entity types of many knowledge base systems are not hierarchical , such as Freebase [ 2]1 and DBpedia [ 1 ] , so dependencies among different entity types are also unable to be interpreted . In other words , the capability of entity types can be improved with the hierarchical information . For instance , film.actor and people.person are two types in Freebase . If the dependency between two types is provided , we can infer that an entity with the type film.actor must belong to the type people.person because people.person is an ancestor of film.actor in the type hierarchy . Therefore , an approach to automatically construct type hierarchy is needed for improving knowledge base systems .
In this paper , given entities with their types in a knowledge base system , we aim to construct the hierarchical structure for such entity types . For example , given entities with types people.person , sports.athlete and tennis.player , we would like to derive the hierarchical structure as follows : people.person ← sports.athlete ← tennis.player , where the type people.person is the root of the hierarchy for human entities . One possible solution is to find identical entities in other hierarchical knowledge base systems , and then align the types [ 3 , 4 ] . However , there are some critical
∗Part of this work was done when the first author was on an internship at Microsoft Research Asia 1Although every entity type in Freebase belongs a brief group called the type domain , there is still no hierarchical structure . Copyright is held by the author/owner(s ) . WWW 2015 Companion , May 18–22 , 2015 , Florence , Italy . ACM 978 1 4503 3473 0/15/05 . http://dxdoiorg/101145/27409082742737
Algorithm 1 Initial Graph Construction Input : Given entity set : E ; type set : T ; threshold of dependency confidence : θ ( 0 ≤ θ ≤ 1 ) . is the set of edges ( ie , dependencies among types ) .
Output : Initial graph : Gθ = ( V , Aθ ) , where V = T and Aθ 1 : V ← T , Aθ ← ∅ 2 : for t1 ∈ T do 3 : 4 : 5 : 6 : 7 : 8 : end for 9 : return Gθ = ( V , Aθ ) if |E(t1 ) ∩ E(t2)| /|E(t1)| ≥ θ then for t2 ∈ T − {t1} do
Aθ ← Aθ ∪ {(t1 → t2)} end if end for problems . First , some entities and types might not exist in other knowledge base systems , so they cannot be aligned and transferring information . Second , the alignment of entities is not actually equivalent to the mapping of entity types , so the hierarchy of the other system cannot be directly transferred . Hence , in this work , our goal is to construct the hierarchical structure of entities types with only the entities in the original knowledge base system .
To solve the problem , we propose a data driven approach to construct the type hierarchy for knowledge base systems without hierarchical structure , such as Freebase [ 2 ] . The principal idea of our approach is that entities of a type t1 may contain the other general type t2 , which should be the ancestor of t1 . Exploiting entities as hints , we mine potential dependencies among types . After deriving potential dependencies , several graph algorithms are applied to adjust dependencies to become hierarchical . Finally , experimental results show that our approach can well build satisfactory type hierarchies for the Freebase knowledge base system . 2 . PROPOSED METHOD
Given the type set T and the entity set E , we aim to automatically construct a hierarchical structure G for all types t ∈ T . Denote E(t ) ⊆ E as the set of entities with the type t . If most of entities in E(t1 ) belong to the type t2 , the type t1 may be dependent to t2 . Based on this observation , we can derive several potential dependencies among types and construct the hierarchy . Therefore , we propose an entitydriven approach consisting of four stages : ( 1 ) initial graph construction , ( 2 ) equivalent type contraction , ( 3 ) back edge elimination and ( 4 ) vertex separation with cross edges .
( 1 ) Initial Graph Construction . We first derive the potential dependencies among entity types from entity information as shown in Algorithm 1 . By verifying the proportion of shared entities for each type pair , the confidence of dependencies can be identified . Here θ ( 0 ≤ θ ≤ 1 ) is a threshold to sieve out confident enough dependencies , and Gθ is a directed graph . Only the dependencies to types with more than θ of shared entities will be kept in the graph as edges . However , such initial graph may not be a hierarchical structure . The relationship among entity types will be too complicated to understand . Hence , the graph requires adjusting and modifying to become hierarchical .
47 Figure 1 : The sub hierarchy rooted by the type music.artist while θL = 07 Numbers beside edges are the confidence of edges and the detailed proportions of shared entities .
( 2 ) Equivalent Type Contraction . A problem is that the graph may contain cycles , which represent the dependencies propagate back to the types themselves . In the case of edges with high confidence , a cycle may show that types are equivalent because they are likely to be dependent to each other . To put it differently , they can be contracted into a single vertex to avoid the cycle and represent the same idea .
To identify types in cycles , Kosaraju ’s algorithm [ 5 ] is applied to find maximal strongly connected components ( SCCs ) . The graph theory guarantees that vertices must be in a SCC if and only if they are in a cycle . Given a higher threshold θH and the corresponding graph GθH , we contract vertices in each SCC into a vertex , and then denote the new vertex set as VθH . Next , the graph GθH ,θL = ( VθH , AθL ) is constructed by the contracted vertex set VθH and the edge set AθL with a lower confidence threshold θL . However , cycles might still exist in AθL , so we build G θH ,θL by iteratively finding the largest cycle , and then removing the edge with the lowest confidence until there is no cycle . In this paper , we set θH as 0.9 and θL as a tunable parameter . Finally , the graph G ( 3 ) Back edge Elimination . While constructing the graph , some edges , especially back edges , might be redundant for the hierarchical structure . For example , if there are three edges ( t1 → t2 ) , ( t2 → t3 ) and ( t1 → t3 ) , the back edge ( t1 → t3 ) is redundant because t1 can trace its ancestors to t3 without ( t1 → t3 ) . Here we apply the simple depth first search to find and eliminate all back edges in the graph .
θH ,θL will be a directed acyclic graph .
( 4 ) Vertex Separation with Cross edges . Since all pairs of types will be verified in Algorithm 1 , it is possible that a type is dependent to multiple types . It is reasonable because an entity may act as different characters . For example , a US president is not only a politician but an appointer of the government , so the type government.us_president should be dependent to government.politician and people.appointer at the same time . To solve this problem , for a vertex with k out links in the graph ( ie , a type dependent to other k types ) , we separate the vertex and its descendants into k different sub trees below k corresponding vertices . Hence , in the graph , each vertex will have at most only one parent .
Finally , the graph is a forest consisting many hierarchies about specific topics . We then create a pseudo root r , and let all roots of hierarchies link to r . Therefore , the type hierarchy of the knowledge base system is well constructed . 3 . EXPERIMENTS
We utilize the Freebase dataset2 from December 2014 , including more than 90 millions unique entities and 1,950 entity types in more than 80 domains .
Table 1 shows four examples of contracted equivalent entity types . The first three examples are much reasonable . 2Freebase Datadumps : https://developersgooglecom/ freebase/data
Table 1 : Examples of equivalent types with θH = 09 1 . aviation.airline ↔ aviation.aircraft_owner 2 . astronomy.discovery ↔ astronomy.star_system_body 3 . book.scholarly_work ↔ education.dissertation 4 . music.release ↔ media_common.creative_work
Table 2 : The accuracy and entity coverage of edges in the graphs with different θL .
θL
0.5
0.6
0.7
0.8
0.9
Accuracy Coverage
0.8936 0.9369
0.9033 0.9274
0.9124 0.9209
0.9213 0.9167
0.9414 0.8908
For instance , an airline must be the aircraft owner , and vice versa . The last example is stranger than others because a creative work might belong to not only music but also diversified media . This is caused by the entity bias . Most of creative works in Freebase are in the form of music , so an incorrect edge from creative_work to music.release exists . Figure 1 shows an example of the sub tree while θL = 07 Entity types are well arranged into a hierarchy by appropriate levels . To further evaluate the quality of the hierarchy construction , we annotated the correctness of each edge in the hierarchies with different θL , ie , the accuracy of edges . Moreover , we evaluate the entity coverage of the built hierarchies . Table 2 shows the accuracy and the coverage of edges in the hierarchy . Generally , the accuracy of every setting is satisfactory . It is obvious that larger θL leads to higher accuracy and lower coverage . This is because the confidence of type dependencies increases , but less edges pass the threshold . We then analyze the error in the hierarchy construction . The major mistakes are still about the entity bias . For example , an incorrect edge is ( military.commander → people.deceased_person ) because more than 90 % of commanders in Freebase have passed away . 4 . CONCLUSION AND FUTURE WORK
In this paper , we focused automatically constructing the type hierarchy for knowledge based systems without hierarchical structure . We propose an entity driven approach to exploit entity information to derive the potential dependencies and build the type hierarchy . Experimental results shows the effectiveness of our method . The ongoing work is to apply the type hierarchy of Freebase to mine knowledge in other systems , such as web search engines . 5 . REFERENCES
[ 1 ] S . Auer , C . Bizer , G . Kobilarov , J . Lehmann , R . Cyganiak , and Z . Ives . Dbpedia : A nucleus for a web of open data . Springer , 2007 .
[ 2 ] K . Bollacker , C . Evans , P . Paritosh , T . Sturge , and J . Taylor .
Freebase : a collaboratively created graph database for structuring human knowledge . In SIGMOD ’08 , pages 1247–1250 . ACM , 2008 .
[ 3 ] E . Demidova , I . Oelze , and W . Nejdl . Aligning freebase with the yago ontology . In CIKM ’13 , pages 579–588 . ACM , 2013 .
[ 4 ] A . Doan , J . Madhavan , P . Domingos , and A . Halevy . Learning to map between ontologies on the semantic web . In WWW ’02 , pages 662–673 . ACM , 2002 .
[ 5 ] S . R . Kosaraju and G . Sullivan . Detecting cycles in dynamic graphs in polynomial time . In STOC ’88 , pages 398–406 . ACM , 1988 . tvtv_song_performermusicartist089296(25/28)musicconducted_ensemblemusicmusical_group09843(188/191)broadcastartist08051(11125/13818)musicorchestra09982(565/566)09971(200720/201304)musicgroup_member07762(140312/180780)musicopera_singer08229(381/463)musicsongwriter08294(2892/3487)musicproducer07333(18687/25484)musicdrummer08865(242/273)musicbassist09226(596/646)musicguitarist08419(3727/4427)48
