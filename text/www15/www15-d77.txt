Replacing the Irreplaceable : Fast Algorithms for Team
Member Recommendation
Liangyue Li
Arizona State University liangyue@asu.edu
Kate Ehrlich IBM Research katee@usibmcom
Hanghang Tong
Arizona State University hanghangtong@asuedu
Nan Cao
IBM Research nancao@usibmcom
Yu Ru Lin
University of Pittsburgh yurulin@pitt.edu
Norbou Buchler
US Army Research Laboratory norboubuchlerciv@mailmil
ABSTRACT In this paper , we study the problem of Team Member Replacement – given a team of people embedded in a social network working on the same task , find a good candidate to best replace a team member who becomes unavailable to perform the task for certain reason ( eg , conflicts of interests or resource capacity ) . Prior studies in teamwork have suggested that a good team member replacement should bring synergy to the team in terms of having both skill matching and structure matching . However , existing techniques either do not cover both aspects or consider the two aspects independently . In this work , we propose a novel problem formulation using the concept of graph kernels that takes into account the interaction of both skill and structure matching requirements . To tackle the computational challenges , we propose a family of fast algorithms by ( a ) designing effective pruning strategies , and ( b ) exploring the smoothness between the existing and the new team structures . We conduct extensive experimental evaluations and user studies on real world datasets to demonstrate the effectiveness and efficiency . Our algorithms ( a ) perform significantly better than the alternative choices in terms of both precision and recall and ( b ) scale sub linearly .
Categories and Subject Descriptors H28 [ Database Management ] : Database applications— Data mining
Keywords Team member replacement ; graph kernel ; scalability
1 .
INTRODUCTION
In his world widely renowned book “ The Science of the Artificial ” [ 38 ] , Nobel laureate Herbert Simon pointed out that it is more the complexity of the environment , than the
Copyright is held by the International World Wide Web Conference Committee ( IW3C2 ) . IW3C2 reserves the right to provide a hyperlink to the author ’s site if the Material is used in electronic media . WWW 2015 , May 18–22 , 2015 , Florence , Italy . ACM 978 1 4503 3469 3/15/05 . http://dxdoiorg/101145/27362772741132 complexity of the individual persons , that determines the complex behavior of humans . The emergence of online social network sites and web 2.0 applications provides a new connected environment/context , where people interact and collaborate with each other as a team to collectively perform some complex tasks .
Among others , the churn of team members is a common problem across many application domains . To name a few , an employee in a software or sales team might decide to leave the organization and/or be assigned to a new task . In a law enforcement mission , a SWAT team might lose certain task force due to the fatality or injury . In professional sports ( eg , NBA ) , the rotation tactic between the benches could play a key role on the game outcome . In all these cases , the loss of the key member ( ie , the irreplaceable ) might bring the catastrophic consequence to the team performance . How can we find the best alternate ( eg , from the other members within the organization ) , when a team member becomes unavailable ? This is the central question this paper aims to answer . However , despite the frequency with which people leave a team before a project/task is complete and the resulting disruption [ 44 ] , replacements are often found opportunistically and are not necessarily optimal .
We conjecture there will be less disruption when the team member who leaves is replaced with someone with similar relationships with the other team members . This conjecture is inspired by some recent research which shows that team members prefer to work with people they have worked with before [ 22 ] and that distributed teams perform better when members know each other [ 10 ] . Furthermore , research has shown that specific communication patterns amongst team members are critical for performance [ 8 ] . Thus , in addition to factors such as skill level , maintaining the same or better level of familiarity and communication amongst team members before and after someone leaves should reduce the impact of the departure . In other words , for team member replacement , the similarity between individuals should be measured in the context of the team itself . More specifically , a good team member replacement should meet the following two requirements . First ( skill matching ) , the new member should bring a similar skill set as the current team member to be replaced . Second ( structure matching ) , the new member should have a similar network structure as the current team member in connecting the rest of the team members .
Armed with this conjecture , we formally formulate the Team Member Replacement problem by the notation of
Figure 1 : The team graphs before and after Jiawei Han takes Philip S . Yu ’s place . See subsection 5.2 for detailed explanations . graph similarity/kernel . By modeling the team as a labeled graph , the graph kernel provides a natural way to capture both the skill and structure match as well as the interaction of both . However , for a network with n individuals , a straightforward method would require O(n ) graph kernel computations for one team member replacement , which is computationally intractable . For example , for the DBLP dataset with almost 1M users ( ie , n ≈ 1 , 000 , 000 ) , we found that it would take 6,388s to find one replacement for a team of size 10 . To address the computational challenges , we propose a family of fast algorithms by carefully designing the pruning strategies and exploring the smoothness between the existing and the new teams . We perform the extensive experimental evaluations to demonstrate the effectiveness and efficiency of our methods . Specifically , we find that ( 1 ) by encoding both the skill and structural matching , it leads to a much better replacement result . Compared with the best alternative choices , we achieve 27 % and 24 % net increase in average recall and precision , respectively ; ( 2 ) our fast algorithms are orders of magnitude faster and scale sub linearly . For example , our pruning strategy alone leads up to 1,709× speed up , without sacrificing any accuracy .
The main contributions of this paper are as follows .
1 Problem Formulation . We formally define the Team Member Replacement problem , to recommend a good candidate when a team member is unavailable in the context of networks where nodes carrying on multiple labels ( skills ) and edges representing social structures .
2 Algorithms and Analysis . We solve the problem by introducing graph kernels and propose a family of effective and scalable algorithms for Team Member Replacement ; and analyze its correctness and complexity .
3 Experimental Evaluations . We perform extensive experiments , including user studies and case studies , on real world datasets , to validate the effectiveness and efficiency of our methods . ( See an example in Figure 1 . )
The rest of the paper is organized as follows . Section 2 formally defines Team Member Replacement problem . Section 3 presents our basic solutions . Section 4 addresses the computational challenges . Section 5 presents the experimental results . Section 6 reviews some related work . Section 7 concludes the paper .
2 . PROBLEM DEFINITIONS
Table 1 lists the main symbols used throughout this paper . We describe the n individuals by a labelled social network G := {A , L} , where A is an n × n adjacency matrix characterizing the connectivity among different individuals ; and L is n × l skill indicator matrix . The ith row vector of L describes the skill set of the ith individual . For example , suppose there are only three skills in total , including {data mining , databases , information retrieval} . Then an individual with a skill vector [ 1 , 1 , 0 ] means that s/he has both data mining and databases skills but no skill in terms of information retrieval . Also , we represent the elements in a matrix using a convention similar to Matlab , eg , A(i , j ) is the element at the ith row and jth column of the matrix A , and A( : , j ) is the jth column of A , etc .
Table 1 : Table of symbols
Symbols G := {A , L}
An×n Ln×l T G(T ) di l t n m
Definition the entire social network the adjacency matrix of G skill indicator matrix the team member index the team network indexed by its members T the degree of the ith node in A the total number of skills the team size , ie , t = |T | the total number of individuals in A the total number of connections in A
We use the calligraphic letter T to index the members of a team , which includes a subset of t = |T | out of n individuals . Correspondingly , we can represent the team by another labelled team network G(T ) := {A(T ,T ) , L(T , :)} . Note that A(T ,T ) and L(T , :)} are sub matrices of A and L , respectively . If we replace an existing member p ∈ T of a given team T by another individual q /∈ T , the new team members are indexed by Tp→q := {T /p , q} ; and the new team is represented by the labelled network G(Tp→q ) .
With the above notations and assumptions , our problems can be formally defined as follows :
Problem 1 . Team Member Replacement
Given : ( 1 ) A labelled social network G := {A , L} , ( 2 ) a Output : A “ best ” alternate q /∈ T to replace the person p ’s team G(T ) , and ( 3 ) a team member p ∈ T ; role in the team G(T ) .
3 . PROPOSED SOLUTIONS
In this section , we present our solution for Problem 1 . We start with the design objectives for the Team Member Replacement problem , present graph kernel as the basic solution to fulfill such design objectives ; and finally analyze the main computational challenges . 3.1 Design Objectives
Generally speaking , we want to find a similar person q to replace the current team member p who is about to leave the team . That is , a good replacement q should not only have a similar skill set as team member p ; but also would maintain the good chemistry of the team so that the whole team can work together harmonically and/or be less disrupted . In other words , the similarity between individuals should be measured in the context of the team itself . Often , the success of a team largely depends on the successful execution of several sub tasks , each of which requires the cooperation among several team members with certain skill configurations . For example , several classic tactics often recurringly find themselves in a successful NBA team , including ( a ) triangle offense ( which is featured by a sideline triangle created by the center , the forward , and the guard ) , ( b ) pick and roll ( which involves the cooperation between two players one plays as ‘pivot’ and the other plays as ‘screen’ , respectively ) , etc . Generally speaking , team performance arises from the shared knowledge and experience amongst team members and their ability to share and coordinate their work . As noted in the introduction , a specific pattern of communication is associated with higher team performance . Maintaining that communication structure should therefore be less disruptive to the team .
If we translate these requirements into the notations defined in Section 2 , it naturally leads to the following two design objectives for a good Team Member Replacement : • Skill matching : the new member should bring a similar skill set as the current team member p to be replaced that are required by the team .
• Structural matching : the new member should have a similar network structure as team member p in connecting the rest of the team members .
3.2 Basic Solutions
In order to fulfill the above two design objectives , we need a similarity measure between two individuals in the context of the team itself that captures both skill matching and the structural matching as well as the interaction of both . We refer to this kind of similarity as team context aware similarity . Mathematically , the so called graph kernel defined on the current and new teams provides a natural tool for such a team context aware similarity . That is , we want to find a replacement person q as q = argmaxj,j /∈T Ker(G(T ) , G(Tp→j ) )
( 1 ) In Eq ( 1 ) , G(T ) is the labelled team graph ; and G(Tp→j ) is the labelled team graph after we replace a team member p by another individual j ; and Ker( . ) is the kernel between these two labelled graphs . Generally speaking , the basic idea of various graph kernels is to compare the similarity of the sub graphs between the two input graphs and then aggregate them as the overall similarity between the two graphs . As such , graph kernel is able to simultaneously capture both the skill matching and the structure matching , beyond the simple ad hoc combination between the two ( eg , weighted linear combination , multiplicative combination , sequential filtering , etc ) . We would like to emphasize that this treatment is important as we will show in the experimental section , it leads to much better performance over all the alternative choices . Let us explain the intuition/rationality of why graph kernel is a natural choice for team context aware similarity . Here , each subgraph in a given team ( eg , the dashed triangles in Figure 1 ) might reflect a specific skill configuration among a sub group of team members that is required by a certain sub task of that team . By comparing the similarity between two subgraphs , we implicitly measure the capability of the individual j to perform this specific sub task . Thus , by aggregating the similarities of all the possible subgraphs between the two input graphs/teams , we get a goodness measure of the overall capability of the individual j to perform all the potential sub tasks that team member p is involved in the original team . Note that the team replacement scenario is different from team formation [ 28 , 1 , 34 ] . This existing work on team formation aims to build a team from scratch by optimizing some pre chosen metric ( eg , compatibility , diversity , etc ) . In contrast , we aim to find a new team member such that the new team resembles the original team as much as possible . Having this in mind , many of the existing graph kernels can be adopted in Eq ( 1 ) , such as random walk based graph kernel , sub tree based graph kernels ( See section 6 for a review ) . In this paper , we focus on random walk based graph kernel due to its mathematical elegancy and superior empirical performance . Given two labelled graphs Gi := {Ai , Li} , i = 1 , 2 , the random walk based graph kernel between them can be formally computed as follows [ 40 ] :
( 2 )
−1L×x
' Ker(G1 , G2 ) = y 1 ⊗ A '
( I − cA× ) ' where A× = L×(A 2 ) is the weight matrix of the two graphs’ Kronecker product , ⊗ represents the Kronecker product between two matrices , c is a decay factor , y = y1 ⊗ y2 and x = x1 ⊗ x2 are the so called starting and stopping vectors to indicate the weights of different nodes and are set uniform in our case , L× is a diagonal matrix where ' L×(i , i ) = 0 if the ith row of ( A 2 ) is zeroed out due to label inconsistency of two nodes of the two graphs . L× can k=1 diag(L1( : , k ) ) ⊗ diag(L2( : , k) ) . be expressed as L× = 3.3 Computational Challenges
1 ⊗ A '
.l
Eq ( 2 ) naturally suggests the following procedure for solving Team Member Replacement problem ( referred to as for each individual j /∈ T , we comTeamRep Basic ) : pute its score score(j ) by Eq ( 2 ) ; and recommend the individual(s ) with the highest score(s ) . However , this strategy ( TeamRep Basic ) is computationally intensive since we need to compute many random walk based graph kernels and each of such computations could be expensive especially when the team size is large . To be specific , for a team T of size t and a graph G with n individuals in total , its time complexity is O(nt6 ) since we need to compute a random walk based graph kernel for each candidate who is not in the current team , each of which could cost O(t6 ) [ 40 ] . Even if we allow some approximation in computing each of these graph kernels , the best known algorithms ( ie , by [ 24 ] ) would still give an overall time complexity as O(n(lt2r4 + mr + r6) ) , where r is reduced rank after low rank approximation , which is still too high . For example , on the DBLP dataset with 916,978 authors , for a team with 10 members , it would take 6,388s to find a best replacement .
In the next section , we present our solution to remedy these computational challenges .
4 . SCALE UP AND SPEED UP
In this section , we address the computational challenges to scale up and speed up TeamRep Basic . We start with an efficient pruning strategy to reduce the number of graph kernel computations , and then present two algorithms to speed up the computation of individual graph kernel . 4.1 Scale up : Candidate Filtering
Here , we propose an efficient pruning strategy to filter out those unpromising candidates . Recall that one of our design objectives for a good Team Member Replacement is structural matching , ie , the new member has a similar network structure as team member p in connecting the rest team members . Since p is connected to at least some of the rest members , it suggests that if an individual does not have any connection to any of the rest team members , s/he might not be a good candidate for replacement .
Pruning Strategy : Filter out all the candidates who do not have any connections to any of the rest team members .
Lemma 1 . Effectiveness of Pruning . For any two persons i and j not in T , if i is connected to at least one member in T /p and j has no connections to any of the members in T /p , we have that
Ker(G(T ) , G(Tp→i ) ) ≥ Ker(G(T ) , G(Tp→j) ) .
.l
.∞
L×1 =
Proof . Suppose that G(T ) := {A0 , L0} . Let G(Tp→i ) :=
{A1 , L1} , and G(Tp→j ) := {A2 , L2} . '
' 1))zx , where
By Taylor expansion of Eq ( 2 ) , we have 0⊗A Ker(G(T ) , G(Tp→i ) ) = ' ( L×1(A k=1 diag(L0( : , k ) ) ⊗ diag(L1( : , k) ) , Ker(G(T ) , G(Tp→j ) ) = 0⊗A ' ' 2))zx , where ( L×2(A k=1 diag(L0( : , k ) ) ⊗ diag(L2( : , k) ) . 1))z ≥ 0⊗ A ' ' 2))z for any z > 0 , where two matrices A ≥ B 0 ⊗ A ' ' ( L×2(A if Aij ≥ Bij holds for all possible ( i , j ) . We prove this by induction .
Therefore , it is sufficient to show that ( L×1(A z=0 cy z=0 cy
L×2 =
.∞
.l
'
( Base Case of Induction ) When z = 1 , we have
' 1 )
L×1(A .l = ( .l =
0 ⊗ A ' k=1 diag(L0( : , k ) ) ⊗ diag(L1( : , k)))(A 0 ⊗ A ' 0 ) ⊗ ( diag(L1( : , k))A ' ' k=1(diag(L0( : , k))A 1 ) 1 ) ≥ ( diag(L2( : , k))A ' ' Because ( diag(L1( : , k))A 2 ) , we have 1))z−1 ≥ ( L×2(A 0⊗ ' '
1 ) ≥ L×2(A '
( Induction Step ) Assuming ( L×1(A ' 2))z−1 , we have that
0 ⊗ A '
0 ⊗ A '
0⊗A '
' 2 ) .
' 1 )
( 3 )
L×1(A
A
( L×1(A
0 ⊗ A '
1))z ≥ ( L×2(A ' ≥ ( L×2(A
0 ⊗ A ' 0 ⊗ A '
2))z−1(L×1(A ' ' 2))z
0 ⊗ A '
' 1 ) ) where the first inequality is due to the induction assumption ; and the second inequality is due to the base case . This completes the proof .
.
Remarks . By Lemma 1 , our pruning strategy is ‘safe’ , ie , it will not miss any potentially good replacements . In the meanwhile , we can reduce the number of graph kernel comi∈T /p di ) , which is sub linear putations from O(n ) to O( in n . 4.2 Speedup Graph Kernel Exact Approach Here , we address the problem of speeding up the computation of an individual graph kernel . Let G(T ) := {A1 , L1} and G(Tp→q ) := {A2 , L2} , where A1 , A2 are symmetric adjacency matrices of the two graphs.1 Without loss of generality , let us assume that p is the last team member in T . Compare A1 with A2 , it can be seen that the only difference is their last columns and last rows . Therefore , we can rewrite A2 as A2 = Ac + Ad2 , where Ac is A1 with its last row and column being zeroed out , and the nonzero elements of Ad2 only appear in its last row and column reflecting the connectivity of q to the new team . Notice that Ad2 has a rank at most 2 , so it can be factorized into two smaller matrices as Ad2 = Et×2F2×t . ( j ) Denote diag(L1( : , j ) ) as L 1 and diag(L2( : , j ) ) as L for ( j ) j = 1 , , l . Compare L 2 , the only difference is the last diagonal element . Therefore , we can write L as ( j ) L 1 with last element zeroed ( j ) d2 ’s last element indicates q ’s strength of having out , and L 1Although we focus on the undirected graphs in this paper , our proposed algorithms can be generalized to directed graphs .
( j ) d2 , where L
( j ) 1 with L
( j ) 2 = L
( j ) c +L is L
( j ) 2
( j ) 2
( j ) c
( j ) 2 ’s rank is at most 1 , so it can be factorized ( j ) 1×t . Therefore , the exact graph kernel for
.l j=1 L(j )
1 ⊗ L(j )
2 )x
−1(
( j ) 2 = e the jth skill . L ( j ) t×1f as L the labelled graph can be computed as : Ker(G(T ) , G(Tp→q ) ) = y' j=1 L(j ) 1 ⊗ L(j ) = y' L(j )
1 ⊗ A' c )(A1 ⊗ Ac )
1 ⊗ L(j )
2 )(A'
.l lfi ff
2 ) ) j=1
Z : invariant wrt q
( I − c( ( I − c( ' lfi
( L(j )
1 ⊗ e(j))(I ⊗ f ( j)))(A1 ⊗ Ac ) ff
PQ(A1⊗Ac)=PY1
1 ⊗ L(j ) L(j ) ff X1Y2 c )(A1 ⊗ E)(I ⊗ F ) j=1
−c ( ' lfi
−c ( ' lfi j=1
−c ( ' .l
(
( L(j )
1 ⊗ e(j))(I ⊗ f ( j)))(A1 ⊗ E)(I ⊗ F )
−1
) j=1 ff X2Y2
( j )
( j )
( 1 )
( 4 )
2 )x
Each L j=1 L(j )
1 ⊗ e(1 ) , . . . , L
1 ⊗ L(j ) 1 ⊗ e(j ) is a matrix of size t2 by t and I ⊗ f ( j ) is a matrix of size t by t2 . We denote the matrix created 1 ⊗ e(j ) horizontally as P , ie , P = by concatenating all L 1 ⊗ e(l) ] ; denote the matrix created by [ L stacking all I⊗f ( j ) vertically as Q , ie , Q = [ I⊗f ( 1 ) ; . . . ; I⊗ .l 1 ⊗ e(j))(I ⊗ f ( j) ) ) is equal to f ( l) ] . Obviously , ( .l 1 ⊗ L c )(A1 ⊗ E ) by X1 ; denote PQ . We denote ( .l 1 ⊗ e(j))(I⊗ f ( j)))(A1⊗ E ) by X2 ; denote Q(A1⊗ ( Ac ) by Y1 and denote ( I⊗ F ) by Y2 . Let X be [ P , X1 , X2 ] and Y be [ Y1 ; Y2 ; Y2 ] . j=1(L ( j ) j=1 L j=1(L
( j )
( j )
( j )
( l )
With these additional notations , we can rewrite Eq ( 4 ) as Ker(G(T ) , G(Tp→q ) ) = y' ( Z − cXY ) = y' .l .l ( (
( Z−1 + cZ−1X(I − cYZ−1X ) j=1 L(j ) j=1(L(j )
1 ⊗ L(j )
.l −1YZ−1 ) 1 ⊗ e(j))(I ⊗ f ( j)))x ) j=1 L(j ) c )x + (
−1(
1 ⊗ L(j )
2 )x
( 5 ) where the second equation is due to the matrix inverse lemma [ 19 ] .
( j )
( j )
.l j=1 L
−1X )
1 ⊗ L
Remarks . In Eq ( 5 ) , Z = I − c( c )(A1 ⊗ Ac ) does not depend on the candidate q . Thus , if we pre−1 , we only need to update X(I − compute its inverse Z −1Y and PQx for every new candidate . Notice cYZ that compared with the original graph kernel ( the first equation in Eq ( 4) ) , ( I − cYZ −1X ) is a much smaller matrix of ( l + 4)t × ( l + 4)t . In this way , we can accelerate the process of computing its inverse without losing the accuracy of graph kernel . 4.3 Speedup Graph Kernel Approx Approach Note that the graph kernel by Eq ( 5 ) is exactly the same as the original method by the first equation in Eq ( 4 ) . If we allow some approximation error , we can further speed up the computation .
Note that Ac is symmetric and its rank r approximation can be written as ˆAc = UV , where U is a matrix of size t by r and V is a matrix of size r by t . A1 can be approximated as ˆA1 = ˆAc + Ad1 = UV + E1F1 = X1Y1 , where X1 = ' [ U , E1 ] , Y1 = [ V ; F1 ] , E1 = [ w1 , s ] , F1 = [ s 1 ] , s is a zero vector of length t except that the last element is 1 , and w1 is the weight vector from p to the members in T . Similarly ,
; w
'
'
2 ) )
; w
−1L×x after p is replaced by a candidate q , the weight matrix of the new team can be approximated as ˆA2 = X2Y2 where ' X2 = [ U , E2 ] , Y2 = [ V ; F2 ] , E2 = [ w2 , s ] , F2 = [ s 2 ] and w2 is the weight vector from q to the members in the new team . The approximated graph kernel for labeled graphs can be computed as : 1 ⊗ ˆA' ˆKer(G(T ) , G(Tp→q ) ) = yT ( I − cL×( ˆA' ( I − cL×(X1Y1 ) ⊗ ( X2Y2 ) ) = y' −1L×x ( I − cL×(X1 ⊗ X2)(Y1 ⊗ Y2 ) ) = y' −1L×x ( I + cL×(X1 ⊗ X2)M(Y1 ⊗ Y2))L×x = y' .l 1 X1 ⊗ L(j ) 2 X2)M(Y1 ⊗ Y2)L×x = y'L×x + cy' j=1 L(j ) .l ( 1 x1)(y' 1L(j ) 2L(j ) 2 x2 ) ) + c .l .l = ( 1 X1 ⊗ y' j=1 y' 2L(j ) 2 x2 ) 2 X2)M( ( 6 ) .l where M = ( I − c( −1 , the second equation is due to the kronecker product property ; the third equation is again due to the matrix inverse lemma , the fourth equation is by matrix multiplication distributivity and the last equation is due to the kronecker product property . j=1 Y1L(j ) 1 X1 ⊗ Y2L
1 x1 ⊗ Y2L(j ) j=1(y' 1L(j )
( j ) 2 X2 ) ) j=1 Y1L
( j )
(
Remarks . The computation of M is much cheaper than the original graph kernel since it is a matrix inverse of size ( r +2)2×(r +2)2 . It was first proposed in [ 24 ] to explore the low rank structure of the input graphs to speed up graph in the context of Team kernel computations . However , Member Replacement , we would need to estimate the i∈T /p di ) ) when low rank approximation many times ( O( we directly apply the method in [ 24 ] . In contrast , we only need to compute top r approximation once by Eq ( 6 ) . As our complexity analysis ( subsection 4.4 ) and experimental evaluations ( subsection 5.3 ) show , this brings a few times additional speed up . 4.4 Putting Everything Together
.
Putting everything together , we are ready to present our algorithms for Team Member Replacement . Depending on the specific methods for computing the individual graph kernels , we propose two variants . 441 Variant #1 : TeamRep Fast Exact We first present our algorithm using the exact graph kernel computation in Eq ( 5 ) . The algorithm ( TeamRepFast Exact ) is summarized in Algorithm 1 . We only need −1 , R , b and l for later use to to pre compute and store Z compute each candidate ’s score ( step 2 and 3 ) . In the loop , the key step is to update M involving matrix inverse of size ( l +4)t×(l +4)t which is relatively cheaper to compute ( step 17 ) .
The effectiveness and efficiency of TeamRep Fast Exact are summarized in Lemma 2 and Lemma 3 , respectively . Compared with TeamRep Basic , Algorithm 1 is much faster without losing any recommendation accuracy .
Lemma 2 . Accuracy of TeamRep Fast Exact . Algorithm 1 outputs the same set of candidates as TeamRepBasic .
Proof . ( Sketch ) First , according to Lemma 1 , we will not miss a promising candidate during the pruning stage . Second , for each candidate after pruning , Algorithm 1 calculates its graph kernel exactly the same as Eq ( 5 ) , which is in turn the same as Eq ( 4 ) and hence Eq ( 2 ) . Therefore , after ranking the scores , Algorithm 1 outputs the same set of candidates as TeamRep Basic .
Algorithm 1 : TeamRep Fast Exact Input : ( 1 ) The entire social network G := {A , L} , ( 2 ) original team members T , ( 3 ) person p who will leave the team , ( 4 ) starting and ending probability x and y(be uniform by default ) , and ( 5 ) an integer k ( the budget )
Output : Top k candidates to replace person p
Algorithm 2 : TeamRep Fast Approx Input : ( 1 ) The entire social network G := {A , L} , ( 2 ) original team members T , ( 3 ) person p who will leave the team , ( 4 ) starting and ending probability x and y ( be uniform by default ) , and ( 5 ) an integer k ( the budget )
Output : Top k candidates to replace person p
( j ) 2 , j = 1 , . . . , l ;
( j ) 1 Initialize Ac , L 1 , L 2 Pre compute .l Z−1 ← ( I − c( .l j=1 L(j ) j=1 L(j ) 1 ⊗ L(j )
1 ⊗ L(j ) c )(A1 ⊗ Ac ) )
−1 ; c )x ; b ← yT Z−1R ; l ← cyT Z−1 ;
'
'
] ;
; w
6
7 8
9
10 11 12
3 Set R ← ( 4 for each candidate q in G after pruning do 5
Initialize s ← a zero vector of length t except the last element is 1 ; Initialize w ← weight vector from q to the new team members ; Set E ← [ w , s ] ; F ← [ s Set e(j ) ← a t by 1 zero vector except the last element is 1 , for j = 1 , . . . , dn ; Set f ( j ) ← a 1 × t zero vector except the last element which is label j assignment for q ; Set P ← [ L Set Q ← [ I ⊗ f ( 1 ) ; . . . ; I ⊗ f ( l) ] ; Compute X1 ← ( j=1 L Compute X2 ← ( j=1 L Compute Y1 ← Q(A1 ⊗ Ac ) ; Compute Y2 ← ( I ⊗ F ) ; Set X ← [ P , X1 , X2 ] , Y ← [ Y1 ; Y2 ; Y2 ] ; Update M ← ( I − cYZ −1PQx ; Compute r Compute score(q ) = b + yT r
13 14 15 16 17 18 19 20 end 21 Return the top k candidates with the highest scores .
1 ⊗ e(l) ] ; 1 A1 ⊗ L 1 A1 ⊗ e(j)f ( j)E ) ;
1 ⊗ e(1 ) , . . . , L
−1R + r
+ lXMY(Z
' ← Z
−1X )
.l .l
( j ) c E ) ;
−1 ;
( 1 )
( j )
( j )
( l )
'
'
) ;
'
; w
UΛU
( j ) 1 , L
( j ) 2 , j = 1 , . . . , l ; element is 1 ;
1 Initialize Ac , L 2 Compute top r eigen decomposition for Ac : ' ← Ac ; 3 Set V ← ΛU ' ; 4 Initialize s ← a zero vector of length t except the last 5 Initialize w1 ← weight vector from p to T ; 6 Set E1 ← [ w1 , s ] , F1 ← [ s ' 1 ] ; 7 Set X1 ← [ U , E1 ] , Y1 ← [ V ; F1 ] ; 8 for each candidate q in G after pruning do 9
Initialize w2 ← weight vector from q to the new team members ; Set E2 ← [ w2 , s ] , F2 ← [ s ' ; w 2 ] ; Set X2 ← [ U , E2 ] , Y2 ← [ V ; F2 ] ; Compute S ← .l 1 X1 ⊗ y ' 2L Compute T ← .l 1 x1 ⊗ Y2L(j ) Update M ← ( I − c( .l Set score(q ) = (
13 14 15 16 end 17 Return the top k candidates with the highest scores .
( j ) 2 X2 ; 2 x2 ) ; 1X1 ⊗ Y2Lj j=1 y j=1 Y1L(j ) .l j=1(y' j=1 Y1Lj 1L(j )
1 x1)(y'
10 11 12
2L(j )
2X2 ) )
−1 ;
' 1L
( j )
'
2 x2 ) ) + cSMT ; the approximation error is the low rank approximation of Ac ( step 2 ) .
Lemma 4 . Accuracy of TeamRep Fast Approx . If Ac = holds , Algorithm 2 outputs the same set of candidates
'
UΛU as TeamRep Basic .
Proof . Omitted for brevity .
Lemma 3 . Time Complexity of TeamRep Fast Exact
Algorithm 1 takes O(( i∈T /p di)(lt5 + l3t3 ) ) in time .
.
Lemma 5 . Time Complexity of TeamRep Fast Approx
.
Algorithm 2 takes O(( i∈T /p di)(lt2r + r6 ) ) in time .
Proof . ( Sketch ) After pruning , the number of potential candidates ( the number of loops in Algorithm 1 ) is . O( i∈T /p di ) . In every loop , computing X1,X2 and Y1 take O(lt5 ) ; computing M takes O(lt5 + l3t3 ) and computing the score(q ) takes O(lt3 ) . Putting everything together , the time complexity of Algorithm 1 is O(( i∈T /p di)(lt5 + l3t3) ) .
.
442 Variant #2 : TeamRep Fast Approx By using Eq ( 6 ) to compute the graph kernel instead , we propose an even faster algorithm ( TeamRep Fast Approx ) , which is summarized in Algorithm 2 . In the algorithm , we only need to compute the top r eigen decomposition for Ac once ( step 2 ) , and use that to update the low rank approximation for every new team . Besides , when we update M , a matrix inverse of size ( r + 2)2 × ( r + 2)2 ( step 14 ) , the time is independent of the team size .
The effectiveness and efficiency of TeamRep Fast Approx are summarized in Lemma 4 and Lemma 5 , respectively . Compared with TeamRep Basic and TeamRep Fast Exact , Algorithm 2 is even faster ; and the only place it introduces
Proof . Omitted for brevity .
5 . EXPERIMENTAL EVALUATIONS
In this section , we present the experimental evaluations . The experiments are designed to answer the following questions : • Effectiveness : How accurate are the proposed algo• Efficiency : How scalable are the proposed algorithms ? rithms for Team Member Replacement ?
5.1 Datasets
DBLP . DBLP dataset2 provides bibliographic information on major computer science journals and proceedings . We use it to build a co authorship network where each node is an author and the weight of each edge stands for the number of papers the two corresponding authors have coauthored . The network constructed has n = 916 , 978 nodes and m = 3 , 063 , 244 edges . We use the conferences ( eg , 2http://arnetminer.org/citation
Table 2 : Summary of Datasets .
Data DBLP Movie NBA n
916,978 95,321 3,924 m
3,063,244 3,661,679 126,994
# of teams 1,572,278
10,197 1,398
KDD , SIGMOD , CVPR , etc ) to reflect authors’ skills ( eg , data mining , data base , computer vision , etc ) and for a given author and conference , we define his/her skill level as the percentage of the papers s/he publishes in that conference For a given paper , we treat all of its co authors as a team . Alternatively , if a set of authors co organize an event ( such as a conference ) , we also treat them as a team .
Movie . This dataset3 is an extension of MovieLens dataset , which links movies from MovieLens with their corresponding IMDb webpage and Rotten Tomatoes review system . It contains information of 10,197 movies , 95,321 actors/actress and 20 movie genres ( eg , action , comedy , horror , etc ) Each movie has on average 22.8 actors/actress and 2.0 genres assignments . We set up the social network of the actors/actresses where each node represents one actor/actress and the weight of each edge is the number of movies the two linking actors/actresses have co stared . We use the movie genres that a person has played as his/her skills . For a given movie , we treat all of its actors/actress as a team .
NBA . The NBA dataset4 contains NBA and ABA statistics from the year of 1946 to the year of 2009 . It has information of 3,924 players and 100 teams season by season . We use players’ positions as their skill labels , including guard , forward and center . The edge weight of the player network stands for the number of seasons that the two corresponding nodes/individuals played in the same team .
The statistics of these three datasets are summarized in Table 2 . All the experiments are run on a Windows machine with 16 GB memory and Intel i7 2760QM CPU .
Repeatability of Experimental Results . All the three datasets are publicly available . We will release the code of the proposed algorithms through authors’ website . 5.2 Effectiveness Results
A . Qualitative Evaluations . We first present some case studies on the three datasets to gain some intuitions .
Case studies on DBLP . Let us take a close look at Fig 1 , which shows a screenshot of our current demo system . This prototype system has been developed to a fully functional system and deployed to real users [ 7 ] . The original team is shown on the left side and the person leaving the team ( Philip S . Yu ) is represented by a node ( diagram ) with larger radius . If the user clicks a replacement from the recommendation list ( on the top ) , the system will show the new team on the right side . Here , we introduced a novel visualization technique to represent authors’ relationships and their expertise within one unique graph visualization . Particularly , in this visualization , the authors are shown as voronoi diagrams [ 15 ] . The authors’ expertise is visualized as the voronoi cells inside the diagram , that is , each cell indicates a type of expertise . We use different color hues to identify different expertise types and use the color saturations to encode the author ’s strength in that expertise type . For 3http://grouplens.org/datasets/hetrec 2011/ 4http://wwwdatabasebasketballcom
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
Graph OnlySkill OnlyOur method
Average Recall Average Precision Average R@1
Figure 2 : The average recall , average precision and R@1 of the three comparison methods . Higher is better . example , if KDD is represented in orange , a bright orange cell in a voronoi diagram means the author has a strong expertise in KDD . In contrast , a white cell indicates the author ’s lacking of the corresponding expertise . To facilitate visual comparison of different authors , we fix the position of these expertise cells across different diagrams so that , for example , KDD is always shown at the left side of the author diagrams . These voronoi diagrams are connected by links indicating the authors’ relationships . The strength of the relationship are presented by the line thickness .
Fig 1 visualizes the team structures before and after Philip S . Yu becomes unavailable in the team writing [ 33 ] . Our algorithm ’s top recommendation is Jiawei Han . As we can see , both Han and Yu posses very similar skills and are renowned for their extraordinary contributions in the data mining and databases community . Moreover , Han has collaborated with almost each of the rest authors/team members . Looking more closely , we find Han preserves several key triangle substructures in the original team : one with Ke Wang and Jian Pei , and the other with Haixun Wang and Jian Pei . These triangle sub structures might play a critical role in accomplishing sub tasks in writing the paper .
We also consider a bigger team , i.e , the organizing committee of KDD 2013 . After filtering those not in DBLP , we have 32 people in the committee team . We use their co authorship network as their social network . Suppose one of the research track co chairs Inderjit Dhillon becomes unavailable and we are searching for another researcher who can fill in this critical role in organizing KDD 2013 . The top five candidates our algorithm recommends are Philip S . Yu , Jiawei Han , Christos Faloutsos , Bing Liu and Wei Wang . The results are consistent with the intuitions all of these recommended researchers are highly qualified not only have they made remarkable contributions to the data mining field , but also they have strong ties with the remaining organizers of KDD 2013 . For example , Liu is the current chair of KDD executive committee ; Wang is one of the research track program chairs for KDD 2014 ; and Faloutsos was the PC co chair of KDD 2003 , etc .
Case studies on Movie . Assuming actor Matt Damon became unavailable when filming the epic war movie Saving Private Ryan ( 1998 ) and we need to find an alternative actor who can play Ryan ’s role in the movie . The top five recommendations our algorithm gives are : Samuel L . Jackson , Steve Buscemi , Robert De Niro , Christopher Walken , Bruce Willis . As we know , Saving Private Ryan is a movie l l a c e R e g a r e v A
0908070605040302010 p a
P
Graph OnlySkill Only Our method e r 1 P p a e r 2 P p a e r 3 P p a e r 4 P p a e r 5 P p a e r 6 P p a e r 7 P p a e r 8 P p a e r 9 a P p
0 e r 1 i i n o s c e r P e g a r e v A
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0 p a
P
Graph OnlySkill Only Our method e r 1 P a e r 2 P a p e r 3 P a e r 4 P a p e r 5 P a e r 6 P a p p e r 7 P a e r 8 P a p p p p e r 9 a P p
0 e r 1
Figure 3 : Recall for different papers . Higher is better .
Figure 4 : Precision for different papers . Higher is better . of action and drama genres . Notice that both Damon and Jackson have participated in many movies of drama , thriller and action genres , hence Jackson has the acting skills required to play the role in this movie . Moreover , Jackson has co played with Tom Sizemore , Vin Diesel , Dale Dye , Dennis Farina , Giovanni Ribisi and Ryan Hurst in the crew before . The familiarity might increase the harmony of filming the movie with others .
Case studies on NBA . Let us assume that Kobe Bryant in Los Angeles Lakers was hurt during the regular season in 1996 and a bench player is badly wanted . The top five replacements our algorithm recommends are : Rick Fox , Ac Green , Jason Kidd , Brian Shaw and Tyronn Lue . As we know , Bryant is a guard in NBA . Among the five recommendations , Kidd , Shaw and Lue all play as guards . More importantly , Jason , Brian and Tyronn have played with 9 , 7 and 9 of the rest team members on the same team in the same season for multiple times . Therefore , it might be easier for them to maintain the moment and chemistry of the team which is critical to winning the game .
B . Quantitative Evaluations . Besides the above case studies , we also perform quantitative evaluations . Recall that we have two design objectives for our Team Member Replacement problem , including both the skill match and the structural match . Our quantitative evaluations focus on the following two aspects . First , we examine whether simultaneously considering both design objectives outperform only considering one of them . Second , we evaluate to what extent our graph kernel formulation outperforms other alternative choices , in order to fulfill both design objectives ( ie , the skill match and the structural match ) . To be specific , we compare to the following alternative methods , including ( a ) only with structure matching and not including L× in Eq ( 2 ) ( Graph Only),(b ) only with skill matching and using cosine similarity of skill vectors as scores ( Skill Only ) , ( c ) using the weighted sum of scores by ‘Skill Only’ and ‘Graph Only’ ( Linear Combination ) , ( d ) using the multiplication of the two ( Multiplicative Combination ) , and ( e ) first picking those with high ‘Skill Only’ scores and then ranking them by ‘Graph Only’ scores ( Sequential Filtering ) .
User studies . We perform a user study with 20 people aged from 22 to 35 as follows . We choose 10 papers from various fields , replace one author of each paper , run our method and the first two comparison methods , and each of them recommends top five candidates . Then , we mix the outputs ( 15 recommendations in total ) and ask users to ( a ) mark exactly one best replacement ; ( b ) mark all good replacements from the list of 15 recommended candidates . The results are presented in Fig 2 , Fig 3 and Fig 4 , respectively . As we can see from these figures , the proposed method ( the green bar ) is best in terms of both precision and recall . For example , the average recalls by our method , by ‘Graph Only’ and by ‘Skill Only’ are 55 % , 28 % , 17 % , respectively . As for different papers , our method wins 9 out of 10 cases ( except for ‘paper 2’ where ‘Skill Only’ is best ) .
Author alias prediction . In DBLP , some researchers might have multiple name identities/alias . For example , in some papers , Alexander J . Smola might be listed as Alex J . Smola , Zhongfei ( Mark ) Zhang might be listed as Zhongfei Zhang , etc . For such an author , we run the team replacement algorithm on those papers s/he was involved to find top k replacement . If his/her other alias appears in the top k recommended list , we treat it as a hit . The average accuracy of different methods is shown in Fig 5 . Again , our method performs best it outperforms both the methods that consider only one design objective ( ‘skill only’ and ‘graph only’ ) ; and that use alternative ad hoc methods to combine both skill and structural match ( ‘linear combination’ , ‘multiplicative combination’ and ‘sequential filtering’ ) . 5.3 Efficiency Results
A . The speed up by pruning . To demonstrate the benefit of our pruning strategy , we run TeamRep Basic with and without pruning on the three datasets and compare their running time . For DBLP , we choose the authors of paper [ 29 ] ( 6 authors ) ; for Movie , we select the film crew of Titanic ( 1997 ) ( 22 actors/actresses ) ; for NBA , we pick the players on the Los Angeles Lakers in year 1996 ( 17 players ) . The result is presented in Fig 6 . As we can see , the pruning step itself brings significant savings in terms of running time , especially for larger graphs ( eg , DBLP and Movie ) . Notice that according to Lemma 1 , we do not sacrifice any recommendation accuracy by pruning .
B . Further speedup . Next , we vary the team sizes and compare the running time of TeamRep Basic with TeamRepFast Exact(exact methods ) ; and Ark L [ 24 ] with TeamRepFast Approx ( approximate methods ) . For TeamRep Basic and Ark L , we apply the same pruning step as their preprocessing step . The results on DBLP are presented in Fig 7 and Fig 8 , respectively . We can see that the proposed TeamRep Fast Exact and TeamRep Fast Approx are much faster than their alternative choices , especially when
1
0.8
0.6
0.4
0.2 y c a r u c c A e g a r e v A
0 0
100000
10000 l
) e a c s g o l ( s d n o c e S n i e m T i
Ours Graph Only Skill Only Linear Combination Multiplicative Combination Sequential Filtering
20
40
Budget k
60
80
100
1000
100
10
1 without pruningwith pruning
12xfaster
3xfaster
1,709xfaster
DBLP
Movie
NBA
Figure 5 : Average accuracy vs . budget k . Higher is better .
Figure 6 : Time Comparisons before and after pruning on three datasets . Notice time is in log scale .
5 x 104 s d n o c e S n i e m T i
4
3
2
1
0 0
TEAMREP−BASIC after pruning TEAMREP−FAST−EXACT
7x faster
Ark−L after pruning TEAMREP−FAST−APPROX
× 104
0.5
0.4
0.3
0.2
0.1 s d n o c e S n i e m T i
20
40 60 Team Size
80
100
0 0
100
200
300
Team Size
400
500
Figure 7 : Time Comparison between TeamRep Basic and TeamRep Fast Exact . TeamRep Fast Exact is on average 3× faster . TeamRep Basic takes more than 10 hours when team size = 70 .
Figure 8 : Time Comparisons between Ark L[20 ] and TeamRep Fast Approx . TeamRep Fast Approx is on average 3× faster . . team size is large . Notice that Ark L is the best known method for approximating random walk based graph kernel . C . Scalability . To test the scalability of our TeamRepFast Exact and TeamRep Fast Approx algorithms , we sample a certain percentage of edges from the entire DBLP network and run the two proposed algorithms on teams with different sizes . The results are presented in Fig 9 and Fig 10 , respectively . As we can seen , both algorithms enjoy a sub linear scalability wrt the total number of edges of the input graph ( m ) .
6 . RELATED WORK
In this section , we review the related work in terms of ( a ) team formation , ( b ) recommendation and expert finding , and ( c ) graph kernel .
Team Formation . Team formation studies the problem of assembling a team of people to work on a project . To ensure success , the selected team members should possess the desired skills and have strong team cohesion , which is first studied in [ 28 ] . As follow up work , Anagnostopoulos et al [ 1 ] studies forming teams to accommodate a sequence of tasks arriving in an online fashion and Rangapuram et al [ 34 ] allows incorporating many realistic requirements into team formation based on a generalization of the densest subgraph problem . With the presence of the underlying social network , the set cover problem is complicated by the goal of lowering the communication cost at the same time . Bog danov et al [ 3 ] studies how to extract a diversified group pulled from strong cliques given a network ; this ensures that the group is both comprehensive and representative of the whole network . Cummings and Kiesler [ 10 ] find that prior working experience is the best predictor of collaborative tie strength . To provide insights into designs of online communities and organizations , the systematic differences in appropriating social softwares among different online enterprise communities is analyzed in [ 32 ] . The patterns of informal networks and communication in distributed global software teams using social network analysis is also investigated in [ 9 ] . Specific communication structures are proven critical to new product development delivery performance and quality [ 8 ] . To assess the skills of players and teams in online multi player games and team based sports , “ team chemistry ” is also accounted for in [ 12 , 11 ] .
Recommendation and Expert Finding . Recommendation and expert finding is a very active research topic in data mining and information retrieval , either to recommend products a user is mostly interested in or to identify the most knowledgeable people in a field . Our work is related to this in the sense that we aim to recommend top candidates who are most suitable for the vacancy . A popular method in recommendation ( collaborative filtering ) is latent factor model [ 27 , 14 , 42 ] . The basic idea is to apply matrix factorization to user item rating data to identify the latent factors . The factorization technique can be naturally s d n o c e S n i e m T i
2000
1500
1000
500
0 0
Team Size=50 Team Size=40 Team Size=30 Team Size=20 Team Size=10
0.5
1
1.5
# of edges
2
2.5
3 x 106 s d n o c e S n i e m T i
70
60
50
40
30
20
10
0 0
Team Size=100 Team Size=80 Team Size=60 Team Size=40 Team Size=20
0.5
1
1.5
# of edges
2
2.5
3 x 106
Figure 9 : Running time of TeamRep Fast Exact vs . graph size . TeamRep Fast Exact scales sub linearly wrt the number of edges of the input graph .
Figure 10 : Running time vs . graph size . TeamRep FastApprox scales sub linearly wrt the number of edges of the input graph . extended by adding biases , temporal dynamics and varying confidence levels . In question answering sites , eg , Quora and Stack Overflow , an important task is to route a newly posted question to the ‘right’ user with appropriate expertise and several methods based on link analysis have been proposed [ 45 , 6 , 46 ] . In academia , identifying experts in a research field is of great value , eg , assigning papers to the right reviewers in a peer review process [ 31 , 25 ] , which can be done by either building the co author network [ 29 ] or using language model and topic based model [ 13 , 20 ] . For enterprises , finding the desired specialist can greatly reduce costs and facilitate the ongoing projects . Many methods have been proposed to expert search through an organization ’s document repository [ 2 , 43 ] .
Graph Kernel . Graph kernel measures the similarity between two graphs . Typical applications include automated reasoning [ 39 ] , bioinformatics/chemoinformatics [ 16 , 36 ] . Generally speaking , graph kernels can be categorized into three classes : kernels based on walks [ 17 , 40 , 41 , 18 , 4 ] , kernels based on limited sized subgraphs [ 23 , 37 , 26 ] and kernels based on subtree patterns [ 30 , 35 , 21 ] . Graph kernels based on random walk is one of the most successful choices [ 5 ] . The idea is to perform simultaneous walks on the two graphs and count the number of matching walks . One challenge of random walk based graph kernel lies in computation . The straight forward method needs O(n6 ) in time . For unlabelled graphs , the time complexity can be reduced to O(n3 ) by reducing to the problem of solving a linear system [ 40 , 41 ] . With low rank approximation , the computation can be further accelerated with high approximation accuracy [ 24 ] .
7 . CONCLUSION
In this paper , we study the problem of Team Member Replacement to recommend replacement when a critical team member becomes unavailable . To our best knowledge , we are the first to study this problem . The basic idea of our method is to adopt graph kernel to encode both skill matching and structural matching . To address the computational challenges , we propose a suite of fast and scalable algorithms . Extensive experiments on real world datasets validate the effectiveness and efficiency of our algorithms . To be specific , ( a ) by bringing skill matching and structural matching together , our method is significantly better than the alternative choices in terms of both average precision ( 24 % better ) and recall ( 27 % better ) ; and ( b ) our fast algorithms are orders of magnitude faster while enjoying a sub linear scalability .
This paper has presented an efficient technique in addressing the team replacement challenge ; however , the proposed method can be applied to general graph mining problem where the interaction of multiple objectives is critical , eg , finding a similar multimedia object by considering both its content and relationship with other objects . In the future , we would like to expand team replacement to team enhancement and team composition . For instance , given the structure of a high grossing movie ( eg , Saving Private Ryan ) of a particular genre , we want to develop an effective algorithm to suggest a team of actors .
8 . ACKNOWLEDGMENTS
This material is supported by the National Science Foundation under Grant No . IIS1017415 , by the Army Research Laboratory under Cooperative Agreement Number W911NF09 2 0053 , by Defense Advanced Research Projects Agency ( DARPA ) under Contract Number W911NF 11 C 0200 and W911NF 12 C 0028 , by National Institutes of Health under the grant number R01LM011986 , Region II University Transportation Center under the project number 49997 33 25 . The content of the information in this document does not necessarily reflect the position or the policy of the Government , and no official endorsement should be inferred . The US Government is authorized to reproduce and distribute reprints for Government purposes notwithstanding any copyright notation here on .
References [ 1 ] A . Anagnostopoulos , L . Becchetti , C . Castillo , A . Gionis , and S . Leonardi . Online team formation in social networks . In WWW , pages 839–848 , 2012 .
[ 2 ] K . Balog , L . Azzopardi , and M . de Rijke . Formal models for expert finding in enterprise corpora . In SIGIR , pages 43–50 , 2006 .
[ 3 ] P . Bogdanov , B . Baumer , P . Basu , A . Bar Noy , and A . K .
Singh . As strong as the weakest link : Mining diverse cliques in weighted graphs . In ECML/PKDD ( 1 ) , pages 525–540 , 2013 .
[ 4 ] K . M . Borgwardt and H P Kriegel . Shortest path kernels
[ 26 ] R . I . Kondor , N . Shervashidze , and K . M . Borgwardt . The on graphs . In ICDM , pages 74–81 , 2005 . graphlet spectrum . In ICML , page 67 , 2009 .
[ 5 ] K . M . Borgwardt , H P Kriegel , S . V . N . Vishwanathan , and N . Schraudolph . Graph kernels for disease outcome prediction from protein protein interaction networks . In Pacific Symposium on Biocomputing , 2007 .
[ 6 ] M . Bouguessa , B . Dumoulin , and S . Wang . Identifying authoritative actors in question answering forums : the case of yahoo! answers . In KDD , pages 866–874 , 2008 .
[ 7 ] N . Cao , Y R Lin , L . Li , and H . Tong . g Miner : Interactive visual group mining on multivariate graphs . In CHI , 2015 .
[ 8 ] M . Cataldo and K . Ehrlich . The impact of communication structure on new product development outcomes . In CHI , pages 3081–3090 , 2012 .
[ 9 ] K . Chang and K . Ehrlich . Out of sight but not out of mind ? : Informal networks , communication and media use in global software teams . In CASCON , pages 86–97 , 2007 .
[ 10 ] J . N . Cummings and S . B . Kiesler . Who collaborates successfully ? : prior experience reduces collaboration barriers in distributed interdisciplinary research . In CSCW , pages 437–446 , 2008 .
[ 11 ] C . DeLong and J . Srivastava . Teamskill evolved : Mixed classification schemes for team based multi player games . In PAKDD ( 1 ) , pages 26–37 , 2012 .
[ 12 ] C . DeLong , L . G . Terveen , and J . Srivastava . Teamskill and the nba : applying lessons from virtual worlds to the real world . In ASONAM , pages 156–161 , 2013 .
[ 13 ] H . Deng , I . King , and M . R . Lyu . Formal models for expert finding on dblp bibliography data . In ICDM , pages 163–172 , 2008 .
[ 14 ] G . Dror , N . Koenigstein , and Y . Koren . Web scale media recommendation systems . Proceedings of the IEEE , 100(9):2722–2736 , 2012 .
[ 15 ] Q . Du , V . Faber , and M . Gunzburger . Centroidal voronoi tessellations : applications and algorithms . SIAM review , 41(4):637–676 , 1999 .
[ 16 ] A . Feragen , N . Kasenburg , J . Petersen , M . de Bruijne , and
K . M . Borgwardt . Scalable kernels for graphs with continuous attributes . In NIPS , pages 216–224 , 2013 .
[ 17 ] T . G¨artner , P . A . Flach , and S . Wrobel . On graph kernels : Hardness results and efficient alternatives . In COLT , pages 129–143 , 2003 .
[ 18 ] T . G¨artner , J . W . Lloyd , and P . A . Flach . Kernels and distances for structured data . Machine Learning , 57(3):205–232 , 2004 .
[ 19 ] G . Golub and C . Van Loan . Matrix computations . 1996 .
[ 20 ] S . H . Hashemi , M . Neshati , and H . Beigy . Expertise retrieval in bibliographic network : a topic dominance learning approach . In CIKM , pages 1117–1126 , 2013 .
[ 21 ] S . Hido and H . Kashima . A linear time graph kernel . In
ICDM , pages 179–188 , 2009 .
[ 22 ] P . J . Hinds , K . M . Carley , D . Krackhardt , and D . Wholey .
Choosing work group members : Balancing similarity , competence , and familiarity . In Organizational Behavior and Human Decision Processes , pages 226–251 , 2000 .
[ 23 ] T . Horv´ath , T . G¨artner , and S . Wrobel . Cyclic pattern kernels for predictive graph mining . In KDD , pages 158–167 , 2004 .
[ 24 ] U . Kang , H . Tong , and J . Sun . Fast random walk graph kernel . In SDM , pages 828–838 , 2012 .
[ 25 ] M . Karimzadehgan and C . Zhai . Constrained multi aspect expertise matching for committee review assignment . In CIKM , pages 1697–1700 , 2009 .
[ 27 ] Y . Koren , R . M . Bell , and C . Volinsky . Matrix factorization techniques for recommender systems . IEEE Computer , 42(8):30–37 , 2009 .
[ 28 ] T . Lappas , K . Liu , and E . Terzi . Finding a team of experts in social networks . In KDD , pages 467–476 , 2009 .
[ 29 ] J Z Li , J . Tang , J . Zhang , Q . Luo , Y . Liu , and M . Hong .
Eos : expertise oriented search using social networks . In WWW , pages 1271–1272 , 2007 .
[ 30 ] P . Mah´e , N . Ueda , T . Akutsu , J L Perret , and J P Vert . Graph kernels for molecular structure activity relationship analysis with support vector machines . Journal of Chemical Information and Modeling , 45(4):939–951 , 2005 .
[ 31 ] D . M . Mimno and A . McCallum . Expertise modeling for matching papers with reviewers . In KDD , pages 500–509 , 2007 .
[ 32 ] M . Muller , K . Ehrlich , T . Matthews , A . Perer , I . Ronen , and I . Guy . Diversity among enterprise online communities : collaborating , teaming , and innovating through social media . In CHI , pages 2815–2824 , 2012 .
[ 33 ] J . Pei , H . Wang , J . Liu , K . Wang , J . Wang , and P . S . Yu .
Discovering frequent closed partial orders from strings . IEEE Trans . Knowl . Data Eng . , 18(11):1467–1481 , 2006 .
[ 34 ] S . S . Rangapuram , T . B¨uhler , and M . Hein . Towards realistic team formation in social networks based on densest subgraphs . In WWW , pages 1077–1088 , 2013 .
[ 35 ] N . Shervashidze and K . M . Borgwardt . Fast subtree kernels on graphs . NIPS , 2009 .
[ 36 ] N . Shervashidze , P . Schweitzer , E . J . van Leeuwen ,
K . Mehlhorn , and K . M . Borgwardt . Weisfeiler lehman graph kernels . Journal of Machine Learning Research , 12:2539–2561 , 2011 .
[ 37 ] N . Shervashidze , S . V . N . Vishwanathan , T . Petri ,
K . Mehlhorn , and K . M . Borgwardt . Efficient graphlet kernels for large graph comparison . Journal of Machine Learning Research Proceedings Track , 5:488–495 , 2009 .
[ 38 ] H . A . Simon . The Sciences of the Artificial ( 3rd Ed ) MIT
Press , Cambridge , MA , USA , 1996 .
[ 39 ] E . Tsivtsivadze , J . Urban , H . Geuvers , and T . Heskes .
Semantic graph kernels for automated reasoning . In SDM , pages 795–803 , 2011 .
[ 40 ] S . V . N . Vishwanathan , K . M . Borgwardt , and N . N .
Schraudolph . Fast computation of graph kernels . In NIPS , pages 1449–1456 , 2006 .
[ 41 ] S . V . N . Vishwanathan , N . N . Schraudolph , R . Kondor , and K . M . Borgwardt . Graph kernels . The Journal of Machine Learning Research , 99:1201–1242 , 2010 .
[ 42 ] C . Wang and D . M . Blei . Collaborative topic modeling for recommending scientific articles . In KDD , pages 448–456 , 2011 .
[ 43 ] S . Wu , J . Sun , and J . Tang . Patent partner recommendation in enterprise social networks . In WSDM , pages 43–52 , 2013 .
[ 44 ] R . Zadeh , A . D . Balakrishnan , S . B . Kiesler , and J . N .
Cummings . What ’s in a move ? : normal disruption and a design challenge . In CHI , pages 2897–2906 , 2011 .
[ 45 ] J . Zhang , M . S . Ackerman , and L . A . Adamic . Expertise networks in online communities : structure and algorithms . In WWW , pages 221–230 , 2007 .
[ 46 ] G . Zhou , S . Lai , K . Liu , and J . Zhao . Topic sensitive probabilistic model for expert finding in question answer communities . In CIKM , pages 1662–1666 , 2012 .
