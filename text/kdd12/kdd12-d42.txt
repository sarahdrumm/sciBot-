Constructing Popular Routes from Uncertain Trajectories
Ling Yin Wei
National Chiao Tung University
Hsinchu , Taiwan
Yu Zheng
Microsoft Research Asia
Beijing , China
Wen Chih Peng
National Chiao Tung University
Hsinchu , Taiwan lyweics95g@nctuedutw yuzheng@microsoft.com wcpeng@csnctuedutw
ABSTRACT The advances in location acquisition technologies have led to a myriad of spatial trajectories . These trajectories are usually generated at a low or an irregular frequency due to applications’ characteristics or energy saving , leaving the routes between two consecutive points of a single trajectory uncertain ( called an uncertain trajectory ) . In this paper , we present a Route Inference framework based on Collective Knowledge ( abbreviated as RICK ) to construct the popular routes from uncertain trajectories . Explicitly , given a location sequence and a time span , the RICK is able to construct the top k routes which sequentially pass through the locations within the specified time span , by aggregating such uncertain trajectories in a mutual reinforcement way ( ie , uncertain + uncertain → certain ) . Our work can benefit trip planning , traffic management , and animal movement studies . The RICK comprises two components : routable graph construction and route inference . First , we explore the spatial and temporal characteristics of uncertain trajectories and construct a routable graph by collaborative learning among the uncertain trajectories . Second , in light of the routable graph , we propose a routing algorithm to construct the top k routes according to a userspecified query . We have conducted extensive experiments on two real datasets , consisting of Foursquare check in datasets and taxi trajectories . The results show that RICK is both effective and efficient . Categories and Subject Descriptors H28 [ Database Management ] : Database Applications – data mining , spatial databases and GIS . General Terms Algorithms , Design , Experimentation . Keywords Collaborative learning , trajectory data mining , route inference , social media . 1 . INTRODUCTION The increasing availability of location acquisition technology ( eg , GPS ) , has led to a huge volume of spatial trajectories that represent the movement routes of humans , animals , hurricanes , and vehicles . Without loss of generality , a trajectory is a sequence of data points where each data point records location information and a time stamp [ 18 ] . For example , the driving routes of vehicles and migratory routes of animals are usually recorded by GPS trajectories . Meanwhile , users could perform check in services ( eg , Foursquare ) to note their locations via a mobile phone and share their photos and activities . The time ordered check in records of a user are able to be expressed by trajectories . Moreover , on a photo sharing website ( eg , Flickr ) , people share geotagged photos whose time stamps and geolocations can be represented as trajectories as well . However , these trajectories are usually generated at a low frequency due to energy saving and features of applications , resulting in the uncertainty of a moving object ’s mobility in a trajectory . Figure 1 shows statistic information from Foursquare datasets in Manhattan . As shown in Figure 1(a ) , most check in time intervals vary from 1 to 180 minutes . Moreover , we further investigate the distances among these check in records . The medians of the distances between two check in records are less than two kilometers in Figure 1(b ) . The above two observations show that even in Manhattan , which has a lot of tourists , the uncertain routes apparently exist between two check in records . o i t a r y c n e u q e r f e v i t l a u m u c c A
1
0.8
0.6
0.4
0.2
0
1
5
4
3
2
1
0
) m k n i ( s e c n a t s D i
1
300
60
30 150 Check in time interval ( in minute )
120
90
60
240
120
180
Check in time interval ( in minute )
( a ) ( b )
Figure 1 . Observations from Foursquare datasets .
1q tra tra 1 2
1q
2q
180
2q tra tra 1 2 tra 3 tra 4
( a ) Uncertain trajectories ( b ) Simple concatenation 2q
2q
1q ( c ) Uncertain trajectories ( d ) Mutual reinforcement Figure 2 . Examples of uncertain trajectories .
1q
These low sampled trajectories do not detail the routes , and raise uncertain routes between two consecutive sampled points in the trajectories . In this paper , we call such trajectories uncertain trajectories . Examples of uncertain trajectories are illustrated in
Figure 2 . Figure 2(a ) shows two check in trajectories , ( cid:1853):A(cid:1372 ) C(cid:1372)D and ( cid:1853)(cid:2870):D(cid:1372)B , in a rural space ( ie , road network ( cid:1869 ) to ( cid:1869)(cid:2870 ) , he/she may have no idea of how to travel without the aid of road networks or by referring to a trajectory ( eg , ( cid:1853 ) or ( cid:1853)(cid:2870) ) . information is not available ) . If a tourist would like to travel from
In addition , given one migratory trajectory of a bird , we do not know where the bird flew between two sampled points which are
195 several miles away from each other . Due to the uncertainty of low sampled trajectories , how to derive detailed routes from uncertain trajectories is an important task . The prior work [ 16 ] proposed a framework to discover the routes from historical trajectories . Explicitly , given a set of historical trajectories , an underlying road network , and a location sequence , the work aims to suggest the top k possible routes sequentially passing the queried locations . Note that by the aid of the given road network , the work explores possible routes derived from road networks . However , for some applications ( eg , animal migration routes or hurricane routes ) , road network information is not available . As for check in datasets and geo photo datasets , the service providers may not have road network information either . Without road network information , the work [ 16 ] cannot derive the top k routes . In this paper , without road network information , we propose a Route Inference framework based on Collective Knowledge ( abbreviated as RICK ) to construct the popular routes from uncertain trajectories . Explicitly , given a location sequence and a time span , RICK constructs the top k routes , sequentially passing the locations within the specified time span . The RICK is beneficial for many practical applications . Examples of applications are trip planning [ 2,5,7,8,15,17 ] , animal movement behavior studies [ 9 ] and traffic flow analysis [ 14 ] . For example , a user plans to take a tour that consists of three attractions ( eg , the Temple of Heaven , the Palace Museum and the Houhai Bar Street in Figure 3(a ) ) in Beijing , while having no idea of how to travel around them . At this moment , the RICK can recommend the popular travel route , inferred from check in records ( or geotagged photos ) generated by other tourists . Another example in Figure 3(b ) is to help biologists discover birds’ moving behaviors from uncertain trajectories . function and proposed a routing algorithm to construct the top k routes ( eg , the dashed curve in Figure 2(d ) ) satisfying the query . We have conducted extensive experiments on two real datasets and the results show the effectiveness and efficiency of the RICK . The contributions of this paper are summarized as follows :  Without the aid of road networks , we develop a route inference framework to infer routes from uncertain trajectories .  We propose a routable graph with routing information , generated by exploring spatio temporal correlations among uncertain trajectories .
 In light of the routable graph , we define a route score function and develop a routing algorithm to construct the top k routes .  We have conducted extensive experiments using real datasets of 15,000 driving trajectories and 6,600 check in sequences . The results indicate the RICK is effective and efficient .
The remainder of the paper is organized as follows . Section 2 gives the preliminary of our work . Section 3 illustrates the routable graph construction . Section 4 details the route inference . Section 5 presents the experimental results . Section 6 reviews related work . Section 7 concludes the paper . 2 . PRELIMINARY We present some terms and the problem addressed in this paper , and then overview the proposed framework .
Definition 1 ( Trajectory ) : A trajectory ( cid:1853 ) is a time ordered sequence of sampled points , ie , ( cid:1853):(cid:1868)(cid:1372)(cid:1868)(cid:2870)(cid:1372)(cid:1710)(cid:1372)(cid:1868 ) . Each point ( cid:1868)(cid:3038)(cid:1488)(cid:1853 ) is represented by ( (cid:1868)(cid:3038)(cid:1864),(cid:1868)(cid:3038 ) ) where(cid:1868)(cid:3038).(cid:1864 ) is a geographic coordinate ( a location for short ) at a time stamp ( cid:1868)(cid:3038 )
As discussed before , trajectories are usually generated at a low sampling rate , leading to the real route between two consecutive points of a trajectory being uncertain . If a time interval between two consecutive sampled points is large , the uncertainty of the route between the two points would increase . In this paper , we further claim that road networks are not always available for inferring routes between two locations . For animal trace data and outdoor activities in urban areas , the movements are not along road networks . Thus , our problem is defined as follows : Problem : Given an uncertain trajectory dataset D and a user specified query consisting of a time span ∆ and a location sequence ( cid:1869):(cid:1869)(cid:1372)(cid:1869)(cid:2870)(cid:1372)(cid:1710)(cid:1372)(cid:1869)(cid:3040 ) , we infer the top k popular two consecutive query locations is within ∆ . routes in a free space such that each route sequentially traverses the given locations , and the travel time of the route between any
Figure 4 overviews our framework RICK , which consists of two components : routable graph construction and route inference . Routable graph construction : This offline component builds up a routable graph from an uncertain trajectory dataset . To generate a routable graph , there are two stages : region construction and edge inference . First , we partition the space into disjoint cells and then index the given uncertain trajectories in the gridded space . By exploring the spatio temporal characteristics of the uncertain trajectories passing these cells , we merge these individual cells to form some geographical regions . Here , each cell forms a vertex in the routable graph that we are going to build up . Second , we infer the edges between the cells with the uncertain trajectories . These edges can be categorized into two types : they are inside a region or they are between regions . The information inferred for an edge comprises a moving direction , a transition support , and a travel time , indicating the transition relationship between two cells .
( a ) ( b ) Figure 3 . Scenarios of applications .
To infer routes from uncertain trajectories , in many cases , we need to construct a route based on segments from multiple uncertain trajectories as there is no historical trajectory passing all the queried locations . For instance , in Figure 2(a ) , ( cid:1853 ) and ( cid:1853)(cid:2870 ) do not pass through both ( cid:1869 ) and ( cid:1869)(cid:2870 ) . If a tourist would like to travel from ( cid:1869 ) to ( cid:1869)(cid:2870 ) , existing trip planning [ 1,7,15,17 ] could A(cid:1372)C(cid:1372)D(cid:1372)B by concatenation in Figure 2(b ) . However , the explore the sequential relations among these places and derive distances between two consecutive locations are still far away and a travel route still cannot be derived according to the users’ trajectory . In addition , one could extract the trajectories that capture similar movements . However , due to the sparseness of data points in uncertain trajectories , two uncertain trajectories usually have totally different geospatial representations even though the two trajectories follow the same route or have the same subroutes ( ie , are correlated ) . As such , the similarity between two uncertain trajectories is hard to measure . In this paper , given a set of uncertain trajectories ( eg , Figure 2(c) ) , a routable graph ( eg , the blue part in Figure 2(d ) ) is generated for indicating routing information in a free space by exploring spatio temporally correlated uncertain trajectories . In light of the routable graph , we have designed a route score
196 Route inference : This component , consisting of the route generation and the route refinement , is responsible for on line queries . In the route generation stage , given a query , we propose a routing algorithm to infer the top k rough routes , each of which is represented by a sequence of cells , with the constructed graph . The routing algorithm first finds out the qualified subroutes between any then concatenates these subroutes into completed routes in a branchand bound manner . In addition , we define a score function based on historical movements for ranking these routes . In the route refinement stage , we further refine each rough route to derive a detailed route represented by a sequence of consecutive segments from historical data points of uncertain trajectories . two consecutive query locations , and
Figure 4 . Overview of RICK .
Symbol
Description
Table 1 . Notations
The jth point in trajectory i
The cell that ( cid:1868 ) locates in
( cid:1868 ) ( cid:1868).g ( cid:2286)(cid:4666)g ( cid:1372)g’ , ( cid:1853)(cid:4667 ) A set of the travel times from g to g’ by ( cid:1853 )
A cell id The number of distinct trajectories traversing ( x,y ) A temporal constraint A minimum connection support
( x,y ) c(x,y )
θ C three times are travel times between two consecutive points . The two trajectories follow the same route ( eg , the black solid line ) .
( cid:4657)(cid:1755)(cid:1755)(cid:1755)(cid:1755)(cid:4654)(cid:1868)(cid:2870)(cid:2870 ) ( cid:3040)(cid:3046 ) trajectories , ( cid:1853 ) : ( cid:1868 ) ( cid:3040)(cid:3046 ) ( cid:4657)(cid:1755)(cid:1755)(cid:1755)(cid:1755)(cid:4654)(cid:1868)(cid:2871)(cid:2870 ) , and ( cid:1853)(cid:2871 ) : ( cid:1868)(cid:2871)(cid:2871 ) ( cid:3040)(cid:3046 )
3 . ROUTABLE GRAPH CONSTRUCTION 3.1 Region Construction To construct a routable graph , we discover connected geographical areas by collaborative learning among historical uncertain trajectories . We first observe the spatial and temporal characteristics of the uncertain trajectories . For instance , Figure 5(a ) shows
( cid:4657)(cid:1755)(cid:1755)(cid:1755)(cid:1755)(cid:4654)(cid:1868)(cid:2870)(cid:2870 ) ( cid:3040)(cid:3046 ) ( cid:4657)(cid:1755)(cid:1755)(cid:1755)(cid:1755)(cid:4654)(cid:1868)(cid:2871 ) , ( cid:4657)(cid:1755)(cid:1755)(cid:1755)(cid:1755)(cid:4654)(cid:1868)(cid:2870)(cid:2871 ) , where ( cid:1853)(cid:2870 ) : ( cid:1868)(cid:2870)(cid:2871 ) ( cid:3040)(cid:3046 ) locations of data points of ( cid:1853 ) and ( cid:1853)(cid:2870 ) are different even if the We observe that 1 ) ( cid:1868)(cid:2870).(cid:1864 ) and ( cid:1868)(cid:2870)(cid:2870).(cid:1864 ) are at the same place ; 2 ) ( cid:1853 ) and ( cid:1853)(cid:2870 ) have similar travel times from their first points ( eg , ( cid:1868 ) , ( cid:1868)(cid:2870 ) ) to the place ; 3 ) ( cid:1868).(cid:1864 ) and ( cid:1868)(cid:2870).(cid:1864 ) are spatially close . The observations indicate that the route of ( cid:1853 ) from ( cid:1868 ) to ( cid:1868)(cid:2870 ) and the route of ( cid:1853)(cid:2870 ) from ( cid:1868)(cid:2870 ) to ( cid:1868)(cid:2870)(cid:2870 ) may be the same . We say that the two subtrajectories ( cid:1868)(cid:1372)(cid:1868)(cid:2870 ) and ( cid:1868)(cid:2870)(cid:1372)(cid:1868)(cid:2870)(cid:2870 ) are spatio temporally correlated ( st correlated ) . Moreover , if ( cid:1868 ) and ( cid:1868)(cid:2870 ) are sampled on the same route , ( cid:1868).(cid:1864 ) and ( cid:1868)(cid:2870).(cid:1864 ) could be connected . Specifically , this means that there exists at least one route between ( cid:1868).(cid:1864 ) and ( cid:1868)(cid:2870)(cid:1864 ) On the other hand , in Figure 5(a ) , although ( cid:1868)(cid:2870).(cid:1864 ) and ( cid:1868)(cid:2870)(cid:2871).(cid:1864 ) are at the same place and ( cid:1868 ) and ( cid:1868)(cid:2871 ) are spatially close , ( cid:1853)(cid:2871 ) may be reason is that ( cid:1853)(cid:2871 ) has a longer travel time from ( cid:1868)(cid:2870)(cid:2871 ) to ( cid:1868)(cid:2871 ) . sampled from the other route ( e.g , the green dotted line ) . The
3p 1
3p 2
2p 1
2p 3 2p 2
1p 1
1p 3
3p 1
3p 2
2p 1 2p 2
1p 1
1p 2
1p 2
( a ) ( b )
To explore connected geographical areas , we formally define st
Definition 2 ( Spatio temporally correlated relation ) : Given two
Moreover , each point of an uncertain trajectory can be mapped into a cell , and an uncertain trajectory can be transformed into a sequence of cells . As such , given an uncertain trajectory
Figure 5 . Spatio temporally correlated uncertain trajectories . Based on the aforementioned observations , we define some terms for constructing connected geographical areas . Table 1 summarizes the notations used in this paper . To clearly describe spatial relations among data points of uncertain trajectories , we adopt a gridded space . First , we divide a geographical range into disjoint cells by a given cell length l . The set of the cells is denoted as ( cid:2273 ) , and the GID of a cell g is represented by ( cid:4666)(cid:1876),(cid:1877)(cid:4667 ) . ( cid:1853):(cid:1868)(cid:1372)(cid:1868)(cid:2870)(cid:1372)(cid:1710)(cid:1372)(cid:1868 ) , the trajectory can be transformed into ( cid:1868)g(cid:1372)(cid:1868)(cid:2870)g(cid:1372)(cid:1710)(cid:1372)(cid:1868)g , where ( cid:1868)(cid:3038).g represents the cell that ( cid:1868)(cid:3038).(cid:1864 ) locates in . Given two cells g(cid:4666)(cid:1876),(cid:1877)(cid:4667 ) and g′(cid:4666)(cid:1876)(cid:1314),(cid:1877)(cid:4593)(cid:4667 ) , the cells g and g′ are called spatially close if |(cid:1876)(cid:1876)(cid:4593)|1 and |(cid:1877)(cid:1877)(cid:4593)|1 . correlated relations among uncertain trajectories . Given a cell g , if g ( cid:1868)(cid:3038).g for some ( cid:1868)(cid:3038 ) ( cid:1488)(cid:1853 ) , we say that ( cid:1853 ) traverses cell g , denoted g(cid:1488)(cid:1853 ) . If ( cid:1853 ) traverses from cell g to cell g’ , we say g ( cid:1372)g’ ( cid:1488)(cid:1853 ) . The set of the travel times of g ( cid:1372)g’ by ( cid:1853 ) is denoted by ( cid:2286)(cid:4666)g ( cid:1372)g’ , ( cid:1853)(cid:4667 ) . If g ( cid:1372)g’ ( cid:1488)(cid:1853 ) , ( cid:2286)(cid:4672)g ( cid:1372)g’ ,(cid:1853)(cid:4673)(cid:3405)(cid:1486 ) . uncertain trajectories ( cid:1853):(cid:1868)(cid:1372)(cid:1710)(cid:1372)(cid:1868 ) and ( cid:1853):(cid:1868)(cid:1372)(cid:1710)(cid:1372)(cid:1868)(cid:3040 ) , and a temporal constraint ( cid:2016 ) , ( cid:1853 ) ’s subtrajectory ( cid:1868)(cid:3038)(cid:1372)(cid:1710)(cid:1372)(cid:1868)(cid:3038)(cid:4593 ) and ( cid:1853 ) ’s subtrajectory ( cid:1868)(cid:3035)(cid:1372)(cid:1710)(cid:1372)(cid:1868)(cid:3035)(cid:4593 ) are st correlated if 1 ) ( cid:1484 ) ∆(cid:1488)(cid:2286)(cid:4666)(cid:1868)(cid:3038)g(cid:1372)(cid:1868)(cid:3038)(cid:4594)g ,(cid:1853)(cid:4667),∆(cid:2870)(cid:1488)(cid:2286)(cid:4666)(cid:1868)(cid:3035)g(cid:1372)(cid:1868)(cid:3035)(cid:4594)g ,(cid:1853)(cid:4667 ) ( cid:2923)(cid:2911)(cid:2934)(cid:4668)∆(cid:3047)(cid:3117),∆(cid:3047)(cid:3118)(cid:4669)(cid:2016 ) ; |∆(cid:3047)(cid:3117)∆(cid:3047)(cid:3118)| Rule1 : ( cid:1868)(cid:3038).g and ( cid:1868)(cid:3035).g are spatially close , and ( cid:1868)(cid:3038)(cid:4593).g = ( cid:1868)(cid:3035)(cid:4593 ) g Rule2 : ( cid:1868)(cid:3038).g = ( cid:1868)(cid:3035).g , and ( cid:1868)(cid:3038)(cid:4593).g and ( cid:1868)(cid:3035)(cid:4593 ) .g are spatially close . Note that if a trajectory ( cid:1853)(cid:1314 ) is a subtrajectory of a trajectory tra , we denote it as ( cid:1853)(cid:1314)(cid:1603)(cid:1853 ) . correlated relation between ( cid:1853 ) and ( cid:1853)(cid:2870 ) . Let ∆(cid:1488)(cid:2286)(cid:4666)(cid:1868).g(cid:1372 ) ( cid:1868)(cid:2870).g ,(cid:1853)(cid:4667 ) and ∆(cid:2870)(cid:1488)(cid:2286)(cid:4666)(cid:1868)(cid:2870)g(cid:1372)(cid:1868)(cid:2870)(cid:2870)g ,(cid:1853)(cid:2870)(cid:4667 ) and assume ∆t and ∆t(cid:2870 ) satisfy a given temporal constraint . According to Rule 1 in Definition 2 , ( cid:1868)(cid:1372)(cid:1868)(cid:2870 ) and ( cid:1868)(cid:2870)(cid:1372)(cid:1868)(cid:2870)(cid:2870 ) are st correlated , because ( cid:1868).g and ( cid:1868)(cid:2870).g are spatially close and ( cid:1868)(cid:2870)g(cid:1868)(cid:2870)(cid:2870)g Similarly , let ∆(cid:1314)(cid:1488)(cid:2286)(cid:4666)(cid:1868)(cid:2870)g(cid:1372)(cid:1868)(cid:2871)g ,(cid:1853)(cid:4667 ) and ∆(cid:1314)(cid:2870)(cid:1488)(cid:2286)(cid:4666)(cid:1868)(cid:2870)(cid:2870)g(cid:1372)(cid:1868)(cid:2871)(cid:2870)g ,(cid:1853)(cid:2870)(cid:4667 ) and assume ∆(cid:1314 ) and ∆(cid:1314)(cid:2870 ) satisfy a given According to Rule 2 in Definition 2 , ( cid:1868)(cid:2870)(cid:1372)(cid:1868)(cid:2871 ) and ( cid:1868)(cid:2870)(cid:2870)(cid:1372)(cid:1868)(cid:2871)(cid:2870 ) are stcorrelated since ( cid:1868)(cid:2870).g =(cid:1868)(cid:2870)(cid:2870).g and ( cid:1868)(cid:2871)(cid:2870).g and ( cid:1868)(cid:2871)(cid:2870).g are spatially close . dataset D , a set of cells ( cid:2273 ) , a temporal constraint ( cid:2016 ) , and two cells g , g'(cid:1488)(cid:2273 ) , where g and g' are spatially close , the connection support of the cell pair ( g , g' ) is defined as |(cid:1846)(cid:1515)(cid:1846)(cid:2870)| where ( cid:1846)={((cid:1853),(cid:1853))|(cid:1853)(cid:1314 ) and ( cid:1853)(cid:1314 ) are st correlated , g(cid:1372)g''(cid:1488)(cid:1853)(cid:1314 ) , and g' ( cid:1372)g''(cid:1488)(cid:1853)(cid:1314 ) g' ( cid:4669 ) , ( cid:1853)(cid:1314)(cid:1603 ) ( cid:1853),(cid:1853)(cid:4593)(cid:1603)(cid:1853 ) , and ( cid:1846)(cid:2870 ) ={((cid:1853),(cid:1853 ) )|(cid:1853)(cid:1314 ) and ( cid:1853)(cid:1314 ) are st g''(cid:1488)(cid:2273)(cid:4668)g ,
Definition 3 ( Connection support ) : Given an uncertain trajectory
Given trajectories in Figure 5(a ) , Figure 5(b ) depicts the st
2 ) one of the two rules is satisfied : temporal constraint . for some st
197 for some
Definition 4 ( Neighbor ) : Given an uncertain trajectory dataset D ,
, and g'' ( cid:1372)g'(cid:1488)(cid:1853)(cid:1314 ) correlated , g''(cid:1372)g(cid:1488)(cid:1853)(cid:1314 ) g''(cid:1488)(cid:2273)(cid:4668)g , g' ( cid:4669 ) , ( cid:1853)(cid:1314)(cid:1603)(cid:1853),(cid:1853)(cid:4593)(cid:1603)(cid:1853)} . For example , in Figure 5(b ) , given ( cid:1868).g and ( cid:1868)(cid:2870).g , which are spatially close , the support of the cell pair ( (cid:1868).g , ( cid:1868)(cid:2870).g ) =|(cid:1846)(cid:1515 ) ( cid:1846)(cid:2870)|=1 because ( cid:1846 ) ={((cid:1853),(cid:1853)(cid:2870 ) )} and ( cid:1846)(cid:2870)(cid:1486 ) . Similarly , given ( cid:1868)(cid:2870).g and ( cid:1868)(cid:2871)(cid:2870).g , which are spatially close , the support of the cell pair ( (cid:1868)(cid:2871)g,(cid:1868)(cid:2871)(cid:2870)g)=|(cid:1846)(cid:1515)(cid:1846)(cid:2870)|=1 because ( cid:1846)=(cid:1486 ) and ( cid:1846)(cid:2870)={((cid:1853),(cid:1853)(cid:2870))} . a set of cells ( cid:2273 ) , two cells g , g'(cid:1488)(cid:2273 ) , a temporal constraint ( cid:2016 ) , and a cell pair ( g , g' ) is greater than or equal to C , g and g' are neighbors , denoted as g ( cid:1840)g' . Definition 5 ( Region ) : Given a set of cells ( cid:2273)(cid:1314 ) , ( cid:2273)(cid:1314 ) forms a region if for any two cells g , g' ( cid:1488)(cid:2273)(cid:1314 ) , there exists a chain of cells ( cid:4666)g(cid:4667)g g(cid:2870)(cid:1710)g(cid:3038)(cid:4666)g' ) st g(cid:1840)g for each g(cid:1488)(cid:2273)(cid:1314 ) and ( cid:1861)(cid:1488)(cid:4670)1,(cid:1863)(cid:4667 ) . pairs from the set of cells ( cid:2273 ) and then compute the connection support of each cell pair by checking other cells in ( cid:2273 ) . We then minimum connection support C , if the connection support of the
To construct regions , a naïve method is that we generate all cell
We define a region as a connected geographical area as follows : verify whether the connection supports of cell pairs satisfy the given minimum connection support C to construct regions . However , the time complexity of the method is costly . In this paper , we propose an efficient algorithm to construct regions . The proposed algorithm utilizes an index structure presented as follows . Given a cell length and an uncertain trajectory dataset D , we build up a grid index in which each cell g has a unique GID , a value ( cid:1855)(cid:4666)g(cid:4667 ) , and a corresponding trajectory list . Note that ( cid:1855)(cid:4666)g(cid:4667 ) |(cid:4668)(cid:1853)|g(cid:1488)(cid:1853),(cid:1853)(cid:1488)(cid:1830)(cid:4669)| . In the grid index , each GID indexes a corresponding trajectory list are sorted by ( cid:1865)(cid:3047)(cid:3045)(cid:3028 ) , where ( cid:1865)(cid:3047)(cid:3045)(cid:3028 ) is the median of ( cid:4668)(cid:1855)(cid:4666)(cid:1868).g(cid:4667)|(cid:1868)(cid:1488)(cid:1853)(cid:4669 ) with given ( cid:1853 ) . list of trajectories that records which uncertain trajectories traverse the cell and which points of these uncertain trajectories locate in the cell by TIDs and PIDs , respectively . To improve the efficiency of the region construction , the trajectories in a cell ’s l l
Trajectory Dataset tra1 tra2 tra3 tra4 tra5
Grid Index
GID
( 1,4 ) c(g )
3
Sorted by mtra
TID PID tra3 tra5 tra1
1
1
1
( 1,1 ) ( 1,2 ) ( 1,3 ) ( 1,4 )
( 2,1 ) ( 2,2 ) ( 2,3 ) ( 2,4 )
( 3,1 ) ( 3,2 ) ( 3,3 ) ( 3,4 )
( 4,1 ) ( 4,2 ) ( 4,3 ) ( 4,4 ) mtra 2
Transformed Trajectory
TID
Sequence of GIDs tra3
( 1,4)(1,3)(3,2)(4,1 )
Figure 6 . An example of an index structure . cell ( 1,4 ) . The trajectory list of cell ( 1,4 ) records these TIDs ( ie ,
For instance , given a cell length l and an uncertain trajectory dataset ( cid:1830)(cid:4668)(cid:1853),(cid:1853)(cid:2870),(cid:1853)(cid:2871),(cid:1853)(cid:2872),(cid:1853)(cid:2873)(cid:4669 ) , Figure 6 shows an example of an index structure . Given a cell ( cid:4666)1,4(cid:4667 ) , ( cid:1855)(cid:4666)1,4(cid:4667)=3 since three distinct uncertain trajectories ( ie , ( cid:1853),(cid:1853)(cid:2871),(cid:1853)(cid:2873 ) ) traverse ( cid:1853),(cid:1853)(cid:2871),(cid:1853)(cid:2873 ) ) and the corresponding PID of each trajectory . The corresponding PID of ( cid:1853 ) is 1 since the point of ( cid:1853 ) that locates in cell ( 1,4 ) is the first point of ( cid:1853 ) . As shown in Figure 6 , ( cid:1853)(cid:2871 ) traverses four cells ( ie , ( 1,4 ) , ( 1,3 ) , ( 3,2 ) , and ( 4,1) ) , and we median among {2 , 2 , 2 , 3} is 2 and thus ( cid:1865)(cid:3047)(cid:3045)(cid:3028)(cid:3119)=2 . Before constructing regions , we let ( cid:2273)=(cid:2273)(cid:2273)(cid:1314 ) , where ( cid:2273)(cid:1314)={g|(cid:1855)(cid:4666)g(cid:4667 ) 0 , g(cid:1488)(cid:2273)} . The algorithm of region construction is detailed in can calculate that c(1,4)=3 , c(1,3)=2 , c(3,2)=2 , and c(4,1)=2 . The
Algorithm 1 . Note that the term enclosed is defined as follows .
2 . Do
5 . Else
9 . Else
15 . Else
3 . If I is Rule1
Output : A set of regions R .
Algorithm 1 : Region Construction
Algorithm 2 : Cell Merging ( CM ) connection support C , and an indicator I Output : A region r
Input : An uncertain trajectory dataset D , a set of cells ( cid:2273 ) , a temporal constraint ( cid:2016 ) , and a minimum connection support C . 1 . ( cid:2273)(cid:1314)(cid:1370 ) Sort cells in ( cid:2273 ) in a decreasing order of ( cid:1855)(cid:4666)g(cid:4667 ) ; 3 . g ( cid:1370 ) Pop the cell from ( cid:2273)(cid:1314 ) ; 4 . Foreach tra traversing g by the order stored in the grid index 5 . ( cid:2028)(cid:4666)g(cid:4667)(cid:1370)(cid:4668)(cid:1868)|(cid:1868).gg ( cid:1853)(cid:1856 ) ( cid:1868)(cid:1488)(cid:1853)(cid:4669 ) ; 6 . Foreach ( cid:1868)(cid:1488)(cid:1853)(cid:2028)(cid:4666)g(cid:4667 ) and ( cid:1868).g is not enclosed 7 . If ( cid:1868).(cid:1859 ) is contained in some region 8 . r ( cid:1370)The region contains ( cid:1868).g ; 10 . ( cid:1370)(cid:1486 ) ; 11 . If ( cid:1868 ) is before ( cid:1868)(cid:4593 ) for all ( cid:1868)(cid:4593)(cid:1488 ) ( cid:2028)(cid:4666)g(cid:4667 ) 12 . ( cid:1370 ) CM(cid:4666),(cid:1868).g , g,(cid:2016),(cid:1829),(cid:1864)(cid:1857)1(cid:4667 ) ; 13 . ElseIf ( cid:1868 ) is after ( cid:1868)(cid:4593 ) for all ( cid:1868)(cid:4593)(cid:1488 ) ( cid:2028)(cid:4666)g(cid:4667 ) 14 . ( cid:1370 ) CM(cid:4666),(cid:1868).g , g,(cid:2016),(cid:1829),(cid:1864)(cid:1857)2(cid:4667 ) ; 16 . ( cid:1370 ) CM(cid:4666),(cid:1868).g , g,(cid:2016),(cid:1829),(cid:1864)(cid:1857)1(cid:4667 ) ; 17 . ( cid:1370 ) CM(cid:4666),(cid:1868).g , g,(cid:2016),(cid:1829),(cid:1864)(cid:1857)2(cid:4667 ) ; 18 . ( cid:1370)(cid:1515)(cid:4668)r(cid:4669 ) ; 19 . Until ( cid:2273)(cid:1314 ) is empty or each cell in ( cid:2273 ) is in some ( cid:1488 ) R ; 20 . Return ; Input : A region r , a cell ( cid:1868).g , a cell g , a temporal constraint ( cid:2016 ) , a minimum 1 . Let ( cid:1868).g(cid:4666)(cid:1876),(cid:1877)(cid:4667 ) ; 2 . Foreach cell g(cid:1314)(cid:4666)(cid:1876)(cid:1314),(cid:1877)(cid:1314)(cid:4667)(cid:1488)(cid:2273 ) where |(cid:1876)(cid:4593)(cid:1876)|1 and |(cid:1877)(cid:4593)(cid:1877)|1 4 . Verify whether ( cid:1868).g ( cid:1840)g′ is held with given g by rule 1 ; 6 . Verify whether ( cid:1868).g ( cid:1840)g′ is held with given g by rule 2 ; 7 . If ( cid:1868).g ( cid:1840)g′ 8 . If ( cid:1486 ) 9 . ( cid:1370)(cid:4668)(cid:1868).g ( cid:4669 ) ; 10 . If g′ is contained in some region 11 . ( cid:1314)(cid:1370)The region contains g′ ; 13 . ( cid:1314)(cid:1370)(cid:1486 ) 14 . ( cid:1314)(cid:1370 ) CM(cid:4666)(cid:4593),g′ , g,(cid:2016),(cid:1829),(cid:1835)(cid:4667 ) ; 15 . ( cid:1370)(cid:1515)' ; Definition 6 ( Enclosed ) : Given a set of cells ( cid:2273 ) and a cell g(cid:1488)(cid:2273 ) , the cell g is enclosed if there exists a region r ( cid:1603)(cid:2273 ) st g , g'(cid:1488 ) , ( cid:1482)g'(cid:1488){g' | g' and g are spatially close , g'(cid:1488)(cid:2273)} . connection supports of cell pairs according to ( cid:1855)(cid:4666)g(cid:4667 ) . Once a cell is illustrated in Figure 7 . Let a chosen cell be g . Assume the trajectory ( cid:1853 ) traversed it and ( cid:1868)(cid:2870)g=(cid:1868)(cid:2872)g = g ( ie , ( cid:2028)(cid:4666)g(cid:4667)(cid:4668)(cid:1868)21,(cid:1868)41(cid:4669) ) . In Step 6 , we pick a point ( eg , ( cid:1868 ) ) from ( cid:1853 ) but not the point is not in ( cid:2028)(cid:4666)g(cid:4667 ) . If the cell that the point locates in is not enclosed , the supports of the cell pairs of ( cid:1868).g and each cell around ( cid:1868).g are ( cid:1868).g , a region ( eg , the blue cells in Figure 7 ) is generated in the merged into the region around ( cid:1868).g in the second round ( ie , Step chosen , we iteratively pick a trajectory from the cell ’s trajectory list in Step 4 . We then calculate the connection supports of the cell pairs around the points of the trajectory and merge qualified cells from Step 5 to Step 18 . An example of this procedure is
In Algorithm 1 , we iteratively merge cells to form regions by calculating the connection supports of cell pairs . To efficiently construct regions , we determine an order for the calculation of cell would be possibly merged with other cells . The connection calculated and the qualified cell pairs will be merged . Based on first round and more cells ( eg , the red cells in Figure 7 ) are
16 . Return r ;
12 . Else
198 14 in Algorithm 2 ) . Similarly , for ( cid:1868).g , a merging process will be stopped if no cell can be merged around ( cid:1868)g We then chose other points ( eg , ( cid:1868)(cid:2871),(cid:1868)(cid:2873 ) ) to construct regions around these points in the same way .
3p 1
1p 1
5p 1
2p 1
4p 1
Figure 7 . Region construction process .
Time complexity analysis : Given an uncertain trajectory dataset ( cid:1830 ) and a set of cells ( cid:2273 ) , the time complexity of the naïve method is ( cid:1841)(cid:4666)(cid:1865)(cid:2871)(cid:4667 ) where |(cid:2273)| and |(cid:1830)|(cid:1865 ) . Similarly , complexity of Algorithm 1 is ( cid:1841)(cid:4666)(cid:4666)(cid:1864)(cid:1867)(cid:1859)(cid:3397)(cid:1855)(cid:1865)(cid:2870)(cid:4667)(cid:4667 ) , where ( cid:1855 ) is the costs ( cid:1841)(cid:4666)(cid:1864)(cid:1867)(cid:1859)(cid:4667 ) to sort cells in decreasing order of ( cid:1855)(cid:4666)g(cid:4667 ) . In addition , the time complexity of Algorithm 2 is ( cid:1841)(cid:4666)(cid:1865)(cid:4667 ) because there are at most ( cid:1865 ) uncertain trajectories for counting the remaining steps in Algorithm 1 is ( cid:1841)(cid:4666)(cid:1855)(cid:1865)(cid:2870)(cid:4667 ) . minimal number of the first loop . For Step 1 in Algorithm 1 , it connection support of a cell pair . Thus the time complexity of the time the
3.2 Edge Inference Once the regions are generated , we then infer edges and derive edge information including moving directions , transition supports , and travel times from historical uncertain trajectories . To generate the edges of a routable graph , we infer the edges within each region , and then infer the edges among regions .
A routable graph is a directed graph ( cid:1833)(cid:4666)(cid:1848),(cid:1831)(cid:4667 ) , where ( cid:1848 ) is a set of vertices and ( cid:1831 ) is a set of edges . Each vertex represents a support e.s and the travel time ( cid:1857 ) . . To derive the transition geographical area , ie , a cell . Each directed edge e indicates a transition relationship and has two attributes , the transition support of an edge , we record which distinct uncertain trajectories traverse the edge . In other words , an edge has an uncertain trajectory list to record which distinct uncertain trajectories traverse it . According to the definition of a region , a region is composed of connected cells , and thus we first generate virtual bidirected edges between cells if the cells are neighbors in a region , To infer edges’ realistic directions , transition supports , and travel times , we propose a shortest path based inference approach . Given a region and an uncertain trajectory dataset , we utilize the uncertain trajectories traversing the region to derive edge information in the region . For each trajectory traversing the region , we infer the shortest path between any two consecutive points of the trajectory by virtual bidirected edges in the region . We illustrate edge inference in a region in Figure 8 . As shown in Figure 8(a ) , four uncertain trajectories pass through the region .
For instance , in Figure 8(b ) , an uncertain trajectory ( cid:1868)(cid:1372)(cid:1868)(cid:2870)(cid:1372)(cid:1868)(cid:2871 ) from ( cid:1868 ) to ( cid:1868)(cid:2870 ) and the shortest paths from ( cid:1868)(cid:2870 ) to ( cid:1868)(cid:2871 ) . As shown in Figure 8(b ) , we find one shortest path from ( cid:1868 ) to ( cid:1868)(cid:2870 ) , and two shortest paths from ( cid:1868)(cid:2870 ) to ( cid:1868)(cid:2871 ) . After finding the shortest path
( blue squares ) traverses the region , and we infer the shortest paths between two consecutive locations , we divide the travel time evenly and add it to the travel time list of each edge in the shortest path . In addition , each edge of the shortest path adds the trajectory ID into its corresponding trajectory list , and the transition support of each edge in the shortest path is accumulated one . If there are the edge e1 is redundant in a region if there exist an edge e2 from multiple shortest paths between two consecutive locations , we similarly update the information of each edge in these paths . By using historical uncertain trajectories to infer edge information in a region , we further eliminate the redundant edges in the region and the edges whose transition supports are 0 . Given an edge e1 from the cell g and the cell g' , where g and g' are spatially close , g to g'' and an edge e3 from g'' to g' , such that 1 ) g and g'' are spatially close and g' and g'' are spatially close , 2 ) ( cid:3032)(cid:3118)(cid:3046)(cid:3032)(cid:3119)(cid:3046 ) ( cid:1857) . , ( cid:2923)(cid:2911)(cid:2934)(cid:4668)(cid:4666)(cid:3032)(cid:3118)(cid:3047)(cid:3032)(cid:3119)(cid:3047)(cid:4667),(cid:3032)(cid:3117)(cid:3047)(cid:4669)(cid:2016 ) where ( cid:2016 ) is a given ( cid:2870 ) |(cid:3032)(cid:3118)(cid:3047)(cid:3032)(cid:3119)(cid:3047)(cid:3032)(cid:3117)(cid:3047)| temporal and 3 ) constraint . Figure 8(c ) shows the inferred edges in the region after reducing edges . The travel time of each edge is estimated by the median of all the travel times of the edge . p3 p1 p2
( a ) ( b ) ( c )
Figure 8 . Edge inference in a region .
( a ) ( b )
Figure 9 . Edge inference between regions . is a redundant edge between the two regions if there exists an
In the following , we construct edges between regions . Similarly , we generate edges between regions by using historical uncertain trajectories first . This means that if an uncertain trajectory traverses a cell of one region to a cell of another region , an edge is constructed between the two cells . Next , we eliminate the redundant edges between regions . Given an edge e1 from the cell g to the cell g' , where g and g' are in different regions , the edge e alternative route e(cid:2919)(cid:1372)(cid:1710)(cid:1372)e(cid:2920 ) from the cell g to the cell g' such ( cid:2920)(cid:2919)∑ ,(cid:3032).(cid:3047)(cid:4677)(cid:2016 ) where ( cid:1857) . , and 2 ) ( cid:1857)(cid:3038 ) . ( cid:4698)∑ ( cid:3032).(cid:3047)(cid:4698 ) ( cid:3032)(cid:3286).(cid:3047 ) ( cid:3038)(cid:2880 ) ( cid:3285)(cid:3286)(cid:3128)(cid:3284 ) ( cid:2016 ) is a given temporal constraint . Figure 9 shows an example of ( cid:2923)(cid:2911)(cid:2934)(cid:4676)∑ ( cid:3032)(cid:3286).(cid:3047 ) ( cid:3285)(cid:3286)(cid:3128)(cid:3284 ) edge ( cid:1857 ) and edge ( cid:1857)(cid:2870 ) are generated between the two regions by e is a redundant edge if 1 ) ( cid:2872)∑ ( cid:1857)(cid:3038 ) . ( cid:1857 ) . , and 2 ) ( cid:2873)(cid:3038)(cid:2880)(cid:2870 ) ,(cid:3032)(cid:3117).(cid:3047)(cid:3423)(cid:2016 ) with a given ( cid:2016 ) . ( cid:3627)∑ ( cid:3032)(cid:3117).(cid:3047)(cid:3627 ) ( cid:3032)(cid:3286).(cid:3047 ) ( cid:3121)(cid:3286)(cid:3128)(cid:3118 ) ( cid:2923)(cid:2911)(cid:2934)(cid:3419)∑ ( cid:3032)(cid:3286).(cid:3047 ) ( cid:3121)(cid:3286)(cid:3128)(cid:3118 ) historical uncertain trajectories . For instance , in Figure 9(b ) , edge edge inference between two regions . As shown in Figure 9(a ) , that 1 )
Note that the transition information of an eliminated edge is propagated to alternative routes . The travel time of an eliminated edge is evenly propagated to the edges of each alternative route . The trajectory list of an eliminated edge is updated to each edge ’s corresponding trajectory list in alternative routes . 4 . ROUTE INFERENCE Given a location sequence and a time span , we generate the top k popular routes by two phases : route generation and route refinement . In the first phase , we propose routing algorithms to search for the top k coarse routes with the routable graph . We further refine the discovered the top k routes to effectively derive specific routes in the second phase . In the route generation phase : we first generate possible routes between each two consecutive queried locations ( called local
199 routes ) and then search for the top k routes ( called global routes ) from the generated local routes . A route derived in this phase is represented by a sequence of vertices with a given graph ( cid:1833)(cid:4666)(cid:1848),(cid:1831)(cid:4667 ) . Note that a vertex in the of cells , denoted as ( cid:1868 ) : g(cid:3639)g(cid:2870)(cid:3639)(cid:1710)(cid:3639)g(cid:3038 ) . Given a sequence of graph represents a cell ; thus a route here is regarded as a sequence query locations and a time span , we search for qualified routes between any two consecutive query locations with the constructed graph . Before searching for routes with the graph , we need to specify the corresponding vertices of query locations . Since a vertex represents a geographical area of a cell , a query location can be mapped to the vertex whose corresponding geographical area overlaps the location . However , it is possible that a query location cannot be mapped to any vertex in the graph . We further select the vertices whose corresponding cells are close to the query location . We adopt the minimum distance ( MINDIST ) [ 12 ] to formulate the distance between a query location and a cell . According to the distance measurement , we specify the cells that are close to such query locations . Thus , a given location sequence is transformed into a sequence of sets of cells . Moreover , we transform a location sequence into cell sequences by combining these cells . After query transformation , we search for the top k routes according to each cell sequence .
For instance , given a location sequence ( cid:1869):(cid:1869)(cid:1372)(cid:1869)(cid:2870)(cid:1372)(cid:1869)(cid:2871 ) in Figure 10(a ) , the locations ( cid:1869 ) and ( cid:1869)(cid:2870 ) are mapped to cells g1 and g2 , cells {g3 , g4} is used to represent the location ( cid:1869)(cid:2871 ) . Then , the location sequence ( cid:1869)(cid:1372)(cid:1869)(cid:2870)(cid:1372)(cid:1869)(cid:2871 ) is transformed into two cell sequences , ie , g1(cid:1372)g2(cid:1372)g3 and g1(cid:1372)g2(cid:1372)g4 . respectively . By the minimum distance measurement , the set of
( a)Query transformation . ( b)Route generation . ( c)Route refinement
Figure 10 . Route inference .
We generate routes with respect to each cell sequence . Before introducing the routing algorithm , we define the score function for the routes as follows .
Definition 7 ( Route score ) : Given a graph ( cid:1833)(cid:4666)(cid:1848),(cid:1831)(cid:4667 ) , a route ( cid:2304):(cid:2304)(cid:1372)(cid:2304)(cid:2870)(cid:1372)(cid:1710)(cid:1372)(cid:2304)(cid:3040 ) , where ( cid:2304 ) : g(cid:3117)(cid:3639)g(cid:3118)(cid:3639)(cid:1710)(cid:3639)g(cid:3285 ) , the score of the route is defined as ( cid:1858)(cid:4666)(cid:2304)(cid:4667)∑ ( cid:2025)(cid:4666)(cid:2304)(cid:4667 ) ( cid:3040)(cid:2880 ) ( cid:2025)(cid:4666)(cid:2304)(cid:4667 ) |(cid:1666 ) ( cid:4668)(cid:1853)|g(cid:3286)(cid:1372)g(cid:3286)(cid:3126)(cid:3117)(cid:1488)(cid:1853)(cid:4669 ) g' ) by an A* like routing algorithm . However , a possible
For each cell sequence , we first search for the top k local routes between any two consecutive cells in the cell sequence ( eg , g and
( cid:3038)(cid:2880 )
, where
| . maximum speed could be derived from historical uncertain trajectories or be determined by difference applications . Given a maximum speed , possible positions between any two consecutive query locations can be restricted in a range if a time interval between the two locations is specified [ 11 ] . That is , the possible routes are restricted in the cells overlapping the range . For the A*like routing algorithm , an estimated score of a route from a cell g to a cell g' is represented as follows . Given two cells g and g' , a current visited cell g'' , and a specified range r , an estimated score of a route ( cid:2304):(cid:2304)(cid:3030)(cid:3639)(cid:2304)(cid:3033 ) from a cell g to a cell g' in a specified range r is ( cid:1858)(cid:4632)(cid:4666)(cid:2304)(cid:4667)(cid:2025)(cid:4666)(cid:2304)(cid:3030)(cid:4667)(cid:3397)(cid:1860)(cid:3435)(cid:2304)(cid:3033)(cid:3439 ) , where ( cid:2304)(cid:3030 ) is a known route from cell g to cell g'' , and ( cid:1860)(cid:3435)(cid:2304)(cid:3033)(cid:3439 ) is the score of an estimated route ( cid:2304)(cid:3033 ) from cell g'' to cell g' . uncertain trajectory dataset D , a specified range r , and two cells g
Definition 8 ( Optimal score ) : Given a graph ( cid:1833)(cid:4666)(cid:1848),(cid:1831)(cid:4667 ) , an and g' , the optimal score of the routes from a cell g to a cell g' in r ( cid:1860)(cid:3552)(cid:4666)(cid:2304)(cid:4667)|(cid:4668)(cid:1853)|(cid:1853 ) passes through the range ,(cid:1853)(cid:1488)(cid:1830)(cid:4669)| for some estimated route ( cid:2304 ) from a cell g to a cell g' . Once a local route is generated from the cell g to the cell g' and the cell g to the cell g' , the k th maximum score of these local satisfies the given time span , the score of the local route is calculated . If there are more than k local routes constructed from is defined as routes is recorded and incrementally updated . Based on the estimated optimal score function , a branch of searching routes will be stopped if the optimal score of routes generated from the branch is less than the updated k th maximum score . Based on the top k local routes between any two consecutive cells of each cell sequence , we search for the top k global routes by a branch and bound search approach . For instance , given a cell sequence g1(cid:1372)g2(cid:1372)g3 in Figure 10(a ) , a global route is derived as a sequence of cells ( dark grey ) in Figure 10(b ) . To derive a specific route , a route is further transformed into a line by concatenating the centers of any two consecutive cells in the route . Figure 10(b ) shows an example of such a route by a blue line . However , it is possible that we search for local routes between two cells belonging to different regions . In the A* like algorithm , although we search for local routes between two given cells in a restricted range of a graph , the search space is still large if the distance between two given cells is far and they are in different regions . It induces that a route between the two cells would possibly pass through several other regions . On the other hand , a lower bound of transition times between any two regions can be estimated by edge information . It helps us stop searching for routes between two regions if the lower bound of transition time between the two regions exceeds the time span . Hence , to improve the efficiency of route generation , we modify the proposed A*like routing algorithm and introduce a two layer routing algorithm .
Figure 11 . The scenario of the two layer routing algorithm .
Before searching for local routes between two given cells , we first determine the region sequences to reduce searching space . By utilizing a lower bound of transition times between any two regions , we can generate region sequences with respect to two given cells . According to each region sequence , we search for possible local routes that sequentially traverse these regions . Note that the proposed A* like algorithm is used for searching for routes between any two regions here . In Figure 11 , for instance , given a location sequence ( cid:1869)(cid:1372)(cid:1869)(cid:2870 ) , and a corresponding range , the location ( cid:1869 ) and the location ( cid:1869)(cid:2870 ) locate in region and region ( cid:2870 ) , respectively . There are multiple possible region combinations searching space of route generation is restricted to the range ( eg , the red part ) , the routes from ( cid:1869 ) to ( cid:1869)(cid:2870 ) would possibly many possible region sequences from ( cid:1869 ) to ( cid:1869)(cid:2870 ) ( eg , ( cid:1372)(cid:2872 ) , traverse the regions in different orders . In Figure 11 , there are for searching for routes between the two locations . Although the
200 ( cid:1372)(cid:2870)(cid:1372)(cid:2872 ) , ( cid:1372)(cid:2871)(cid:1372)(cid:2872 ) , ( cid:1372)(cid:2870)(cid:1372)(cid:2871)(cid:1372)(cid:2872 ) etc ) With by red edges in Figure 11 ( ie , ( cid:1372)(cid:2870)(cid:1372)(cid:2872 ) , ( cid:1372)(cid:2871)(cid:1372)(cid:2872) ) . utilizing lower bounds of transition times between regions , the possible region sequences would be reduced to satisfy the given time span . For instance , the qualified region sequences are marked
After deriving region sequences , we search for possible routes which traverse each region sequence . After route generation , the top k routes are inferred , and we further refine each route using historical data points . Route refinement has three steps : data point selection , segment formulation , and segment concatenation . First , given an inferred rough route represented by a sequence of cells , we select the historical uncertain trajectories that traverse the cells in the same order as the route . Next , we extract the data points that locate in cells of the rough route from these selected uncertain trajectories , and thus derive a set of points for each cell of the route . To formulate a specific route from selected points , we adopt linear regression for the set of points of each cell to derive a segment . We then concatenate the segments in the same order as an original inferred route . Figure 10(c ) shows an example of a refined route . 5 . PERFORMANCE EVALUATION In this section , we evaluate the performance of the proposed RICK using real datasets , including check in records from Foursquare and taxi trajectories . The datasets and experimental setting is presented in Section 51 In the experiments , we first demonstrate the results using check in records in Manhattan . To evaluate the effectiveness of our proposed RICK , we use the dataset of taxi trajectories . In the experiments of the performance study , we compare our proposed RICK with the existing method in terms of effectiveness and efficiency . Furthermore , the experiments demonstrate the improvements of routable graph construction and route inference . 5.1 Datasets and Settings 511 Real Datasets In this paper , we use two real datasets to conduct the extensive experiments . One is the check in dataset from Foursquare . We collected check in records in Manhattan , and for each user , a series of check in records recorded in one day is regarded as a trajectory . We pruned the trajectories that contained less than three check in records . There are totally 6,600 trajectories . The other real dataset contained 15,000 taxi trajectories in Beijing . The average sampling rate of the raw trajectories is less than one minute . To simulate uncertain trajectories , we resampled each raw trajectory such that the time interval between two consecutive resampled points of the trajectory at least exceeded a given sampling rate S . In the experiments , the sampling rate S is set from one minute to five minutes and the default S is five minutes . For example , given S=5 , two consecutive resampled points is at least five minutes or even more . 512 Metrics To evaluate the effectiveness of our RICK , we introduce an approach to generate the ground truth from the raw trajectories to evaluate the effectiveness of the inferred routes . For each query , the raw trajectories that satisfy the query are selected and ranked . To rank these trajectories , a raw trajectory is transformed into a sequence of road segments and the frequency of a road segment is defined as the number of distinct trajectories that traverse it . The score of a trajectory ( cid:1853):(cid:1372)(cid:2870)(cid:1372)(cid:1710)(cid:1372 ) is defined by ( cid:4666)∑ d(cid:4666)(cid:4667 ) ( cid:4667)(cid:1853).(cid:1864)(cid:1857)(cid:1859)(cid:1860 ) ⁄ , where is a road segment ( cid:2924)(cid:2919)(cid:2880 ) and d(cid:4666)(cid:4667 ) is the frequency of the road segment . Hence , the interval between transformed the time selected trajectories can be ranked by their scores .
⁄
To evaluate the difference between an inferred trajectory and a raw trajectory of the ground truth , we first apply the lengthnormalized dynamic time warping distance ( NDTW ) . Given an inferred route ( cid:1868 ) and a raw trajectory ( cid:1853 ) , we define the NDTW between two trajectories as NDTW(cid:4666)(cid:1868),(cid:1853)(cid:4667)DTW(cid:4666)(cid:1868),(cid:1853)(cid:4667)(cid:1868).(cid:1864)(cid:1857)(cid:1859)(cid:1860 ) for an optimal alignment path . To further reflect the quality of inferred routes , we utilize a maximum distance ( MD ) between an inferred route and a raw trajectory of the ground truth according to the discovered NDTW . MD is defined as the maximum value of the distances measured by the optimal alignment path . Therefore , the two measurements for evaluating the inferred top k routes are defined as follows :
NDTW(T , T(cid:1314))= Avg(cid:3043)(cid:3286)(cid:1488)Tmin(cid:3047)(cid:3045)(cid:3028)(cid:1488)T(cid:4593)NDTW(cid:4666)(cid:1868)(cid:3038),(cid:1853)(cid:4667 ) , and MD(T , T(cid:1314))=Avg(cid:3043)(cid:3286)(cid:1488)TMD(cid:4666)(cid:1868)(cid:3038),(cid:1853)(cid:1314)(cid:4667 ) , where T is the set of inferred top k routes , T(cid:1314 ) is the set of top k raw trajectories , and ( cid:1853)(cid:1314)=Arg min(cid:3047)(cid:3045)(cid:3028)(cid:1488)T(cid:4593)NDTW(cid:4666)(cid:1868)(cid:3038),(cid:1853)(cid:4667 ) . temporal constraint ( cid:2016 ) =0.2 and minimum
In the experiments , the default rank threshold k is 3 . 5.2 Visualization of Results In this subsection , we use the check in dataset in Manhattan to visualize the results derived by RICK . We first demonstrate the constructed routable graph in Figure 12 with given cell length l=500 ( meters ) , connection support C=3 . In Figure 12 , the regions are represented by different colors in Figure 12(a ) , and Figure 12(b ) shows the edges between cells . Note that the edges within a region are drawn by blue lines , and the edges between regions are drawn by black lines . Based on the routable graph , we perform one query and let the span time be one hour for each query . Given a query as “ Central Park → The Museum of Modern Art → Times Square → Empire State Building → SoHo ” , the top 1 route inferred by RICK is depicted in Figure 12(c ) . As shown in Figure 12(c ) , the route does not simply connect the query locations , but passes through other attractions . For example , for the partial route from “ The Museum of Modern Art ” to “ Times Square ” , RICK constructs this partial route to pass by the “ Rockefeller Center ” based on users’ historical check in records .
( a ) Regions ( b ) Routable graph ( c ) Top 1 route
Figure 12 . Visualization of results in Manhattan .
5.3 Performance Study In this section , we evaluate the performance of RICK by taxi trajectories . First , to analyze the effect of queries , the length of query location sequence |(cid:1869)| is set from 2 to 4 . In addition , a query between any two consecutive query locations , denoted as ∆d . For a query , ∆t is determined according to ∆d . In the experiments , ∆d is varied from 1 to 5 ( in kilometers ) , and the corresponding ∆t is location sequence is generated by considering a given distance set from 4 to 20 ( in minutes ) . For each experiment , we perform almost 100 queries and averaged the results .
201 rout , which connects the two query locations , is derived . In the
531 Evaluation of Route Inference We compare our framework with a baseline and analyze the effectiveness of our inferred routes in different aspects . Baseline : To evaluate the effectiveness of the discovered routes , we compare the proposed RICK with the existing approach ( MPR ) in [ 3 ] . In [ 3 ] , given two locations ( ie , |(cid:1869)|=2 ) , the most popular experiments , the parameters of MPR are set as α=2 , β=2 , the coherence threshold τ=0.8 , and the cluster size threshold φ=20 . dataset with S and ∆d varied . As shown in Figure 13(a ) , the error of MPR increases as S or ∆d increases . It is worth mentioning that the error of RICK slightly increases as S or ∆d increases , showing
For RICK , the settings are l=300 ( meter ) and k=1 . Figure 13 shows the experimental results of MPR and RICK under the Taxi that RICK is able to derive the routes from uncertain trajectories . Figure 13(a ) shows that RICK is more effective than MPR , although Figure 13(b ) demonstrates that the query time of RICK is slightly higher than the query time of MPR . Effect on route refinement : In the route inference of the proposed RICK , the top k routes are derived after route generation and are further refined by route refinement . In this subsection , we compare the effectiveness of the route inference without route refinement ( w/o RR ) and that of the route inference with route refinement . We set k=1 and |(cid:1869)|=2 in the experiments . Figure 14 Figure 14 , the errors of inferred routes increase as ∆d increases . In shows the error of top 1 routes by NDTW and MD . As shown in addition , a larger l increases the error of routes discovered without route refinement . In Figure 14 , with route refinement , the error of the inferred routes is obviously reduced as l increases . Impact of data sparseness : To study the effect of the data sparseness , we calculate the number of GPS points per km2 and derive different data sparseness by setting different S . The number of GPS points per km2 is increased from 77 to 275 while S is decreased from five minutes to one minute . Figure 15 shows that the errors ( both NDTW and MD ) slightly decrease as the data sparseness increases . When the data sparseness is 275 GPS points per km2 , the errors of the inferred routes of at least 4 km ( ie , than 800 meters . However , NDTW is less than 300 meters even though the data sparseness is 77 GPS points per km2 . The proposed framework is effective for inferring the top k routes . Efficiency : We investigated the query time of RICK and show the
|(cid:1869)|=2 and ∆d=4 ) are less than 500 meters and the errors of the inferred routes of at least 12 km ( ie , |(cid:1869)|=4 and ∆d=4 ) are less results in Figure 16 . In the experiments , l=300 ( meters ) , ( cid:2016)0.1 , ( denoted by RICK ) in Figure 16(a ) with varied |(cid:1869)| and ∆d . As time is obviously reduced while |(cid:1869)| or ∆d is larger . In Figure 16(b ) , the query time of RICK gradually increases as |(cid:1869)| or ∆d
C=8 , S=5 ( minutes ) , and k=3 . In the route inference , we improve the efficiency of the route generation by a two layer routing algorithm . To demonstrate the effectiveness of the two layer routing algorithm , we compare the query time of RICK and the query time of RICK without using the two layer routing algorithm shown in Figure 16(a ) , RICK outperforms RICK , and the query increases . However , the query time is less than one second . 532 Evaluation of Routable Graph In the routable graph construction of RICK , we construct the regions referring to the connected areas and further infer and refine the moving directions within the regions . To investigate the impact of exploring shortest path on refining the routable graph , we evaluate the graph built without refinement ( denoted as precision of connectivity in G is measured as follows :
RG ) , and the graph refined by shortest path based edge inference ( denoted as RG+ ) . To evaluate the correctness of the connectivity in a routable graph , given a raw trajectory dataset D and a graph ( cid:1833)(cid:1848),(cid:1831)(cid:3408 ) , the |(cid:4668)(cid:1857)|(cid:1857 ) is traversed by some ( cid:1853)(cid:1488)(cid:1830 ) and ( cid:1857)(cid:1488)(cid:1831)(cid:4669)|/|(cid:1831)| . The temporal constraint ( cid:2016 ) and the minimum connection support C precision of connectivity in the graph with varying ( cid:2016 ) and C . 17(a ) , C is varied from 8 to 12 and ( cid:2016)01 Figure 17(a ) shows
In Figure 17 , S is set as 5 minutes in the experiments . In Figure are used for constructing a routable graph . Hence , we analyze the
) m n i (
W T D N
1200
900
600
300
0
1
S=3(RICK ) S=5(RICK ) S=3(MPR ) S=5(MPR )
2
3
4
5
120
90
60
30
) s m n i ( e m i t y r e u Q
0
1
S=3(RICK ) S=5(RICK ) S=3(MPR ) S=5(MPR )
2
3
4
5
d ( in km )
d ( in km ) ( a ) ( b )
Figure 13 . Performance comparison of RICK and MPR . 660
1500 l=300 l=300(w/o RR ) l=500 l=500(w/o RR )
550
440
330
) m n i (
W T D N
220
110
0
1
2 l=300 l=300(w/o RR ) l=500 l=500(w/o RR )
1200
900
600
300
) m n i (
D M
0
4
5
d ( in km )
3 3 d ( in km ) ( a ) ( b ) Figure 14 . Effect on route refinement .
1
2
4
5
1200
900
600
300
) m n i ( r o r r
E
|q|=2
d=2(NDTW ) d=4(NDTW ) d=2(MD ) d=4(MD )
1200
900
600
300
) m n i ( r o r r
E
|q|=4
d=2(NDTW ) d=4(NDTW ) d=2(MD ) d=4(MD )
0
0
155
113
77 91
275 Figure 15 . Effectiveness evaluation with data sparseness varied . 1000
Number of GPS points per km
Number of GPS points per km
77 91
500
113
155
275
2
2
|q|=3(RICK ) |q|=4(RICK ) |q|=3(RICK ) |q|=4(RICK )
800
600
400
200
) s m n i ( e m i t y r e u Q
0
1
|q|=2 |q|=3 |q|=4
) s m n i ( e m i t y r e u Q
400
300
200
100
0
1
2
3
4
5
2
3
4
5
d ( in km )
d ( in km ) ( a ) ( b ) Figure 16 . Efficiency evaluation .
RG RG+
1
0.98
0.96
0.94
0.92 i i n o s c e r P i i n o s c e r P
RG RG+
1
0.98
0.96
0.94
0.92
0.9
8
9
0.9
11
0.1
12
10 C ( a ) ( b ) Figure 17 . Connectivity evaluation .
0.5 
0.3
0.7
0.9
202 that the precision of RG and the precision of RG+ increase as C increases . This is because a stricter constraint induces a higher precision ( ie , a higher C ) . In Figure 17(b ) , C=8 and ( cid:2016 ) is varied and the precision of RG+ decrease as ( cid:2016 ) increases . The reason is higher ( cid:2016) ) . Figure 17 depicts that the precision of RG+ is higher that the precision is reduced as the constraint is loosened ( ie , a from 0.1 to 09 As shown in Figure 17(b ) , the precision of RG inference improves the correctness of than that of RG , and it demonstrates that the shortest path based edge the explored connectivity in a geographic space . 6 . RELATED WORK Route planning based on GPS trajectories : Route planning is widely investigated in [ 14,13,4,3 ] with GPS trajectories . The work [ 14 ] mainly inferred fastest routes from historical trajectories . In [ 13 ] , the authors study travel route planning based on searching GPS trajectories . In [ 4 ] , given a set/a sequence of locations , the top k trajectories that best connect the given locations are retrieved from existing GPS trajectories . In [ 3 ] , the authors investigated the problem of popular route planning without road network information . They introduced a transfer network model by exploiting intersections from historical GPS trajectories , and inferred the most popular route between two given locations by the turning probability of each intersection . However , these works were carried out using high sampled GPS trajectories . Given uncertain trajectories , the results obtained by [ 13,4 ] are historical uncertain trajectories and these uncertain trajectories still reveal rough routes . In addition , the trajectories derived by [ 4 ] may be far away from the query locations because these trajectories are low sampled . Using a dataset of uncertain trajectories , the accuracy of a transfer network model in [ 3 ] would be destroyed and then the effectiveness of inferred routes would be decreased . Trip Planning based on geo tagged social media : In recent years , mobile social applications have become popular , generating a huge volume of social media data , such as check in records or geo tagged photos . Such social media data can be regarded as sequences of visited locations , thereby revealing users’ travel experience in terms of travel routes that link points of interest ( POIs ) . Using geo tagged photos , several studies [ 1,7,15 ] have investigated the recommended trips are represented by a sequence of POIs , and the detailed route between two consecutive POIs is not specified . Different from these works , our method aims to construct the detailed route that is most likely to be taken by people by learning from the uncertain POI sequences in a mutual reinforcement way ( eg , Figure 2 ) . Uncertain trajectory uncertainty are studied in [ 6,10,11,16 ] . The work [ 10 ] introduces the problem of uncertain trajectory clustering , and focuses on the trajectory uncertainty caused by measurement errors . To reduce the uncertainty of an uncertain the work [ 11 ] formulates an uncertain trajectory in a free space by a given maximum moving speed . However , the indistinct parts of an uncertain trajectory are enclosed in a spatio temporal range without pointing out specific routes . In addition , the study [ 6 ] applies the techniques developed in a free space to model an uncertain trajectory in a road network . The possible routes between two sampled locations of an uncertain trajectory are restricted in a set of road segments by road network information and speed limits . Although the work [ 16 ] investigated the problem of discovering the top k possible routes sequentially passing the queried locations from uncertain trajectories , they use road network information to reduce the uncertainty of low sampled trip planning . However , trajectories : The the problem of topics of trajectory , research trajectories . These works cannot derive routes from uncertain trajectories without road network information . 7 . CONCLUSIONS In this paper , we proposed RICK to infer the top k routes traversing a given location sequence within a specified travel time from uncertain trajectories . The proposed RICK consists of the routable graph construction and the route inference . We have evaluated the proposed RICK in terms of both effectiveness and efficiency using two real datasets , check in datasets and driving trajectories . The experiments show three aspects : 1 ) the inferred routes not only connect user specified locations but also indicate detailed routes ; 2 ) the proposed routable graph provides a good model of the uncertain trajectory dataset with an accuracy of 0.9 ; 3 ) on average , our routing algorithm can find the top 3 routes within 0.5 seconds , with a distance error smaller than 300 meters compared to its corresponding ground truth . Meanwhile , RICK clearly outperforms the baseline by generating routes 300 700 meters closer ( than those of the baseline ) to the ground truth . The experiments demonstrate the effectiveness and the efficiency of RICK . In the future , we will plan routes considering different start times and different user preferences . In addition , we will evaluate RICK by given other uncertain trajectory datasets , eg , geotagged photo trips . 8 . REFERENCES [ 1 ] S . Basu Roy , S . Amer Yahia , G . Das , and C . Yu . Interactive Itinerary
Planning . In IEEE ICDE , pages 15 26 , 2011 .
[ 2 ] X . Cao , G . Cong , and C . S . Jensen . Mining Significant Semantic
Locations from GPS Data . In VLDB , 3(1 ) : 1009 1020 , 2010 .
[ 3 ] Z . Chen , H . T . Shen , and X . Zhou . Discovering Popular Routes from
Trajectories . In IEEE ICDE , pages 900 911 , 2011 .
[ 4 ] Z . Chen , H . T . Shen , H . T . , X . Zhou , Y . Zheng , and X . Xie . Searching
Trajectories by Locations : An Efficiency Study . In ACM SIGMOD , pages 255 266 , 2010 .
[ 5 ] F . Giannotti , M . Nanni , D . Pedreschi , and F . Pinelli . Trajectory Pattern
Mining . In ACM SIGKDD , pages 330 339 , 2007 .
[ 6 ] B . Kuijpers , B . Moelans , W . Othman , and A . Vaisman . Analyzing
Trajectories Using Uncertainty and Background Information . In SSDT , pages 135 152 , 2009 .
[ 7 ] T . Kurashima , T . Iwata , G . Irie , and K . Fujimura . Travel route recommendation using geotags in photo sharing sites . In ACM CIKM , pages 579 588 , 2010 .
[ 8 ] Q . Liu , Y . Ge , Z . Li , E . Chen , and H . Xiong . Personalized Travel Package Recommendation . In IEEE ICDM , pages 407 416 , 2011 .
[ 9 ] Z . Li , B . Ding , J . Han , R . Kays , and P . Nye . Mining Periodic Behaviors for Moving Objects . In ACM SIGKDD , pages 1099 1108 , 2010 . [ 10 ] N . Pelekis , I . Kopanakis , E . E . Kotsifakos , E . Frentzos , and Y .
Theodoridis . Clustering Trajectories of Moving Objects in an Uncertain World . In IEEE ICDM , pages 417 427 , 2009 .
[ 11 ] R . Praing and M . Schneider . Modeling Historical and Future Movements of Spatio temporal Objects in Moving Objects Databases . In ACM CIKM , pages 183 192 , 2007 .
[ 12 ] N . Roussopoulos , S . Kelley , and F . Vincent . Nearest Neighbor Queries .
In ACM SIGMOD , pages 71 79 , 1995 .
[ 13 ] L Y Wei , W C Peng , B C Chen , and T W Lin . PATS : A Framework of Pattern Aware Trajectory Search . In UMMM , pages 372 377 , 2010 . [ 14 ] J . Yuan , Y . Zheng , C . Zhang , W . Xie , X . Xie , G . Sun , and Y . Huang . T drive : Driving Directions Based on Taxi Trajectories . In ACM SIGSPATIAL GIS , pages 99 108 , 2010 .
[ 15 ] Z . Yin , L . Cao , J . Han , J . Luo , and T . S . Huang . Diversified Trajectory Pattern Ranking in Geo tagged Social Media . In SDM , pages 980 991 , 2011 .
[ 16 ] K . Zheng , Y . Zheng , X . Xie , and X . Zhou . Reducing Uncertainty of Low
Sampling Rate trajectories . In IEEE ICDE , 2012 .
[ 17 ] Y . Zheng , L . Zhang , X . Xie , and W. Y Ma , Mining Interesting Locations and Travel Sequences from GPS Trajectories . In WWW , pages 791 800 , 2009 . Verlag New York Inc , 2011 .
[ 18 ] Y . Zheng and X . Zhou . Computing with Spatial Trajectories . Springer
203
