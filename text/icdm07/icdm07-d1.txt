An Ef.cient Spectral Algorithm for Network Community Discovery and Its Applications to Biological and Social Networks
Jianhua Ruan and Weixiong Zhang
Department of Computer Science and Engineering
One Brookings Dr , St Louis , MO 63130
Washington University in St Loius fjruan,zhangg@csewustledu
Abstract
Automatic discovery of community structures in complex networks is a fundamental task in many disciplines , including social science , engineering , and biology . Recently , a quantitative measure called modularity ( Q ) has been proposed to effectively assess the quality of community structures . Several community discovery algorithms have since been developed based on the optimization of Q . However , this optimization problem is NP hard , and the existing algorithms have a low accuracy or are computationally expensive . In this paper , we present an ef.cient spectral algorithm for modularity optimization . When tested on a large number of synthetic or real world networks , and compared to the existing algorithms , our method is ef.cient and and has a high accuracy . We demonstrate our algorithm on three applications in biology , medicine , and social science . In the .rst application , we analyze the communities in a gene network , and show that genes in the same community usually have very similar functions , which enables us to predict functions for some new genes . Second , we apply the algorithm to group tumor samples based on gene expression microarray data . Remarkably , our algorithm can automatically detect different types of tumor without any prior knowledge , and by combining our results and clinical information , we can predict the outcomes of chemotherapies with a high accuracy . Finally , we analyze a social network of Usenet newsgroup users , and show that , without any semantic information , we can discover the organization of the newsgroups , and detect users groups with similar interests .
1 Introduction
The study of complex networks has become a fast growing subject in many disciplines , including physics , biol ogy , and social science . At least part of the reason can be attributed to the discovery that real world networks from totally different sources can share surprisingly high similarities in their topological properties , such as the powerlaw degree distributions and high clustering coefcients ( See [ 1 , 20 ] for reviews . )
One of the key properties in complex networks that have attracted a great deal of interest recently is the so called community structures , ie relatively densely connected sub networks [ 21 ] . Community structures have been found in social and biological networks , as well as technological networks such as the Internet and power grid . Automatically discovering such structures is fundamentally important for understanding the relationships between network structures and functions , and has many practical applications . For example , identifying communities from a collaboration network may reveal scienti.c activities as well as evolution and development of research areas [ 15 ] ; detecting hidden communities on the World Wide Web may help prevent crime and terrorism [ 4 ] ; discovering communities in a network of biomolecules may help us better understand the organizational principles of the cell , and identify important biological pathways for further studies [ 29 , 34 ] .
Community discovery is similar but not equivalent to the conventional graph partitioning problem , both of which are amount to clustering vertices into groups . A key challenge for the former , however , is that the algorithm has to decide what is the ( cid:147)best(cid:148 ) , or in other words , the ( cid:147)most natural(cid:148 ) partition of a network . In contrast , in conventional graph partitioning , the user has to provide information such as the number of partitions or the sizes of the sub networks . Furthermore , a community discovery algorithm should not force a network to be partitioned if there is no good community structures , while it is always possible for a graph partitioning algorithm to return some arbitrary results .
To design effective community discovery algorithms , Newman and Girvan [ 22 ] proposed a quantitative measure , called modularity ( Q ) , to assess the quality of community structures , and formulated community discovery as a optimization problem . Since optimizing Q is a NP hard problem , several heuristic methods have been developed , as surveyed in [ 6 ] . The fastest algorithm available uses a greedy strategy and suffers from poor quality [ 5 ] . A more accurate method is based on simulated annealing , which requires a prohibitively long running time on large networks [ 14 ] . Several spectral algorithms have been developed , which have relatively good performance , but still inef.cient for large networks [ 33 , 21 ] .
In this paper , we propose a spectral algorithm that is effective in .nding high quality communities as well as ef.cient on large networks . The algorithm adopts a recursive strategy to partition networks while optimizing Q . Unlike the existing algorithms , our method is a hybrid of direct k way partitioning and recursive 2 way partitioning strategies [ 33 , 21 ] . We evaluate our algorithm on a large number of synthetic and real world networks . The results show that the algorithm is more ef.cient and more accurate than a recursive 2 way partitioning method . Compared to a direct k way partitioning method , our algorithm is much more ef.cient , while having a comparable accuracy .
We demonstrate our algorithm on several real applications in different domains . First , we apply our algorithm to identify functional modules from a network of genes in the yeast S . cerevisiae , and predict functions for some genes based on the community structures . Second , we use the algorithm to classify tumor samples based on gene expression microarray data , which is a challenging and important task for effective therapy of cancer . Finally , we analyze the community structure in a social network of Usenet newsgroup users . We show that , by simply looking at the communication history among the users , our algorithm can identify groups of users sharing common interests , without any semantic information of the messages .
The paper is organized as follows . In Section 2 , we introduce some basic concepts , notations , and previous works . We describe our algorithm and its complexity in Section 3 , and present some evaluation results in Section 4 . Finally , we demonstrate our algorithm in several real applications in Section 5 , and conclude in Section 6 .
2 Preliminaries
2.1 Spectral graph partitioning
Let G = ( V ; E ) be a network of n vertices in V and m edges in E . Let A = ( Aij ) be the adjacency matrix of G . A graph partitioning problem is to .nd two or more vertex subsets of nearly equal sizes , while minimizing the number of edges cut by the partitioning [ 11 ] . Known to be NPhard , the problem exists in many real applications , such as circuit design and load balancing in distributed computing . Many heuristic methods have been developed for the problem , among which spectral methods have received much attention and are the most popular .
Spectral graph partitioning is in fact a family of methods . These methods depend on the eigenvectors of the Laplacian matrix or its relatives of a graph . Depending on the way they partition a graph , spectral methods can be classi.ed into two classes . The .rst class uses the leading eigenvector of a graph Laplacian to bi partition the graph . The second class of approaches computes a k way partitioning of a graph using multiple eigenvectors . We briefiy review some representatives of these two classes of algorithms below .
Let D be the diagonal degree matrix of A , ie Dii = Pj Aij . L = D,A is called the Laplacian matrix of G . Let 1 2 n be the eigenvalues and 1 ; 2; ; n be the corresponding eigenvectors for the generalized eigenvalue problem L = D . It can be shown that 1 = 0 , and 1 = 1 , a vector with all ones .
Given the above notation , a representative of bipartitioning , the SM algorithm [ 26 ] , works as follows . ( 1 ) Compute 2 , the second smallest generalized eigenvector of L . ( 2 ) Conduct a linear search on 2 to .nd a partition of the graph to minimize a normalized cut criterion [ 26 ] . It has been shown that when certain constraints are satis.ed , the SM algorithm can reach the optima of normalized cuts [ 26 ] . To .nd more than two clusters , the SM algorithm can be applied recursively .
The most popular algorithm in the second class , the NJW algorithm [ 23 ] , .nds a k way partition of a network directly as follows , where k is given by the user . ( 1 ) Compute the k smallest generalized eigenvectors of L and stack them in columns to form a matrix Y = [ 1 ; 2; ; k ] . ( 2 ) Normalize each row of Y to have unit length . ( 3 ) Treat each row as a point in Rk , and apply standard k means algorithm ( or any other geometric clustering algorithm ) to group them into k clusters .
Note that the above algorithm is slightly different from but equivalent to the original NJW algorithm . The original algorithm computes the k largest eigenvectors of a normalized matrix N = D,1=2AD,1=2 . It can be shown that , if and are solutions to L = D , 1 , and D1=2 are precisely the eigenvalues and eigenvectors of N [ 32 ] . Therefore , D1=2i ; i = 1; ; k , are the largest k eigenvectors of N . Since D is diagonal , Y obtained from N is the same as Y obtained from L , except that each row in the former is scaled by a factor of pDii . The scaling factor disappears after normalizing each row to have unit length . This small modi.cation puts NJW in the same framework as the SM algorithm , and is numerically more stable , since no division of D is involved .
2.2 Modularity and community structures
Given a partition of a network , ,k , which divides its vertices into k communities , the modularity is de.ned as i=1(eii=c , ( ai=c)2 ) , where eii is the number Q(,k ) = Pk of edges with both vertices within community i , ai is the number of edges with one or both vertices in community i , and c is the total number of edges [ 22 ] . Therefore , the Q function measures the fraction of edges falling within communities , subtracted by what one would expect if the edges were randomly placed . A larger Q value means stronger community structures . If a partition gives no more withincommunity edges than would be expected by chance , the modularity Q 0 . For a trivial partitioning with a single community , Q = 0 . It has been observed that most realworld networks have Q > 0:3 [ 22 ] .
The Q function provides a good quality measure to compare different community structures . Several algorithms have been developed to search for community structures by looking for the division of a network that optimizes Q ( see [ 6 ] for a survey ) . White and Smyth proposed a spectral algorithm ( WS ) , which is effective on small networks [ 33 ] . They show that , when the number of communities k is given , the optimization of Q is equivalent to an eigen decomposition problem , if relaxing the discrete membership constraint [ 33 ] . Therefore , they directly applied a k way spectral graph partitioning algorithm for this purpose . To automatically determine the number of communities , the spectral algorithm is executed multiple times , with k ranging from the user de.ned minimum Kmin to maximum Kmax number of communities . The k that gives the highest Q value is deemed the most appropriate number of communities . A slightly modi.ed version of the WS algorithm is as follows . ( 1 ) For each k , Kmin k Kmax , apply NJW to .nd a k way partition , denoted as ,k . ( 2 ) kfi = arg maxk Q(,k ) is the number of communities , and ,fi = ,kfi is the best community structure .
The key difference between the original WS algorithm [ 33 ] and the one above is the underlying spectral algorithm . The original algorithm uses the second to the k th largest eigenvectors of a transition matrix P = D,1A , and ignores the .rst eigenvector . It can be shown that the eigenvalues and eigenvectors of P are precisely 1 , and , where and are the solutions to the generalized eigenvalue problem L = D [ 32 ] . Therefore , the underlying spectral algorithm in the original WS algorithm is equivalent to NJW except that the .rst eigenvector . The authors ignored the .rst eigen vector since it is a constant , 1 . However , in the NJW algorithm , a normalization step is applied so that each row of Y has unit length . After the normalization , the .rst column of Y is often not constant . We noticed that including the .rst column often gives higher Q values . Therefore , we use NJW as the underlying spectral algorithm .
While the WS algorithm is effective in .nding good community structures , it scales poorly to large networks , because it needs to execute k means up to Kmax times . Without any prior knowledge of a network , one may overestimate Kmax in order to reach the optimal Q . For sparse networks , Kmax can be linear in the number of vertices in the worst case , making it impractical to iterate over all possible k ’s for large networks .
3 The Kcut algorithm
In order to develop a method that scales well to large networks while retaining effectiveness in .nding good communities , we may take the strategy used in the SM algorithm , ie , to recursively divide a network into smaller ones . However , two issues remain . First , when should the algorithm halt , or in other words , how do we decide whether a ( sub)network should be partitioned ? Since our goal is to .nd a partition with a high modularity , we can test whether the Q value increases after the partition . If no partition can improve the modularity , the ( sub)network should not be divided . Second , it has been empirically observed that if there are multiple communities , using multiple eigenvectors to directly compute a k way partition is better than recursive bipartitioning methods [ 23 ] . Here , we propose an algorithm that is a unique combination of recursive partitioning and direct k way methods , which will achieve the ef.ciency of a recursive approach , while also having the same accuracy as a direct k way method .
We follow a greedy strategy to recursively partition a network to optimize Q . Unlike the existing algorithms that always seek a bi partition , we adopt a direct k way partition strategy as in the WS algorithm . Briefiy , we compute the best k way partition with k = 2 ; 3; ; l using the NJW algorithm , and select the k that gives the highest Q value . Then for each subnetwork the algorithm is recursively applied . To reduce the computation cost , we restrict l to small integers . As we will shown in experiments , the algorithm with l as small as 3 or 4 can signi.cantly improve modularity over the standard bi partitioning strategy . Furthermore , the computation cost is also reduced with a slightly increased value of l compared to bi partitioning .
Given a network G and a small integer l that is the maximal number of partitions to be considered for each subnetwork , our algorithm Kcut executes the following steps .
1 . Initialize , to be a single cluster with all vertices , and set Q = 0 .
2 . For each cluster P in , ,
( a ) Let g be the subnetwork of G containing the ver tices in P .
( b ) For each integer k from 2 to l , i . Apply NJW to .nd a k way partitioning of ii . Compute new Q value of the network as k , g , denoted by ,g k n P ) . k = Q( , S ,g
Q0
( c ) Find the k that gives the best Q value , ie , k fi = k . arg maxk Q0 kfi .
( d ) If Q0 with ,g Q0 kfi , ie , , = , S ,g kfi > Q , accept the partition by replacing P kfi n P , and set Q = ( e ) Advance to the next cluster in , , if there is any . The inner loop , step 2(b ) , is similar to the .rst step of the WS algorithm , except that in 2(b)(ii ) we compute the modularity of the whole network G , which is different from the modularity Q(,g k ) . On the other hand , we do not need to iterate over all communities in the network to re compute Q . From the de.nition of Q in Section 2.2 , the contribution of each community towards Q is independent of the other communities . Therefore , after g is partitioned , Q can be ef.ciently updated with the communities that have just been created in g . At step 2(c ) , we decide the best way to partition g that can improve Q the most . This step turns out to be crucial in identifying globally good community structures with high Q values . At step 2(d ) , we test if partitioning g can contribute positively towards Q , and the partition is accepted only if Q increases . When the algorithm terminates , no communities can be further created to improve Q , thus , contains the best community structure . to O(n3 ) , since the maximal number of communities for a sparse network may be linear in n .
The running time of Kcut depends on the depth of the recursive calls . In the worst case , the partitions can be highly imbalanced , and the depth of the recursion is merely the number of partitions produced , K . A more practical estimate , however , is the average depth , which is close to logl K , where l is the maximal number of partitions considered by NJW . Therefore , the running time taken by eigs can be estimated to be O((mlh + nl2h ) logl K ) , which can be further simpli.ed to O(mlh logl K ) , since l is small and therefore in general m > nl . Similarly , the average case running time taken by k means is O(nl2e logl K ) , and the total complexity is given by O((mlh + nl2e ) logl K ) .
Our experimental results show that for large networks and small values of l , the time taken by eigs dominates , giving an overall time complexity in O(mlh logl K ) = ln l ) for Kcut . Therefore , assuming h is a conO(mh ln K l stant , also given that l is small and K = O(n ) , the total complexity is O(m log n ) , which is much smaller than the O(n3 ) running time of the WS algorithm . An important observation from the analysis is that the total running time of Kcut is not a monotonically increasing function of l . Analytically , the minimum value of l= ln l is achieved at l = 3 . Empirically , we observed that Kcut is most ef.cient with l = 3 to 5 ( see Section 42 )
The memory complexity of both algorithms is O(m ) , linear to the number of edges .
3.1 Computational complexity
3.2 Related methods
We .rst review the computational complexity of the WS algorithm , since the inner loop of Kcut is simply the WS algorithm , except that the computation of Q is slightly different . The WS algorithm contains two major components : computing eigenvectors and executing k means to partition the network . Note that although WS calls NJW multiple times , the eigen problem needs to be solved only once to obtain all Kmax eigenvectors . To compute eigenvectors , we used the eigs function in MATLAB , which has a time complexity in O(mKh + nK 2h + K 3h ) , where m and n are respectively the numbers of edges and vertices of the graph , K = Kmax is the number of eigenvectors to be computed , and h is the number of iterations for eigs to converge [ 33 ] . Since K < n , the running time of eigs can be simpli.ed to O(mKh + nK 2h ) . Second , we adopted a fast k means algorithm [ 8 ] in our implementation , which takes approximately O(nKe ) time , where e is the number of iterations for k means to converge . Since k means is called K times , the total running time is O(mKh + nK 2h + nK 2e ) , where the .rst two terms are for eigs and the last term is for k means . Assuming e and h constants , the overall time complexity of WS is O(mK + nK 2 ) , which can be close
Besides our algorithm and the WS method , several other algorithms have also been developed for identifying communities by modularity optimization . Newman proposed an algorithm that is based on recursive spectral bi partitioning [ 21 ] . The algorithm computes the leading eigenvector of a so called modularity matrix , and divides the vertices into two groups according to the signs of the elements in the eigenvector . The algorithm runs recursively on each subnetwork , until no improvement to Q is possible . Compared to our method , this algorithm is faster for small networks , since no k means is performed . On the other hand , the modularity matrix is very dense , with almost no zero entries . Therefore , the algorithm takes O(n2 ) memory even for sparse networks , in contrast to O(m ) for our method . Furthermore , the algorithm takes O(n2 log n ) running time , therefore , it does not scale well to large networks . Importantly , we will show that by combining k way partitioning with a recursive method , Kcut usually achieves higher modularity than the Newman method .
White and Smyth also proposed a fast greedy algorithm , spectral 2 , in addition to their optimal WS algorithm [ 33 ] . Like the Newman method , spectral 2 is recursive and uses spectral bi partitioning to optimize Q . In this algorithm , all Kmax ( a user provided parameter ) leading eigenvectors of a transition matrix P ( see section 2.2 ) are computed and used throughout the subsequent recursive partitions . For large networks , however , it is dif.cult to estimate the number of communities in advance , and expensive to compute a large number of eigenvectors .
There are also several methods that are not spectralbased . The edge betweenness algorithm [ 12 ] and the extremal optimization algorithm [ 7 ] are known to be very slow , with O(n3 ) and O(n2 log2 n ) running time , respectively . Another greedy approach , the CNM algorithm [ 5 ] , has approximately the same time complexity ( O(m log2 n ) ) as our method , but the communities returned often have poor quality [ 21 ] .
4 Evaluation
We now evaluate our algorithm on a variety of networks and compare it with three existing algorithms that were mentioned in Section 3.2 : the WS algorithm , the CNM algorithm , and the Newman ’s algorithm ( NM ) . In what follows , the results of our algorithm are denoted by K 2 , K 3 , , for l = 2 ; 3; . Note that Newman suggested in [ 21 ] a re.ning step to improve Q after the initial partitioning . To make a fair comparison , this re.ning step was omitted in our study , since in theory the same strategy can be applied to any other algorithm as well .
4.1 Computer generated networks
To evaluate Kcut , we .rst tested it on computergenerated networks with arti.cially embedded community structures . Each network had 256 vertices forming 8 communities of equal sizes . Edges were randomly placed with probability pin between vertices within the same community and with probability pout between vertices in different communities . We varied pin from 0.8 to 0.3 , representing networks with dense to sparse communities . For each pin , we varied pout from 0 to pin 50 . For each pair of ( pin , pout ) , we generated 100 networks and clustered them with WS ( Kmin = 2 , Kmax = 15 ) , Kcut ( l = 2 ; 3 ; 4 and 5 ) , and NM algorithms . To measure the accuracy of the results , we computed the Jaccard Index [ 30 ] , which is roughly the percentage of within community edges that were predicted correctly . The Jaccard Index between the true community structure ( , ) and predicted community structure ( ,0 ) is de.ned as
10 with an increment of pin
J( , ; ,0 ) = jS( , ) \ S(,0)j jS( , ) [ S(,0)j
;
( 1 ) where S( , ) and S(,0 ) are the sets of within community vertex pairs in , and ,0 , respectively . x e d n
I d r a c c a J
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0
Q e v i t l a e R
0.02
0
−0.02
−0.04
−0.06
−0.08
−0.1
−0.12
−0.14
−0.16
0
( a )
WS K−2 K−3 K−4 K−5 NM CNM
0.01
0.02
0.03
0.04
0.05 p_out
( b )
WS K−2 K−3 K−4 K−5 NM CNM
0.01
0.02
0.03
0.04
0.05 p_out
Results on computer generated
Figure 1 . networks . Qrelative = Qdiscovered , Qtrue . Fig 1(a ) shows the Jaccard Index as a function of pout for pin = 0:5 . Results for other values of pin or using other types of accuracy measurement are similar ( data not shown ) . The WS algorithm , which explicitly searches over all k ’s , has the best accuracy . On the other hand , Kcut with large l values can better approximate WS than with small l values . Moreover , as shown in Fig 1(b ) , the Q values achieved by the algorithms match their accuracies : WS has the highest modularity , followed by K 5 , K 4 , , and the Newman algorithm at last . A third measure , the number of times an algorithm predicted k correctly , also shows that WS > K 5 > > K 2 > NM ( data not shown ) . The CNM algorithm has an accuracy similar to K 2 for smaller pout , but its accuracy drops signi.cantly when pout increases .
4.2 Real world networks
We further tested our method on several real world networks . These include an acquaintance network in a Karate club [ 35 ] , the opponent network of American NCAA Division I college football teams in the year 2000 [ 12 ] , a coperforming network of Jazz Bands [ 13 ] , a protein protein interaction network of E . coli [ 25 ] , the Autonomous Systems topology of the Internet [ 10 ] , and a collaboration net
Table 1 . Q values for real world networks . Q n 34 115 198 1440 3015 27519
Network Karate Football Jazz PPI Internet Physicists 0.723 [ 21 ] Kmax : maximal number of communities for WS . K fi : number of communities returned by WS . The last column are the best Q values achieved by existing methods in the literature , and references to the methods . m K fi Kmax 8 78 613 20 8 5484 200 6223 100 5156 60793 600
NM CNM 0.383 0.577 0.439 0.337 0.620 0.659
0.393 0.493 0.394 0.341 0.524
K 5 0.420 0.590 0.439 0.364 0.601 0.743
K 4 0.420 0.596 0.439 0.348 0.601 0.739
Best
0.420 [ 33 ]
0.445 [ 7 ]
K 2 0.390 0.524 0.444 0.332 0.594 0.734
K 3 0.420 0.600 0.444 0.344 0.600 0.738
WS 0.420 0.602 0.439 0.362 0.604
4 10 4 133 52
Table 2 . Total CPU time ( seconds ) . ponents . As shown in Table 2 , although WS is ef.cient for small networks of up to a few hundred of vertices , it is very inef.cient on large networks . The Kcut algorithm , on the other hand , can handle networks of several thousand of vertices in less than half minute . It appears in Table 2 that CNM is the most ef.cient , especially for small networks . At least part of the reason is that CNM was implemented in the C language , while the other three algorithms were all implemented in MATLAB M les M .les are interpreted at run time , and therefore have higher overhead .
Also observe that Kcut is often faster with l = 3 ; 4 ; 5 than with l = 2 . Based on the analysis in Section 3.1 , the time Kcut spent in eigs is approximately linear to l= ln l , which reaches its minimum at l = 3 . In contrast , the time Kcut spent on k means is proportional to l2= ln l , which is monotonically increasing for l 2 . The experimental results in Table 3 partially support the theoretical analysis . For large networks , the total running time of Kcut is dominated by eigs . Therefore , Kcut can take advantage of a slightly increased l to reduce its running time . When l becomes too large , however , the running time of both components increases , and the ef.ciency of Kcut may degrade .
5 Real applications
Community discovery algorithms have a broad range of applications in many disciplines . Here , we demonstrate the utility of our algorithm on three real applications in biology , medicine , and social science , respectively .
5.1 Communities in a gene network
It is believed that biological systems are modular , consisting of groups of bio molecules responsible for different functions , such as metabolism , reproduction , and signal transduction , etc . The relationships between bio molecules have been mapped to several types of networks , including gene regulatory networks [ 18 ] and protein interaction networks [ 25 ] . Therefore , it is interesting to test whether these networks contain communities , and whether the community structure is related to the functional classi.cation of
Network Karate Football Jazz PPI Internet Physicists
WS 0.3 1.1 0.5 8k 3k
K 2 0.3 0.7 0.6 40 37 6k
K 3 0.3 0.6 0.7 26 27 3k
K 4 K 5 0.4 0.3 1.1 0.7 0.9 0.7 31 23 23 22 2k 2k
NM CNM* 0.02 0.1 0.04 0.3 0.06 0.3 58 0.8 63 172 283
*A signi.cant difference between CNM and the other algorithms here is that CNM was implemented in C , while all the other algorithms compared here were implemented in MATLAB m les work of physicists [ 19 ] . As shown in Table 1 , the WS algorithm usually returns community structures with the highest Q value . Although Kcut with l = 2 often performed poorly , Kcut with l 3 can usually achieve Q values as good as that by WS , whereas with a much reduced running time . Moreover , for the three networks ( Karate , Jazz , Physicists ) that have been analyzed by others , Kcut can .nd modularity values that are comparable to or better than the best known ones . The NM algorithm ( without the re.ning step ) and the CNM algorithm usually have much worse accuracy comparing to WS and Kcut . The WS and Newman algorithms failed to .nish on the physicist network , due to their excessive running time or memory usage .
In addition , the communities returned by Kcut are often very close to the known communities if they are available . For example , for the Karate club network , Kcut precisely predicted the actual separation of the club caused by a dispute among its members [ 12 ] . For the football network , Kcut correctly revealed the of.cial NCAA conference structure of the football teams [ 12 ] , except for a few teams that do not belong to any conference . Because of space limit , we omit the detailed results here , and focus on networks of real applications , which will be shown in Section 5 .
4.3 Running time
Table 2 shows the running time of the four algorithms on the six real world networks . Table 3 shows the time spent on eigs and k means by WS , Kcut and NM . CNM is based on a different rationale and does not have these two com
WS
K 3
K 2
Table 3 . CPU time ( seconds ) for program components . K 5
NM Network 0.11 Karate 0.28 Football 0.25 Jazz 53 PPI 150 Internet Physicists For WS and Kcut , the .rst and second columns are the time taken by eigs and k means , respectively . The last column is the time spent on eigs in the Newman algorithm .
0.1 0.29 0.25 18 14 1473
0.1 0.21 0.31 20 19 2451
0.16 0.33 0.26 34 31 5353
0.16 0.81 0.29 7857 2892
0.08 0.23 0.25 11 11 1473
0.11 0.23 0.23 4 5 109
0.11 0.22 0.06 3 3 79
0.22 0.7 0.5 8 9 170
0.2 0.36 0.3 7 6 152
0.08 0.1 0.11 14 12
K 4
Community
Table 4 . Enriched GO functional terms in communities .
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 size 460 159 272 334 172 449 226 346 118 172 90 94 9 14 205 585 8 18 42 6
Most signi.cant GO term ribosome biogenesis nuclear mRNA splicing , via spliceosome protein biosynthesis transcription response to DNA damage stimulus secretory pathway nucleocytoplasmic transport cell cycle nitrogen compound metabolism proteolysis during cellular protein catabolism oxidative phosphorylation RNA 3’ end processing pre replicative complex formation and maintenance protein amino acid N linked glycosylation protein targeting to mitochondrion carbohydrate metabolism histone methylation mRNA catabolism biological process unknown chromatin assembly f
32.8 % 46.5 % 62.9 % 40.4 % 41.9 % 21.8 % 23.9 % 29.5 % 39.8 % 23.3 % 24.4 % 17.0 % 77.8 % 64.3 % 9.3 % 10.1 % 75.0 % 50.0 % 73.8 % 100.0 %
F 2.9 % 1.4 % 11.1 % 6.8 % 2.6 % 2.9 % 1.6 % 5.6 % 3.3 % 1.8 % 0.6 % 0.3 % 0.2 % 0.6 % 0.7 % 3.1 % 0.2 % 0.8 % 22.0 % 1.2 % p
1.90E 138 1.10E 105 9.80E 97 8.80E 72 9.30E 71 2.20E 62 5.60E 50 4.80E 46 2.70E 37 3.90E 32 1.30E 28 1.50E 23 1.70E 17 1.30E 15 1.10E 14 3.90E 14 1.40E 13 1.60E 13 9.40E 11 1.30E 10 pHCL
4.30E 120 4.20E 89 2.10E 65 2.70E 17 1.80E 31 1.00E 50 9.90E 34 1.70E 57 3.90E 18 6.30E 20 5.00E 05 1.10E 09 6.50E 08 5.50E 14 4.20E 09 9.10E 06 4.80E 05 8.30E 07 3.70E 09 6.20E 12 f , F : percentage of genes in the community or genome associated with the GO term ; p : p value for the enrichment of a GO term in a community ; pHCL : p value for the enrichment of the same GO term in a gene clusters identi.ed by hierarchical clustering [ 17 ] . the molecules . We applied the Kcut algorithm to study a network of 4500 genes in the yeast S . cerevisiae , obtained by integrating a number of heterogeneous biological data sources [ 17 ] . The vertices in the network are genes , and an edge between two genes indicates that they may be involved in some common biological process supported by literature or experimental evidence such as gene expression microarray or protein interaction data [ 17 ] . The network may contain errors , and the edges may have different meaning , depending on the data source from which they were derived .
Applying Kcut , we obtained 47 communities , whose sizes range from 2 to 585 . Our analysis below is focused on the 36 communities that contain more than .ve genes . To understand the functions of these communities , we checked the enrichment of Gene Ontology ( GO ) terms [ 31 ] , which are a set of controlled vocabulary used to annotate genes functions , for the genes within each community . Enrichment is computed using hyper geometric test [ 3 ] . Briefiy , suppose that a community contains m genes , n of which are annotated by a function T , and that N out of M genes in the whole genome are annotated by T . the hyper geometric test measures the probability that we would expect at least n genes annotated by T if we had randomly drawn m genes from the genome . A low probability indicates that the community is signi.cantly enriched with T . To account for multiple testing , we corrected the p values using a Bonferroni procedure [ 3 ] , and used p value = 0.05 as a threshold for the signi.cance test .
All except one of the 36 communities contain signi.cantly enriched GO terms . Overall , these communities contain 2123 enriched GO terms . In contrast , using a hierarchical clustering method , Lee et . al . obtained 55 clusters [ 17 ] . Among them , 32 clusters contributed to a total of 1746 signi.cantly enriched GO terms , much fewer than that in Kcut . Figure 2 compares the p values for the GO terms that are enriched in both Kcut and hierarchical clustering . As shown , most GO terms are more signi.cantly enriched in Kcut than in hierarchical clustering , indicating the advantage of our methods against conventional graph clustering methods .
Table 4 lists 20 communities that have the most signi.cantly enriched GO terms . Many communities contain very signi.cantly enriched GO terms . For example , about one third of the genes in community 1 have functions in ribosome biogenesis , an 11 fold enrichment that are unlikely due to chance ( p < 2e 138 ) . About 40 % of genes in com s r e t s u c l l i a c h c r a r e h i n l i
) e u a v − p ( 0 1 g o − l
200
180
160
140
120
100
80
60
40
20
0
0
50
100
150
200
−log10(p−value ) in gene communities by Kcut
Figure 2 . Comparison of GO enrichment munity 4 are related to transcription ( p < 9e 72 ) . In contrast , only 21 % of genes in the corresponding hierarchical cluster are annotated by this term ( p < 3e 17 ) .
Since genes in the same community often share functions , the community structure may be used to predict gene functions . For example , community 19 contains 42 genes . The most signi.cant function category is ( cid:147)biological process unknown(cid:148 ) ( group A , 31 genes , p < 1e10 ) . The second most signi.cant GO term is ( cid:147)telomeraseindependent telomere maintenance(cid:148 ) ( group B , 5 genes , p < 1e 6 ) . To test whether the 31 unknown genes are also related to telomere maintenance , we searched the Saccharomyces Genome Database ( http://www . yeastgenome.org/ ) and other experimental data for more information about these genes . Using whole genome ChIP chip data [ 18 ] , we found that all 5 group B genes are regulated by at least three of the following four transcription factors : YAP5 , GAT3 , MSN4 , and PDR1 . Interestingly , many of the 31 group B genes , but none of the other genes , are also regulated by the four transcription factors : 18 by YAP5 ( p <1e 13 ) , 16 by GAT3 ( p <6e 14 ) , 8 by MSN4 ( p <2e 8 ) and 9 by PDR1 ( p <2e 8 ) . In addition , all the 5 group A genes and 10 of the group B genes have helicase activity ( p < 2e 17 ) . Furthermore , the majority of the 31 unknown genes are located in the telomere regions of chromosomes . These seem to be strong evidences that these unknown genes are very likely related to telomere maintenance functions .
5.2 Automatic detection of tumor types
An accurate classi.cation of tumor cells is crucial for effective therapy [ 9 ] . Traditionally , tumors have been classi.ed by their morphologic appearance , which is , unfortunately , often very subjective . Furthermore , tumors with similar histological features often respond very differently to chemotherapy [ 2 ] . To get around this problem , a promising alternative or complementary strategy is to classify tumors based on their genetic pro.les , ie the activity of hundreds or thousands of genes that are involved in the dis ease . Most of the existing tumor classi.cation approaches are based on supervised learning , such as support vector machines or decision trees , which aimed at identifying genetic features to distinguish two or more known tumor types [ 16 , 27 ] .
Here , we ask whether it is possible to automatically classify tumor samples into distinct types or subtypes , without knowing the sample labels or even the number of labels . This unsupervised learning approach has a few advantages over supervised learning methods . First , the existing tumor classi.cations are based on histological features , which may be unreliable themselves . Second , using unsupervised learning , we may be able to discover novel tumor sub types that have not been characterized by histological features previous . On the other hand , it is crucial to con.rm whether the automatically discovered tumor types are biologically meaningful and can provide useful information for understanding the disease or for improving its treatment .
In this study , we choose to focus on lymphoma , a family of tumors involving cells of the immune system , because of the large number of people it affects and the relative abundance of microarray data studying the diseases . We obtained the data from [ 2 ] , which contains the expression data of 4026 genes for 96 samples belonging to nine cell types , including three different types of tumors , ie diffuse large B cell lymphoma ( DLBCB ) , chronic lymphocytic leukemia ( CLL ) , and follicular lymphoma ( FL ) , as well as normal B and T cells at different stages of cell differentiation [ 2 ] .
From the gene expression data , we constructed a nearestneighbor network of samples . Briefiy , we .rst computed a pair wise Pearson correlation coef.cient between every two samples based on their gene expression patterns . We then connect each sample to .ve other samples whose correlation to the sample is the highest . This resulted in a network where each sample is connected to .ve or more samples . The edges are weighted by the correlation coefcients Edges with a weight below a cutoff 0.2 are removed to avoid false connections .
Applying the Kcut algorithm to the network , we identi.ed eight communities , each of which contains at most two cell types ( Table 5 ) . Furthermore , the results are almost invariant when we changed the number of nearest neighbors for each sample between 3 and 7 , indicating very stable community structures among the samples . As shown in Table 5 , FL cells and activated blood B cells are perfectly classi.ed into their own communities . Community 6 contains all the blood T cells and only one DLBCB cell . CLL and resting B cells are clustered into a single community , which is not surprising since the former has a very low proliferation rate , similar to the latter [ 2 ] . Community 1 contains almost half transformed cell lines and half DLBCB samples . With a closer inspection , however , we found that three of the DLBCB samples in this community
Community
1
2
3
4
5
6
7
8
Table 5 . Communities of cell samples
Samples OCI Ly3* , OCI Ly10* , DLCL 0042* , OCI Ly1* , WSU1 , Jurkat , U937 , OCI Ly12 , OCI Ly13.2 , SUDHL5 , DLCL 0041* DLCL 0030 , DLCL 0004 , DLCL 0029 , Tonsil GC B* , Tonsil GC Centroblasts* , SUDHL6 , DLCL0008 , DLCL 0052 , DLCL 0034 , DLCL 0051 , DLCL 0032 , DLCL 0018 , DLCL 0037 , DLCL 0020 , DLCL 0003 , DLCL 0033 DLCL 0011 , DLCL 0006 , DLCL 0049 , Tonsil* , DLCL 0039 , Lymph Node* , DLCL 0001 , DLCL0015 , DLCL 0026 , DLCL 0005 , DLCL 0023 , DLCL 0027 , DLCL 0024 , DLCL 0013 , DLCL 0002 , DLCL 0016 , DLCL 0014 , DLCL 0048 DLCL 0007 , DLCL 0031 , DLCL 0036 , DLCL 0010 , DLCL 0025 , DLCL 0040 , DLCL 0017 , DLCL0028 , DLCL 0012 , DLCL 0021 Blood T:Adult CD4+ Unstim , Blood T:Adult CD4+ I+P Stim , Cord Blood T:Neonatal I+P Stim , Blood T:Neonatal CD4+ Unstim , Thymic T:Fetal CD4+ Unstim , Thymic T:Fetal CD4+ I+P Stim , DLCL 0009* Blood B:memory* , Blood B:naive* , Blood B* , Cord Blood B* , CLL 60 , CLL 68 , CLL 9 , CLL 14 , CLL 51 , CLL 65 , CLL 71;Richter ’s , CLL 71 , CLL 13 , CLL 39 , CLL 52 Blood B:anti IgM+CD40L low 48h , Blood B:anti IgM+CD40L high 48h , Blood B:anti IgM+CD40L 24h , Blood B:anti IgM 24h , Blood B:anti IgM+IL 4 24h , Blood B:anti IgM+CD40L+IL 4 24h , Blood B:anti IgM+IL 4 6h , Blood B:anti IgM 6h , Blood B:anti IgM+CD40L 6h , Blood B:antiIgM+CD40L+IL 4 6h FL 9 , FL 9;CD19+ , FL 12;CD19+ , FL 10;CD19+ , FL 10 , FL 11 , FL 11;CD19+ , FL 6;CD19+ , FL5;CD19+
Cell type Transformed cell lines * : DLBCB DLBCB * : , GCB
DLBCB * : , Lymph node / tonsil
DLBCB
Blood T cells * : , DLBCB CLL * : Resting blood B . Activated blood B cells
FL
( OCI Ly1 , Ly3 , and Ly10 ) are actually laboratory cultivated cell lines rather than samples from real patients , which may be the reason that they are grouped together with the transferred cell lines . The GCB and Lymph node/tonsil cells are grouped together with DLBCB as expected , but a discussion is out of the scope of this paper [ 2 ] . Therefore , our algorithm has detected most of the cell types successfully , without any knowledge about the samples .
Furthermore , the majority of the DLBCB samples are grouped into three communities ( 2 , 3 , and 4 ) . It is known that not all DLBCB tumors are equal : 40 % of patients respond well to chemotherapy and have prolonged survival , while the others have a much shorter survival time after the treatment [ 2 ] . To test whether the three communities correspond to different tumor subtypes , we counted the rate of survival after chemotherapy for the patients within each community . Remarkably , the patients in community 2 have a survival rate much higher than average . The median survival length for the patients in the three communities are 71.3 , 23 , and 12.5 months , respectively . In fact , 9/11 ( 82 % ) patients in community 2 lived more than .ve and half years after the treatment , while only 5/26 ( 19 % ) patients in communities 3 and 4 lived this long .
Furthermore , we combined our classi.cation of DLBCB samples with the International Prognostic Index ( IPI ) , which is a clinical tool developed by oncologists to predict the prognosis of lymphoma patients [ 2 ] . In general , the patients with IPI > 2 have a much lower survival rate ( 21.4 % ) than those with IPI 2 ( 625 % ) By combining our classi.cations , we .nd that all ( 8/8 ) the community 2 patients having IPI 2 survived more than 5 years after the therapy . In contrast , for the patients in communities 3 and 4 with IPI 2 , only 23%(3/13 ) survived more than 5 years . Further more , only one of the eight patients in communities 3 and 4 with IPI > 2 survived more than 5 years . These results indicate that by combining genetic and clinical information , we may be able to better predict the outcome following the chemotherapies .
5.3 Communities in newsgroups
As the last application , we analyzed the community structure in the Usenet , the network of topic oriented newsgroups on the Internet . Most existing attempts in analyzing the structure of Usenet focused on the semantic properties of newsgroups , for example , by clustering or classifying the messages according to their contents [ 24 , 28 ] . Here , we are interested in studying the social network among newsgroup users . We ask whether it is possible to identify groups of users with common interests without looking at the actual content of their messages . To this end , we use what we call a message replying network , where each vertex is a unique user , and an edge between two users indicates that one has replied a message of the other . The links are weighted by the number of times the communication occurred between them . The network is made into bidirectional , ie we ignore the directions of edges .
We downloaded from UCI KDD Archive website ( http://kddicsuciedu/ ) a data set containing 20,000 messages from 20 newsgroups . We extracted the email address in the ( cid:147)From:(cid:148 ) .eld of each message , and the .rst email address in the text in a sentence like ( cid:147)xxx@yyy writes:(cid:148 ) , which indicates that the current message is a response to an earlier message of xxx@yyy . From these messages , we identi.ed a total of 9746 unique users , 5468 of which form a giant connected component . Our experiment is focused on this giant component , which contains 12306 edges . The degrees of the vertices follow a power law distribution with r = 36
Applying Kcut , we obtained 48 communities with a Q value = 0.9116 , indicating a very strong community structure . The sizes of the communities are highly diverse , ranging from 9 to 371 . It is important to note that the network structure is the only information used by our algorithm for community detection . Semantic information such as the content of a message , as well as to which newsgroup a message was posted , are only used to analyze the communities . To check whether the members of each community indeed have similar interests , we .rst checked the posting history of the users . Figure 3 shows the messages posted in the 20 newsgroups by the users in the 25 largest communities , where each row represents a user , and each column represents a newsgroup . The horizontal line shows the boundary of communities . The data is normalized so that each row has a unit length . As shown , the users in each community post messages primarily to a particular newsgroup , meaning that the detected communities indeed correspond to common interests or topics . To have a rough estimation of the performance , we assume that each newsgroup is a proxy of a community , and each user belongs to a newsgroup/community where he/she has posted the most messages . This is of course a very crude estimation , since many users post to multiple newsgroups equally . It is also probably not true that the number of communities is equivalent to the number of newsgroups , since the users within a single newsgroup may have different interests , while some newsgroups often cross link messages . Nevertheless , 78 % of the users can be assigned to a correct community by looking at the message replying network alone , which is not perfect , but very encouraging .
To test whether the users in different communities have different interests , we computed statistics of the words used by the members of each community . We .rst pooled together all messages in the 20 newsgroups , and counted the background frequency that each word is used . We then combined the messages posted by the members of a community , and computed the target frequency of each word in the community . We de.ned a word as a signi.cant keyword for a community if its target frequency is ten times higher than its background frequency . We then sorted the keywords in each community according to their absolute target frequency . The top ten most frequently used keywords for each community are listed in Table 6 .
As can be seen , most communities have their unique combination of keywords highly related to the newsgroups that they frequently send messages to . For example , the users in community 1 frequently post to rec . motorcycles , and the most signi.cant keywords in the community are ( cid:147)bike(cid:148 ) and ( cid:147)ride(cid:148 ) . Sometimes users in different communities may post to the same newsgroups . For
500
1000
1500
2000 r e s U
2500
3000
3500
4000
4500
2
4
6
8
1
0.9
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
14
16
18
20
10
12 Newsgroup rec.autos , sci.crypt ,
Figure 3 . User posting history . The 20 newsgroups , from left to right , are alt.atheism , comp.graphics , composmscompsysmachardware , windows.misc , rec.motorcycles , compwindowsx , recsportbaseball , sci.med , sci.space , talkpoliticsmideast , talkpoliticsmisc , and talkreligionmisc misc.forsale , recsporthockey , compsysibmpchardware , sci.electronics , socreligionchristian , talkpoliticsguns , example , users in communities 10 , 11 and 17 all post to alt.atheism , and users in communities 4 and 14 often post to talkpoliticsmideast It can be seen that , however , these communities are represented by very different keywords , indicating the existence of sub structures within these newsgroups ( Table 6 ) .
Furthermore , we also observed that users in some comto two or more newsgroups , munities frequently post which indicates some relationship between these newsgroups ( Fig 3 ) . Examples include newsgroups 1 ( alt . atheism ) and 20 ( talkreligionmisc ) , 3 ( comp . osms windowsmisc ) and 4 ( compsysibmpc hardware ) , 17 ( talkpoliticsguns ) and 19 ( talk . politicsmisc ) The relationships between these newsgroups are obvious from the names of the newsgroups .
6 Conclusions
We have developed a fast algorithm , Kcut , for identifying community structures in large networks . Our approach is based on a greedy optimization of a modularity function Q . Unlike previous methods , Kcut is not restricted to bi partitions , but considers all k way partitions for a small range of k . We have found that this relaxation not only improves the quality of the identi.ed communities , but also increases the ef.ciency of the algorithm . We have demonstrated the performance of our method on a variety of random and real world networks . Compared to the existing approaches , Kcut can .nd better Q values than other greedy approaches , and has an accuracy comparable to that of a much slower exhaustive search method .
In addition , we have applied our method to several real problems in three different .elds : biology , medicine and social science . For all cases , our algorithm is able to detect signi.cant and meaningful community structures , and
Community 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
Size 371 362 347 332 327 311 283 280 272 272 211 205 165 119 99 99 97 95 94 93 90 89 79 79 58
Newsgroup rec.motorcycles sci.crypt sci.space talkpoliticsmideast recsporthockey talkpoliticsguns recsportbaseball rec.autos socreligionchristian alt.atheism alt.atheism talkpoliticsmisc talkreligionmisc talkpoliticsmideast sci.electronics sci.med alt.atheism talkpoliticsmisc compsysmachardware composms windowsmisc sci.med compsysibmpchardware rec.motorcycles recsporthockey talkpoliticsguns
Table 6 . Keywords within each community
Keywords bike,ride,helmet,bikes,riding,dog,motorcycle,viking,passenger,mph clipper,encryption,keys,escrow,algorithm,secure,encrypted,phones,proposal,wiretap launch,orbit,mission,shuttle,pat,solar,spacecraft,moon,fiight,sky holocaust,museum,attacks,civilians,memorial,bullock,occupied,territories,territory team,hockey,season,insurance,player,blues,teams,cup,ice,playoffs gun,guns,weapons,.rearms,deaths,handgun,homicides,concealed,boulder,handguns convention,political,hit,players,party,baseball,average,clutch,sept,parties car,cars,engine,dealer,mustang,ford,fiat,rear,bird,mph sin,homosexual,scripture,marriage,worship,baptism,pope,spiritual,sabbath,sinful moral,objective,morality,perry,served,immoral,leftover,truelove,prophecy,messiah atheism,atheists,atheist,hatching,hens,fallacy,theism,theists,dollar,morals sex,sexual,homosexual,gay,homosexuals,male,partners,associate,gravity magi,commandments,conscious,hanging,teaches,persecution,guilt,contradictions turks,soviet,genocide,turkey,extermination,population,ottoman,mountain,roads wire,wiring,ground,circuit,neutral,cable,outlets,battery,hot,ham,wires,connected vitamin,universe,physical,patients,yeast,doctor,diet,medicine,treatment,clinical evolution,theory,gravity,spirit,holy,theories,creed,jack,fox,grace,insert,rich warrant,drugs,murder,knock,barrel,of.cers,raid,govt,reno,founding apple,keyboard,option,energy,duo,coprocessor,macs,movie,militia,playback windows,win,modem,zip,swap,apps,fonts,ports,icon,mickey cause,diet,corn,patients,thyroid,blood,doctor,treatment,eye,disease bit,bus,mac,fast,memory,controller,drives,mode,interface,faster bike,riding,dog,rider,technique,helmet,motorcycle,evil,dif.cult,tom game,team,hockey,players,league,wings,baseball,leafs,player,teams gun,rearms,rearm,section,crime,guns,weapon,license,military,committee the community structures can provide important information about the systems of interest , which may have many practical applications .
Acknowledgments
This research was supported in part by NSF grants ITR/EIA0113618 and IIS 0535257 and a grant from Monsanto Company to WZ
References
[ 1 ] R . Albert and A . Barabasi . Statistical mechanics of complex networks . Reviews of Modern Physics , 74:47 , 2002 .
[ 2 ] A . Alizadeh , M . Eisen , R . Davis , C . Ma , I . Lossos , A . Rosenwald , J . Boldrick , H . Sabet , T . Tran , X . Yu , J . Powell , L . Yang , G . Marti , T . Moore , J . H . J , L . Lu , D . Lewis , R . Tibshirani , G . Sherlock , W . Chan , T . Greiner , D . Weisenburger , J . Armitage , R . Warnke , R . Levy , W . Wilson , M . Grever , J . Byrd , D . Botstein , P . Brown , and L . Staudt . Distinct types of diffuse large b cell lymphoma identi.ed by gene expression proling Nature , 403:503(cid:150)11 , 2000 .
[ 3 ] D . Altman . Practical Statistics for Medical Research . Chap man & Hall/CRC , 1991 .
[ 4 ] J . Baumes , M . Goldberg , M . Magdon Ismail , and W . Wallace . Discovering hidden groups in communication networks . 2nd NSF/NIJ Symposium on Intelligence and Security Informatics . , 2004 .
[ 5 ] A . Clauset and et . al . Finding community structure in very large networks . Physical Review E , 70:066111 , 2004 .
[ 6 ] L . Danon , J . Duch , A . Diaz Guilera , and A . Arenas . Comparing community structure identication J . Stat . Mech . , page P09008 , 2005 .
[ 7 ] J . Duch and A . Arenas . Community detection in complex networks using extremal optimization . Physical Review E , 72:027104 , 2005 .
[ 8 ] C . Elkan . Using the triangle inequality to accelerate k means . In ICML , pages 147(cid:150)153 , 2003 .
[ 9 ] D . Ellis , M . Eaton , R . Fox , S . Juneja , A . Leong , J . Miliauskas , D . Norris , D . Spagnolo , and J . Turner . Diagnostic pathology of lymphoproliferative disorders . Pathology , 37:434(cid:150)56 , 2005 .
[ 10 ] M . Faloutsos and et . al . On power law relationships of the internet topology . In SIGCOMM , pages 251(cid:150)262 , 1999 .
[ 11 ] P . Fjallstrom . Algorithms for graph partitioning : A survey . Linkoping Electron . Atricles in Comput . and Inform . Sci . , 1998 .
[ 12 ] M . Girvan and M . Newman . Community structure in social and biological networks . Proc Natl Acad Sci U S A , 99:7821(cid:150 ) 6 , 2002 .
[ 13 ] P . Gleiser and L . Danon . Community structure in jazz . Ad vances in Complex Systems , 6:565 , 2003 .
[ 14 ] R . Guimera and L . N . Amaral . Functional cartography of complex metabolic networks . Nature , 433:895(cid:150)900 , 2005 .
[ 15 ] J . Hopcroft , O . Khan , B . Kulis , and B . Selman . Tracking evolving communities in large linked networks . Proc Natl Acad Sci U S A , 101 Suppl 1:5249(cid:150)53 , 2004 .
[ 16 ] J . Jaeger , D . Koczan , H . Thiesen , S . Ibrahim , G . Gross , R . Spang , and M . Kunz . Gene expression signatures for tumor progression , tumor subtype , and tumor thickness in laser microdissected melanoma tissues . Clin Cancer Res , 13:806(cid:150)15 , 2007 .
[ 17 ] I . Lee , S . Date , A . Adai , and E . Marcotte . A probabilistic functional network of yeast genes . Science , 306:1555(cid:150)8 , 2004 .
[ 18 ] T . Lee , N . Rinaldi , F . Robert , D . Odom , Z . Bar Joseph , G . Gerber , N . Hannett , C . Harbison , C . Thompson , I . Simon , J . Zeitlinger , E . Jennings , H . Murray , D . Gordon , B . Ren , J . Wyrick , J . Tagne , T . Volkert , E . Fraenkel , D . Gifford , and R . Young . Transcriptional regulatory networks in saccharomyces cerevisiae . Science , 298:799(cid:150)804 , 2002 .
[ 19 ] M . Newman . The structure of scienti.c collaboration net works . Proc Natl Acad Sci USA , 98:404(cid:150)409 , 2001 .
[ 20 ] M . Newman . The structure and function of complex net works . SIAM Review , 45:167(cid:150)256 , 2003 .
[ 21 ] M . Newman . Modularity and community structure in net works . Proc Natl Acad Sci USA , 103:8577(cid:150)82 , 2006 .
[ 22 ] M . Newman and M . Girvan . Finding and evaluating commu nity structure in networks . Phys Rev E , 69:026113 , 2004 .
[ 23 ] A . Y . Ng , M . I . Jordan , and Y . Weiss . On spectral clustering : Analysis and an algorithm . In NIPS , pages 849(cid:150)856 , 2001 . [ 24 ] K . Nigam , A . K . McCallum , S . Thrun , and T . M . Mitchell . Text classi.cation from labeled and unlabeled documents using EM . Machine Learning , 39:103(cid:150)134 , 2000 .
[ 25 ] L . Salwinski , C . Miller , A . Smith , F . Pettit , J . Bowie , and D . Eisenberg . The database of interacting proteins : 2004 update . Nucleic Acids Res , 32:D449(cid:150)51 , 2004 .
[ 26 ] J . Shi and J . Malik . Normalized cuts and image segmentation . IEEE Trans . Pattern Anal . Mach . Intell . , 22:888(cid:150)905 , 2000 .
[ 27 ] M . Shipp , K . Ross , P . Tamayo , A . Weng , J . Kutok , R . Aguiar , M . Gaasenbeek , M . Angelo , M . Reich , G . Pinkus , T . Ray , M . Koval , K . Last , A . Norton , T . Lister , J . Mesirov , D . Neuberg , E . Lander , J . Aster , and T . Golub . Diffuse large b cell lymphoma outcome prediction by gene expression pro.ling and supervised machine learning . Nat Med , 8:68(cid:150)74 , 2002 . [ 28 ] N . Slonim and N . Tishby . Document clustering using word clusters via the information bottleneck method . In Proc . of ACM SIGIR conf on Research and development in information retrieval , pages 208(cid:150)215 , New York , NY , USA , 2000 . ACM Press .
[ 29 ] V . Spirin and L . Mirny . Protein complexes and functional modules in molecular networks . Proc Natl Acad Sci U S A , 100:12123(cid:150)8 , 2003 .
[ 30 ] P . Tan , M . Steinbach , and V . Kumar . Introduction to Data
Mining . Addison Wesley , 2005 .
[ 31 ] The Gene Ontology Consortium . The gene ontology ( go ) database and informatics resource . Nucleic Acids Res , 32 , 2004 .
[ 32 ] D . Verma and M . Meila . A comparison of spectral clustering algorithms . Technical report , Univ . of Washington , 2003 .
[ 33 ] S . White and P . Smyth . A spectral clustering approach to .nding communities in graph . In SIAM Data Mining , 2005 . [ 34 ] D . Wilkinson and B . Huberman . A method for .nding communities of related genes . Proc Natl Acad Sci U S A , 101 Suppl 1:5241(cid:150)8 , 2004 .
[ 35 ] W . Zachary . An information fiow model of confiict and .ssion in small groups . J . Anthropol . Res . , 33:452(cid:150)473 , 1993 .
