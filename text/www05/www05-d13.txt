METEOR : METADATA AND INSTANCE EXTRACTION
FROM OBJECT REFERRAL LISTS ON THE WEB
SRINIVAS VADREVU , FATIH GELGI ,
SARAVANAKUMAR NAGARAJAN , HASAN DAVULCU
Department of Computer Science and Engineering
Arizona State University e mail : {svadrevu,fagelgi,nrsaravana,hdavulcu}@asu.edu
Tempe , AZ 85287 5406 , USA
The Web has established itself as the largest public data repository ever available in the history of mankind . Even though the vast majority of information on the Web is formatted to be easily readable by the human eye , “ meaningful information ” is still largely inaccessible for the computer applications . In this paper we present the METEOR system which utilizes various presentation and linkage regularities from referral lists of various sorts to automatically separate and extract metadata and instance information . Experimental results for the university domain with 12 computer science department Web sites , comprising 361 individual faculty and course home pages indicate that the performance of the metadata and instance extraction averages 85 % , 88 % F measure respectively . METEOR achieves this performance without any domain specific engineering requirement . Keywords : Web , Semantic , Metadata , Object , Instance , Extraction .
1 Introduction
Scalable information retrieval 1 based search engine technologies have achieved wide spread adoption and commercial success towards enabling access to the Web . However , since they are based on an unstructured representation of the Web documents , their performance in making sense of the available information is also limited . Hence , in order to make the Web more accessible with database style querying and automated reasoning , we need scalable techniques that can identify various types of entities , their attributes and relationships . In this paper we present the METEOR system which utilizes various presentation regularities 2 within Web pages and linkage regularities from referral lists of various sorts to automatically extract metadata and instance information .
Thanks to the HTML format , unlike plain text documents , Web pages organize and present their content within nested hierarchies of HTML structures . In this paper we present an algorithm that can detect various HTML regularities and utilize them to structure the Web page content itself into hierarchical group structures which contains blocks of highly regularly presented instances . Our algorithm is based on the observation that most group instances are usually presented together consecutively and they are also presented with consistent HTML formatting . Our algorithm is robust in a well defined sense ; it can accurately identify all group instances even in the presence of certain irregularities .
1
Figure 1 . An example of the object referral list page , that links individual object pages . The figure shows an individual object page and one of its object attribute pages . The labels in individual object page and the object attribute page are marked with corresponding path identifier symbols .
Furthermore , many Web pages present their information in the form of labeled lists and tables of various sorts . Consider the first page in the example shown in Figure 1 that lists the faculty instances in a computer science department . Each of these faculty instance links to an individual faculty home page with detailed information . We denote these types of groups as object referral lists ( ORL ) . Examples of ORLs are faculty listings in the universities , job listings in company sites , course listings in online schools , hotel and hospital listings in directories etc . Object referral lists follow a highly regular linkage pattern ; first they list their instances under an informative label such as jobs , f aculty , hotels etc . and then each instance links to an individual detailed object page . The individual object page presents the detailed attributes of an object as shown in the second page of Figure 1 . Sometimes the individual object page may present its attribute information by linking to an object attribute page as shown in the third page of Figure 1 .
In this paper we present algorithms that can interpret any given ORL to navigate to its instances and extract their attributes and values . For a f aculty ORL this algorithm would typically extract attributes such as publications , researchareas , courses , students , address and telephone . We currently do not align the extracted metadata and instance information with the knowledge structure as it is hard to obtain the domain ontology automatically and we plan to investigate this problem in future . We also currently do not process plain text inside the Web pages . But the metadata extracted from structured parts of the Web pages can be used to extract relationships from text with
2 the help of a natural language parser . The rest of the paper is organized as follows . Section 2 gives an overview of the related work . Section 3 presents the grouping algorithm for Web pages . Section 4 presents the interpreter algorithm for the ORL structures . Section 5 presents experimental results and Section 6 concludes the paper . For more details , reader may refer to the technical report 3 .
2 Related Work
In this section , we present an overview of the related work from several areas and show how our system is different from them .
Wrapper Development Tools : Wrappers 4,5 are scripts that are created either manually or semi automatically after analyzing the location of the data in the HTML pages . Wrappers tend to be brittle against variations and require maintenance when the underlying Web sites change .
Template based algorithms : RoadRunner 6 works with a pair of documents from a collection of template generated Web pages to infer a grammar for the collection using union free regular expressions . ExAlg 7 is another system that can extract data from template generated Web pages . ExAlg uses equivalence classes ( sets of items that occur with the same frequency in every page ) to build the template for the pages by recursively constructing the page template starting from the root equivalence class . Our work differs from such approaches in a way that it performs extraction without the assumption that the object instance pages should be template driven .
Ontology based approaches : Ontology based approaches 8 require a fully developed domain ontology and utilize matching and disambiguation algorithms to locate and extract the entities and relationships of interest . On the other hand , KnowItAll system 9 requires only a set of class and relation names with a small set of generic rule templates with an assessor algorithm to extract and rank facts from free text segments . The Armadillo system 10 extracts RDF triplets from Web pages that adhere to a pre specified ontology . Our METEOR approach differs from these approaches in that it is domain independent and it does not require a domain specific ontology .
3 Semantic Partitioning
The Semantic Partitioner infers hierarchical relationships among the leaf nodes of the DOM ( Document Object Model ) tree of a Web page , where all the document content is stored . Semantic partitioner achieves this through a sequence of two operations : hierarchical grouping and promotion .
3
3.1 Hierarchical Grouping
During the preprocessing step , the Web page is parsed and its DOM tree is generated . Next , each leaf node is labeled by its attributed root to leaf HTML tag path . Each path is assigned a unique path identifier thus yielding a sequence of path identifiers for each Web page . The hierarchical grouping is based on a regular pattern mining algorithm which yields a hierarchy of groups ( G ) and their instances ( I ) . The Hierarchical Grouping algorithm in Algorithm 1 identifies all the consecutive group instances and their boundaries . The algorithm works by detecting approximate repeating substrings of a sequence . The standard algorithms to learn regular expressions to identify repeating instances within sequences either require large sets of labeled examples 11 or their assumptions are too limiting for the web page instances . For example , the k mismatch tandem repeat algorithm 12 requires a pre estimate of k for each grouping in the Web pages . Since , the seminal work of Gold 13 showed that the problem of inferring a Deterministic Finite Automata ( DFA ) of minimum size from positive examples is NP complete , we have chosen to develop a set of Web page independent assumptions that holds for a large variety of groups and their instances on the Web . Next , we present our assumptions and a grouping algorithm that correctly identifies all ideal groupings whenever our assumptions hold .
We use the individual object page shown in Figure 1 to demonstrate the inner workings of our hierarchical grouping algorithm . The path sequence corresponding to that example as marked in the figure is aaabcdef ef f ghijhikhijhilhijhikmnnonmpnnqrq , where each symbol in the sequence corresponds to the root to leaf HTML tag of the labels in the page . In this path sequence , the substrings aaa , bcdef ef f , ghijhikhijhilhijhik , mnnonmpnnqrq correspond to the navigation bar , affiliations , publications , and the contact information respectively .
In order to present our algorithms we need the following definitions . Atom : Given a sequence and a header identifier , an atom is defined as any substring that starts with an occurrence of a header and extends until its next occurrence . In the above example given a header symbol a , the sequence aaa yields the atoms a , a and a . Similarly , given header symbol h , the substring hijhikhijhilhijh yields the atoms hij , hik , hij , hil , hij , hik . Atom Compatibility : Two atoms A and A0 are atom compatible , denoted by A ≡ A0 , if their pattern signature aligns with only insertions from either one of them to the other . The pattern signature of atoms is computed as regular expressions in a bottom up fashion using our algorithm . For example , the atoms for the path sequence abcbgcbgcdabcbhcbcdabcd for the header a are abcbgcbgcd , abcbhcbcd , abcd and their corresponding pattern signatures would be abc(bgc)∗d , a(bc)∗bhcd and abcd . Hence , the first and second atoms are compatible with the third atom . However , the first and second atoms are not compatible .
4
Algorithm 1 Hierarchical Grouping Algorithm HierarchicalGrouping(S ) Input : S : A sequence of path identifier symbols for a Web page Output : Pattern Signature P for the string S 1 : pat list := φ ; pat := φ ; 2 : cur := S.first ; f ound := true ; 3 : while cur <> end of(S ) do 4 : atoms[ ] := get atoms(cur , S ) ; comp atoms := φ ; if |atoms[]| > 1 then
5 :
6 :
7 :
8 :
9 : 10 :
11 :
12 : 13 :
14 : 15 :
16 :
17 :
18 :
19 :
20 :
21 :
22 :
23 :
24 :
25 :
26 : cand sig := HierarchicalGrouping(atoms[0] ) ; for comp ∈ atoms[ ] and comp 6= atoms[0 ] do comp sig := Hierarchical Grouping(comp ) ; aligned := align(cand sig , comp sig ) ; if aligned then comp atoms := comp atoms ∪ comp ; end if end for if |comp atoms| > 0 then pat list := maximize(atoms[0 ] , comp atoms , pat list ) ; pat := append(pat , pat list.last ) ; cur := cur + S.index(pat list.last ) ; else pat := append(pat , S.element(cur ) ; cur := cur + 1 ; end if else pat := append(pat , S.element(cur) ) ; cur := cur + 1 ; end if
27 : 28 : end while 29 : return pat
Instance : An instance is defined as a sequence of one or more contiguous atoms . Instance compatibility : An instance I is compatible with another instance I0 , denoted by I ≡ I0 , if the following three conditions are satisfied :
• The total number of atoms in both instances I and I0 are equal . • ∀ Ai ∈ I , ∃ A0 • The alignments of corresponding Ai and A0 i should be consistent in the sense that either atoms of I inserts into corresponding atoms of I0 or i ∈ I0 , such that Ai ≡ A0 i .
5 vice versa . For example , the instances hijhik and hijhil are not instance compatible since their second atoms hik and hil are not atom compatible . However the instances abcbgcbgcd , abcbhcbcd are both instance compatible with abcd .
Now we can state our assumptions as follows : Instance Header Assumption : All instances of a group and their sub group instances always begins with the same header . For the example mentioned above , the header h for the substring that corresponds to the Publications section in the Web page satisfies our assumption yielding the the instances hijhik|hijhil|hijhik , which are individual publications in the Web page . Group Assumption : A group is defined as a sequence of two or more contiguous instances such that ∀I ∈ G , ∃ I0 ∈ G , such that I ≡ I0 . The two possible groupings for the substring hijhikhijhilhijhik are hijhik|hijhil|hijhik and hij|hik|hij|hil|hij|hik . In these two groupings , the first grouping breaks the publications section into individual publications , whereas the second grouping breaks the individual publications .
Our group assumption relies on the intuition that a sequence of mismatching instances can still be made into a group , if for each instance there exists another compatible instance anywhere in the group that can act as its witness . Hence , our group definition is a robust one in the sense that , it can accurately identify all group instances even in the presence of irregularities whenever each type of irregular instance is witnessed by at least another instance .
Since any pairwise compatible atom grouping constitutes a grouping , the following measure enables our algorithm to prefer larger multi atom instances over simple atom groupings .
Ideal Grouping : A grouping is said to be an ideal grouping if it maximizes the pairwise compatibility among its instances after all the pairwise incompatibilities are accounted for . The degree of compatibility for a group is defined as
The degree of PairwiseCompatibility(G ) =
|{(Ii , Ij)|Ii ≡ Ij}| − |{(Ii , Ij)|Ii 6≡ Ij}|
X
Ii,Ij∈G,i<j
For example , the pairwise compatibilities for some of the possible groupings of the sequence hijhikhijhilhijh are :
PairwiseCompatibility(hijhik|hijhil|hijhik ) = −1 and PairwiseCompatibility(hij|hik|hij|hil|hij|hik ) = −7 .
The first group maximizes the number of atoms in each instance and hence it is preferred , which in fact identifies the correct instances of publications in the individual object page in Figure 1 .
6
Figure 2 . The group structures for the individual object page and the object attribute page in Figure 1 . The groups G1 , G2 , G3 , G4 , G5 , G6 correspond to the navigation bar , affiliations , publications , address , the telephone information and the courses respectively .
Demonstration of with the inner workings aaabcdef ef f ghijhikhijhilhijhikmnnonmpnnqrq object page in Figure 1 and explain the process .
Algorithm
1
Theorem : The Hierarchical Grouping Algorithm presented in Algorithm 1 computes an ideal grouping G for any given sequence S that satisfies the Instance Header and Group assumptions . Example : illustrate We the using from the the sequence individual
The HiearchicalGrouping algorithm attempts to standardize the path sequence as a regular expression which can be used to parse the original sequence into hierarchical group structures , presented in Figure 2 . It utilizes the maximize subroutine that finds the maximum number of consecutive atoms that can be appended to the current atom . For example , initially the subpattern ( a)∗ is computed using the maximize subroutine by recursively invoking the HieararchichalGrouping algorithm . This pattern corresponds to the regularly presented structure , the navigation bar of the individual object page shown as G1 in Figure 2 . Then the algorithm continues to find the subpatterns bcd(e(f)∗)∗ , g(hij(hik|hil|hik))∗ that corresponds to the affiliations and the publications presented in the page shown as G2 and G3 , and appends to the previous subpattern ( a)∗ . The algorithm eventually generates nested group structures presented in Figure 2 from the final pattern . The complexity of the algorithm is O(n3 ) where n is the length of the input string .
3.2 Promotion
The final step in semantic partitioning is promotion . After hierarchical grouping , all the content of the Web page is still at the leaf nodes of the hierarchical group tree and hence promotion of some of the leaf nodes is necessary in order to organize them into a semantic hierarchy . The promotion algorithm identifies those leaf nodes that should be promoted above their siblings . A label is promoted if it satisfies one of the following rules :
7
• A ( sub)group structure can be labeled with its nearest preceding emphasized node if there is no other ( sub)group structure between them ; • A value instance can be labeled with its previous emphasized node A node label is said to be emphasized , if it satisfies one of the following conditions :
• It ’s labeled text is fully capitalized , or • There is a bold tag ( such as <b> , <bold> , <h1> etc . ) on its DOM tree • It ’s immediate consecutive group structure corresponds to an HTML list tag path , or structure ( <ul> or <ol> )
In the individual object page in Figure 1 the nodes satisfying the emphasized condition are Daniel M oore , P ublications , Address , and T elephone . Since all of them satisfy the preconditions for promotion they are all promoted as group headers as shown Figure 2 .
Once the hierarchical grouping and promotion steps are completed we obtain the final semantic partitioning for the given Web page . In the next Section we present an algorithm to separate and extract metadata and instance information from such semantic structures .
4
Interpreting the Semantic Structures
The semantic partitioning algorithm presented in Section 3 utilizes presentation regularities encoded with the HTML markup of the Web pages to transform them into hierarchical group structures and identify their instances . In this section we describe how these semantic structures can be interpreted by utilizing linkage regularities that exist within the context of an ORL in order to separate and extract their metadata and instances .
4.1 Extracting the Value Types
The atomic value types of a group may denote attribute names , attribute ranges , subconcepts of a concept or member objects of a concept . For example , the group structure G3 of the object page in Figure 2 contains different types of values that corresponds to the ranges of various attributes of a P ublication such as its Author , T itle , Conf erence , P ageN o and Location .
Value types are retrieved from the atomic leaf nodes of the group structures by utilizing a segment of their HTML path information . Let G be a group structure and vi be a value that belongs to an instance I of G . Let L be the lowest common ancestor of all of the values of G in the corresponding HTML tree . For each vi its path index pi , is defined to be its order indexed HTML tag path from L to vi itself . The value types are then obtained by grouping all atomic values , vi ’s of a group structure , by their corresponding
8
Figure 3 . Extraction of Value Types from Group Structures path indexes . Figure 3 presents some of the value types obtained from groups G1 and G3 of the individual object page of Figure 1 .
4.2 The Semantic Structure Interpreter
This section provides an algorithm to interpret any given group structure originating from an ORL . For convenience , the extracted metadata and object instances are represented as F logic 14 facts . F logic provides a means to represent both the metadata information and objects in a concise way and it allows reasoning with rules 15 . It is also very easy to transform extracted Flogic facts into the semantic Web standard RDF and RDFS to enable sharing . We use a subset of the F logic alphabet that consists of function symbols , constants , and first order terms over them . The details of the F logic syntax can be found in 15 .
As an example to illustrate the interpretation , consider the ORL group structure G in Figure 1 that lists the instances of the Regular Faculty concept . As the group structure presents the members of the ‘Faculty’ concept and its value types are found by the Hierarchical Grouping algorithm , the following F logic statements are extracted from the ORL group G .
‘Regular Faculty’ : concept . ‘Alex Aiken’ : ‘Regular Faculty’ . ‘Daniel Moore’ : ‘Regular Faculty’ . ‘Regular Faculty’[‘Name’ ⇒⇒ {‘Alex Aiken’ , ‘Daniel Moore’ , } ] ‘Alex Aiken’[‘Name’ →→ ‘Alex Aiken’ ] .
9
Website
Faculty cs.wisc cs.cmu cs.unc cs.umd cs.stanford cs.washington
Average
Courses cs.wisc cs.uiuc eecs.mit cs.bu cs.princeton cs.rpi
Average
# of Pages
Semantic Partitioner Metadata Extraction
P
R
F
P
R
F
Value Types Ext . P F
R
32 33 41 44 38 40
26 41 12 23 18 13
71 % 80 % 74 % 83 % 95 % 88 % 88 % 83 % 85 % 89 % 79 % 81 % 79 % 77 % 76 % 65 % 98 % 78 % 100 % 71 % 83 % 94 % 96 % 94 % 90 % 100 % 94 % 86 % 68 % 76 % 100 % 89 % 85 % 91 % 97 % 94 % 92 % 75 % 81 % 85 % 97 % 87 % 86 % 80 % 83 % 73 % 83 % 77 % 82 % 90 % 85 % 68 % 77 % 72 % 83 % 75 % 80 % 87 % 84 % 84 % 85 % 93 % 87 %
91 % 87 % 89 % 91 % 80 % 85 % 73 % 93 % 82 % 87 % 76 % 86 % 89 % 84 % 91 % 84 % 91 % 88 % 91 % 88 % 82 % 100 % 60 % 75 % 83 % 100 % 90 % 69 % 67 % 71 % 93 % 78 % 85 % 85 % 85 % 85 % 74 % 82 % 78 % 100 % 85 % 92 % 88 % 100 % 94 % 71 % 71 % 83 % 83 % 83 % 83 % 83 % 77 % 80 % 80 % 81 % 80 % 91 % 78 % 86 % 86 % 90 % 88 %
Table 1 . Experimental Results for Semantic Partitioner , Metadata Extraction , and Value Types Extraction for F aculty and Courses domains from computer science department Web sites .
‘Regular Faculty’[‘Phone’ ⇒⇒ {‘5 3359’ , ‘3 3334’ , } ] ‘Alex Aiken’[‘Phone’ →→ ‘5 3359’ ] .
The interpretation proceeds for the group structures in the individual object page by providing the appropriate context . Whenever , the object instance pages present their attributes using a link group , each group structure G00 within the object attribute pages is interpreted and corresponding value types are extracted .
5 Experimental Results
In this section we present the experimental results for the semantic partitioning and the ORL interpretation algorithms .
5.1 Experimental Setup
The data set we used to test our algorithms consists of ORL pages for the F aculty and Course domains in 12 computer science department Web sites , comprising 228 individual faculty and 133 individual course pages . For each web site we identified the corresponding faculty and course ORL pages that present link groups that link to individual faculty and course home pages in
10 that university .
5.2 Evaluation
Table 1 presents the experimental results for the semantic partitioner and the interpretation algorithm for separating and extracting the metadata and the value types for faculty and course collections . The results are produced for all the Web pages reachable from the ORLs . The precision and recall of Hierarchical Grouping algorithm for a given Web page is calculated by comparing the transitive closure of parent child relationships inferred by the algorithmically generated hierarchies with those implied by the goldstandard hierarchies . The gold standard hierarchy for each page and taxonomy was created manually by an evaluator and then the transitive closure of all parent child relationships were computed . The precision and recall is calculated by the following formulas : P recision , P = |{T} T{T 0}| ; Recall , R = |{T} T{T 0}| where T and T 0 are the sets of transitive closure of parent child relationships implied by the algorithmically generated and gold standard hierarchies respectively .
|{T 0}|
|{T}|
5.3 Discussion
It can be observed from the experimental results that the performance of the semantic partitioner , metadata and value types extraction algorithms average 84 % F measure for f aculty domain and 85 % F measure for the course domain respectively . The semantic partitioner algorithm was able to perform well on many of the individual object pages whenever there was a regularity in the presentation and layout of the content . But the algorithm is still sensitive to certain types of irregularities in the data sources . On the other hand , the interpretation algorithm was able to perform with high accuracy whenever the corresponding semantic partitioner algorithm was successfully able to identify the appropriate group structures along with their header labels .
6 Conclusions and Future Work
In this paper , we presented the METEOR system that can automatically separate and extract metadata and instance information from object referral lists . The experimental results indicate that the METEOR system was able to extract the metadata and the instance information with high accuracy . In our future work , we propose to develop automated algorithms for finding all the ORL structures within any Web site .
Acknowledgements . This work was partially supported by the Office of Naval Research ( ONR ) under its Multidisciplinary Research Program of the University Research Initiative ( MURI ) under Grant No . N00014 04 1 0723 .
11
References
1 . R.Baeza Yates and BRibeiro Neto Modern Information Retrieval . Ad dison Wesley , 1999 .
2 . G.Yang , W.Tan , S.Mukherjee , IVRamakrishnan , and HDavulcu On In Workshop on the power of semantic partitioning of web documents . Information Integration on the Web , Acapulco , Mexico , 2003 .
3 . S.Vadrevu , F.Gelgi , S.Nagarajan , and HDavulcu Meteor : Metadata and instance extraction from object referral lists on the web . Technical Report TR 05 009 , Arizona State University , 2005 .
4 . J.Hammer , H.Garcia Molina , S.Nestorov , R.Yerneni , MMBreunig , and In ACM
VVassalos Template based wrappers in the tsimmis system . SIGMOD Conf . on Management of Data , 1997 .
5 . N.Kushmerick , DSWeld , and RBDoorenbos Wrapper induction for In International Joint Conference on Artificial information extraction . Intelligence , pages 729–737 , 1997 .
6 . V.Crescenzi , G.Mecca , and PMerialdo Roadrunner : Towards automatic data extraction from large web sites . In Proceedings of 27th International Conference on Very Large Data Bases , pages 109–118 , 2001 .
7 . A.Arasu and HGarcia Molina Extracting structured data from web In ACM SIGMOD Conf . on Management of Data , San Diego , pages . USA , 2003 .
8 . S.Dill , N.Eiron , D.Gibson , D.Gruhl , R.Guha , T.Kanungo A.Jhingran , S.Rajagopalan , A.Tomkins , JATomlin , and JYZien Semtag and seeker : Bootstrapping the semantic web via automated semantic annotation . In WWW Conference , 2003 .
9 . O.Etzioni , M.Cafarella , D.Downey , S.Kok , A.Popescu , S.Soderland T.Shaked , DSWeld , and AYates Web scale information extraction in knowitall ( preliminary results ) . In WWW Conference , 2004 .
10 . F.Ciravegna , S.Chapman , A.Dingli , and YWilks Learning to harvest In Proceedings of the 1st European information for the semantic web . Semantic Web Symposium , Heraklion , Greece , 2004 .
11 . RCBerwick and SPilato Learning syntax by automata induction . In
Machine Learning 2 , pages 9–38 , 1987 .
12 . DGusfield Algorithms on Strings , Tree , and Sequences . Cambridge
University Press , 1997 .
13 . EMGold Complexity of automaton identification from given sets .
In
Information and Control , pages 37:302–320 , 1978 .
14 . M.Kifer , G.Lausen , and JWu Logical foundations of object oriented and frame based languages . Journal of the ACM , 42(4):741–843 , July 1995 .
15 . G.Yang , M.Kifer , and CZhao Flora 2 : A rule based knowledge representation and inference infrastructure for the semantic web . Catania , Sicily , Italy , 2003 .
12
