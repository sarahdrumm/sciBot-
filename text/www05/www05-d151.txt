Automated Semantic Web Services Orchestration via
Concept Covering
T . Di Noia† , E . Di Sciascio† , F . M . Donini‡ , A . Ragone† , S . Colucci†§
†Politecnico di Bari via Re David , 200 I 70125 , Bari , Italy
‡Universit`a della Tuscia via San Carlo , 32 I 01100 , Viterbo , Italy
§The Open University Knowledge Media Institute MK7 6AA , Milton Keynes , UK
{tdinoia,disciascio,aragone,scolucci}@polibait;donini@unitusit
ABSTRACT We exploit the recently proposed Concept Abduction inference service in Description Logics to solve Concept Covering problems . We propose a framework and polynomial greedy algorithm for semantic based automated Web service orchestration , fully compliant with Semantic Web technologies . We show the proposed approach is able to deal with not exact solutions , computing an approximate orchestration with respect to an agent request modeled a subset of OWL DL .
Categories and Subject Descriptors : H33 [ Information Search and Retrieval]:[retrieval models,search process , selection process];H40 [ Information Systems Applications]:General;H35 [ Online Information Services]:[webbased services ]
General Terms : Algorithms .
Keywords : semantic web services , orchestration , semantic web , description logics .
1 .
INTRODUCTION
Web service composition amounts to the orchestration of a certain number of existing web services to provide a composite service that satisfies the user ’s requirements , in case a single web service is not adequate .
Semantic Web services ( SWS ) are services endowed of descriptions expressed in a language that has well defined , and possibly rich , semantics [ 5 ] . The aim of such unambiguously machine interpretable descriptions is to ease SWS discovery on the one hand , and orchestration of composite SWS on the other hand , when the requested task cannot be adequately carried out by a single service . Here we model a user oriented and friendly framework where a typical request is like ” I’d like to book a hotel provided with a swimming pool and a fitness center ” rather than only ” Effects = HOTEL RESERVATION ” and a typical service description is like ” We book for you hotels near the sea provided with all the facilities : swimming pool , fitness center , children area and restaurants ” rather than only ” Preconditions = VALID CREDIT CARD ; Effects = HOTEL RESERVATION ” . In this paper we propose a framework and an algorithm , fully compliant with the Semantic Web vision and its related technologies , for an automated discovery and composition in a semantic web services orchestration scenario . To this aim
Copyright is held by the author/owner . WWW 2005 , May 10–14 , 2005 , Chiba , Japan . ACM 1 59593 051 5/05/0005 . we exploit the recently proposed Concept Abduction [ 2 ] inference service in Description Logic to generalize and extend Concept Covering[3 ] for a subset of OWL DL .
2 . CONCEPT COVERING VIA CONCEPT
ABDUCTION
In [ 2 ] the Concept Abduction Problem ( CAP ) was introduced and defined as a non standard inference problem for Description Logics , to provide an explanation when subsumption does not hold .
Definition 1 . Let C , D , be two concepts in a Description Logic L , and T be a set of axioms , where both C and D are satisfiable in T . A Concept Abduction Problem ( CAP ) , denoted as L , C , D , T , is finding a concept H such that T |= C H ≡ ⊥ , and T |= C H D .
The solution to a CAP can be interpreted as which part of D is not covered by C . On the basis of the latter remark in the following we exploit concept abduction to perform a ” concept covering ” . We propose an extension to the basic definition of Concept Covering Problem , eliminating limitations on the DL employed , and rewriting it in terms of Concept Abduction .
Definition 2 . Let D be a concept , R = {S1 , S2 , , Sk} be a set of concepts , and T be a set of axioms , all in a DL L , where D and S1 , . . . , Sk are satisfiable in T . The Concept Covering Problem ( CCoP ) , V=L,R , D,T , is finding a pair Rc , H such that
1 . Rc ⊆ R , and the conjunction of concepts in Rc , C = 2 . H ∈ SOL(L , C , D,T ) , and T |= H D .
S∈Rc S is satisfiable in T ; We call Rc , H a solution for V , and say that Rc ( partially ) covers D . Finally , we denote SOLCCoP ( V ) the set of all solutions to a CCoP V .
In [ 3 ] also the greedy algorithm GREEDYsolveCCoP is proposed , in order to compute a solution for a Concept Covering Problem .
3 . SEMANTIC WEB SERVICE ORCHESTRA
TION
The execution of a web service requires its preconditions be satisfied , possibly using information provided by other web services . Moreover care has to be paid in avoiding the duplication of effects when composing services , which might
1160 be due to entailment relationships among different effects provided by services being composed . Turning to the classical example proposed in [ 4 ] , an agent booking organizing a trip and composing two services , one able to book both a hotel stay and a flight and another a flight and a car rental , would not be much appreciated if its outcome is two flights booked for the same trip , together with the hotel and the car . 3.1 Precondition and Effects for Web Service
Orchestration
In order to deal with the execution information , we define : Request : a pair D , P0 , where D is the description the requested service and P0 are the preconditions provided with the request . Web Service 1 : a triple W SD , P , E , where W SD represents provided service description , P the preconditions and E the effects . Hereafter we model W SD and D as DLs concepts wrt a domain/task ontology TD . For the sake of simplicity , here P0,P and E are modeled as conjunction of atomic concepts represented in a Precondition/Effect ontology TP/E . This is a simple TBox with no role and containing only inclusion axioms . A web services composition based exclusively on the solution of GREEDY solveCCoP ( R , W SD,TD ) [ 3 ] , ie , solving only a Concept Covering Problem on web services description , cannot deal with the P , E specifications of the services . To this aim we introduce a definition of web service flow .
Definition 3 . A web service flow with respect to some initial preconditions P0 is a finite sequence of web services WSF ( P0 ) = ( ws1 , ws2 , wsi , , wsn ) with i = 1n , where for each web service wsi ∈ WSF ( P0 ) all the following conditions hold :
1 . for ws1 , P0 P1 . 2 . for wsi , with i > 1 , P0 E1 E2 Ei−1 Pi . 3 . for wsi , with i > 1 , for each concept name A occurring in Ei , P0 E1 E2 Ei−1 A . We indicate with DWSF , the set of web service descriptions in WSF ( P0 ) . DWSF = {W SDi|wsi ∈ WSF ( P0)} . Based on the definition of web service flow , here it possible to define a composite web service with respect to a request .
Definition 4 . Let R = {W SDi , Pi , Ei} , with i=1k , be a set of web services wsi , and D , P0 be a request , such that both D and W SDi are modeled as concept descriptions in a DL wrt an ontology T , and P0 , Pi and Ei modeled using a Horn clauses based language . A composite web service for D , P0 with respect to R , CWS(D , P0,R ) , is a web service flow such that for each wsj in the execution flow , DCWS(D,P0,R ) = {W SDj|wsj ∈ CWS(D , P0,R)} , covers D . 3.2 Computing a Composite Web Service
We now adapt the basic algorithm proposed in [ 3 ] for Concept Covering , to cope with web service preconditions and effects in order to automatically compute a composite web service.For such purpose we need to define an executable web service and an executable set . 1
A web service implemented by combining other web services is referred to as composite ” [ ] to distinguish it form the ones implemented through conventional programming languages and invoking conventional services which are called basic ” [ 1].Since a service being basic or composite is transparent to the client , in the following we address them as web service for simplicity . is an executable service for WSF ( P0)} i i
Definition 5 . Given a web service flow WSF ( P0 ) = ( ws1 , , wsn ) , we say that a web service is an executable web service wsex for WSF ( P0 ) if and only if
1 . wsex ∈ WSF ( P0 ) . 2 . WSF(P0 ) = ( ws1 , , wsn , wsex ) is a web service flow .
|wsex
An executable web service wsex for WSF ( P0 ) is a web service which can be invoked after the execution of WSF ( P0 ) . Definition 6 . Given a web service flow WSF ( P0 ) and a set of web services R = {wsi} we call executable set for WSF ( P0 ) , the set of all the wsi ∈ R st wsi is an executable service for WSF ( P0)} . EX WSF ( P0 ) = {wsex The executable set is hence the set of all the services that can be invoked after the execution of a web service flow . Algorithm serviceComposer(R,D , P0,T ) input a set of services R = {wsi = W SDi , Pi , Ei} , a request D , P0 , where D and W SDi are satisfiable in T output CWS , H begin algorithm CWS(D , P0,R ) = ∅ ; Duncovered = D ; Hmin = D ; do compute EX CWS(D,P0,R ) ; W SDmin = ; f or each wsi ∈ EX CWS(D,P0,R ) if DCWS(D,P0,R ) ∪ {W SDi} covers Duncovered then H = solveCAP ( L , W SDi , Duncovered,T ) ; if H ≺ Hmin then W SDmin = W SDi ; Hmin = H ; end if end if end for each if W SDmin ≡ then R = R\{wsi} ; CWS(D , P0,R ) = ( CWS(D , P0,R ) , wsi ) ; Duncovered = Hmin ; end if while(W SDmin ≡ ) ; return CWS(D , P0,R ) , Duncovered ; end algorithm The algorithm returns CWS(D , P0,R ) , the composite web service and the uncovered part , Duncovered , of the request description D .
4 . REFERENCES [ 1 ] Gustavo Alonso , Fabio Casati , Harumi Kuno , and Vijay Machiraju . Web services : Concepts , Architectures and Applications . Springer Verlag , 2003 .
[ 2 ] T . Di Noia , E . Di Sciascio , FM Donini , and M . Mongiello .
Abductive matchmaking using description logics . In Proceedings of IJCAI 2003 , pages 337–342 , 2003 .
[ 3 ] T . Di Noia , E . Di Sciascio , and FM Donini . Extending and
Computing the Concept Covering for the Semantic Web . Technical report , Tech Rep n . 21/04/S , http://wwwictservpolibait/PDF/TECH REP 21 04 2pdf,2004
[ 4 ] M . Frauenfelder . A Smarter Web . MIT Technology Rev . ,
104(9):52–58 , 2001 .
[ 5 ] Sycara Katia , Paolucci Massimo , Ankolekar Anupriya , and Naveen Srinivasan . Automated Discovery , Interaction and Composition of Semantic Web Services . Journal of Web Semantics , 1 , December 2003 .
1161
