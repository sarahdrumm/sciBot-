Discovering Common Motifs in Cursor Movement Data for Improving Web Search
Dmitry Lagun Emory University dlagun@mathcsemoryedu
Mikhail Ageev ∗
Moscow State University mageev@yandex.ru
Qi Guo ∗ Microsoft qiguo@microsoft.com
Eugene Agichtein
Emory University eugene@mathcsemoryedu
ABSTRACT Web search behavior and interaction data , such as mouse cursor movements , can provide valuable information on how searchers examine and engage with the web search results . This interaction data is far richer than traditional search click data , and can be used to improve search ranking , evaluation , and presentation . Unfortunately , the diversity and complexity inherent in this interaction data make it more difficult to capture salient behavior characteristics through traditional feature engineering . To address this problem , we introduce a novel approach of automatically discovering frequent subsequences , or motifs , in mouse cursor movement data . In order to scale our approach to realistic datasets , we introduce novel optimizations for motif discovery , specifically designed for mining cursor movement data . As a practical application , we show that by encoding the motifs discovered from thousands of real web search sessions as features , enables significant improvements on result relevance estimation and re ranking tasks , compared to a state ofthe art baseline that relies on extensive feature engineering . These results , complemented with visualization and qualitative analysis , demonstrate that our approach is able to automatically capture key characteristics of mouse cursor movement behavior , providing a valuable new tool for search behavior analysis .
Keywords Web search behavior mining ; mouse cursor movement analysis ; web search ranking and evaluation
1 .
INTRODUCTION
Millions of users interact with Web search engines daily . These interaction patterns contain valuable information , which could be useful for search engines to improve user experience , and for site designers to improve website layout and usability [ 2 , 11 , 6 , 32 ] . Recently , studying fine grained user behavior such as eye gaze movements [ 16 , 11 , 7 ] and mouse cursor movements [ 38 , 18 , 27 ] have ∗Work done at Emory University . become an active area of research , as these interactions provide additional insights into searcher behavior compared to coarser models of clicks alone . In particular , recent work has demonstrated the coordination between eye gaze position and mouse cursor movements [ 38 , 19 , 25 ] and showed that both gaze and cursor interactions indicate user preferences [ 7 , 27 , 20 ] . Search engine companies also began investigating and modelling the cursor movement data to improve understanding of search result examination patterns [ 38 ] , ranking of search results [ 26 , 43 ] , understanding of search result abandonment [ 27 ] , and evaluation of content layout and noticeability [ 36 ] . While the importance of analyzing mouse cursor data for search is now evident , it often involves intensive manual effort [ 7 , 20 , 25 ] to gain insights about the data , and to make use of it for practical applications . For example , video recordings ( or , similarly , a series of snapshots ) from online analytic services , typically allow the replay of visitor interactions in great detail , but the process of viewing the replays is time consuming – it is virtually impossible to view all the replays even for a relatively small site with thousands of daily visits , not to mention for larger web sites with millions of visitors . The alternative approach of visualizing areas of high cursor activity by using “ heatmaps ” , that use different colors to indicate different levels of activity , provides a more complete view of the user behavior data in aggregate , but suffers from loss of detail about the sequences of interactions of individual users .
In this paper , we propose a novel technique to automatically and efficiently extract common patterns from search result and landing page examination data , obtained via mouse cursor tracking . Our method , based on frequent subsequence mining , is able to capture common user and location invariant sequences from the mouse cursor data , some of which would be difficult to identify or describe by manual inspection or feature engineering . In data mining literature , such frequent sub sequences have been called motifs [ 34 ] because of the analogy to their discrete counterparts in computational biology . For the rest of the paper , we adapt the term motif to refer to a frequent pattern , representing a group of similar subsequences derived from the the mouse cursor movement data . We will define mouse cursor motifs more precisely in Section 3 .
An example of a common motif extracted from the mouse cursor data is shown in Figure 1 . This motif corresponds to the common search behavior of “ following ” examination behavior ( identified by Rodden et al . [ 38] ) . In this example , the user appears to examine the second and third search results , before returning to click on the first result . This behavior could be used to infer that a user has examined the second and third results and judged them to be non relevant , providing valuable additional information to augment the click data .
Mouse Cursor Data in Web Search : Modeling searcher attention and interest has wide ranging applications in web search ranking , evaluation , and interface design . while traditionally most of the experimental work on user attention relied on infrared eye tracking which allows tracking eye movement on computer screen at great detail , however recently , mouse cursor tracking emerged as more accessible and scalable proxy for user ’s attention ( eg , [ 19 ] and [ 25] ) . One of the earliest studies of mouse cursor and eye gaze alignment in search was reported by Rodden et al . [ 38 ] , where the authors discovered the coordination between a user ’s eye movements and mouse movements when scanning a web search results page , and identified three patterns of active mouse usage : following the eye vertically with the mouse , following the eye horizontally with the mouse , and using the mouse to mark a promising result . Guo and Agichtein [ 19 ] extended this work to predict eye mouse coordination ( ie , whether the mouse cursor is in close proximity to eye gaze at any given point in time ) by modeling mouse movements . This work was further extended by Huang et al . [ 25 ] to directly predict the gaze position from mouse cursor movement . These efforts solidify the evidence that a user ’s attention in web search can be approximated by using mouse cursor movement and other interaction data .
In addition to studying user attention , mouse cursor data have been used for more practical tasks . Goecks and Shavlik [ 15 ] modeled user actions such as mouse activity to infer user ’s interest in web pages . Shapira [ 41 ] studied several mouse cursor based implicit interest indicators and found that the ratio of mouse movement to reading time was a good indicator of the explicit page rating . Guo and Agichtein [ 17 ] modeled mouse cursor movement and other interactions for inferring general search intent such as navigational vs . informational , as well as other intent categories , allowing for more accurate future ad clickthrough prediction [ 18 ] . Huang et al . [ 27 ] found that hovering over a search result provides indication of relevance in addition to result clickthrough . Huang et al . [ 26 ] also developed models to predict result clickthrough by incorporating mouse hovering and scrolling information . White and Buscher [ 43 ] proposed a method that uses text selections as implicit feedback . Guo and Agichtein [ 20 ] proposed a Post Click Behavior ( PCB ) model to estimate the “ intrinsic ” relevance by engineering a wide array of features to capture post click behavior such as mouse cursor movements and scrolling , resulting in substantial improvements in estimating personalized search relevance and re ranking search results . Recently , Ageev et al . [ 1 ] demonstrated that cursor data collected on search result landing pages can also be used to improve quality of search result summaries , or “ snippets ” .
Unfortunately , mouse cursor activity is complex and noisy , and often specific to each user ( eg , [ 43 ] ) – making it difficult to effectively discover robust predictive features . Previous approaches , therefore , relied on extensive feature engineering ( eg , [ 20 ] and [ 23 ] ) to manually craft features applicable a specific task ( eg relevance prediction ) . In contrast , we propose to automatically discover common mouse cursor movement patterns , by adapting time series analysis techniques from the data mining literature , to complement manual feature engineering used in prior research . Time Series Mining : Research on mining time series databases included several directions : constructing low cardinality symbolized representations such as iSAX [ 42 ] , Piecewise Aggregate Approximation [ 13 ] or other types of representations , such as discrete Fourier Transform or Discrete Wavelet Transform , for more comprehensive review consult [ 42 ] . Principle Component Analysis ( PCA ) [ 28 ] is another popular dimensionality reduction technique employed for indexing and fast search in time series data bases . Despite the efficiency benefits offered by dimensionality reduction techniques , they only provide approximate search with respect to the original
Figure 1 : An example automatically discovered motif from mouse cursor data ( shaded in green ) , corresponding to the common “ follow ” searcher behavior , where gaze ( red circles ) briefly follows the mouse cursor ( blue crosses ) . The “ end ” label indicates the result click .
As searchers examine results and pages at different rates , it is difficult to find exact matches between mouse cursor movements across different users . For this reason , we adapt a more robust distance measure , namely Dynamic Time Warping ( DTW ) , that is capable to identify similar mouse cursor trajectories . However , discovering such motifs from large cursor movement datasets is computationally expensive , and is not feasible with existing motif mining techniques . To address this problem , we propose novel optimizations for motif discovery , specifically designed for cursor movement data , based on spatial indexing and learning based similarity metrics . These optimizations enable an order of magnitude speed up in motif discovery on realistic datasets . As a practical application , the cursor movement motifs discovered by our approach can then be used as features for more accurate estimation of search result relevance and for significantly improving the quality of search result ranking .
Specifically , our contributions are threefold :
• A new scalable method for automatically discovering frequent patterns , or motifs , from cursor movement data ( Section 3 ) .
• The first empirical study of common mouse cursor motifs discov ered from real web search examination data ( Section 4 ) .
• A practical demonstration of using the discovered mouse cursor motifs as features , resulting in significant improvements on search relevance estimation and re ranking tasks ( Section 5 ) .
Next , we describe related work , in order to place our contributions in context .
2 . RELATED WORK
The related work spans several areas of research , namely web search behavior and interaction mining , time series mining , and fast similarity search . representation , hence potentially degrading the accuracy of retrieval and thus potentially missing important patterns .
Taking a different tack , exact search in time series databases can also be significantly sped up by various pruning strategies . The most well known pruning strategies rely on some sort of a lower bound , after calculating which , one can decide whether exact distance calculation is needed or it can be abandoned . Such lower bounds include LB_Kim [ 31 ] , LB_Yi [ 45 ] , LB_Keogh [ 29 ] and LB_Improved [ 33 ] . Among them , LB_Keogh , introduced by Keogh [ 29 ] , exhibited excellent performance , and was successfully used in many time series applications [ 29 ] . Recently , Mueen et al.[35 ] introduced an efficient exact motif discovery algorithm , known as the KM algorithm .
Recall , that in order to account for the high variability between users’ examination speeds and different page layouts , we would like to use a more flexible distance measure , such as Dynamic Time Warping ( DTW ) . DTW [ 39 ] was initially introduced for spoken word recognition , but since then , DTW has been applied to a variety of applications including hand writing recognition , information retrieval , image recognition , shape matching for security purposes . We refer an interested reader to the comprehensive review[29 , 33 , 30 ] . DTW allows matching two time series with possibly different lengths by computing the closest warping path between them . Thus , it is a flexible distance measure that is able to tolerate a web surfer ’s own pace of mouse cursor movement , allowing us to discover common cursor movements across different users . Unfortunately , the KM algorithm [ 35 ] was specifically designed for finding motifs under Euclidian Distance , for which triangle inequality holds , and is therefore not appropriate for pattern discovery with DTW as the distance measure .
More recently , there has been an effort in mining predictive subsequences , called shapelets , from labeled data [ 44 ] or un labeled [ 46 ] time series data . Unfortunately , in applications with large amounts of data , where coverage of the extracted motifs is important ( eg , for asking questions such as “ how many users perform a particular mouse cursor movement ? ” ) , previous approaches do not scale up to large datasets . That is , in our setting we are interested in finding all occurrences of a common motif , and not merely a single re occurrence of a given pattern . Similarity Search : The most common approach to speed up search for similar objects is to construct an index that allows pruning far objects without computation of similarity measure for each object in index . The main idea for pruning similarity search is to prune far objects using triangle inequality [ 47 ] . For Euclidean distance in a low dimensional space there are efficient indexing techniques such as R Tree [ 4 ] , approximation trees [ 40 ] , and k d Tree [ 9 ] . But the DTW distance measure does not satisfy triangle inequality [ 33 ] , and a heuristic approach is required to build an efficient index for a specific application [ 12 ] . Similarity measure learning has received significant attention in machine learning community , primarily in clustering applications [ 5 , 10 , 3 ] . Surprisingly , to the best of our knowledge , learning based similarity measures have not yet been applied to optimize similarity search in time series databases .
In summary , prior work on using cursor data for implicit feedback heavily relied on manually engineering cursor movement features in order to capture specific aspects of the cursor movement . This process can be tedious and time consuming , and has to be re done for each application . Our work proposes a general approach that automatically and efficiently discovers common mouse cursor motifs , which are not easily described by manual feature engineering . To accomplish this , our work builds upon the state of the art in time series mining , allowing for efficient motif extraction at scale , specifically optimized for mining cursor movement data .
3 . MOTIF MINING FROM CURSOR DATA This section describes our pattern ( motif ) extraction system . First , we define mouse cursor motifs more precisely , and state the problem more formally . Then , we describe , in turn , the key components of our solution , that involves first generating and pre processing many possible candidate subsequences , and then efficiently computing the similarity between them to find the groups of similar subsequences to discover the frequent motifs . Thus , the steps are , respectively , Candidate Generation and Pre Processing ( Section 3.2 ) , Similarity Computation ( Section 3.4 ) and Efficient Computation of a Distance Measure ( Section 3.5 ) , which together comprise our frequent motif discovery method . 3.1 Problem Statement
We start with introducing the necessary notation to define a motif and our problem . Intuitively , we first need to define what constitutes a non trivial match between subsequences in cursor movement data , and then use this definition to define frequent subsequences ( or motifs ) , and in turn state our motif discovery problem more precisely . Match : Given a positive real number R as the range , or maximum distance , and a dataset of time series of cursor movements containing subsequences A and B , then B is called a matching subsequence of A , if Dist(A , B ) ≤ R , and A and B were recorded from different page visits . Here Dist(·,· ) a generic distance measure , such as Euclidian Distance or Dynamic Time Warping ( DTW ) , defined below . The reason to insist on different page visits is to avoid “ trivial ” matches , most notably where A and B significantly overlap . Motif : For a set of two dimensional time series T = {(xi , yi)}N i=1 , and a subsequence length n , a motif M is defined as the subsequence M in T that has at least min_count matches , as defined above . Cursor Motif Discovery Problem : Given a set of two dimensional time series representing mouse cursor movements T = {(xi , yi)}N i=1 , the range R , the subsequence length n , and a threshold min_count , find all motifs with match count higher than ( min_count ) and the distance Dist(·,· ) between each two of them is at least R . 3.2 Candidate generation and pre processing At this step our system creates all possible motif candidates that will be matched against each other in the similarity search . The candidate motifs are generated by maintaining a sliding window of a given length and shifting it for every example in the database . Every shift of the time window creates a motif candidate . In our experiments we used a sliding window of 5 seconds . We experimented with different values during development , and chose 5 seconds as long enough to capture interesting behavior patterns , and yet short enough to be able to capture short term page visits . Other parameter values might be possible , to be explored further in future work .
After a candidate sequence has been generated , we normalize the values by subtracting the means of the x and y coordinates for that given candidate . This step is crucial as it allows us to match subsequences in different regions of the page , focusing on the their shape similarity instead of mining sub sequences that occur in the same region area of screen . We do not otherwise rescale the values : in our development experiments with eye gaze data , z score normalization ( suggested by Keogh et al . [ 37 ] ) resulted in poor matches , as it leads to matching sub sequences with large range to small oscillations of eye gaze within the fixation . 3.3 Distance Measure
A distance measure defines the similarity between different motif candidates for grouping . As discussed above , we adapted a robust distance measure , namely Dynamic Time Warping ( DTW ) [ 29 ] . DTW method calculates the smallest possible distance between two
Algorithm 1 FindMotifs function FINDMOTIFS(candidates , R , min_count ) motif s ← {∅} for i = 1 to length(candidates ) do similar ← F indSimilar(candidates , i , R ) distinct ← DeDuplicate(similar , R ) if length ( distinct ) ≥ min_count then motif s ← motif s ∪ {i} end if end for return motif s end function time series by aligning one time series with another , such that , distance between them is minimized . The example shown in Figure 2 motivates the choice of DTW for mining mouse cursor data . Figure 2 plots the x coordinates of a discovered cursor motif ( shown in blue ) along with similar , but not identical , cursor movements ( shown in different colors ) . While all movements exhibit similar periodic behavior , each individual movement peaks at different point in time , making it impossible for a simple distance measure , eg , Euclidean distance , to identify the common similarity between them . In contrast , DTW allows to warp the series in time , such that they are best aligned . The flexibility of DTW comes with an expense – the
Figure 2 : The x coordinate of an example motif ( shown in blue ) together with similar cursor movements recorded for different users ( shown in different colors ) . time required to compute DTW is O(n2 ) , as opposed to O(n ) for Euclidean distance . To reduce the computation time , constrained version of DTW [ 39 ] is often used in practice . Constrained DTW disallows warping ( aligning ) points that are farther than W time steps from each other . In our system we employ DTW constrained with Sakoe Chiba band [ 39 ] with W = n/2 , where n is time series length . Finally , the distance between two cursor movements is defined as the sum of DTW distances on the x and y dimensions . 3.4 Candidate Similarity Computation
As the number of motif candidates can grow large ( eg , for even a small realistic dataset we use for experiments , there are several millions of candidate motifs and tens of millions of time series objects ) , we need an efficient way to search among the candidates to find similar objects . We employ early abandonment and lower bounding techniques , described below , that are commonly used in time series mining applications [ 37 ] which allow us to speed up the similarity search significantly . Algorithm 1 describes our FindMotifs algorithm more precisely . The algorithm starts with initially empty set of motifs and considers each motif candidate one by one . For each candidate F indSimilar function computes the raw number of matches , ie number of sub sequences from the time series database that are similar ( have distance smaller than a R ) to the candidate . As motif candidates may match large number of overlapping subsequences , the match count computed by F indSimilar can be overestimated . To circumvent this problem , we only count matches that are distinct , ie are outside of R range from each other . Finally , if motif frequency defined as number of distinct matches exceeds min_count threshold the candidate is added to the set of discovered motifs . Note that exact implementation of F indSimilar depends on particular pruning strategy and is discussed below . 3.5 Scaling Up Motif Discovery
In order to scale up motif discover to realistic datasets , we adapt a number of optimization techniques , some well known , and some novel , combining them to speed up motif discovery by an order of magnitude . Lower bounding : The idea of lower bounding has already become a standard technique to eliminate needless distance computations . In order to do that , one needs to compute a relatively cheap lower bound to see if DTW computation can be omitted . It is important to ensure that lower bound is exact , that is , it does not prune candidates in proximity of the distance threshold . Among several known lower bounds for DTW , the LB_Keogh lower bound is the commonly used solution due to its good pruning power and relatively fast computation time . LB_Keogh is calculated by computing Euclidian distance between “ envelope ” time series , hence it is O(n ) . We implemented LB_Keogh as suggested and outlined in [ 37 ] and supporting web page of the UCR Suite1 . Other lower bounds are either more computationally expensive [ 33 ] or produce looser lower bounds , making pruning less efficient [ 31 ] . Early Abandoning : During the computation of either DTW or LB_Keogh , if our current value of lower bound measure exceeds a given distance threshold , we can safely abandon the computation for the remaining candidates at that point , since the resulting lower bound value will be higher than the distance threshold . Similar idea can be implemented for DTW . As this idea comes with no additional computation cost we employ it in multiple places in our code . For example , due to the nature of mouse tracking data we can early abandon after LB_Keogh or DTW values exceeded on either x or dimension . Distance Measure Learning ( Novel Optimization ) : As an alternate way to speed up similarity search directly , one can consider reducing dimensionality of time series data by either obtaining symbol representation such as iSAX [ 42 ] or Principal Component Analysis ( PCA [ 28] ) . Neither of these approaches directly address the inaccuracy of time series measure calculated in the feature space caused by the reduction . Instead , we employ the idea of learning the distance metric , which was previously investigated by a number of authors [ 5 , 10 , 3 ] . Note that DTW is not a metric , and triangular inequality does not hold for it [ 33 ] . However , it is possible to approximate DTW by the Euclidian metric in the feature space . More specifically , feature space comprised of simple time series statistics such as standard deviation and range of x and y coordinates may well differentiate time series that are not similar and eliminate the need to compute the lower bound . In our experiments we use five features : standard deviation and ranges of x and y coordinates , respectively , and the mean squared speed of cursor movement . The intuition is that we can expect distinct mouse gestures to have different shape characteristics such as ranges , and speed , thus being sufficiently separated in the simplified feature space . To learn the feature weights directly from the data , we construct training and test data sets by sampling a large number of time series candidates , and computing the exact DTW for pairs of these time series . To obtain 1UCR Suite : http://wwwcsucredu/ eamonn/UCRsuite.html the weights of the features , such that the error between the featurebased Euclidian metric and the true DTW of the original time series is minimized , we solve the following minimization problem : ij − d y2 i,j k=1
2
2 minimize w wk i − x(k ) x(k ) j
( 1 ) where x ∈ Rd and d is the number of time series features ; i and j are index i th and j th time series example in the training data , yij is the DTW for pair of these time series and indices i and j enumerate all the training examples . Since it is an unconstrained optimization problem , we can derive an efficient gradient descent based method to find the feature weights w that minimize the error between the feature based Euclidian metric and DTW on the original pair of time series . The resulting distance measure is referred as DM throughout the paper . As the reduced feature space dimensionality is smaller than the typical length of time series we are interested in , such a measure allows us to index time series efficiently using any of the available spatial data structures , and subsequently pruning candidates that are unlikely to be similar at much smaller computational cost . R Tree Indexing ( Novel Optimization ) : For efficient query processing and effective candidate pruning we employ spatial indexing using the R Tree data structure . The R Tree [ 24 ] is one of the most popular index structure for large multidimensional databases . Data in the R tree is organized in a tree , where each node contains a bounding box of all entries in the corresponding subtree , and the leaf nodes store the data required for each child . In our case , the entries are points in five dimensional space of similarity features described above .
To search the R tree for similar subsequences , the “ query ” is a five dimensional hypercube , a δ environment of a given sequence . The search recursively traverses the tree starting from the root node . When a leaf node that overlaps with the query is reached , all entries in that node are tested against the distance measure to a query point . If the distance is less then δ , then the candidate point is returned . spaces , where d > 16 . In our case , the dimensionality is 5 , allowing us to effectively reduce search space of candidates for the exact computation of DTW measures . Combining Pruning Strategies : Clearly , combining several pruning techniques may speed up our algorithm . In this paper we consider four system variations depending on the pruning utilized . Table 2 summarizes the pruning strategies enabled for each of the system variations we have tested . The combined system , which we call DM RTree in the remainder of the paper , is expected to scale well to large datasets .
We analyze the expected complexity of the approximate DM distance measure , using the notation in Table 1 . The exact computation of DTW for a single query point requires O(k2 ) time , so the computation of all neighbors for all instances will take O(N 2k2 ) time . The computation of LB_Keogh lower bound requires O(k ) time for a single point , so adoption of LB_Keogh pruning requires N 2 LB_Keogh computations , plus the time for computation of exact DTW for all selected points , a total of
O,N 2k + τLB_Keogh( )N 2k2 time , which is better than exhaustive DTW computation , but also quadratic over the the number of sequences in the database . Using DM gives d difference in DTW computation stage . Using R Tree index allows us to eliminate N 2 multiplier in pruning stage . The height of R Tree is O ( log N ) , and for a sufficiently small δ , the R Tree search time k speedup at the pruning stage , and τLB_Keogh( )
τDM(δ )
It is known [ 4 ] that R Tree performance degrades in high dimensional
Notation N k
δ
τDM(δ )
τLB_Keogh( ) PP = 1 − τ∗ d = 5
Description the number of sequences in the database average time sequence length distance threshold for DTW similarity Euclidean distance threshold for DM pruning factor for DM , the average ratio of instances in δ neighborhood of a query point pruning factor for LB_Keogh pruning power of DM and LB_Keogh pruning dimension of approximate distance function
Table 1 : Notations for Complexity Analysis
System Name Exact LB_Keogh DM DM RTree
LB_Keogh DM DM RTree
Table 2 : Pruning strategies considered for each system . depends on output size as O ( τDM ( δ)N log N ) , so the complexity of our algorithm is :
O,τDM ( δ)N 2,d log N + k2
Thus , DM RTree is expected to perform better than LB_Keogh pruning , if the pruning factor τDM ( δ ) 1 , as we verify experimentally in the next section . 4 . SCALABLE MOTIF DISCOVERY
This section demonstrates feasibility of our approach for large scale mouse cursor dataset , and evaluates its efficiency along with currently known techniques . 4.1 Experimental Setup and Dataset
We experiment with a dataset of mouse cursor movement collected “ in the wild ” using the EMU browser plugin [ 22 ] from over 5,000 real users of a university library . The EMU plugin recorded time stamped events of user actions or changes in the web browser state , including url change , mouse cursor movements , clicks , page rendering and page content change events . The dataset contains 52,378 search engine result page ( SERP ) views , and 48,345 landing page views , resulting from over 31,860 queries . From this data , 100,723 cursor movement trajectory subsequences were extracted , comprising the sequence dataset for the experiments in the rest of this section . We use this dataset for empirical performance comparisons between LB_Keogh and our approach ( Section 4.3 ) , and to mine common motifs ( Section 4.4 ) for subsequent relevance experiments . 4.2 Evaluating Distance Measure Learning
To verify the feasibility of effective distance measure learning we constructed the training and test data splits by randomly sampling a large number of time series pairs and calculating DTW for these pairs . Overall , our data set contains nearly 500,000 pairs and associated DTW distance values . The test and training datasets are split in equal proportions of 50 % . We experimented with the five similarity features described above . We obtain the feature weights w by minimizing the objective function from Equation 1 . Stochastic gradient descent is used to perform the optimization , converging in fewer than 10 iterations .
We now verify that we do not prune the truly similar candidates within proximity of the query candidate . In other words , we inves
( a ) < 300
( b ) < 500
( c ) < 1000
Figure 3 : Recall of finding similar motifs vs . Pruning Power for LB_Keogh and DM methods , shown for representative values of . tigate the “ Recall ” of our distance measure , vs . the corresponding “ pruning power ” . Here , Recall is defined as the number of candidates found by our algorithm in vicinity , divided by a total number of true positives according to exact DTW computation . Pruning power is defined as fraction of candidates pruned away early by our algorithm , and therefore eliminated from the ( expensive ) exact distance computation . By increasing the parameter δ , defined in Section 3.5 , one can achieve better Recall , but lower Pruning Power , as more candidates are retained for exact distance computation . In our experiments we set the δ = 135 resulting in desirable Recall of 95 % . Figure 3 shows the Recall vs . Pruning Power curves for DM and LB_Keogh methods , with sub figures corresponding to different values of . DM outperforms LB_Keogh exhibiting higher pruning power with 100 % Recall , while significantly decreasing the computation cost . 4.3 Runtime Performance Results
In order to compare the performance of our final system DMRTree ( defined in Section 3.5 ) , we performed benchmark tests for the three systems , using the dataset described above . Specifically , we compared : LB_Keogh , which uses pruning based on the lower bound ; DM , our system based on distance measure with linear search among all candidates ; and our DM RTree system . We do not report the runtimes of the exact DTW computation , as it is 17 times slower than LB_Keogh , and more than 100 times slower than DM RTree , and takes over several days to run for larger datasets . All experiments we performed on Intel Xeon CPU E5 2630 2.30GHz with 20 cores . Figure 4 reports the time performance for the systems as the size of the data is increased . Notably , DM RTree system exhibits the lowest computation time , while growing at the slowest rate as the data size increases . The DM RTree system outperforms the state of the art LB_Keogh by nearly an order of magnitude ( 8 9.5 times speedup ) , for different data sizes , without degrading Recall below 95 % . Note that the speed up factor increases with the data size , as the R Tree index becomes more efficient in pruning candidates , compared to linear scanning performed by other systems . The benchmark test was repeated 10 times . For datasets greater than 200K , the differences in running times are significant with p < 001 4.4 Discovered Cursor Motifs
To demonstrate that our approach is not only efficient , but also effective in discovering meaningful motifs , we focus on the motifs extracted from the large dataset described above . At the same time , we investigate – whether common cursor motifs vary between search results pages and landing pages with possibly arbitrary layout . While applying motif extraction to a large dataset may result in
Figure 4 : Comparison of running time for LB_Keogh , DM and DM RTree systems . finding hundreds of motifs , we focus on the top 5 frequent motifs . Figure 5 reports the top 5 most frequent motifs ( out of 127 ) discovered from the cursor movement data on the search result pages , or SERPs . Figure 6 reports top five most frequent motifs ( out of 157 ) , extracted from cursor data on the landing ( clicked results ) pages . In both figures , the mouse traces are annotated with arrows pointing in the direction of cursor movement , and shading of the circles indicates lower speed of cursor movement , or higher density of cursor positions . The common motifs extracted from SERPs correspond to previously ( heuristically ) identified patterns of cursor usage by Rodden et al . [ 38 ] , such as marking of promising search results ( a and d ) , and using mouse as a reading aid while following along a line of text ( b ) , or interacting with the search query box ( c ) , and following the attention vertically ( e ) . Similarly , the discovered motifs on landing pages appear to indicate patterns of marking important information on page ( a , b and d ) , and vertical movement ( c ) – potentially indicating the rapid shift of the user ’s attention downward , and directing the mouse cursor to click on a link ( e ) , corresponding to heuristically identified patterns of cursor movement on landing pages in Guo et al . [ 20 ] . We emphasize that both SERP and landing page motifs above were discovered automatically , without changing the algorithm for the different page types . As we demonstrate in the next section , the motifs automatically discovered using our approach provide valuable information about the user ’s interactions with the result pages , and are effective for relevance estimation and ranking .
Figure 5 : Top frequent motifs discovered from mouse traces recorded on search result pages ( SERPs ) .
Figure 6 : Top frequent motifs discovered from mouse traces recorded on landing pages ( non SERPs ) .
5 . USING MOTIFS FOR RELEVANCE PRE
DICTION AND RANKING
Estimation of document relevance from large scale user behavior data is of critical importance to Web search engines . In this sections we demonstrate how automatically discovered mouse cursors motifs can be used to improve estimation of search result relevance and ranking . To ensure proper comparison with prior work of Huang et al . [ 27 ] and Guo et al . [ 20 ] , we adhere to the same evaluation metrics : Pearson correlation coefficient and Normalized Discounted Cumulative Gain ( NDCG ) . In the rest of the section , we describe how motif based features can be incorporated into the existing PCB model and significantly improve the quality of personalized relevance prediction . 5.1 Experimental Setup and Dataset
Our test dataset , also referred to as D1 in subsequent experiments , was constructed in a user study with 21 participants , following the methodology described by Feild et al . [ 14 ] . The dataset contains 566 queries and corresponding 1,340 page views , including search engine result pages ( SERPs ) , with dwell times of at least 5 seconds . Each user was asked to provide a relevance rating for the web page ( on five point scale ) , immediately prior to navigating to the next web page . Mouse cursor position recording was stopped prior to showing the rating interface , thus the data was not “ polluted ” by extraneous cursor movements . The subjects were only asked to provide their ratings on landing pages ( non SERP ) . This allowed us to analyze mouse movements performed by a user on the landing page and relate them to the explicit relevance rating given by the very same user . Overall , there were 854 relevance judgments provided by user study participants . We use these relevance judgments in the relevance estimation and re ranking experiments of Section 53
5.2 Motif based Relevance Prediction System We now describe our system for predicting relevance of a document using our automatically discovered motifs as features , as a standalone system Motifs . We also compare Motifs against a state of the art relevance prediction system , PCB , using manually engineered features [ 20 ] , and the combination of the two feature sets , as PCB+Motifs . The specific features used are described below . PCB Features The features or predictors of the PCB model include the document viewing time – also known as dwell time , the characteristics of mouse cursor movements and scrolling behavior , such as ranges of mouse cursor movements for x and y , cursor movement speed , scrolling direction and frequencies , hovering certain area of interest on a web page by mouse cursor and various click statistics . These features aim to capture the searcher engagement with the examined document and viewing patterns such as “ reading ” and “ skimming ” , which are shown to be indicative of document relevance [ 20 ] . The complete list of PCB features , and other model details can be found in reference [ 20 ] . Motif Features All of the motifs discovered from the user study dataset were encoded as features . We only considered mouse cursor data from landing pages , as relevance judgements are not defined for search result pages . Each document was then represented with a vector of features , each feature corresponding to one motif . The feature values were computed as the minimum distances between a motif and the observed mouse cursor trajectory , using the following formula :
MinDist(motif , mouse ) = min
0<t<T−w
DTW(motif , mouse[t , t + w ] )
( 2 ) where T is the mouse cursor trajectory length , w is the motif length
Feature Group Pearson correlation 2
Hover [ 27 ] PCB [ 20 ]
Motifs
PCB + Motifs
0.12
0.392 ( n/a )
0.394 ( +0.5 % ) 0.468 ( +19.4 % ) p value p < 0.001 p < 0.001 p < 0.001 p < 0.001
Table 3 : Pearson correlation between the actual relevance judgments and the predicted ratings for PCB , Motifs and PCB+Motifs models on Dataset D1 . see , the best performing model results from combining the automatically extracted motifs and the PCB predictors ( PCB + Motifs ) , achieving the correlation of 0.468 between the actual personally judged relevance and the estimated relevance . Our model improved the prediction effectiveness over the state of the art PCB model by over 19 % . The system using the automatically extracted motifs alone ( Motifs ) correlated with the actual relevance judgments at 0.394 , which is comparable with the PCB model . This demonstrates that our approach indeed enables discovery of valuable patterns that are not easily identifiable through manual effort . To compare with prior work of Huang et al . [ 27 ] reported as Hover , we calculated Pearson correlation between cursor the hover rate and the explicit labels provided by the participants . We have not found a substantial correlation between hover rate and relevance labels measured for all participants . However , correlation coefficient calculated for each participant separately , varies from 0.23 to 0.27 , which explains the small correlation across the users . In our comparison we report average absolute value for all participants , thus giving an advantage to Hover . Nevertheless , it provides little correlation , and is outperformed by PCB and Motif models by a substantial margin . 5.4 Result Ranking
We now turn to the other practical application of motif discovery , result ranking . As in the relevance prediction experiments , we compare four models : Hover [ 27 ] , Motifs , PCB and the combined PCB+Motifs . For consistency , we use the same Linear Ridge Regression as for the experiments above . We perform cross validation stratified by user : that is , for each run we hold out documents seen by a single user , and train the model on the rest of the data . The same motifs are used as before , as they were discovered on a disjoint , unlabeled dataset described in section 53 We repeat the training and testing procedure for each of 21 users in our dataset and report the ranking performance averaged across all the users , resulting in a leave one out form of cross validation . Specifically , as a metric we use Normalized Discounted Cumulative Gain ( NDCG ) , widely accepted for assessing the quality of Web search results ranking . Normalized Discounted Cumulative Gain at K ( NDCG@k ) is parametrized by cutoff position k , that is , to calculate NDCG@k we consider only top k results . NDCG@k is defined as : k i=1
2reli − 1 log2(i + 1 )
N DCG@k =
DCG@k IDCG@k
, DCG@k = where IDCG@k is the DCG@k value of the ideal document ranking according to the relevance labels , and reli is relevance score for a i th document . DCG@k penalizes ranking with relevant documents appearing at lower position in the list with logarithmic discount . The N DCG@k value of 1.0 indicates a perfect ranking . At test stage we compute relevance scores for the held out documents and calculate N DCG@k based on the actual relevance labels . Results : Figure 8 reports N DCG@k for the values of k ranging from 1 to 50 . Interestingly , despite similar performance measured
Figure 7 : Example match of a “ follow ” motif ( shaded green ) to cursor trace ( blue crosses ) on a relevant landing page for a query “ best selling books of 2011 ” . For reference , eye gaze positions are marked as light red circles .
( 5000 ms in our case ) and DT W ( ·,· ) is the Dynamic Time Warping distance between the motif and sub sequence . Therefore , the smaller the minimum distance in the Equation 2 , the higher the match between the motif and the mouse trajectory ( and corresponding feature value ) . In fact , if the motif perfectly matches any subsequence of a page view , M inDist is equal to zero . This is analogous to a bag ofwords document representation that is widely used in information retrieval , except that in our case the “ words ” represent the common mouse cursor movements represented as motifs that occur in a page examination time series ( analogous to a “ document ” ) , and the value interpretations are reversed ( lower is better ) . Figure 7 illustrates this idea by highlighting the best match between the cursor trace , and a discovered “ follow ” motif , also seen in Figure 5(d ) . The figure plots the cursor positions ( shown as blue crosses ) and eye gaze positions ( shown as light red circles ) , and overlays the best match of the motif ( shaded in green ) . The user searched for book bestsellers of 2011 , and has subsequently judged this page as relevant , as it contains the list of top 20 book best sellers at the bottom of the page ( full page snapshot cropped due to lack of space ) . 5.3 Relevance Prediction
We now report the performance of the different systems on predicting document relevance . As evaluation metric , we use the Pearson correlation coefficient ρ , between the predicted and the true relevance labels , defined as :
ρf,y =
( x,y)∈D(f ( x ) − µf )(y − µy )
( |D| − 1)σf σy where µ is the observed sample mean and σ is the observed sample standard deviation . Pearson correlation is the evaluation metric of choice in previous work [ 20 , 27 ] , thus appropriate for comparison to previously proposed methods , namely PCB and cursor hover [ 27 ] . Predicting Relevance : We formulate the prediction problem as regression , and conduct 10 fold cross validation . The regression algorithm we used is Ridge Linear Regression , which is a variant of Multiple Linear Regression . Ridge linear regression is reported to be more robust against predictor collinearity and overfitting . Results : Table 3 summarizes the performance of four regression models with distinguished with different feature subsets . As we can
For exploratory applications , researchers and practitioners may , for example , choose to only look at search queries accompanied with extensive “ skimming ” behavior , as search results for these queries are more likely to be poor and require more attention . Similarly , search result documents with substantial “ reading ” behavior may be more relevant than those without . For example , we have shown that by using motif presence ( as feature values ) as predictors , search result ranking can be substantially and significantly improved . Generally speaking , with our approach , one may construct a dictionary of mouse cursor motifs , and use them to predict various user metrics , eg , affect , satisfaction , frustration , or user interest and engagement with web pages , not necessarily only search results . And , since our motif discovery approach is completely automatic and application independent , no application specific feature engineering is required .
This work opens a number of future research directions . While our proposed technique are page and user independent , the behavioral patterns may vary for different users , page layouts or tasks . For example , while the extracted motifs are prevalent across users , some of the patterns may be more dominant for particular users . Therefore , modeling individual characteristics may be helpful for segmenting and targeting different user groups ( eg , more active users vs . more passive users [ 8] ) , which would further improve the relevance prediction models . Our approach can also be naturally extended to touch screen devices that do not use mouse cursor , but provide other interaction features such as swiping and zooming ( requiring novel features and models , such the recent work by Guo et al . [ 21] ) , and is a promising direction for future work .
In summary , we introduced a novel technique for automatically and efficiently extracting frequent mouse cursor movement patterns ( motifs ) from web search examination data . To enable motif mining on realistic datasets , we introduced novel optimizations , using spatial indexing and learning distance measures , which resulted in an order of magnitude improvement in runtime performance . As a result , meaningful motifs such as reading , marking , and skimming a page were discovered from the search behavior data of real users , The discovered motifs were shown to be valuable for estimating document relevance for improving Web search result ranking , enabling over 19 % improvement in relevance estimation and over 27 % improvement in result ranking over the state of the art baselines . Thus , our novel techniques provide a general , robust , and scalable method for analyzing search behavior data , while enabling significant improvements on practical search tasks .
ACKNOWLEDGMENTS This work was supported by the National Science Foundation grant IIS 1018321 , the DARPA grant D11AP00269 , and the Yahoo! Faculty Research Engagement Program .
7 . REFERENCES [ 1 ] M . Ageev , D . Lagun , and E . Agichtein . Improving search result summaries by using searcher behavior data . In Proc . of SIGIR , 2013 . [ 2 ] E . Arroyo , T . Selker , and W . Wei . Usability tool for analysis of web designs using mouse tracks . In CHI extended abstracts , 2006 .
[ 3 ] H . Becker , M . Naaman , and L . Gravano . Learning similarity metrics for event identification in social media . In Proc . of WSDM , 2010 .
[ 4 ] N . Beckmann , H P Kriegel , R . Schneider , and B . Seeger . The r* tree : an efficient and robust access method for points and rectangles . In Proc . of SIGMOD , 1990 .
[ 5 ] M . Bilenko , S . Basu , and R . J . Mooney . Integrating constraints and metric learning in semi supervised clustering . In Proc . of ICML , 2004 .
[ 6 ] G . Buscher , E . Cutrell , and M . R . Morris . What do you see when you’re surfing ? : using eye tracking to predict salient regions of web pages . In Proc . of CHI , 2009 .
Figure 8 : NDCG@K of result rankings based on Hover , PCB , and motif models ( Motifs and PCB+Motifs ) , on dataset D1 . by Pearson correlation , ranking based on motif features behaves differently from the ranking based on the PCB model . Specifically , the motif model has significantly higher NDCG values at positions 1 through 10 ( with the improvement on NDCG@1 over the original PCB model of 27 % , p value < 0001 ) However , this improvement decreases with higher values of k . The combined PCB+Motifs model outperforms both PCB and Motifs at lower rank positions with relative improvements from 13 % at rank 10 decreasing to 6 % at rank 30 . By comparison , Hover model alone performs consistently poorly , especially at lower ranks . 5.5 Most predictive motifs
To gain a better understanding of the motif features , we conducted feature importance analysis using the weights assigned to the features by the linear ridge regression algorithm . The distribution of feature weights is reported in Figure 9 . Note that the majority of the feature weights are concentrated near zero , suggesting that the motif feature set could potentially be further pruned by applying standard feature selection algorithms . Ridge regression also naturally supports the interpretation of motif correlation directions through the signs of the feature weights . That is , the motif features with positive weights are positively correlated with the relevance label , while motif features with negative weights are anti correlated with relevance labels . Figures 10 and 11 show two examples of motifs with high absolute weights . In Figure 10 , the example motif has a high positive weight , suggesting a high level of user interest and engagement with the page content , in turn , indicating high document relevance . In Figure 11 , the example motif has relatively large negative weight , corresponding to the pattern of link pointing or other types of page navigation ( eg , clicking the “ Back ” button to leave the current page ) , indicating the viewed page to be non relevant . Note that these , and other most predictive motifs such as “ follow ” , are not captured by the PCB model , and in fact would be difficult to capture by manually engineered features . Thus , motif discovery provides a powerful way of building a dictionary of complex behavior features , with minimal application specific effort .
6 . DISCUSSION AND CONCLUSIONS
Our relevance prediction and ranking experiments demonstrated that the automatically extracted motifs are helpful for improving Web search result ranking , and provide additional clues about document relevance , over previously discovered patterns developed by manual examinations . We believe that these findings can facilitate the research and development of the mouse cursor movement data , especially at large scale .
Figure 9 : Distribution of motif feature weights .
Figure 10 : Most predictive positive motif .
Figure 11 : Most predictive negative motif .
[ 7 ] G . Buscher , A . Dengel , and L . van Elst . Query expansion using gaze based feedback on the subdocument level . In Proc . of SIGIR , 2008 .
[ 8 ] G . Buscher , R . W . White , S . Dumais , and J . Huang . Large scale analysis of individual and task differences in search result page examination strategies . In Proc . of WSDM , 2012 .
[ 9 ] E . Chávez , G . Navarro , R . Baeza Yates , and J . L . Marroquín . Searching in metric spaces . ACM Comput . Surv . , Sept . 2001 .
[ 10 ] S . Chopra , R . Hadsell , and Y . LeCun . Learning a similarity metric discriminatively , with application to face verification . In Proc . of CVPR , 2005 .
[ 11 ] E . Cutrell and Z . Guan . What are you looking for ? : an eye tracking study of information usage in web search . In Proc . of CHI , 2007 .
[ 12 ] P . Esling and C . Agon . Time series data mining . ACM Comput . Surv . ,
2012 .
[ 13 ] C . Faloutsos , M . Ranganathan , and Y . Manolopoulos . Fast subsequence matching in time series databases . 1994 .
[ 14 ] H . A . Feild , J . Allan , and R . Jones . Predicting searcher frustration . In
Proc . of SIGIR , 2010 .
[ 15 ] J . Goecks and J . Shavlik . Learning users’ interests by unobtrusively observing their normal behavior . In Proc . of IUI , 2000 .
[ 16 ] L . A . Granka , T . Joachims , and G . Gay . Eye tracking analysis of user behavior in WWW search . In Proc . of SIGIR , 2004 .
[ 17 ] Q . Guo and E . Agichtein . Exploring mouse movements for inferring query intent . In Proc . of SIGIR , 2008 .
[ 18 ] Q . Guo and E . Agichtein . Ready to buy or just browsing ? : detecting web searcher goals from interaction data . In Proc . of SIGIR , 2010 .
[ 19 ] Q . Guo and E . Agichtein . Towards predicting web searcher gaze position from mouse movements . In Proc . of CHI , 2010 .
[ 20 ] Q . Guo and E . Agichtein . Beyond dwell time : estimating document relevance from cursor movements and other post click searcher behavior . In Proc . of WWW , 2012 .
[ 21 ] Q . Guo , H . Jin , D . Lagun , S . Yuan , and E . Agichtein . Mining touch interaction data on mobile devices to predict web search result relevance . In Proc . of SIGIR , 2013 .
[ 22 ] Q . Guo , R . P . Kelly , S . Deemer , A . Murphy , J . A . Smith , and
E . Agichtein . EMU : the emory user behavior data management system for automatic library search evaluation . In Proc . of JCDL’09 , 2009 . [ 23 ] Q . Guo , D . Lagun , and E . Agichtein . Predicting web search success with fine grained interaction data . In Proc . of CIKM , 2012 .
[ 24 ] A . Guttman . R trees : a dynamic index structure for spatial searching .
SIGMOD Rec . , 14(2 ) , June 1984 .
[ 25 ] J . Huang , R . White , and G . Buscher . User see , user point : gaze and cursor alignment in web search . In Proc . of CHI , 2012 .
[ 26 ] J . Huang , R . W . White , G . Buscher , and K . Wang . Improving searcher models using mouse cursor activity . In Proc . of SIGIR , 2012 .
[ 27 ] J . Huang , R . W . White , and S . Dumais . No clicks , no problem : using cursor movements to understand and improve search . In Proc . of CHI , 2011 .
[ 28 ] I . Jolliffe . Principal component analysis . Wiley Online Library , 2005 . [ 29 ] E . Keogh and C . Ratanamahatana . Exact indexing of dynamic time warping . Knowledge and information systems , 7(3):358–386 , 2005 .
[ 30 ] E . Keogh , X . Xi , L . Wei , and C . A . Ratanamahatana . The ucr time series classification/clustering homepage , 2006 .
[ 31 ] S W Kim , S . Park , and W . W . Chu . An index based approach for similarity search supporting time warping in large sequence databases . In Proc . of ICDE , 2001 .
[ 32 ] L . Leiva . Automatic web design refinements based on collective user behavior . In CHI Extended Abstracts , 2012 .
[ 33 ] D . Lemire . Faster retrieval with a two pass dynamic time warping lower bound . Pattern recognition , 42(9):2169–2180 , 2009 .
[ 34 ] L . Lonardi , Jessica , K . Eamonn , Stefano , and P . Patel . Finding motifs in time series . In Proc . of the 2nd Workshop on Temporal Data Mining , 2002 .
[ 35 ] A . Mueen , E . Keogh , Q . Zhu , S . Cash , and B . Westover . Exact discovery of time series motifs . In Proc . of SIAM International Conf . on Data Mining , 2009 .
[ 36 ] V . Navalpakkam and E . Churchill . Mouse tracking : measuring and predicting users’ experience of web based content . In Proc . of CHI , 2012 .
[ 37 ] T . Rakthanmanon , B . Campana , A . Mueen , G . Batista , B . Westover , Q . Zhu , J . Zakaria , and E . Keogh . Searching and mining trillions of time series subsequences under dynamic time warping . In Proc . of KDD , 2012 .
[ 38 ] K . Rodden , X . Fu , A . Aula , and I . Spiro . Eye mouse coordination patterns on web search results pages . In Proc . of CHI , 2008 .
[ 39 ] H . Sakoe and S . Chiba . Dynamic programming algorithm optimization for spoken word recognition . Acoustics , Speech and Signal Processing , IEEE Transactions on , 26(1 ) , 1978 .
[ 40 ] Y . Sakurai , M . Yoshikawa , S . Uemura , H . Kojima , et al . The a tree :
An index structure for high dimensional spaces using relative approximation . In Proc . of the VLDB , 2000 .
[ 41 ] B . Shapira , M . Taieb Maimon , and A . Moskowitz . Study of the usefulness of known and new implicit indicators and their optimal combination for accurate inference of users interests . In Proc . of ACM SAC , 2006 .
[ 42 ] J . Shieh and E . Keogh . i sax : indexing and mining terabyte sized time series . In Proc . of KDD , 2008 .
[ 43 ] R . W . White and G . Buscher . Text selections as implicit relevance feedback . In Proc . of SIGIR , 2012 .
[ 44 ] L . Ye and E . Keogh . Time series shapelets : a new primitive for data mining . In Proc . KDD , 2009 .
[ 45 ] B K Yi , H . Jagadish , and C . Faloutsos . Efficient retrieval of similar time sequences under time warping . In Proc . of ICDE , 1998 .
[ 46 ] J . Zakaria , A . Mueen , and E . Keogh . Clustering time series using unsupervised shapelets . In Proc . of ICDM , 2012 .
[ 47 ] P . Zezula , G . Amato , V . Dohnal , and M . Batko . Similarity Search : The
Metric Space Approach . Springer , 2010 .
