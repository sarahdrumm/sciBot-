Latent Dirichlet Co Clustering
M . Mahdi Shafiei and Evangelos E . Milios
Faculty of Computer Science , Dalhousie University
6050 University Ave . , Halifax , Canada shafiei@csdalca , eem@csdalca
Abstract better features .
We present a generative model for simultaneously clustering documents and terms . Our model is a four level hierarchical Bayesian model , in which each document is modeled as a random mixture of document topics , where each topic is a distribution over some segments of the text . Each of these segments in the document can be modeled as a mixture of word topics where each topic is a distribution over words . We present efficient approximate inference techniques based on Markov Chain Monte Carlo method and a Moment Matching algorithm for empirical Bayes parameter estimation . We report results in document modeling , document and term clustering , comparing to other topic models , Clustering and Co Clustering algorithms including Latent Dirichlet Allocation ( LDA ) , Modelbased Overlapping Clustering ( MOC ) , Model based Overlapping Co Clustering ( MOCC ) and Information Theoretic Co Clustering ( ITCC ) .
1
Introduction
Finding the appropriate representation model for text data has been one of the main issues for the data mining community since it started to look at the problem of processing text automatically . The “ bag of words ” representation is the basic and most widely used representation method for textual data [ 19 ] . In this approach , the order of words at which they appear in documents are ignored and only the word frequencies are taken into account . But this approach has been criticized for several reasons . Among those , it provides a relatively high dimensional representation of data ( equal to the dictionary size ) which causes curse of dimensionality problem [ 19 ] . Furthermore , it does not consider synonymy and polysemy relations of words in natural language . It has been also criticized of losing information due to its ignorance of word order . Various preprocessing steps such as removing stop words and stemming have been used to reduce dimensionality , create and select
To overcome the high dimensionality issue of the bag ofwords representation , several dimension reduction methods have been proposed . Feature selection methods select a subset of words to reduce the dimensionality . Feature transformation methods try to tackle not only the high dimensionality problem of “ bag of words ” representation , but indirectly consider synonymy and polysemy as well . Latent Semantic Indexing ( LSI ) [ 6 ] is one of these approaches which uses singular value decomposition to identify a linear subspace in the original space of features . It is believed that the resulting new features also capture the two mentioned properties of natural language polysemy and synonymy .
But the problem with most cartesian space representation approaches for text like LSI is their inability to provide interpretable components . Despite some work on interpreting the dimensions generated by these methods [ 5 ] , these approaches are still far from providing a natural interpretation in the case of text . Topic models , on the other hand , are a class of statistical models in which the semantic properties of words and documents are expressed in terms of probabilistic topics . Probabilistic topic modeling as a way of representing the content of words and documents has the distinct advantage that each topic is individually interpretable , providing a probability distribution over words that picks out a coherent cluster of correlated terms . The major difference between cartesian space methods like LSI and statistical topic models is that LSI family methods claim that words and documents can be represented as points in the Euclidean space whereas for the topic models , this is not the case .
One common assumption among most statistical models for language is still the bag of words assumption . In these models , no assumption is made about the order of words . In other words , while this family of methods tries to deal with the two first issues of bag of words representation , high dimensionality and ignoring polysemy and synonymy properties , it still keeps the “ bag of words ” assumption intact . Recently , there has been increased research interest in models sensitive to this kind of information [ 11 ] .
Proceedings of the Sixth International Conference on Data Mining ( ICDM'06)0 7695 2701 9/06 $20.00 © 2006 The basic idea behind all proposed topic models [ 10 , 3 ] is that a document is a mixture of several topics where each topic is some distribution over words . Each topic model is a generative model which specifies a simple probabilistic process by which the words in a document are being generated on the basis of a small number of latent variables .
Using standard statistical techniques , one can invert the process and infer the set of latent variables responsible for generating a given set of documents [ 21 ] . Assuming a model for generating the data , the goal of fitting this generative model is to find the best set of latent variables that can explain the observed data ( ie , observed words in documents ) .
Probabilistic Latent Semantic Analysis ( also known as the aspect model ) [ 12 ] was one of the first attempts toward using probabilistic models for document and text modeling . In this model , each word is assumed to be a sample from a mixture model . Mixture components are multinomial random variables that can be viewed as representations of “ topics ” . Each word is generated from a single topic and a document is a collection of words generated potentially from different topics .
Though a useful step after LSI , the PLSI model does not provide a generative model for a document , instead it is a model for word/document co occurrences [ 13 ] . This assumption makes it difficult to assign probabilities to documents outside of the learning corpus . Latent Dirichlet Allocation [ 3 ] , on the contrary , is a true generative model for documents and therefore provides the means for generating both the observed and unseen documents . In LDA , the documents are assumed to be sampled from a random mixture over latent topics , where each topic is characterized by a distribution over words . Furthermore , the mixture coefficients are also assumed to be random and by considering a prior probability on them , LDA provides a complete generative model for the documents [ 10 ] .
In Latent Dirichlet Allocation , a document is generated by first picking a distribution over latent topics from a Dirichlet distribution , which determines the multinomial distribution over topics for words in that document . The words in the document are then generated by picking a topic for each word from this distribution and then picking a word from that topic according to another multinomial distribution . Fig 1.b shows the graphical model corresponding to the generative model of LDA .
The major and direct output of these models is a set of overlapping clusters of words . Clustering documents can be viewed only as a byproduct and not as a direct output of topic models . On the other hand , co clustering [ 8 , 20 , 15 ] is a data mining technique with various applications such as text clustering and microarray analysis . Co clustering algorithms try to simultaneously cluster rows and columns of a two dimensional data matrix . One of the benefits of co clustering algorithms is taking advantage of the duality between documents and words and in general the duality between the rows and columns of an adjacency matrix . Co clustering algorithms , using the clustering results on words as a low dimensional representation of documents can achieve a more accurate clustering for documents [ 8 ] . In this work , we try to combine these two ideas , probabilistic topic models and co clustering , using topic models to construct a low dimensional representation of documents . Therefore , we extend the original idea of topic models to consider the resulting low dimensional representation of documents in another nested topic model for clustering documents .
The topics discovered by most probabilistic topic models capture the correlation between words , but the correlations between topics are not modeled . Several models have been recently proposed to capture the correlation between topics , such as Hierarchical Dirichlet Processes Model ( HDP ) [ 22 ] , Correlated Topic Models ( CTM ) [ 2 ] and Pachinko Allocation Model ( PAM ) [ 14 ] . In natural text data , it is common to have correlations among topics . As pointed out in [ 2 ] , “ a document about sports is more likely to also be about health than international finance ” . In the LDA model , the topic proportions are derived from a Dirichlet distribution and hence are nearly independent . CTM tries to capture topic correlations by introducing logistic normal distribution instead of Dirichlet distribution for drawing topic mixture proportions . The logistic normal distribution is yet again a distribution on the simplex where the correlation between pairs of components is described through a covariance matrix . In CTM , only the pairwise correlations are modeled and the number of parameters grows quadratically with the number of topics [ 14 ] . In the PAM model , similar to our proposed model , the concept of topic is extended to include not only distributions over words , but also distribution over topics . The model structure is an arbitrary DAG where each leaf is associated with a word and each non leaf node is a distribution over its children . The direct parents of the leaf nodes are distributions over words and correspond to topics in LDA . All other interior nodes are distributions over topics and called “ super topics ” . Allowing an arbitrary DAG structure , the PAM model is able to capture arbitrary correlations between word topics .
In this paper , we propose a generative model for text documents based on LDA model which is able to cluster both words and documents simultaneously . The model is also more sensitive to to the locations of words in documents by focusing on meaningful segments of text . This enables the model to detect multiple topics covered by a document .
The rest of this paper is organized as follows . In section 2 , we present the Latent Dirichlet Co Clustering Model ( LDCC ) . We propose inference and parameter estimation algorithms for LDCC in Section 3 . Finally , we conclude the
Proceedings of the Sixth International Conference on Data Mining ( ICDM'06)0 7695 2701 9/06 $20.00 © 2006 paper with a brief review of the paper and some discussion on future works in section 5 .
2 Latent Dirichlet Co Clustering Model
We use the same notation and definitions as in [ 3 ] . We define the following terms :
• A word is the basic building block of our data and it is selected from a vocabulary indexed by {1 , . . . , V } . We represent words using unit basis vectors that have a single component equal to one and all other components equal to zero . Thus , the vth word in the vocabulary is represented by a V vector w such that the vth component is one and all other components are zero .
• A document is a sequence of words w = ( w1 , w2 , . . . , wN ) , where N is the number of words in the document .
• A corpus is a collection of M documents denoted by
D = {w1 , w2 , . . . , wM}
The basic idea of the LDA model is to assume each document as a random mixture over latent topics , where each topic is specified by a distribution over words . We extend this idea by assuming each document is a random mixture of topics , where each topic is a distribution over some segments of the document . Now , each of these segments in the document can be modeled by LDA .
The intuition behind this work is that documents are composed of meaningful single topic segments put together . Each of these segments is assumed to convey a single concept or topic . This topic is among a handful of topics which specifies the theme of the document . If one looks at each of these segments separately , the order of words in the segment is assumed to have little impact on the concept which the segment is trying to convey . Thus , the “ bag ofwords ” assumption for these segments is fairly realistic , unlike for the whole document . In this work , we assume segments are paragraphs of the text . The proposed model tries to model each segment based on its word content similar to most probabilistic topic models . Then these learned topics on the words are being used to represent document topics . In other words , each document topic is considered a mixture of word topics where the mixture coefficients uniquely specifies the document topic .
The generative probabilistic model we propose is shown as a graphical model in Fig 1 . Plate notation [ 4 ] is a standard and convenient way of illustrating probabilistic generative models with repeated sampling steps . In this graphical notation , shaded and unshaded variables indicate observed and latent ( ie , unobserved ) variables respectively .
φ y
θ z w
N
S
M
δ
α
α
η
β
L
θ z w
N
M
η
β
L
( a ) Co Clustering Model
( b ) LDA Model
Figure 1 . LDA Model and Co Clustering Model inspired by LDA
The LDCC model assumes the following generative process for each document d in a corpus D ( intuitive explanations of model parameters are given in the text following the overview of the generative process. ) : 1 . Choose S ∼ P oisson(µ ) : number of segments ( para graphs or sentences ) in the document
2 . Choose φ ∼ Dir(δ ) 3 . For each of the S segments s
M ultinomial(φ ) the segment ys ∼ ( a ) Choose a topic for ( b ) Choose Ns ∼ P oisson(ε ) : number of words in ( c ) Choose θs ∼ Dir(α , ys ) ( d ) For each of the Ns words wsn the segment i . Choose a topic zsn ∼ M ultinomial(θs ) ii . Choose a word wsn from P ( wsn|zsn , β ) , a multinomial probability conditioned on the topic zsn
We have assumed that the number of word and document topics ( and hence the dimensionality of topic variables z and y ) are known and fixed . We also model the word probabilities conditioned on the topics by a L×V matrix β where βij = p(wj = 1|zi = 1 ) which is assumed to be fixed and will be estimated though the learning process . Finally , as in the LDA model , we can use any other document length
Proceedings of the Sixth International Conference on Data Mining ( ICDM'06)0 7695 2701 9/06 $20.00 © 2006 distribution instead of the Poisson distribution as it is not important for the rest of the model . Furthermore , note that the Ns variables are independent of all the other data generating variables ( θ , z , φ and y ) and we therefore ignore its randomness in the subsequent development .
Note that φ represents the mixing proportion of document topics in a document . It specifies the parameters of the K dimensional multinomial distribution from which the model draws samples for document topics . θs is a sample from the Dirichelt distribution and specifies the mixing proportion of word topics in the text segment s . Note that this mixing proportion depends on the document topic that the current text segment is generated from . The model assume that each document topic is a mixture of several wordtopics and this fact is modeled through the matrix of hyperparameters α .
The Dirichlet distribution is a conjugate prior for the multinomial distribution . Choosing a conjugate prior makes the problem of statistical inference easier . Basically , the posterior distribution would have the same functional form as prior distribution and the process of statistical inference , instead of being caught up in impractical integrations , be reduced to simply adjusting the parameters of the posterior distribution given the new evidence . A k dimensional Dirichlet random variable θ can take values in the ( k − 1) simplex . The probability density of a k dimensional distribution on this simplex is defined by : p(θ|α ) =
θα1−1
1
. . . θαk−1 k
( 1 )
k .k
Γ( i=1 αi ) i=1 Γ(αi )
The parameters of this distribution are represented by a k vector α with components αi > 0 . Each hyperparameter αi has the nice interpretation that it could be considered as a prior observation count of the number of times that the corresponding topic has been sampled . Γ(x ) is the Gamma function .
Given the parameters α , β and γ , the joint distribution of a word topic mixture θ , document topic mixture φ , a set of N word topics z , a set of S document topics y , and a set of N × S words w is given by : p(φ , y , θ , z , w|α , β , δ ) = p(φ|δ ) Nsfi p(ys|φ)p(θs|α , ys ) p(zsn|θs)p(wsn|zsn , β ) n=1 where p(zsn|θs ) is simply θsi for unique i such that zi sn = 1 and p(ys|φ ) is simply φi for unique i such that yi s = 1 . Note that variables zsn and ys are boolean vectors that have a single component equal to one and all other components zero . The component equal to one simply represents the word topic or document topic that the corresponding word
Sfi s=1 or segment belongs to . Integrating over θ and φ and summing over z and y , we obtain the marginal distribution of a document w : ff
Sfi
' p(ys|φ ) p(θs|α , ys ) p(zsn|θs)p(wsn|zsn , β ) dθs s=1 ys dφ
' p(φ|δ )
Nsfi n=1 zsn p(w|α , β , δ ) = ff
Taking the product of marginal probabilities of documents in a corpus gives us the probability of the corpus .
Mfi p(D|α , β , δ ) = p(wd|α , β , δ ) d=1
3
Inference and Parameter Estimation
The inference problem is to compute the posterior distribution of hidden variables given the input variables α , β , δ and observations w : p(φ , y , θ , z|w , α , β , δ ) = p(φ,y,θ,z,w|α,β,δ ) p(w|α,β,δ ) which is intractable to compute in general . Given a document collection , we also need to estimate the model parameters α , η , δ so that the model likelihood for the collection gets maximized .
Exact inference on models in the LDA family cannot be performed practically . Three standard approximation methods have been used to carry out the inference and obtain practical results : variational methods [ 3 ] , Gibbs sampling [ 10 ] , and expectation propagation [ 16 ] . The EM based algorithms tend to face local maxima problems in this models [ 3 ] . Therefore , we use algorithms in which some of the hidden parameters in our case β , φ and δ can be integrated out instead of explicitly being estimated . Note that we use conjugate priors in our model , and thus we can easily integrate out these parameters . This simplifies the sampling since we do not need to sample β , φ and δ at all . Besides doing inference for document and word topic assignment variables y and z , we also need to learn the parameters of the Dirichlet distribution α = {α1 , . . . , αK} . In this section , we describe procedures for inference and parameter estimation and present a Gibbs sampling procedure for doing inference in the proposed model .
MCMC algorithms are a family of approximate iterative algorithms used to draw samples from a complex and usually high dimensional distribution . Gibbs sampling is a member of this family and is applicable where the whole joint distribution is unknown or impractical to sample from , but the conditional distributions are known and sampling from them is not difficult .
Proceedings of the Sixth International Conference on Data Mining ( ICDM'06)0 7695 2701 9/06 $20.00 © 2006 In each turn of the algorithm , a subset of variables are sampled from their conditional distribution conditioned on the current values of all other variables . This process is performed sequentially and continues until the sampled values approximate the target distribution . In our problem , the distribution that we want to sample from is the posterior distribution of word topics and document topics given the collection of documents . Since this distribution is intractable and difficult to sample from , in each iteration of Gibbs sampling , we sample from the conditional distribution of a single word in a document given that the topic assignment for all other words and paragraphs in all documents except the current word are known . We also sample from the conditional distribution of a single paragraph given that the topic assignments of all other words not in the current paragraph and topic assignments of all other paragraphs are known . For our proposed model , Gibbs sampling algorithm is easy to implement , requires little memory , and is competitive in speed and performance with existing algorithms .
We order the documents in the corpus and represent the collection of documents by three list of indices : word indices wl , paragraph indices pl and document indices dl . wli denotes the index of the ith word in the sequence of words ( if we assume the whole corpus as a sequence of words fed to the algorithm ) and dli and pli are the document index and paragraph index of the corresponding word respectively . These lists will then be fed to the Gibbs Sampling algorithm . For each word token , the Gibbs sampling algorithm estimates the probability of assigning the current word to word topics given assignment of all other words to word topics from the corresponding conditional distribution that we will derive shortly . Then the current word would be assigned to a word topic and this assignment will be stored for being used when the Gibbs sampling algorithm works on other words .
While scanning the list of words , we keep track of the paragraphs . For each new paragraph , the Gibbs sampling algorithm estimates the probability of assigning this paragraph to document topics given assignments of all other paragraphs to document topics . These probabilities are computed from the corresponding conditional distribution for a paragraph given all other topic assignment to every other paragraph and all words not in this paragraph . Then the new paragraph would be assigned to a document topic . In our case we need to compute the conditional distribution p(zdsn|z−dsn , y , w ) and p(yds|z , y−ds , w ) , where zdsn represents the word topic assignment for word wdsn ( word n in document d and paragraph s ) and z−dsn denotes the word topic assignments for all other words except the current word wdsn . yds denotes the document topic assignment for paragraph pds in document d and y−ds represents the document topic assignments for all paragraphs except the current paragraph pds . Beginning with the joint proba bility of a dataset , and using the chain rule , we can obtain the conditional probabilities conveniently . The derivations are provided in detail in Appendix A . For the LDCC Model , we obtain :
Algorithm 1 : LDCC Gibbs Sampling Algorithm
Input : δ , α , η , L , K,Corpus , M axIteration Output : topic assignments for all words and paragraphs in the
Corpus
1
2 3
4
5 6
7 8 9 10 11 12
13
14
15 16
17
18
19 20
Initialization : Randomly , initialize the word topic and document topic assignments for all word token and paragraphs Compute Pdk for all values of k ∈ {1K} and all documents Compute nlv for all values of l ∈ {1L} and all word tokens Compute n(ds ) their paragraphs if doing parameter estimation then for all values of l ∈ {1L} and all documents and l
Initialize alpha parameters using Eq 4
Randomize the order of documents in the corpus Randomize the order of paragraphs in each document Randomize the order of words in each paragraph for iter ← 1 to M axIteration do foreach word i according to the order do l and nli
Exclude word i and its assigned topic l from variables n(ds ) newl = sample new word topic for word i using Eq 2 Update variables n(ds ) newl for word i if entered a new paragraph j then and nli using the new word topic l
Exclude paragraph j and its assigned topic k from variable Pdk newk = sample new document topic for paragraph j using Eq 3 Update variable Pdk using the new document topic newk for paragraph j if doing parameter estimation then
Update alpha parameters using Eqs . 4 p(zdsn|z−dsn , y , w ) = ( αydszdsn + n(ds )
− 1 ) V − 1 × nzdsnwdsn + ηwdsn v=1 nzdsnv + ηv − 1 zdsn
( 2 ) where n(ds ) zdsn represents how many times a word in paragraph s of document d has been assigned to topic zdsn . Furthermore , αydszdsn is the zdsnth component in αyds . nzdsnwdsn represents the total number of times that the word wdsn has been assigned to topic zdsn . For p(yds|z , y−ds , w ) , we have p(yds|z , y−ds , w ) = ( δyds + Pdyds − 1 ) .L .n(ds ) L .n(ds)−1 −1
× l=1 l j=0 (
( αydsl + j ) l=1 αydsl + j ) j=0
( 3 ) where yds is the document topic that has been assigned to paragraph s in document d and Pdyds is the number of times a paragraph in document d has been assigned to documenttopic yds . n(ds ) is the number of words in paragraph s of
Proceedings of the Sixth International Conference on Data Mining ( ICDM'06)0 7695 2701 9/06 $20.00 © 2006 SYMBOL L K Ns M y z δ α
β
η
φ θs wdsn zdsn z−dsn nlv n(ds ) l yds Pdk n(ds )
DESCRIPTION number of word topics number of document topics number of words in paragraph s number of documents in the collection document topic variable for the corpus word topic variable for the corpus parameters of the Dirichlet prior on document topics matrix of K × L dimensions , row i represents mixing proportion of word topics in document topic i parameters of multinomial distribution of words conditioned on word topics parameters of the prior probability for distribution of words conditioned on word topics mixing proportion of document topics in document mixing proportion of word topics in the text segment s word n in paragraph s of document d word topic assignment for word wdsn word topic assignments for all other words except the current word wdsn number of times that the word v assigned to topic l number of times a word in paragraph s of document d assigned to topic l document topic assigned to paragraph s in document d number of paragraphs in document d assigned to document topic k number of words in paragraph s of document d
Table 1 . List of symbols used in this paper document d . δyds is the corresponding Dirichlet parameter for document topic yds that the paragraph s in document d has been assigned to .
The Gibbs sampling algorithm is initialized by assigning each word token to a random word topic in [ 1L ] and each paragraph to random document topic [ 1K ] A number of initial samples have to be discarded ( also known as burn in samples ) because they are poor estimates of the posterior . After this burn in period , the next Gibbs samples start to approximate the target distribution ( ie , the posterior distribution over word topic and document topic assignments ) . Now , we pick a number of Gibbs samples and save them as a representative set of samples from this distribution . This should be done at regularly spaced intervals to prevent correlations between samples [ 9 ] .
In the LDA model as adopted by previous works , the Dirichlet parameters α are assumed to be given and fixed . This would give us reasonable results when we choose a uniform Dirichlet . But for our proposed model , the parameters α capture relationships between document and word topics and must be learned from the data . In a sense , they somehow summarize the corresponding termdocument matrix of the corpus . For estimating parameters of a Dirichlet distribution , one can use different approaches proposed in the literature [ 17 ] . These methods are based on maximum likelihood or maximum a posteriori estimation of parameters . There is no closed form solution for these methods and one should use iterative methods to learn the parameters . In order to avoid these often computationally expensive methods , we use moment matching [ 17 ] to approximate the parameters of the Dirichlet prior α . In each iteration of Gibbs sampling , we update s∈Sk n(s ) l n(s ) meankl =
1 Nk varkl =
(
− meankl ) n(s ) l n(s )
1 Nk meankl(1 − meankl ) s∈Sk
− 1
( 4 ) varkl mkl = L αkl ∝ meankl
αkl = exp( l=1 log(mkl ) L − 1
)
L l=1 l where Sk represents the set of paragraphs assigned to document topic k and Nk is the number of paragraphs assigned to document topic k . n(s ) represents the number of times a word in paragraph s has been assigned to wordtopic l . n(s ) is the number of words in paragraph s . Note that for meankl and varkl , we only consider the paragraphs assigned to document topic k . For each document topic k , we first compute sample mean meankl and sample variance varkl . They are computed over all paragraphs assigned to document topic k . Algorithm 1 shows the pseudocode for the Gibbs sampling process for the proposed model . A summary of symbols and their description is given in Table 1 .
4 Experimental Results
We use two real world datasets in our experiments . We built our first dataset using NIPS conference papers available in both text and XML format 1 . Each paper corresponds to a XML file contains nested tags for pages , columns , paragraphs , lines , and words . We removed all the words occurred in less than 5 documents from the list of final word tokens . We also used a list of standard “ stopwords ” and deleted all numbers , words with length less than 3 and having non ascii characters . For NIPS dataset , we keep certain two characters length words like “ EM ” and “ ML ” . We do not consider paragraphs with less than 5 words and do not also include documents with less than 3 paragraphs . As a result , the NIPS dataset contains 1803 documents with the total of 1858577 word tokens . There are 11891 paragraphs in this dataset and word tokens are taken from 20485 unique words .
Our second dataset is a subset of Wikipedia XML corpus 2 [ 7 ] . This subset contains 1236 articles categorized in 9 overlapping classes . Each documents belongs to
1It is available at http://nipsdjvuzoneorg/txthtml 2it download available for is connexlip6fr/˜denoyer/wikipediaXML by registration at http://www
Proceedings of the Sixth International Conference on Data Mining ( ICDM'06)0 7695 2701 9/06 $20.00 © 2006 topic 1 error generalization learning training optimal order large average small examples topic 2 neuron neurons synaptic firing spike time activity rate synapses potential topic 1 language english greek languages word russell century theory words modern topic 2 game player cards players games play card hand round played topic 7 function functions basis linear regression kernel space gaussian approximation rbf topic 4 analog circuit current figure chip voltage vlsi circuits digital implementation topic 6 topic 5 data control clustering model motor principal forward cluster pca inverse set dynamics algorithm controller feedback points system approach clusters position topic 3 image images object recognition face objects hand pixel system view Figure 2 . Example word topics for the NIPS dataset topic 3 church god christian jesus christ orthodox baptism program states life united module catholic jpg election roman state crew Figure 3 . Example word topics for the Wikipedia dataset topic 8 apollo earth moon lunar time topic 7 war german army soviet battle germany mission world forces french union topic 4 house parliament members commons lords bill act power chopin speaker topic 5 air aircraft world force military ship gun war ships navy topic 6 league football team world club home season won game major topic 9 party government president political national minister topic 8 rule rules set step form fuzzy problem relative extraction expert topic 9 distribution probability gaussian data parameters model bayesian mixture density likelihood topic 10 system computer game games apple atari commodore home software video
1.47 classes on average . The biggest class corresponds to ” Art/Categories “ whit 510 documents . The smallest class , ” United Kingdom/Categories “ has 74 documents . There are 774958 word tokens , 21453 paragraphs and 17406 unique words after preprocessing . The preprocessing phase is similar to the one for NIPS dataset . For the Wikipedia dataset , we do not have the tags for separating words , therefore we used all delimiting characters to separate words .
In this section , we describe the details of our experiments that demonstrate the improved performance of LDCC on NIPS dataset , compared to the LDA in terms of generalization of the topics found measured by perplexity . We also show the improved clustering performance of LDCC compared to the MOC and MOCC models .
In Gibbs sampling for both LDCC and LDA , we run 5 markov chains , discarding the first 500 iterations as burn in iterations , and then draw 5 samples from each chain at a lag of 50 iterations , a total of 25 samples for each experiment . For the NIPS dataset , the total training time for LDCC is approximately 23 hours on a machine with a dual core Intel Pentium IV 64 bit ( EM64T ) processor ( 2 × 3.0GHz processor ) with 2GB of RAM .
4.1 Word and Document Topic Examples
In this section , we show 9 word topics derived from NIPS dataset and 10 word topics derived from Wikipedia dataset , each represented by their first 10 most probable words , presented in Fig 2 and Fig 3 respectively . As it can be seen , the model seems to be able to capture some of the underlying word topics in both datasets .
We have also constructed a graph of latent word topics and document topics which explains the correlations found by the model amongst word topics appearing in a cluster of documents represented by a document topic . A part of this graph is shown in Figure 4 . For each word topic in the graph , we have a box where the word topic is represented by its 6 most probable words . For each document topic k , we rank the word topics {l}according to Dirichlet parameters αkl . From the top 10 word topics for each documenttopics , we have picked some of them and it is depicted in Figure 4 . The idea is that we try to get word topics as tight as possible representing a very specific word topic . We can illustrate these word topics by a set of their most probable words . Document topics are distributions over these wordtopics and thus theoretically can be represented by their most probable words . But each document topic can be a mixture of seemingly unrelated word topics and this makes representation of a document topic with words less descriptive than with word topics . Representing document topics with a set of most probable word topics would allow the user himself to figure out the associated concept . Additionally , this representation makes the visualization of wordtopic correlations more intuitive .
4.2 Likelihood Comparison for Document
Modeling
We trained LDA and LDCC using the training set and we want to compare the generalization performance of these two models in terms of the likelihood achieved on the test set . Perplexity is a widely used and standard measure for comparing the performance of statistical models for natural language [ 3 ] . Perplexity can be though of as the uncer
Proceedings of the Sixth International Conference on Data Mining ( ICDM'06)0 7695 2701 9/06 $20.00 © 2006 distribution probability Gaussian parameters Bayesian mixture linear nonlinear analysis single Input Order
Auditory Sound Target
Localization
Spectral Correlation time sequence temporal Prediction
Delay Series
Sequence
Analog Circuit Current Chip Voltage
Vlsi
Algorithm Problem Method Number Solution Search
Component Independent
Analysis
Ica
Source Data
Channel
State Optimal Time Policy Action
Reinforcement
Function
Results Similar Local Small
Experiments
Show
Neuron Synaptic Firing Spike Time Activity
Rule Set Step Fuzzy
Extraction
Expert
Region Human Chain Mouse
Precursor Receptor
Weight Function Gradient Equation Learning Algorithm
Figure 4 . Correlation identified by LDCC between word topics . Each circle shows a document topic and each box corresponds to a word topic . As it can be seen , one document topic can be connected to several word topics and capture their correlation . tainty in predicting a single word according to the model and lower values are better . Formally , for a test set of M documents , it is defined as : perplexity(Dtest ) = exp
M M ff − d=1 log p(wd )
( 5 ) d=1 Nd
In order to compute perplexity , we need to compute the likelihood p(w ) and this requires summing over all possible assignments of words to word topics z and text segments ( in our datasets , the text segments corresponds to paragraphs ) to document topics y . This problem has no closed form solution . Previous work on LDA [ 10 ] has used harmonic mean estimator introduced in [ 18 ] . We estimate p(w ) by taking the harmonic mean of a set of values p(w|z ) . By using the chain rule and integrating the parameter out , we get : ff
V .V
Γ( v=1 ηv ) v=1 Γ(ηv ) p(w|z ) =
L Lfi l=1
.V V
Γ( v=1 Γ(nlv + ηv ) v=1 nlv + ηv )
( 6 ) z is sampled from the posterior P ( z|w ) using the Gibbs sampling procedure described in section 3 . The derivation of this is similar to the one described in Appendix A .
In these experiments , we use the NIPS dataset and split it into 80 % for training and 20 % for calculating the likelihood . We use 20 document topics and change the number of word topics from 20 to 100 . We split the dataset randomly so that the training and test subsets have relatively 80 % and 20 % of the documents respectively and each topic in both subsets has at least 5 documents .
We present perplexity results for different number of word topics in Fig 5 . For all these experiments , the number of document topics are assumed fixed and equal to 20 . As it can be observed , for different number of word topics ,
14000
12000
10000
8000
6000
4000 y t i l x e p r e P
2000
0
LDA
LDCC
20
40
60
80
100
120
Number of Word Topics
Figure 5 . Perplexity results for NIPS dataset with different numbers of topics
LDCC always produce lower perplexity compared to LDA . As it can be seen in Fig 5 , the perplexity for the LDCC method is increasing in the range of values that we have examined , as opposed to LDA model . This shows that the proposed method can not keep up its generalization performance as the number of word topics increases , in contrast to the LDA model .
We also show the results comparing LDCC and LDA when we use different amount of training data for learning the model parameters . In these set of experiments , the number of word topics and document topics are assumed fixed and equal to 20 and 100 respectively . We present these results in Fig 6 . As it can be seen , the LDCC model has lower perplexity compared to LDA model as the amount of training data increase . The perplexity for LDCC model decreases while we increase the amount of training data while for the LDA model , the perplexity has a peak when we use
Proceedings of the Sixth International Conference on Data Mining ( ICDM'06)0 7695 2701 9/06 $20.00 © 2006 LDA
LDCC y t i x e l p r e P
14000
13000
12000
11000
10000
9000
8000
7000
6000
0
10
20
30
40
50
60
70
80
90
Figure 6 . Perplexity results for NIPS dataset with different amounts of training data
Training Data ( % )
60 % of the data for training .
4.3 Document Clustering Performance
We compare LDCC algorithm in terms of clustering accuracy with another algorithm for overlapping clustering , namely Model based Overlapping Clustering ( MOC ) [ 1 ] and two other co clustering algorithms , namely Model based Overlapping Co Clustering ( MOCC ) [ 20 ] and Information Theoretic Co Clustering ( ITCC ) [ 8 ] . We conducted this experiment on our subset of Wikipedia XML corpus [ 7 ] .
In order to compare clustering results , we use precision , recall , and F measure calculated over pairs of points , as defined in [ 1 ] . For each pair of points that share at least one cluster in the overlapping clustering results , these measures try to estimate whether the prediction of this pair as being in the same cluster was correct with respect to the underlying true categories in the data . Precision is calculated as the fraction of pairs correctly put in the same cluster , recall is the fraction of actual pairs that were identified , and F measure is the harmonic mean of precision and recall .
Table 2 presents the results of LDCC versus ITCC algorithm in terms of precision , recall and F Measure for the Wikipedia Corpus . Each reported result is an average over ten trials . We have chosen the number of word topics to be fixed and equal to 50 . Table 2 contains the results for two different values for the number of document topics , 15 and 20 . Table 2 shows that the precision of LDCC is very close to the other three methods investigated but it can also be seen that our proposed algorithm shows a major improvement in terms of recall and F Measure .
5 Conclusion
This paper has introduced a generative model for simultaneously clustering documents and terms . Latent Dirichlet
Algorithm LDCC MOC MOCC ITCC LDCC MOC MOCC ITCC
K 15 15 15 15 20 20 20 20
Precision
30.88 31.75 31.30 31.06 31.10 31.84 31.27 31.06
Recall 79.21 42.45 70.06 7.44 75.70 48.06 68.25 6.16
F Measure
44.43 36.33 43.26 12.00 44.09 38.30 42.89 10.28
Table 2 . Comparison of results of LDCC , MOC , MOCC and ITCC algorithms on Wikipedia Corpus in terms of Precision , Recall and F Measure .
Co Clustering ( LDCC ) models each document as a random mixture of document topics , where each topic is a distribution over some segments of the text . Each of these segments in the document can be modeled as a mixture of word topics where each topic is a distribution over words . Efficient approximate inference techniques based on Markov Chain Monte Carlo method and a Moment Matching algorithm for empirical Bayes parameter estimation has been proposed . We have reported promising results on two text datasets , a subset of Wikipedia articles and NIPS conference papers . We compare the proposed model with the Latent Dirichlet Allocation ( LDA ) model in terms of its ability in document modeling and show improved performance in terms of perplexity . We also compare our algorithm for document clustering with several other clustering and co clustering algorithms and demonstrate improved performance in terms of clustering quality .
Acknowledgements
We are grateful to the following institutions for their financial support : the Natural Sciences and Engineering Research Council of Canada , IT Interactive Services Inc . , and GINIus Inc .
References
[ 1 ] A . Banerjee , C . Krumpelman , S . Basu , R . Mooney , and J . Ghosh . Model based overlapping clustering . In International Conference on Knowledge Discovery and Data Mining ( KDD ) , August 2005 .
[ 2 ] D . Blei and J . Lafferty . Correlated topic models . In Y . Weiss , B . Sch¨olkopf , and J . Platt , editors , Advances in Neural Information Processing Systems 18 , pages 147–154 . MIT Press , Cambridge , MA , 2006 .
[ 3 ] D . M . Blei , A . Y . Ng , and M . I . Jordan . Latent Dirichlet allocation . Journal of Machine Learning Research , 3:993– 1022 , 2003 .
[ 4 ] W . L . Buntine . Operations for learning with graphical models . Journal of Artificial Intelligence Research ( JAIR ) , 2:159–225 , 1994 .
Proceedings of the Sixth International Conference on Data Mining ( ICDM'06)0 7695 2701 9/06 $20.00 © 2006 [ 5 ] H . Chipman and H . Gu .
Interpretable dimension reduction . Journal of Applied Statistics , 32(9):969–987 , November 2005 .
[ 6 ] S . C . Deerwester , S . T . Dumais , T . K . Landauer , G . W . Furnas , and R . A . Harshman . Indexing by latent semantic analysis . Journal of the American Society of Information Science , 41(6):391–407 , 1990 .
[ 7 ] L . Denoyer and P . Gallinari . The Wikipedia XML Corpus .
SIGIR Forum , 2006 . Last accessed , June 2006 .
[ 8 ] I . S . Dhillon , S . Mallela , and D . S . Modha .
Informationtheoretic co clustering . In KDD ’03 : Proceedings of the ninth ACM SIGKDD International Conference on Knowledge Discovery and Data Mining , pages 89–98 , New York , NY , USA , 2003 . ACM Press .
[ 9 ] W . R . Gilks . Markov Chain Monte Carlo in Practice . Chap man & Hall/CRC , December 1995 .
[ 10 ] T . L . Griffiths and M . Steyvers . Finding scientific topics . Proceedings of the National Academy of Sciences , 101 Suppl 1:5228–5235 , April 2004 .
[ 11 ] T . L . Griffiths , M . Steyvers , D . M . Blei , and J . B . Tenenbaum . Integrating topics and syntax . In L . K . Saul , Y . Weiss , and L . Bottou , editors , Advances in Neural Information Processing Systems 17 , pages 537–544 . MIT Press , Cambridge , MA , 2005 .
[ 12 ] T . Hofmann . Probabilistic latent semantic indexing .
In SIGIR ’99 : Proceedings of the 22nd Annual International ACM SIGIR Conference on Research and Development in Information Retrieval , pages 50–57 , New York , NY , USA , 1999 . ACM Press .
[ 13 ] M . Keller and S . Bengio . Theme Topic Mixture Model : A Graphical Model for Document Representation . IDIAPRR 05 , IDIAP , 2004 .
[ 14 ] W . Li and A . Mccallum .
Pachinko allocation : DagIn ICML structured mixture models of topic correlations . ’06 : 23rd International Conference on Machine Learning , Pittsburgh , Pennsylvania , USA , June 2006 .
[ 15 ] S . C . Madeira and A . L . Oliveira . Biclustering algorithms for biological data analysis : A survey . IEEE/ACM Transactions on Computational Biology and Bioinformatics ( TCBB ) , 1(1):24–45 , 2004 .
[ 16 ] T . Minka and J . Laferty . Expectation propagation for the generative aspect model , 2002 .
[ 17 ] T . P . Minka . Estimating a Dirichlet distribution . Technical report , MIT , 2000 .
[ 18 ] M . Newton and A . Raftery . Approximate Bayesian inference with the weighted likelihood bootstrap . Journal of the Royal Statistical Society . Series B , 56:3–48 , 1994 .
[ 19 ] F . Sebastiani . Machine learning in automated text catego rization . ACM Computing Surveys , 34(1):1–47 , 2002 .
[ 20 ] M . Shafiei and E . Milios . Model based overlapping coclustering . In Proceedings of the Fourth Workshop on Text Mining , Sixth SIAM International Conference on Data Mining , Bethesda , Maryland , April 22 2006 .
[ 21 ] M . Steyvers and T . Griffiths . Probabilistic topic models . In T . Landauer , D . Mcnamara , S . Dennis , and W . Kintsch , editors , Latent Semantic Analysis : A Road to Meaning . Laurence Erlbaum , 2005 .
[ 22 ] Y . W . Teh , M . I . Jordan , M . J . Beal , and D . M . Blei . Hierarchical Dirichlet processes . Journal of the American Statistical Association , 2006 .
A Gibbs Sampling Derivations
Beginning with the joint distribution p(w , z , y ) , we can take advantage of conjugate priors to simplify the formulae . All symbols are defined in Section 3 and Table 1 . p(z|θ)p(θ|α , y)dθ p(y|φ)p(φ|δ)dφ
' p(βl|η)dβ p(zdsn|θds)p(θds|α , yds ) dθ
=
=
=
= l=1 s=1 s=1 s=1 d=1 d=1 d=1 n=1 n=1
' p(yds|φd)p(φd|δ ) Lfi
' p(w , z , y ) = p(w|z , η)p(z|α , y)p(y|δ ) p(w|z , β)p(β|η)dβ ' Mfi Nsdfi Sdfi Lfi p(wzdsn|βzdsn ) ff ' Mfi Nsdfi Sdfi ff ' Mfi Sdfi ' Lfi Vfi ' Mfi Sdfi ' Mfi Kfi ff V .V ff Mfi Sdfi ff K .K ff V .V ff Mfi Sdfi ff K Mfi .K L Lfi .V V
L Mfi .L M Mfi .K K
αydsl ) l=1 Γ(αydsl )
( ds ) n θ l dsl
Lfi
φPdk dk
βnlv lv
Γ(ηv )
δk )
ηv ) k=1 k=1 k=1 k=1 k=1 v=1 v=1 v=1 v=1 v=1 v=1 v=1 d=1 d=1 d=1 d=1 d=1 d=1 s=1 s=1 s=1 l=1 l=1 l=1 l=1 l=1
Γ(
Γ(
Γ(
Γ(
Γ(
Γ(
Γ(ηv ) dφ
ηv )
Vfi L .L Kfi v=1 l=1
Γ(
δk )
βηv−1 lv
αydsl ) l=1 Γ(αydsl ) dβ
Lfi l=1
φδk−1 dk dφ
αyds l−1
θ dsl dθ
Γ(δk ) k=1
Γ(nlv + ηv ) nlv + ηv )
.L L l=1
Γ(
Sdfi s=1
Γ(δk + Pdk )
Γ(αydsl + n(ds ) ) αydsl + n(ds ) l
) l l=1
Γ(δk ) k=1
Γ( d=1
δk + Pdk ) k=1
Using the chain rule , we have p(zdsn|z−dsn , y , w ) = p(zdsn , wdsn|z−dsn , y , w−dsn ) p(wdsn|z−dsn , y , w−dsn )
∝
= ( αydszdsn + n(ds ) zdsn p(z,y,w ) p(z−dsn,y,w−dsn )
V
− 1 ) × nzdsn wdsn
+ηwdsn
−1 nzdsnv +ηv−1 v=1
Using chain rule , again we have p(yds|z , y−ds , w ) = p(zds , yds , wds|z−ds , y−ds , w−ds ) p(wds , zds|z−ds , y−ds , w−ds )
∝
= ( δyds + Pdyds
=
( δyds + Pdyds
− 1 ) × Γ( p(z−ds,y−ds,w−ds ) p(z,y,w )
L .L .L .n .n(ds)−1
αyds l ) Γ(αydsl ) l=1 l=1 l=1 l=1
.L L L
( ds ) l
−1
Γ( j=0
− 1 ) ×
( ds ) Γ(αyds l+n l ( ds ) αyds l+n l
)
) l=1
( αyds l+j ) j=0
(
αyds l+j ) l=1
Proceedings of the Sixth International Conference on Data Mining ( ICDM'06)0 7695 2701 9/06 $20.00 © 2006
