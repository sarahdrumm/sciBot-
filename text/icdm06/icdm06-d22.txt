Biclustering Protein Complex Interactions with a Biclique Finding Algorithm
Chris Ding
Lawrence Berkeley Nat’l Lab
Berkeley , CA94720 chqding@lbl.gov
Tao Li
Florida International University
Miami , FL 33199 taoli@csfiuedu
Ya Zhang
University of Kansas Lawrence , KS 66045 yazhang@ittckuedu Stephen R . Holbrook
Lawrence Berkeley Nat’l Lab
Berkeley , CA 94720 SRHolbrook@lbl.gov
Abstract
Biclustering has many applications in text mining , web clickstream mining , and bioinformatics . When data entries are binary , the tightest biclusters become bicliques . We propose a flexible and highly efficient algorithm to compute bicliques . We first generalize the Motzkin Straus formalism for computing the maximal clique from L1 constraint to Lp constraint , which enables us to provide a generalized Motzkin Straus formalism for computing maximal edge bicliques . By adjusting parameters , the algorithm can favor biclusters with more rows less columns , or vice verse , thus increasing the flexibility of the targeted biclusters . We then propose an algorithm to solve the generalized MotzkinStraus optimization problem . The algorithm is provably convergent and has a computational complexity of O(|E| ) where |E| is the number of edges . Using this algorithm , we bicluster the yeast protein complex interaction network . We find that biclustering protein complexes at the protein level does not clearly reflect the functional linkage among protein complexes in many cases , while biclustering at protein domain level can reveal many underlying linkages . We show several new biologically significant results .
1 Introduction
Biclustering refers to finding sub blocks in a rectangular data matrix , such as a word document matrix , a web clickstream matrix ( users vs websites ) , DNA microarray expression profiles , or the protein protein complex interaction network . Biclustering can be viewed as simultaneous data clustering and feature selection , ie , detection of significant clusters and the features that are uniquely associated with them . This is because not all features are relevant to certain clusters , for example , only a subset of websites are responsible for a subset of web users in the clickstream problem . Thus one needs to combine feature selection and clustering together . The definition of biclusters varies significantly[19 ] , but the most intuitive notion of biclusters are dense regions in the rectangle data matrix .
In many applications , such as web clickstream , phylogenetic tree dataset , frequent itemset finding , data entries are binary . In these cases , biclustering becomes biclique finding , because the simplest and most dense sub blocks are bicliques . Li et al [ 18 ] show there is a correspondence between biclique and frequent closed itemset .
At present , the most fruitful application of biclustering is in bioinformatics . In the following , we will focus on the protein interaction network problem as the target application . The algorithms developed for cliques and bicliques are completely general and can be applied to all bipartite graphs .
Maximal edge Biclique
A bipartite graph has two types of nodes , a set R of rnodes and a set C of c nodes . In the adjacency matrix of the bipartite graph , r nodes are represented by the rows and cnodes are represented by the columns . A biclique is a subset ( R1 , C1 ) where R1 ⊂ R and C1 ⊂ C such that every r node in R1 is connected to every c node in C1 . Let B be the adjacency matrix of the bipartite graph . B is a rectangle matrix of |R| rows ( r nodes ) and |C| columns ( c nodes ) . A biclique Z1 = ( R1 , C1 ) implies that the matrix sub block BR1,C1 is a block of all 1 ’s . A biclique Z1 is a maximal biclique if there exists no larger bicliques of which Z1 is a subset . A biclique ( R1 , C1 ) has |R1| + |C1| nodes ( the sum of the number of rows and columns of the subblock ) and |R1| ∗ |C1| edges ( the area of the subblock ) .
Authorized licensed use limited to : FLORIDA INTERNATIONAL UNIVERSITY . Downloaded on July 29,2010 at 01:10:48 UTC from IEEE Xplore . Restrictions apply .
Proceedings of the Sixth International Conference on Data Mining ( ICDM'06)0 7695 2701 9/06 $20.00 © 2006 Thus , there are two types of maximum bicliques : ( a ) maximum edge bicliques where the number of edges is maximum/complete , and ( b ) maximum node bicliques where the number of node is maximum/complete . From the adjacency matrix point of view , the maximum node biclique selects the sub block with the largest perimeter , while the maximum edge biclique selects the sub block with the largest area ( see Figure 2 for illustration ) . From the application point of view , the maximum edge bicliques are the interesting subgraphs that we wish to compute .
Biological meaning of Bicliques/Biclusters
Biclustering is used to find a subblock in the 2D gene expression data ( a rectangle matrix ) , where rows represent genes and columns represent either tissue samples or experimental conditions . The rationale is that a protein is only expressed in ( or changes expression in ) a set of tissues ( phenotypes ) . Therefore , when clustering tissues , there is no need to include all genes . Another motivation is that a protein may participate in several functions , and thus a mutually exclusive partitioning of proteins ( as occurring in standard clustering ) is not appropriate .
Clique and Biclique Finding
It is known that the maximum clique finding and the maximum edge biclique finding are NP hard[10 ] . It is also known that the maximum clique problem is hard to approximate : there exists an > 0 such that no polynomial time algorithm can approximate the size within a factor of n1− [ 9 , 4 , 14 , 5] ) . Clique and biclique detecting algorithms typically enumerate all clique/bicliques[6 , 8 , 20 , 1 , 18 ] making use of the fact that a subset of a clique/biclique is still a clique/biclique . These algorithms typically have high order complexity .
Outline of the paper
In this paper , we use the algorithmic approach of the Motzkin Straus theorem that relates clique finding to the optimization of a quadratic function with L1 constraints ( see §5 ) . Our main contributions are described in §5 §6 . We first generalize the Motzkin Straus formalism to use Lp constraints ( see §5 ) . We then generalize the Motzkin Straus formalism with Lp constraints to bipartite graphs and derive an iterative algorithm to compute the solution ( see §6 ) . We prove the correctness and convergence of the algorithm . For presentation purpose , we first describe the new biclique finding algorithm in §2 . We give an illustrative example to show how the algorithm works in §3 and show that the algorithm can effectively find large bicliques in random graphs in §4 . In §8 , we apply the biclique algorithm to protein complex interactions and discuss the data , procedure , and results in detail . Our results in protein complex interaction biclustering show that biclustering protein complexes at the protein domain level is able to reveal many functional linkages among protein complexes which are not observed when biclustering the protein complex data at protein level .
2 Biclique finding algorithm
In this section we outline the main biclique finding algorithm . In §3 §4 , we give an illustrative example and show the algorithm can find large bicliques in random graphs . Detailed analysis of the algorithm is explained in §5 §6 . Let B be the adjacency matrix of the bipartite graph ( the input data matrix ) . B is a rectangle matrix of n = |R| rows and m = |C| columns . Define the n vector x on the r nodes and the m vector x on the c nodes . Computing one biclique . Given initial ( x(0 ) , y(0) ) . [ eg , x(0 ) = ( 1 ··· 1)T and y(0 ) = ( 1 ··· 1)T . ] Set α = β = 11 The iterative algorithm updates x , y using : x(t ) i y(t ) j x(t+1 ) i
= y(t+1 ) j
=
.1/α .1/β
( By(t))i
[ x(t)]TBy(t ) ( BT x(t))j [ x(t)]TBy(t )
,
.
( 1 )
( 2 )
1,··· , x∗ j > 0} . Then ( R , C ) is a maximal biclique .
1,··· , y∗ Let x∗ = ( x∗ n)T and y∗ = ( y∗ m)T be the converged solution . Let R be the subset correspondi > 0} . Let ing to nonzero elements in x : R = {i | x∗ C be the subset corresponding to nonzero elements in y : C = {j | y∗ We can set α fi= β to favor different shapes of the computed maximal biclique . For example , if we set α > β , this favors maximal bicliques which has larger row sizes . In general , setting α , β = 1.05 ∼ 1.1 gives very tight cliques ( perfect cliques ) . Setting α , β = 1.2 or larger gives loose cliques , ie , cliques with some edges missing . This could be useful for some applications .
The algorithm is extremely simple to implement . The most time consuming part is matrix vector multiplication which fit cache based microprocessor architecture and thus runs very efficiently ( in comparison to many graph algorithms which constantly encounter pointer chasing and runs much less efficently due to cache miss ) . Computing multiple bicliques .
Computing different bicliques are achieved by setting ( x(0 ) , y(0) ) . We have two apdifferent initial starts : proaches . ( 1 ) random starts . Setting ( x(0 ) , y(0 ) ) to random
Authorized licensed use limited to : FLORIDA INTERNATIONAL UNIVERSITY . Downloaded on July 29,2010 at 01:10:48 UTC from IEEE Xplore . Restrictions apply .
Proceedings of the Sixth International Conference on Data Mining ( ICDM'06)0 7695 2701 9/06 $20.00 © 2006 0
5
10
15
20
25
30
0
5
10
15
20
25
30
35
40
45
50 nz = 490
Figure 1 . The adjacency matrix B for the bipartite graph . Each solid point at ( i , j ) represent an edge exists between r node i and column node j . The maximum biclique is at the lower right corner .
Figure 2 . Enlarged lower right corner of the adjacency matrix in Fig 1 . There are 6 maximal bicliques overlapping in this region as indicated by different rectangle boxes . The algorithm correctly picks up the the maximumedge biclique A . uniform distributions . ( 2 ) Masking . After a clique ( R , C ) is detected , we set the corresponding entries of B to a small value .
3 An Illustrative Example
In all experiments/applications in this paper , we set β =
α for simplicity .
The proposed algorithm is easily implemented . Here we report experiments on random graphs and bipartite graphs up to order of 1000 . We first uses a bipartite graph of order 30x50 to illustrate some of concepts and features of the solution . In Figure 1 , we show the adjacency matrix of the bipartite graph . The nonzero elements in B represent edges .
In Figure 2 , we show the maximum edge biclique which is at the lower right corner : RA = ( 28 , 29 , 30 ) , CA = ( 43,··· , 50 ) and |R||C| = 24 . The algorithm correctly picks up this maximum edge biclique . This is not a trivial task ( even in this simple example ) , because there are 6 maximal bicliques overlapping in this region . We can easily verify that all other 5 maximal bicliques have |R||C| < 24 . We note in this region , the maximum node biclique is clique B : RB = 30 , CB = ( 39,··· , 50 ) . Thus |RB| + |CB| = 13 . In comparison , the maximum edge biclique A has |RA| +|CA| = 11 . Typically , maximum node bicliques are long and narrow blocks , and thus not interesting from genomics point of view . Fortunately , our algorithm detects the more interesting maximum edge bicliques .
In Figure 3 , we show the the solution vector x∗ at β = 11 The curve arise sharply at R1 = ( 28 , 29 , 30 ) , indicating a maximal biclique there . The solution vector y∗ at different β = 1.1 is shown in Figure 4 . Clearly the curve arise sharply at C1 = ( 39,··· , 50 ) , indicating a maximal biclique . In Figure 4 we also show how the solution vector y∗ varies at different β = 1.1 , 1.2 , 1.3 , 2 . Starting at β = 2 , y∗ varies with no significant peak region . But at β = 1.3 , 1.2 , the solution becomes sharper and sharper , as expected . At β = 1.1 the solution is sharp enough to define the clique . At β = 1.05 the solution converges to the step function , the ideal solution . These can be seen from the enlarged detailed part at bottom panel .
Solution vector x*
β=1.1
0.4
0.35
0.3
0.25
0.2
0.15
0.1
0.05
0
0
5
10
15
20
25
30
Figure 3 . Solution vector x∗ at β = 11
It is important to note that the maximum biclique ( R1 , C1 ) overlaps with maximal biclique ( R2 , C2 ) . In Figures 1 and 2 , the solution vectors converges to ( R1 , C1 ) sharply , indicating the capability of the algorithm to iden
Authorized licensed use limited to : FLORIDA INTERNATIONAL UNIVERSITY . Downloaded on July 29,2010 at 01:10:48 UTC from IEEE Xplore . Restrictions apply .
Proceedings of the Sixth International Conference on Data Mining ( ICDM'06)0 7695 2701 9/06 $20.00 © 2006 tify the maximal cliques in overlapped situations .
5 Motzkin Straus formalism for clique find ing
β=1.3
10
15
20
25
30
35
40
β=1.2 β=1.1 45
50
β=1.2
β=1.1
β=1.05
0.25
0.2
0.15
0.1
0.05
0
0
β=2
5 0.18
0.16
0.14
0.12
0.1
0.08
0.06
0.04
0.02
0
35
40
45
50
Figure 4 . Upper : Solution vector y∗ at β = 2 , 1.3 , 1.2 , 11 Lower : Details of solution vector y∗ at β = 1.2 , 1.1 , 105
4 Detect Embedded Cliques
Next , we test the ability of the algorithm to detect maximum bicliques . We embed a known biclique into the standard random graphs ( two nodes are joined with an edge with fixed probability p = 03 ) We vary the size of the embedded cliques , while fixing the rectangle matrix to be 500x1000 . We set α = β = 105 We tested on 20 bipartite graphs with randomly generated adjacency matrices . The embedded maximum bicliques are readily detected in all cases .
We approach the problem of detecting cliques through a theorem due to Motzkin and Straus [ 21 ] which relates maximal cliques to the optimization of a quadratic function . The use of the Motzkin and Straus theorem has been in a number of studies [ 22 , 12 ] .
Let A be the adjacency matrix of an unweighted undirected graph . Computing the maximal cliques can be reformulated as the solution to the following optimization problem : max x xTAx st xi = 1 , xi ≥ 0 ,
( 3 ) nfi i=1 where Aii = 0 . Theorem 1 [ Motzkin and Straus ] . Let G be an unweighted and x∗ the optimal solution for the problem of graph . Eq ( 3 ) . Let C = {i | x∗ i > 0} be the subset corresponding to nonzero elements . If nonzero elements have the same values , x∗ is called a characteristic vector of a subset C ) , C is a maximal clique in G . i = 1/|C| for ∀i ∈ C ( in this case x∗
Note that the feasibility constraint is the L1 norm . We generalize the Motzkin Straus formulation in two directions . First we generalize the the feasibility constraint to use Lp norm . For a vector x , it is governed by nfi
||x||p p =
|xi|p . i=1
As long as p ( 1 , the optimal solution vector is sparse , ie , many elements in x∗ are zero . Using L1 constraint to enforce sparsity is well known in statistics as used in LASSO [ 23 , 15 ] .
Second , we generalize the Motzkin Straus formulation to bipartite graph . This enables us to use it to compute bicliques .
6 Generalized Motzkin Straus Formalism for bicliques
Let G(B ) be a bipartite graph with a set R of r nodes and a set C of c nodes . Let B be the adjacency matrix of G(B ) . B is a rectangle matrix of n = |R| rows ( r nodes ) and m = |C| columns ( c nodes ) .
A maximal biclique is computed via the solution to the following optimization problem : x∈F α max x , y∈F β y xTBy where the feasible regions of x is defined by x = {x ∈ Rn| nfi
F α i=1 i = 1 , xi ≥ 0} . xα
( 4 )
( 5 )
Authorized licensed use limited to : FLORIDA INTERNATIONAL UNIVERSITY . Downloaded on July 29,2010 at 01:10:48 UTC from IEEE Xplore . Restrictions apply .
Proceedings of the Sixth International Conference on Data Mining ( ICDM'06)0 7695 2701 9/06 $20.00 © 2006 where α = 1 + , 0 < ) 1 , and the feasible regions of y is defined by y = {y ∈ Rm| mfi
F β i = 1 , yj ≥ 0} . yβ
( 6 ) j=1
. i > 0} j >
Let ( x∗ , y∗ ) be an optimal solution , R1 = {i | x∗
, and C1 = {j | y∗ be the subset of nonzero elements in x∗ 0} be the subset of nonzero elements in y∗ Theorem 2 [ Generalized Motzkin Straus Theorem for bipartite graph ] . Let α = 1 + 1 , 0 < 1 ) 1 . and β = 1 + 2 , 0 < 2 ) 1 . For an optimal solution ( x∗ , y∗ ) , if nonzero elements of x∗ have same values , and if nonzero elements of y∗ have same values , then ( R1 , C1 ) is a maximum edge biclique in B . The objective function has the optimal value J = |R1|1−1/α|C1|1−1/β . Proof . Assume subblock BR1,C1 is a maximal biclique . x∗ must have the form
∗ x
= ( 1/|R1|1/α)(1 ··· 1 , 0 ··· 0)T , if we index the r nodes of R1 first . y∗ must have the form
∗ y
= ( 1/|C1|1/β)(1 ··· 1 , 0 ··· 0)T , if we index the c nodes of C1 first . The objective becomes
∗ J = ( x
)T By
∗
= |R1|1−1/α|C1|1−1/β .
Because 1 − 1/α > 0 and 1 − 1/β > 0 , |C1| and |R1| are simultaneously maximized . Remark . We can adjust α , β to favor different shapes of the computed maximal biclique . For example , if α > β , then 1 − 1/α > 1 − 1/β . This favors maximal bicliques which has larger row sizes1 . For example , if there exists two maximal cliques A , B in the graph with same number of edges , ie , |RA||CA| = |RB||CB| . But if A has large row size : |RA| > |RB| , then |RA|1−1/α|CA|1−1/β > |RB|1−1/α|CB|1−1/β . This implies A will be computed first .
Algorithm for computing biclique
We provide an iterative algorithm to compute the maximum biclique . We prove its feasibility , correctness , and convergence . Given initial ( x(0 ) , y(0) ) , the iterative algorithm updates x , y using : ffα ffβ
' x(t+1 ) ' i y(t+1 ) j
= x(t ) i
= y(t ) j
( By(t))i
[ x(t)]TBy(t ) ( BT x(t))j [ x(t)]TBy(t )
,
,
( 7 )
( 8 )
1In DNA gene expressions , this means favoring biclusters with more genes instead of tissue samples . We may also set α < β to favor biclusters with more tissue samples than genes .
This is the same update rules of Eqs(1,2 )
Feasibility
Clearly , ( x(t ) , y(t ) ) remain in feasible region for all t >
0 , becausefi
[ x(t+1 ) i
]α = i and fi i
Correctness
[ y(t+1 ) i
]β = fi i fi i x(t ) i ( By(t))i [ x(t)]TBy(t ) = 1 . y(t ) i BT x(t))i [ x(t)]TBy(t ) = 1 . fi fi
We solve the constraint optimization problem . The La grangian function incorporating constraint is
L2 = xTBy − λ( i − 1 ) − ζ( xα j − 1 ) yβ
( 9 ) i j where the Lagrangian multiplier λ is for enforcing x in F β x , and the Lagrangian multiplier ζ is for enforcing y in F β y . The nonnegativity of x is enforced by the complementarity condition , ∂L xi = 0 , which leads to
∂xi i ]α−1 x∗ i = 0 .
)i − λα[x∗ Summing over index i , we obtain
( By
( 10 )
∗
∗ λ = [ x
]TBy
∗/α .
( 11 )
The nonnegativity of y is enforced by the complementarity condition , ∂L
∂yj ∗ ( BT x yj = 0 , which leads to j ]β−1 y∗ j = 0 .
)i − ζβ[y∗ Summing over index j , we obtain
( 12 )
∗ ζ = [ x
]TBy
∗/β .
( 13 )
We can easily verify that ( a ) the converged solution for x from Eq ( 1 ) satisfies the KKT condition Eq ( 10 ) , using Eq ( 11 ) . ( b ) the converged solution for y from Eq ( 2 ) satisfies the KKT condition Eq ( 12 ) . These ensure the correctness of the algorithm .
Convergence Theorem 3 . Under the update rule for x , y , the Lagrangian function L2 of Eq ( 9 ) is monotonically increasing ( nondecreasing ) , L2(x(0 ) , y(0 ) ) ≤ L2(x(1 ) , y(1 ) ) ≤ L2(x(2 ) , y(2 ) ) ≤ ··· . Since J is bounded from above , the convergence of the iterative algorithm is thus established .
Authorized licensed use limited to : FLORIDA INTERNATIONAL UNIVERSITY . Downloaded on July 29,2010 at 01:10:48 UTC from IEEE Xplore . Restrictions apply .
Proceedings of the Sixth International Conference on Data Mining ( ICDM'06)0 7695 2701 9/06 $20.00 © 2006 Proof . We use the auxiliary function approach . A function G(x , xfi ) is an auxiliary function of L(x ) if fi G(x , x
) ≤ L(x ) ; G(x , x ) = L(x ) .
( 14 )
Now , we define
G(x , x(t) ) . x(t+1 ) = arg max
( 15 ) By construction , we have L(x(t ) ) = G(x(t ) , x(t ) ) ≤ G(x(t+1 ) , x(t ) ) ≤ L(x(t+1) ) . This proves the monotonicity of L(x(t) ) . under the iterative updating rule of Eq ( 15 ) . x
We first note that xTBy = fi xiBij yj ≥ ( ij fi ) ij xfi iSijyfi j(1 + log xiyj xfi iyfi j
)
≥
1 + log xiyj xiy because xiyj j > 0 using xiythe inequality of z ≥ 1 + log(z ) for any positive z . Therefore ,
, for xi , yj , xfi i , yfi j j fi
) = fi , y G(x , y , x fi xfi iSij yfi fi fi i j ij j(1 + log xiyj xfi iyfi
)− λ( i − 1)− ζ( xα j − 1 ) yβ is a auxiliary function of L2(x , y ) , because G(·,· ) satisfies the condition Eq ( 14 ) : The first term in L2 is always greater than or equal to the first term in G . The equality holds when x = xfi , y = yfi . The second and third terms are identical in G and L2 . j
The maximum for Eq ( 15 ) is obtained by setting the gra dient to zero ,
∂G(x , xfi , y , yfi )
∂xi xfi i(Byfi)i xi
=
− λαxα−1 i
= 0 .
( 16 ) and
∂G(x , xfi , y , yfi )
∂yi yfi i(BT xfi)i yi
=
− ζβyβ−1 i
= 0 .
( 17 )
These two equations can be re written as ( B[yfi](t))i
[ xi]β = xfi i
,
λα
[ yi]β = yfi i
( BT [ xfi](t))i
ζβ
, the variable relations for x are According to Eq ( 15 ) , x(t ) ← xfi and x(t+1 ) ← x . Substituting the Lagrangian multiplier λ value of Eq ( 11 ) , we recover the update rule Eq ( 1 ) . Similarly , the variable relations for y are y(t ) ← yfi and y(t+1 ) ← y . Substituting the Lagrangian multiplier ζ value of Eq ( 13 ) , we recover the update rule Eq ( 2 ) .
To ensure the solution gives a maxima , we show that the second order derivatives ( Hessian matrix ) of G are negative definite . We have ∂2G(x , xfi , y , yfi )
+ λα(α − 1)xα−2 i
]δij .
= −[ xfi i(Byfi)i x2 i
∂xi∂xj
∂2G(x , xfi , y , yfi )
∂yi∂yj
= −[ yfi i(BT xfi)i y2 i
∂2G(x , xfi , y , yfi )
∂xi∂yj
+ ζβ(β − 1)xβ−2 i
]δij .
= 0 .
Because α ≥ 1 and β ≥ 1 , this Hessian matrix is a diagonal matrix with negative quantities on the diagonals . Therefore G(x , xfi , y , yfi ) is a concave function in x , y and has a unique global maximum . This complete the proof of Theorem 3 . Case β = 2 . Theorem 4 . For α = β = 2 , the optimal solution ( x∗ , y∗ ) are given by the first singular vector pair of B . Let the singular value decomposition B = k . Then x∗ = u1 , y∗ = v1 . Proof . Restricting to α = β = 2 . Eqs.(11,13 ) , λ = ζ . Eqs.(10,12 ) , become ∗ i ( BT x
)i = 2ζ[y∗ i ]2
In this case , from
)i = 2λ[x∗ k=1 σkukvT i ]2 , y∗ x∗ i ( By
∗
Clearly , setting x∗ = u1 , y∗ = v1 and λ = ζ = σ1/2 satisfy these KKT conditions . Furthermore , according to Perron Theorem , the elements of u1 , v1 must be nonnegative since B is nonnegative .
7 Generalized cliques on weighted graphs
Cliques are only defined for unweighted graphs . For a weighted graph with edge weight W , we may threshold the weights with a threshold h : setting Aij = 1 if Wij ≥ h ; Aij = 0 otherwise . We run the algorithm to compute cliques on A(h ) . We may compute cliques for several threshold h ’s : h1 > h2 > ··· > hk . The thresholded graphs A(h ) clearly satisfy A(h1 ) ⊂ A(h2 ) ⊂ ··· ⊂ A(hk ) . Let C(h ) represents the set of cliques on graph A(h ) . Then we have C(h1 ) ⊂ C(h2 ) ⊂ ··· ⊂ C(hk ) .
A natural question then arise : which h we should set ? Fortunately , using Motzkin Straus Formalism , the edge weights in A are not required to be either 0 or 1 . Thus we can directly set A = W and run the algorithm ; and the nonzero entries correspond to the generalized cliques . This provides a definition of the generalized or pseudo cliques on weighted graphs . We can similarly define generalized bicliques on weighted bipartite graphs .
Authorized licensed use limited to : FLORIDA INTERNATIONAL UNIVERSITY . Downloaded on July 29,2010 at 01:10:48 UTC from IEEE Xplore . Restrictions apply .
Proceedings of the Sixth International Conference on Data Mining ( ICDM'06)0 7695 2701 9/06 $20.00 © 2006 8 Biclustering the Protein Complex Protein
Domain Network
Proteins interact with other proteins in many cellular processes , including metabolism , endocrine and exocrine , signaling , synthesis and transport . A protein complex is formed by two or more proteins that physically interact with each other , and is often called molecular machines of life . A systematic identification , characterization and understanding of these molecular machines will provide an essential knowledge base , and link proteome dynamics and architecture to cellular function and phenotype .
A number of experimental approaches provide genomic scale protein interaction data . The two hybrid genetic screen [ 17 , 24 ] yields binary interaction data . High throughput mass spectrometry methods [ 11 , 16 ] combine tagged proteins and protein complex purification schemes with mass spectrometric measurements to yield physiologically relevant data on intact multi protein complexes .
However , these high throughput experiments are often associated with large false positive rates ( 30 50% ) . Protein interaction data obtained in two independent two hybrid screening experiments [ 17 ] and [ 24 ] overlap by less than 4 % . The overlap between two mass spectrometry methods [ 11 , 16 ] is also around 5 % . Therefore , using computational methods to predict protein interaction modules from these data is an important way to extract additional information . The nature of protein complexes can be easily expressed as a bipartite graph , where p nodes refer to protein complexes , and r nodes refer to proteins . We are interested in discovering densely connected subgraphs in the bipartite graph which are likely candidates for protein interaction modules . In graphs , the most densely connected objects are cliques . Thus we wish to detect bicliques in the bipartite graph .
Previous analysis [ 16 , 2 , 7 ] , of protein complex data were largely performed on the protein level , ie , discovering protein functional modules etc . on the network of protein complex protein . However , comparison of complexes at protein level is not able to reflect the function linkage among protein complexes in many cases . For example , the protein composition of the cytoplasmic ribosomal large subunit and the mitochondrial ribosomal large subunit both function for protein synthesis . When comparing the protein composition of the two complexes , no single protein is found to present in both complexes . When we compare the two protein complex at domains level , 14 domains are found to share between the two complexes Because different proteins with similar activities are likely to contain similar/same domains , there are multiple instances of the domains dispersed in the data sets , while there might be only a few copies of each protein . Analyzing complexes at the domain level has the advantages of provid ing an enriched functional information[26 , 25 ] . This also eliminates the need to model internal complex protein and protein domain connectivity . The domain complex association demonstrates connections between the biological processes and what the domains facilitate .
Complex
#Protein
#Domain
Cytoplasmic RLS Mitochondrial RLS
Shared unit
81 44 0
50 29 14
Table 1 . Protein domain composition of cytoplasmic and mitochondrial ribosomal large subunits .
8.1 Bipartite Graph Model
The relationship between protein complexes and domains is naturally modeled with a bipartite graph . A bipartite graph has two types of nodes , and edges connecting nodes of different types . Let G(C , D , E ) be the bipartite graph representing protein complexes and their constitutional proteins , with C type nodes representing protein complex ci and D type nodes representing protein domain dk . The adjacency matrix E is ff
Eik =
1 if protein complex ck contain domain di 0 otherwise
( 18 ) This simple graph model assign binary weights to the edges , ie 1 if a domain is present in the protein , 0 otherwise .
8.2 Data sources
Protein complex data were obtained from MIPS Comprehensive Yeast Genome Database [ 13 ] . The main part of the complex data consists of manually annotated protein complexes derived from literatures . But it also includes several hundred of complexes identified by high throughput experiments . The latter set of complex data are biased by bait selection and purification method . These complexes may only represent a population of different biological complexes with which the bait protein is associated . Therefore , for this task , we only use the protein complexes identified from literature . As a result , 267 complexes were used and 1237 unique proteins are contained in the set of complexes . The domain definitions of the yeast proteins are according to Pfam [ 3 ] , which contains hidden Markov model based profiles ( HMM profiles ) of many common protein domains based on multiple sequence alignments . The Pfam database contains two parts : one is the curated part called Pfam A and the other is automatically generated supplement called
Authorized licensed use limited to : FLORIDA INTERNATIONAL UNIVERSITY . Downloaded on July 29,2010 at 01:10:48 UTC from IEEE Xplore . Restrictions apply .
Proceedings of the Sixth International Conference on Data Mining ( ICDM'06)0 7695 2701 9/06 $20.00 © 2006 Pfam B which represents small families taken from the PRODOM database that do not overlap with Pfam A . Only Pfam A families are used here . In total , 709 Pfam domains are defined on the set of complexes . Proteins without defined domains are disregarded .
8.3 Result
We apply the biclique finding algorithm to the adjacent matrix E . Significant bicliques obtained are listed in Table 3 . Complete results are available upon request .
The bicliques in the domain complexes bipartite graph define modules in protein complexes , as domains in a biclique are highly affiliated with each other .
To see the importance of biclustering protein complex interactions at domain level , we define a score ρ to measure the ratio of the shared domains that are attributed to shared proteins .
#D − #Dp
,
ρ =
#D where #D is the number of domains in the biclique pattern , #Dp is the number of domains resulted from shared proteins among the set of complexes in the biclique pattern . The ratio ρ ranges from 0 to 1 , with ρ=1 indicating no protein is shared among the set of complexes but they do share the set domains . About half of the bicliques discovered have ρ=1 , suggesting/confirming the importance of analyzing the protein complexes at the domain level .
8.4 Biological Examples
The bicliques represent groups of functionally related domains as well as functionally related protein complexes . For example , RNA polymerase I , RNA polymerase II , and RNA polymerase III are all DNA dependent RNA polymerases responsible for the polymerization of ribonucleotides into a sequence complementary to the template DNA . These three forms of RNA polymerases transcribe different sets of genes and synthesize different RNAs . RNA polymerase I is located in the nucleoli and it synthesizes precursors of most ribosomal RNAs . RNA polymerase II occurs in the nucleoplasm and it synthesizes mRNA precursors . RNA polymerase III also occurs in the nucleoplasm and it synthesizes the precursors of 5S ribosomal RNA , the tRNAs , and a variety of other small nuclear and cytosolic RNAs . One discovered biclique contains the three RNA polymerases and a set of 19 domains , all of which are annotated as DNA directed RNA polymerase activity ( GO:0003899 ) by gene ontology . These 19 domains consist of a core set of domains necessary for RNA synthesis . Another instance is the biclique of two types of ribosomal large subunit and 14 domains . As discussed before , the two types of ribosomal large subunits share no proteins .
The domain level analysis allows us to functionally link the cytoplasmic ribosomal large subunit and mitochondrial ribosomal large subunit based on their 14 shared domains . The set of 14 shared domains are mostly annotated by gene ontology for protein biosynthesis ( GO:0006412 ) . Similarly , we found 11 shared domains ( annotated as protein biosynthesis ) in the cytoplasmic ribosomal small subunit and mitochondrial ribosomal small subunit . This allows us to functionally link the two types of ribosomal small subunit although they share no common proteins .
The replication complexes , DNA polymerase alpha ( I ) primase complex , DNA polymerase epsilon ( II ) , and DNA polymerase delta ( III ) are linked in a biclique together with their shared domains DNA pol E B , DNA pol B exo , and DNA pol B . These complexes all involves DNA synthesis and these three domains all have DNA directed DNA polymerase activity ( GO:0003887 ) .
The above examples show that the biclique finding method is able to simultaneously group domains as well as protein complexes . This grouping clearly indicates functional linkage among the set of protein complexes and domains .
9 Summary
In this paper , we propose a new algorithm for computing bicliques in bipartite graphs . The algorithm is based on generalized Motzkin Straus formalism for cliques . It has the flexibility to favor different shapes of targeted bicliques . The algorithm can be easily implemented ; it can effectively and efficiently compute maximal bicliques .
We also show that biclique finding is similar to biclustering of a bipartite graph . We provide a detailed case study on finding bicliques on the protein complex interactions . We show that biclustering at the protein domain level provides many more functional linkages than biclustering at the protein level .
Acknowledgement
This work is supported in part by US Department of Energy , Office of Science , through a MAGGIE project in the GTL Program , under contract DE AC02 05CH11231 .
References
[ 1 ] G . Alexe , S . Alexe , Y . Crama , S . Foldes , P . Hammer , and B . Simeone . Consensus algorithms for the generation of all maximal bicliques . Discrete Applied Mathematics , 145:11– 21 , 2004 .
[ 2 ] G . D . Bader and C . W . V . Hogue . Analyzing yeast proteinprotein interaction data obtained from different sources . Nature Biotechnology , 20:991–997 , 2002 .
Authorized licensed use limited to : FLORIDA INTERNATIONAL UNIVERSITY . Downloaded on July 29,2010 at 01:10:48 UTC from IEEE Xplore . Restrictions apply .
Proceedings of the Sixth International Conference on Data Mining ( ICDM'06)0 7695 2701 9/06 $20.00 © 2006 [ 21 ] T . Motzkin and E . Straus . Maxima for graphs and a new proof of a theorem of turan . Canad . J . Math . , 17:533–540 , 1965 .
[ 22 ] M . Pelillo . Relaxation labeling networks for the maximum clique problem . Journal of Artificial Neural Networks , 2(4):313–328 , 1995 .
[ 23 ] R . Tibshirani . Regression shrinkage and selection via the
LASSO . J . Royal . Statist . Soc B . , 58:267–288 , 1996 .
[ 24 ] P . Uetz . , L . Cagney , G . Mansfield , et al . A comprehensive analysis of protein protein interactions in saccharomyces cerevisiae . Nature , 403(6770):623–627 , 2000 .
[ 25 ] Y . Zhang , J M Chandonia , C . Ding , and S . Holbrook . Comparative mapping of sequence based and structure based protein . BMC Bioinformatics , page 77 , 2005 .
[ 26 ] Y . Zhang , H . Zha , C . Chu , and X . Ji . Protein interaction inference as a max sat problem . Proc . of IEEE CVPR 2005 Workshop on Computer Vision Methods for Bioinformatics , 2005 .
[ 3 ] A . Bateman , L . Coin , R . Durbin , et al . The Pfam protein families database . Nucleic Acids Res . ( Database Issue ) , 33:D138–D141 , 2004 .
[ 4 ] M . Bellare , M . Goldreich , and M . Sudan . Free bits , pcps and non approximability — towards tight results . Proc . IEEE Symp . on Foundations of Computer Science , pages 422–431 , 1995 .
[ 5 ] I . Bomze , M . Budinich , P . Pardalos , and M . Pelillo . The maximum clique problem . In D Z Du and P . M . Pardalos , editors , Handbook of Combinatorial Optimization , volume 4 . Kluwer Academic Publishers , Boston , MA , 1999 .
[ 6 ] C . Bron and J . Kerbosch . Algorithm 457 : finding all cliques of an undirected graph . Communications of the ACM , 16:575–577 , 1973 .
[ 7 ] C . Ding , X . He , R . Meraz , and S . Holbrook . A unified representation for multi protein complex data for modeling protein interaction networks . Proteins : Structure , Function , and Bioinformatics , 57:99–108 , 2004 .
[ 8 ] D . Eppstein . Arboricity and bipartite subgraph listing algorithms . Information Processing Letters , 51:207–211 , 1994 . [ 9 ] U . Feige , S . Goldwasser , L . Lov’asz , M . Safra , and M . Szegedy . Approximating clique is almost np complete . Proc . IEEE Symp . on Foundations of Computer Science , pages 2–12 , 1991 .
[ 10 ] M . Garey and D . Johnson . Computers and Intractability : A guide to the theory of NP Completeness . Freeman , 1979 .
[ 11 ] A C Gavin , M . Bosche , R . Krause , et al . Functional organization of the yeast proteome by systematic analysis of protein complexes . Nature , 415:141–147 , 2002 .
[ 12 ] L . Gibbons , D . Hearn , P . Pardalos , and M . Ramana . Continuous characterizations of the maximum clique problem . Mathematics of Operations Research , 22:754–768 , 1997 .
[ 13 ] U . Guldener , M . Munsterkotter , G . Kastenmuller , et al . Cygd : the comprehensive yeast genome database . Nucleic Acids Res . ( Database Issue ) , 33:D364–D368 , 2005 . [ 14 ] J . Hastad . Clique is hard to approximate within n1− . Acta
Mathematica , 182:105–142 , 1999 .
[ 15 ] T . Hastie , R . Tibshirani , and J . Friedman . Elements of Sta tistical Learning . Springer Verlag , 2001 .
[ 16 ] Y . Ho , A . Gruhler , A . Heilbut , et al . Systematic identification of protein complexes in saccharomyces cerevisiae by mass spectrometry . Nature , 415:180–193 , 2002 .
[ 17 ] T . Ito , T . Chiba , R . Ozawa , M . Yoshida , M . Hattori , and Y . Sakaki . A comprehensive two hybrid analysis to explore the yeast protein interactome . Proc . Natl . Acad . Sci . , 98(8):4569–4574 , 2001 .
[ 18 ] J . Li , H . Li , D . Soh , and L . Wong . A correspondence between maximal complete bipartite subgraphs and closed patterns . 9th European Conf . on Principles and Practice of Knowledge Discovery in Databases ( PKDD ) , Porto , Portugal , October 2005 , pages 146–156 , 2005 .
[ 19 ] S . C . Madeira and A . L . Oliveira . Biclustering algorithms for biological data analysis : A survey . IEEE/ACM . Trans . on Computational Biology and Bioinformatics , 1:25 – 45 , 2004 .
[ 20 ] K . Makino and T . Uno . New algorithms for enumerating all maximal cliques . Proc Scandinavian Workshop on Algorithm Theory , pages 260–272 , 2004 .
Authorized licensed use limited to : FLORIDA INTERNATIONAL UNIVERSITY . Downloaded on July 29,2010 at 01:10:48 UTC from IEEE Xplore . Restrictions apply .
Proceedings of the Sixth International Conference on Data Mining ( ICDM'06)0 7695 2701 9/06 $20.00 © 2006 Table 2 . Computed bicliques from the domain complex bipartite graph .
RNA pol N ;
RNA pol Rpb1 5 ;
Domain RNA pol Rpb1 1 ; RNA pol Rpb1 2 ; RNA pol Rpb1 3 ; RNA pol Rpb1 4 ; RNA pol L ; RNA pol A bac ; RNA pol Rpb2 1 ; RNA pol Rpb2 2 ; RNA pol Rpb2 3 ; RNA pol Rpb2 5 ; RNA pol Rpb2 6 ; RNA pol Rpb2 7 ; RNA pol Rpb5 N ; RNA pol Rpb5 C ; DNA RNApol 7kD ; RNA pol Rpb8 ; RNA pol Rpb6 Ribosomal L14 ; Ribosomal L1 ; Ribosomal L5 ; Ribosomal L5 C ; Ribosomal L23 ; Ribosomal L11 N ; Ribosomal L11 ; KOW ; Ribosomal L2 ; Ribosomal L2 C ; Ribosomal L6 ; L15 ; Ribosomal L3 ; Ribosomal L13 Ribosomal S17 ; Ribosomal S9 ; S4 ; Ribosomal S5 ; Ribosomal S5 C ; Ribosomal S14 ; Ribosomal S10 ; Ribosomal S15 ; Ribosomal S2 ; Ribosomal S7 ; Ribosomal S19 TFIID 18kDa ; TFIID 90kDa ; TFIID 20kDa ; TFIID 30kDa ; TAF ; DUF1546 ; TFIID 31kDa Actin ; Bromodomain ; Myb DNA binding ; SWIRM ; YEATS Transket pyr ; Pyr redox 2 ; Pyr redox ; Biotin lipoyl ; 2oxoacid dh ; E1 dh ; GIDA Pyr redox dim Adaptin N ; Adap comp sub ; Clat adaptor s
SNF2 N ; Helicase C ; SNF5 ;
DNA pol E B ; DNA pol B exo ; DNA pol B
Pyr redox 2 ; DAO ; FAD binding 2 ; Succ DH flav C
MutS I ; MutS II ; MutS III ; MutS IV ; MutS V
GTP EFTU ; GTP EFTU D2
XPG N ; XPG I
RNase P Rpp14 ; RNase P p30 ; RNase P pop3 ; POPLD WD40 ; Helicase C ; DEAD ; RRM 1
POP1 ;
HATPase c ; DNA gyraseB ; DNA topoisoIV
ATP synt ab N ; ATP synt ab ; ATP synt ab C ; ATPsynt C Prenyltrans ; PPTA
Complex RNA polymerase I ( 5104010 ) ; RNA polymerase III ( 510.120 )
( 510.10 ) ; RNA polymerase II
ρ
0.68 cytoplasmic ribosomal large subunit ( 5004010 ) ; mitochondrial ribosomal large subunit ( 5006010 ) mitochondrial ribosomal small subunit ( 5006020 ) ; cytoplasmic ribosomal small subunit ( 5004020 )
( 2302020 ) ;
SAGA complex
SAGA complex ( 510190102010 ) ; TAFIIs ( 5107020 ) SWI/SNF transcription activator complex(51019050 ) ; RSC complex ( Remodel the structure of chromatin ) ( 400 ) Pyruvate dehydrogenase ( 390 ) ; 2 oxoglutarate dehydrogenase ( 20 ) AP 2 complex ( 2602020 ) ; AP 3 complex ( 2602030 ) ; AP 1 complex ( 2602010 ) Replication complex ( 410.35 ) ; DNA polymerase alpha ( I ) primase complex ( 4104060 ) ; DNA polymerase epsilon ( II ) ( 41040100 ) ; DNA polymerase delta ( III ) ( 4104090 ) other respiration chain complexes ( 420.60 ) ; Succinate dehydrogenase complex ( complex II ) ( 420.20 ) MSH2/MSH3 complex ( 5101805010 ) ; MSH2/MSH6 complex ( 5101805020 ) eEF1(5002010 ) ; eRF3(5003030 ) ; eEF2 ( 5002020 ) ; eIF2 ( 5001020 ) NEF3 ( 41040120 ) RNase P ( 4401410 ) ; RNase MRP ( 4401220 )
( 5101801030 ) ;
Exonucleases complex complex
( 510190110 ) ; mRNA splicing
( 490 ) ; Topoisomerases
CCR4 ( 4403010 ) ; rRNA splicing ( 4403020 ) Synaptonemal complex ( SC ) ( 41040140 ) F0/F1 ATP synthase transporting ATPase , vacuolar ( 220 ) Farnesyltransferase ( FTase ) ( 180.10 ) ; Geranylgeranyltransferase I ( GGTase I ) ( 180.20 ) ; Geranylgeranyltransferase II ( GGTase II ) ( 180.30 )
( 420.50 ) ; H+
( complex V )
1
1
0.14
0.88
1
1
1
0
0
1
1
0
1
0
1
0
Authorized licensed use limited to : FLORIDA INTERNATIONAL UNIVERSITY . Downloaded on July 29,2010 at 01:10:48 UTC from IEEE Xplore . Restrictions apply .
Proceedings of the Sixth International Conference on Data Mining ( ICDM'06)0 7695 2701 9/06 $20.00 © 2006
