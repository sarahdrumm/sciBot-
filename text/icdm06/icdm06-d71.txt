Searching for Pattern Rules
Regina , SK , Canada , S4S 0A2 .
{liguicho , hamilton}@csureginaca
Guichong Li and Howard J . Hamilton
Department of Computer Science , University of Regina ,
Abstract
We address the problem of finding a set of pattern rules , from a transaction dataset given a statistical metric . A new data structure , called an incrementally counting suffix tree ( ICST ) , is proposed for online computation of estimates of the support of any pattern or itemset . Using an ICST , our approach directly generates a set of pattern rules by a single scan of the whole dataset in partitions without the generation of frequent itemsets . Non redundant rules can be found by removing redundancies from the pattern rules . The PPMCR algorithm first finds pattern rules and then non redundant rules by generating valid candidates while traversing the ICST . Experimental results show that the PPMCR algorithm can be used for efficiently mining fewer non redundant rules . 1 . Introduction
Correlations are of wide interest in data analysis , because they automatically exclude relations with inadequate statistical significance [ 4 ] . An association rule with support higher than a user specified threshold might be poorly correlated , while a correlation rule might have low support [ 4 ] . Poor correlation may occur even for optimal association rules [ 3 ] . Thus , mining correlations may be an attractive alternative to mining itemsets .
Previous approaches to tackle this problem include generating non redundant rules [ 9 ] , using log linear models [ 1 ] , and ranking correlation pairs in the TAPER method [ 13 ] . Contrast sets are meaningful itemsets if the corresponding deviations with respect to different groups hold [ 2 ] . A more general approach is to consider multi correlations between itemsets and a single item . Given a is correlated with an itemset B if and only if a suitable statistical test , such as the chi square ( χ2 ) test , rejects the null hypothesis of independence at a specified significance level , such as 95 % confidence . Itemsets A transaction dataset , an itemset A and B can also be regarded as sets of binary variables . A correlation between A and B is called a multicorrelation if and only if A is an itemset containing at least one item , B is a singleton itemset ( ie , an itemset containing exactly one item ) , A ∩ B = ∅ , and A is correlated with B . Elsewhere , multi correlations are referred to as multiple correlations .
A multi correlation between an itemset A and a singleton itemset B is denoted A⇒B , which is called a multi correlation rule . In such a rule , A is the antecedent and B is the consequent . In a multicorrelation rule A⇒B , the correlation is positive if P(AB ) > P(A)P(B ) , the correlation is negative if P(AB ) < P(A)P(B ) , and A and B are independent if P(AB ) = P(A)P(B ) . The multi correlation problem is to find a set of multi correlation rules from a transaction dataset given a statistical metric .
Without loss of generality , we assume that for each transaction in a dataset , all items are sorted in lexicographical order . All items in the antecedent or consequent of a rule are sorted similarly . In a transaction , an itemset A is a contiguous pattern ( or simply pattern ) in the context of a singleton itemset B if the items in either A or A∪B occur contiguously in the transaction GHJKL , GH is a pattern in the context of J , K , or L because GH appears contiguously . As well , GJ is a pattern in the context of H because A∪B = GHJ occurs contiguously . On the other hand , GJ is not a pattern in the context of K in GHJKL , because neither GJ nor GJK occur contiguously . transaction . For example , the
A pattern rule A⇒B holds in a transaction dataset if itemset A ( occurring as a pattern in the context of B ) and the singleton itemset B are positively correlated in terms of some statistical metric . For example , if the pattern GJ occurs so often in transactions with H that GJ and H are correlated according to the specified statistical metric and P(GHJ ) > P(GJ)P(H ) , then GJ⇒H is a pattern rule . Given a transaction dataset and a statistical metric , the restricted multi correlation problem is to find a set of pattern rules that hold in the dataset . in
Proceedings of the Sixth International Conference on Data Mining ( ICDM'06)0 7695 2701 9/06 $20.00 © 2006 We propose a new approach to solve this restricted problem , which has four noteworthy features compared to previous research work : ( 1 ) pattern rules are found without generating frequent itemsets , ( 2 ) by using a partitioning strategy , only a single scan of the dataset is made , ( 3 ) the support for a pattern is estimated in time quadratic to the length of an itemset by using an incrementally counting suffix tree , abbreviated ICST , and ( 4 ) redundancies among positive correlation rules are found and removed by heuristically browsing the ICST using a four state strategy .
The remainder of this paper is organized as follows . The theoretical foundations of our approach are described in Section 2 . In Section 3 , we describe the PPMCR algorithm for finding all pattern rules and their non redundant rules , and in Section 4 , we present our experimental results . We draw conclusions and give suggestions for future work in Section 5 .
2 . Theoretical foundations 2.1 The χ2 test and multi correlations
Given two binary variables A and B and a transaction dataset , their χ2 value can be simply calculated as follows [ 12 ] : ( − ABPN BPAP ) ( ) ( − − AP ) 1)( ( 1))(
( BPAP ( (
) 2 ) BP (
( 1 )
=χ
) )
2 where N is the size of sample ; P(AB ) , P(A ) , and P(B ) are the observed probabilities of AB and A and B , respectively ; P(A ) and P(B ) are not equal to 0 or 1 to allow a safe derivation .
The antecedent A of a multi correlation A⇒B can also be regarded as the conjunction of items . Statistical metrics for two categorical variables can be used for checking for multi correlations [ 12 ] .
Instead of measuring linear correlations [ 12 ] , in this paper , we focus on the χ2 test for the multi correlation problem . the strength of
We have the following lemma about multi correlations .
Lemma 1 . If A'⇒B and A⇒B are two multi correlation rules , where A'⊆A , and P(B | A' ) = P(B | A ) , then χ2(A'⇒B ) ≥ χ2(A⇒B ) , with equality holding when P(A' ) = P(A ) . Proof : ( omitted ) . 
More generally , we have the following theorem .
Theorem 1 . If r':A'⇒B and r:A⇒B are two multicorrelation rules , where A'⊆A , and P(B | A' ) ≥ P(B | A ) > P(B ) , then χ2(r' ) ≥ χ2(r ) . Proof : Follows directly from the proof of Lemma 1 .  We define subrules and superrules of a rule as follows .
Definition 1 . Given two multi correlation rules r : A⇒B and r' : A'⇒B , where A' ⊆ A , we say r' : A'⇒B is a subrule of r , denoted r' ≺ r . Conversely , r is a superrule of r' . 
Given two candidate rules r1:A1⇒B and r2 : A2⇒B , and r1 ≺ r2 and conf(r1 ) ≥ conf(r2 ) > P(B ) , if r2 is a multi correlation rule , is also a multicorrelation rule . In such a case , r2 is called a redundant rule . then r1
The brute force algorithm for generating all multicorrelation rules requires exponential effort . Another method is to mine a set of frequent itemsets first , and then search for all multi correlation rules from the resulting set . We propose an alternative method .
2.2 Positive multi correlation rules
Given an itemset A and single item B , for any positive multi correlation rule A⇒B , we know P(AB ) – P(A)P(B ) > 0 . We can derive a new tight upper bound for positive multi correlation rules from previous work [ 2][11 ] as follows .
Suppose A' ⊇ A , x(A ) = N×P(A ) , and y(A ) = N×P(AB ) . According to Equation 1 , the upper bound for positive correlation is given by
χ2(A' ⇒B ) ≤ max{χ2(y(AB ) , y(AB) ) , χ2(x(A ) – y(AB ) , 0)} = ( BP ( ) 1 ) − − BP (
  max   ) )   For a positive rule and its subrules , from Theorem
APN ( ( ) − + AP ( )
− ABP ( ABP (
− BP ( ) ABP ( ) )
NP ( BP (
) ) 1))(
AB 1)(
1(
)
,
1 , we have the following theorem . Theorem 2 . Given two positive multi correlation rules r1:A1⇒B and r2:A2⇒B , and r1 ≺ r2 and conf(r1 ) ≥ conf(r2 ) , then χ2(r1 ) ≥ χ2(r2 ) .
Thus , given two candidates for positive multicorrelation rules r1:A1⇒B and r2 : A2⇒B , and r1 ≺ r2 and conf(r1 ) ≥ conf(r2 ) , if r2 is a multi correlation rule then r1 is certainly a multi correlation . As well , r2 can be regarded as redundant and removed from the set of multi correlation rules . A rule r is optimal if no subrule of r exists such that r is redundant . Optimal rules are preferred for many applications [ 3 ] . Another type of non redundant rules , called basic rules , is stricter than optimal rules and can be used for inference [ 9 ] . A basic rule is a rule that has confidence greater than or equal to that of any of its superrules , and the same condition is not true for any of its subrules .
A corollary to Theorem 2 identifies redundant rules . Corollary 1 . Given a positive multi correlation rule r:A⇒B where conf(r ) = 1 , then all superrules of r are redundant . 
2
Proceedings of the Sixth International Conference on Data Mining ( ICDM'06)0 7695 2701 9/06 $20.00 © 2006 2.3 Incrementally counting suffix trees items
An incrementally counting suffix tree , abbreviated ICST , is an extended version of a suffix tree . A suffix tree , also called a suffix trie , is well known for data stream analysis [ 5 ] . An example is shown in Figure 1 . Suppose we have the dataset shown in Figure 1(a ) . The corresponding in lexicographical order is shown in Figure 1(b ) . The suffix tree with counts for the first transaction , ACDE , is shown in Figure 1(c ) , where the roots of the subtrees for all suffix transactions are inside the dotted oval . transaction dataset with
An ICST can be built in online manner by the process , called getICST , which aggregates all suffix trees of transactions with incrementally counting .
Given an itemset A1…Ak , the getSupp method for estimating its support from an ICST can be described as follows . From the root of the ICST , the algorithm first searches for a node containing A1 . If such a node is found , then the search for subitemset A2…Ak is continued in the subtree of the node containing A1 in the same manner . Eventually , the support for itemset A1…Ak is obtained by adding all supports in the leaves containing Ak . Otherwise , the support equals to 0 .
( b )
1 ACDE 2 CDE 3 ACDE 4 ABCD 5 BDE 6 ABD
( a )
A B C D E 1 0 1 1 1 0 0 1 1 1 1 0 1 1 1 1 1 1 1 0 0 1 0 1 1 1 1 0 1 0
( d )
A(1 ) C(1 ) D(1 ) E(1 ) Root
( c )
Root
E(1 )
D(1 ) E(1 )
C(1 ) D(1 ) E(1 )
A1(4 ) B(2 ) C3(1 ) D4(1 )
D(1 )
B(3 ) C(1 )
C(4 ) D(2 ) D(4 ) E(3 )
C2(2 ) D3(2 ) E(2 ) Figure 1 . An ICST .
D(1 )
E(1 )
E(4 )
D(6 ) E(4 )
A threaded ICST is an ICST with extra pointers . Each node has a pointer field called parent , which points to its single direct predecessor . For example , in Figure 1(d ) , in the subtree corresponding to item A , the node containing item B has a parent field pointing to its predecessor node containing item A . However , the root of an ICST has no predecessor . Also in a threaded ICST , all subroots contain a pointer called head , which is the head of a linked list linking all nodes containing the same item in other subtrees and a specific field called tails referring a set of linked lists . Each linked list in the tails links to all nodes containing the same items in the same subtree . For example , as shown in Figure 1(d ) , the head in the subroot labelled C links to four nodes containing item C in the corresponding subtrees labelled C , B , and A1 ; there is a hashtable tails in the subroot labeled A1 , in which one element is a head node of a linked list referring the first node containing item C . The head node uses its next field to point to the next node containing the same item C in the linked list . The next field of the last node in any linked list is null . For simplicity , all other threads between parents and linked lists have been omitted from Figure 1(d ) .
The linearity of ICSTs has been proven in the related research [ 10 ] . For scalability , the dataset can be partitioned into equal or unequal sized units . A local ICST can be built for each unit . The support of an itemset can be estimated from the local ICST . The final set of multi correlation rules that is created by combining the sets of multi correlation rules that are generated ICSTs will be an approximation to the correct set . local from the
2.4 Heuristic candidate generation
In this paper , we assume that only patterns recorded in the ICST are of interest . To efficiently generate candidate pattern rules , the ICST is traversed . At each node , we consider both greater rules and lesser rules . For a pattern rule r : A⇒B , if the item located at the tail of A is less than B in lexicographic order , then r is a lesser rule with respect to B ; otherwise , r is a greater rule with respect to B . For example , rule GH⇒J is a lesser rule and rule GJ⇒H is a greater rule . Suppose a node corresponds to a pattern A , as obtained from getItemsetPrefix . For each item B , a candidate rule with antecedent A – B and consequent B is considered : if A∪B is in a pattern , then A – B ⇒ B is a valid candidate .
By heuristically generating candidates for pattern rules , the search space for multi correlation rules can be reduced , as described by the following theorem . Theorem 3 . Given an ICST and a candidate pattern rule A⇒B generated in a node in the ICST , if A⇒B is an invalid candidate , then any of its superrules generated in any node of the ICST is also invalid . 
In four cases , all superrules of a candidate can be discarded . First , for an invalid candidate , its antecedent is not a pattern in the context of its consequent . Secondly , the tight upper bound is evaluated to be lower than a critical value given by a statistical metric . Thirdly , the continuity correction threshold is not satisfied [ 1 ] . Fourthly , it is identified to be redundant
3
Proceedings of the Sixth International Conference on Data Mining ( ICDM'06)0 7695 2701 9/06 $20.00 © 2006 by a heuristic method , eg , if the confidence of a pattern rule is already 1 .
The pruning method based on Theorem 3 is called information propagation . It can often be accomplished my moving from the small subtrees to the large subtrees . Information propagation can be achieved with threads referred to by the head and tails among subtrees and within a subtree , respectively , by finding some special nodes , called critical nodes , from which all superrules are known to be invalid candidates or evaluated to be invalid rules . For example , as shown in Figure 1(d ) , if the candidate D⇒B generated in the subtree labeled D is invalid , D is identified as a critical node in the subtree labeled C with respect to the item B ( called visited by item B ) while D3 is identified as a critical node in the subtree labeled B for CD⇒A generated in the subtree labelled C with respect to the item A if it is invalid .
For each node n , the following four states are identified for information propagation . n.state = ‘C’ , meaning visited by item C , n.state = ‘X’ or ‘’ , meaning not visited by item C , n.state = ‘C–C’ , meaning a critical node for item C , n.state = ‘C+C’ , meaning a critical node for C that has been propagated from other subtrees .
Other redundant pattern rules can be removed by ( 1 ) finding all pattern based optimal rules from the resulting pattern rules or ( 2 ) by finding all patternbased basic rules from them .
3 . The algorithm for finding pattern rules
We propose the PPMCR algorithm , given in Figure 2 , for searching for a set of pattern rules , given a dataset D , assuming that the χ2 test is the statistical metric . Parameter values are required for the size W of the partitions and the critical value for the χ2 test .
To begin , PPMCR partitions the transaction dataset into partitions of size at most W in step 1 . For each partition , PPMCR creates a local ICST in step 2 using function getICST . In step 3 , for each item in the local ICST , the algorithm searches for pattern rules that have the item as their consequents in subtrees of ICST in step 4 . In step 5 and step 7 , candidates are identified as greater rules or lesser rules such that two procedures getGreaterRules and getLesserRules are executed for evaluating them , respectively .
In step 17 of getGreaterRules , by checking whether the supports of itemsets consisting of all combinations of A and B and their complements are lower than 5 , ContinuityCorrection performs the correction for continuity assumed by the χ2 test [ 1 ] .
The getLesserRules and other procedures are omitted due to the limited space available . sk.push(n ) getLesserRules(n , B ) getGreaterRules(n , B )
W : the size of each partition for D for each partition p# in D of size at most W
CST = getCST(p# ) for each item B in the root node of a subtree in CST for each other root node n of a subtree in CST if ( n.item > B ) else if ( n.item < B )
PPMCR algorithm Input : D(Ι , Τ ) : a transaction dataset
Output : a set of multi correlation rules begin 1 2 3 4 5 6 7 8 end Procedure getGreaterRules(n , B ) 9 10 while ( sk ≠ ∅ ) 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 Figure 2 . PPMCR algorithm for finding nonredundant pattern rules . if ( !InPattern(A , B ) ) if ( !ContinuityCorrection(A , B ) ) if ( supp(r ) > supp(A ) * supp(B ) ) for each child c in n if ( upper(A , B ) < χ2 propagation(A , B ) ; loop output{r:A ⇒ Bχ2(A , B ) ≥ χ2 getNonRedundantRules(r ) if ( r.conf ==1 ) n = sk.pop( ) ;
A = getItemsetPrefix(n ) – B if ( n.state == B+B ) propagation(A , B ) ; loop propagation(A , B ) ; loop propagation(A , B ) loop s.push(c )
α} or loop
α )
PPMCR is complete for generation and evaluation of all valid candidates of pattern rules .
4 . Experimental results
For
For experiments , several real world datasets were taken from the UCI repository [ 6 ] . The characteristics of these datasets are described in Table 1 . the small datasets , such as Chess and Mushroom , the partition size was set to the number of transactions in the dataset , ie , 3196 and 8124 , respectively , as shown in Table 1 . Larger datasets were partitioned into equal sized units , eg , 10000 transactions only for the partition 1 of Connect . is based on continuity
Five pruning techniques based on our theoretical results were used : Upper is based on the upper bound , Pattern is based on the validation of pattern rules , Correction correction , Redundant is based on Corollary 1 , and Propagation is based on information propagation . For example , in Table 1 , for Chess with respect to the critical value 3.841 of χ2 test and the critical value 0.6 of Pearson ’s correlation coefficient , Upper prunes 0 and 2792 times , Pattern prunes 983 and 1218 times , Correction prunes
4
Proceedings of the Sixth International Conference on Data Mining ( ICDM'06)0 7695 2701 9/06 $20.00 © 2006 3864 times , Propagation prunes 332830 and 352833 times , and PPMCR generates 4101 optimal rules ( or 8155 basic rules ) and 1774 basic rules . The elapsed time for generating optimal rules is 363 seconds .
A comparison between our approach and three previous approaches is shown in Table 2 . Apriori is an early method for mining association rules . We call the method for generating non redundant association rules GNRAR [ 14 ] and the method for mining non derivable association rules , MNDAR [ 7 ] . Experiments on the same benchmark datasets were reported by the original authors . For MNDAR , we chose the version called Idcc , which generates subrules with identical conditions or consequent rules for comparison . PPMCR generates fewer optimal rules than the other approaches in most cases , but GNRAR generates 475 rules for Mushroom when minsup = 04 PPMCR generates all pattern rules with a high level of statistical significance regardless of their support values . Thus , rules with low support values are included in the resulting set .
5 . Conclusions and future work
In this paper , we defined the problem of finding all pattern rules from a transaction dataset given a statistical metric and proposed the PPMCR algorithm to solve this problem . Experiments conducted on several real world datasets show that our approach efficiently generates than previous approaches in most cases . We identified four salient advantages of our approach compared to previous approaches for mining frequent itemsets , association rules , and correlation rules [ 3][4][8][14 ] . In the future , a compressed version of the ICST might be devised for the PPMCR algorithm . As well , other types of patterns might be generated from the ICST . fewer rules
Table 1 . Synthetic and real world datasets . # #
#
#
#
Correction
Redundant
Propagation
3864 6975 5936
0 / 8 0 / 250 0 / 88
332830 / 352833 1441825 / 1427964 138394 / 122740
#
Optimal 4101 9445 5629
#
#0.6 Basic Basic 8155 1774 29051 5091 20159 870
Elapsed Time 363 2458 318
Datasets
Chess Connect Mushroom
#
L
W
Upper
# Trans Pattern Items 76 3196 37 3196 0 / 2792 983 / 1218 130 67557 43 10000 0 / 6278 3083 / 2480 8124 23 8124 0 / 4275 5769 / 4748 120 Table 2 . Comparison of the number of rules . GNRAR PPMCR
Apriori
Dataset ( minsupp ) Chess(0.8 ) Chess(0.7 ) Connect(0.97 ) Connect(0.9 ) Mushroom(0.4 ) Mushroom(0.2 )
MNDAR ( Id cc )
65978
11231
94860
552564 8171198 8092 3640704 7020 19191656
6 References
27711 152074 1116 18848 475 5741
4101
9445
5629
[ 1 ] A . Agresti . Categorical Data Analysis . New York : John Wiley , 1996 . [ 2 ] S . Bay and M . Pazzani . Detecting Change in Categorical Data : Mining Contract Sets . In Proc . KDD’99 , 302 306 , San Diego , CA , 1999 . [ 3 ] R . J . Bayardo and R . Agrawal . Mining the Most Interesting Rules . In Proc . KDD’99 , 145 154 , 1999 . [ 4 ] S . Brin , R.Motwani , and C . Silverstein . Beyond market baskets : generalizing association rules to correlations . Proc . SIGMOD’97 , Tucson , AZ , 1997 . [ 5 ] J . Fischer , V . Heun , and S . Kramer . Fast frequent string mining using suffix arrays . In Proc . 5th IEEE International Conference on Data Mining , 609 612 , 2005 . [ 6 ] Frequent http://fimicshelsinkifi/data/ [ 7 ] B . Goethals , J . Muhonen , and H . Toivonen . Mining Non derivable Association rules . Proc . 2005 SIAM International Conference on Data Mining ( SDM05 ) . [ 8 ] J . Han , J . Pei , Y . Yin , and R . Mao . Mining Frequent Patterns without Candidate Generation : A
Itemset Mining Dataset Repository .
Frequent Pattern Tree Approach . Data Mining and Knowledge Discovery , 8:53–87 , 2004 . [ 9 ] G . Li and H . J . Hamilton . Basic Association Rules . In Proc . 2004 SIAM International Conference on Data Mining ( SDM04 ) , 166 177 , Orlando , FL , April , 2004 . [ 10 ] G . Li and H . J . Hamilton . Searching for Pattern Rules : Extended Report . Technical Report CS 200609 , Department of Computer Science , University of Regina . [ 11 ] S . Morishita and J . Sese . Traversing Itemset Lattices with Statistical Metric Pruning . In Proc . 19th ACM SIGACT SIGMOD SIGART Symposium on Database System ( PODS ) , 226 236 , 2000 . [ 12 ] H . T . Reynolds . The Analysis of Crossclassifications . The Free Press , New York , 1997 . [ 13 ] H . Xiong , S . Shekhar , P . Tan , and V . Kumar . Exploiting a support based upper bound of Pearson ’s correlation coefficient identifying strongly correlated pairs . Proc . ACM SIGKDD’04 , August 2004 , Seattle , Washington , USA . [ 14 ] M . Zaki , Mining non redundant association rules . Data Mining and Knowledge Discovery , 9:223–248 , 2004 . for efficiently
5
Proceedings of the Sixth International Conference on Data Mining ( ICDM'06)0 7695 2701 9/06 $20.00 © 2006
