Flexible Constrained Spectral Clustering
Xiang Wang
Department of Computer Science
University of California , Davis
Davis , CA 95616 xiang@ucdavis.edu
Ian Davidson
Department of Computer Science
University of California , Davis davidson@csucdavisedu
Davis , CA 95616
ABSTRACT Constrained clustering has been well studied for algorithms like K means and hierarchical agglomerative clustering . However , how to encode constraints into spectral clustering remains a developing area . In this paper , we propose a flexible and generalized framework for constrained spectral clustering . In contrast to some previous efforts that implicitly encode Must Link and Cannot Link constraints by modifying the graph Laplacian or the resultant eigenspace , we present a more natural and principled formulation , which preserves the original graph Laplacian and explicitly encodes the constraints . Our method offers several practical advantages : it can encode the degree of belief ( weight ) in MustLink and Cannot Link constraints ; it guarantees to lowerbound how well the given constraints are satisfied using a user specified threshold ; and it can be solved deterministically in polynomial time through generalized eigendecomposition . Furthermore , by inheriting the objective function from spectral clustering and explicitly encoding the constraints , much of the existing analysis of spectral clustering techniques is still valid . Consequently our work can be posed as a natural extension to unconstrained spectral clustering and be interpreted as finding the normalized min cut of a labeled graph . We validate the effectiveness of our approach by empirical results on real world data sets , with applications to constrained image segmentation and clustering benchmark data sets with both binary and degree of belief constraints .
Categories and Subject Descriptors H28 [ Database Applications ] : Data Mining
General Terms Algorithms , Experimentation
Keywords Spectral clustering , constrained clustering
1 .
INTRODUCTION
Constrained clustering is a category of techniques that try to incorporate user supervision ( side information ) into existing clustering algorithms [ 2 ] . The typical form of pairwise constraints are Must Link ( the pair of points must be assigned into the same cluster , ML for short ) and CannotLink ( the pair of points cannot be assigned into the same cluster , CL for short ) . These types of constraints have been added into many popular clustering algorithms such as Kmeans clustering , mixture modeling , hierarchical clustering and density based clustering [ 2 ] . However , constrained spectral clustering remains a developing area .
Spectral clustering is an important clustering technique that has been extensively studied in the image processing , data mining , and machine learning communities [ 13–15 ] . It is considered superior to traditional clustering algorithms like K means in terms of having deterministic and polynomialtime solution and its equivalence to graph min cut problems . Its advantage has also been validated by many real world applications , such as image segmentation [ 14 ] and mining social networks [ 18 ] .
The aim of this paper is to combine spectral clustering and pairwise constraints in a principled and flexible manner . Most of the existing techniques on constrained spectral clustering can be categorized into two different types , based on how they enforce the constraints . The first type of methods [ 7,8,11,17,19 ] directly manipulate the graph Laplacian ( or equivalently , the affinity matrix ) according to the given constraints ; then unconstrained spectral clustering is applied on the modified graph Laplacian . The second type of methods use constraints to restrict the feasible solution space . For example , the subspace trick introduced by De Bie et al . [ 5 ] alters the resultant eigenspace which the clustering assignment vector will be projected onto , based on given constraints . This technique was later extended in [ 3 ] to accommodate inconsistent constraints . Yu and Shi [ 20,21 ] encoded partial grouping information as a subspace projection . Li et al . [ 10 ] enforced constraints via the regularization of the spectral embedding .
The aforementioned approaches have two limitations :
1 . They are designed to handle binary ML and CL constraints . However , there are many applications where the constraints are often provided in the form of realvalued numbers ( degree of belief ) rather than yes/no verdicts . For example in a collaborative tagging application , constraints are provided by a group of users who do not necessarily agree with each other . So it is more natural to measure the likeliness of two instances belonging to the same cluster with a real valued score , according to the ratio of users who agree so .
2 . They aim to satisfy as many constraints as possible , which could be unnecessary and difficult in practice . For example , constraints provided by multiple users could be inconsistent , thus they cannot be all satisfied at one time . Also it is reasonable to ignore a small portion of constraints in exchange for a clustering with much lower cost .
In this paper , we go beyond binary ML/CL constraints and propose a more flexible framework to accommodate general type user supervision . The binary constraints are relaxed to become a degree of belief ( real valued ) that two data instances belong to the same class or two different classes . Moreover , instead of trying to satisfy each and every constraint that has been given , we use a user specified threshold to lower bound how well the given constraints are satisfied . Therefore , our method provides maximum flexibility in terms of both representing constraints and satisfying them .
Specifically , we formulate constrained spectral clustering as a constrained optimization problem by adding a new constraint to the original objective function of spectral clustering ( see Section 31 ) Then we show that our objective function can be converted it into a generalized eigenvalue system , which can by solved deterministically in polynomial time ( see Section 32 ) This should be considered as a major advantage over constrained K means clustering , which produces non deterministic solutions while being intractable even for K = 2 [ 4 , 6 ] . Furthermore , our algorithm ( see Section 4 ) guarantees to find the solution if one exists , which is not the case for many constrained clustering algorithms that are sensitive to the ordering of the constraints ( See Fig 1 in [ 4 ] for a concrete example ) . We validate the effectiveness of our approach on several real world data sets in Section 5 . The results of image segmentation ( see Fig 3 and 4 ) show that our method can produce semantically meaningful clustering that conforms to human intuition and expectation . The results of clustering benchmarks ( see Fig 5 ) show quantitatively that our method can significantly improve the resultant clustering with given constraints .
Our contributions are : • We are the first to incorporate user supervision into spectral clustering that allows real valued degree ofbelief constraints .
• We introduce a user specified threshold to indicate the importance of user supervision , so that some of the constraints can be ignored in exchange for lower clustering cost ( whereas previous approaches tried to satisfy all consistent constraints ) .
• We inherit the original objective function of spectral clustering while encoding constraints explicitly and creating a novel constrained optimization problem ( Eq ( 3) ) . • Our approach can be viewed as a natural extension to the original spectral clustering formulation : we show how our approach ( see Section 3.5 ) can be interpreted as finding the normalized min cut of a labeled graph . • We validate the effectiveness of our approach and its advantage over existing methods using standard benchmarks ( see Section 5 ) .
Table 1 : Table of notations
Symbol Meaning
A D I
L( ¯L ) Q( ¯Q )
The affinity matrix The degree matrix The identity matrix The ( normalized ) graph Laplacian The ( normalized ) constraint matrix
2 . BACKGROUND AND PRELIMINARIES In this paper we follow the standard graph model that is commonly used in the spectral clustering literature . We reiterate some of the definitions and properties in this section , such as graph Laplacian , normalized min cut , eigendecomposition and so forth , to make this paper self contained . Readers who are familiar with the materials can skip to our contributions in Section 3 . Important notations used throughout the rest of the paper are listed in Table 1 . A collection of N data instances is modeled by an undirected , weighted graph G(V;E ; A ) , where each data instance corresponds to a vertex ( node ) in V ; E is the edge set and A is the associated affinity matrix . A is symmetric and nonnegative . The diagonal matrix D = diag(D11 ; : : : ; DN N ) is called the degree matrix of graph G , where
N∑
Dii =
Aij : j=1
Then
L = D − A is called the graph Laplacian of G . Assuming G is connected ( ie any node is reachable from any other node ) , L has the following properties :
Property 1 . ( Properties of graph Laplacian [ 15 ] ) Let L be the graph Laplacian of a connected graph , then we have :
1 . L is symmetric and positive semi definite . 2 . L has one and only one eigenvalue equal to 0 , and N−1 positive eigenvalues : 0 = 0 < 1 ≤ : : : ≤ N−1 .
3 . 1 is an eigenvector of L with eigenvalue 0 ( 1 is a con stant vector whose entries are all 1 ) .
Shi and Malik [ 14 ] showed that the eigenvector of L associated with the second smallest eigenvalue 1 solves the normalized min cut ( N Cut ) problem of graph G ( in a relaxed sense ) . The objective function can be written as :
( 1 ) arg min u∈RN uT Lu ; st uT Du = vol(G ) ; Du ⊥ 1 ; ∑ where vol(G ) = N i=1 Dii . Note that in Eq ( 1 ) , u is the relaxed cluster indicator vector ; uT Lu is the cost of the cut , which is to minimize ; the first constraint uT Du = vol(G ) normalizes the cluster indicator vector u ; the second constraint Du ⊥ 1 rules out the principal eigenvector of L as a trivial solution , because it does not define a meaningful cut on the graph .
In the rest of paper , for the simplicity of notation , we use an equivalent objective function used in [ 15 ] . We substitute u by D
−1=2v , then Eq ( 1 ) becomes : arg min v∈RN
Here vT ¯Lv ; st vT v = vol(G ) ; v ⊥ D1=21 :
( 2 )
¯L = D
−1=2LD
−1=2
∗
∗
= D
−1=2v is called the normalized graph Laplacian [ 15 ] . Again , Eq ( 2 ) is the optimal solution to is equivalent to Eq ( 1 ) since v ∗ Eq ( 2 ) if and only if u is the optimal solution to Eq ( 1 ) . Note that the result of spectral clustering is solely decided by the affinity structure of graph G as encoded in the matrix A ( and thus the graph Laplacian L ) . We will then describe our extensions on how to incorporate additional supervision so that the result of clustering will reflect both the affinity structure of the graph and the structure of the constraint information .
3 . OUR PROBLEM FORMULATION
In this section , we show how to incorporate user supervision into spectral clustering , whose objective function is shown as in Eq ( 2 ) . We encode supervision in such a way that we not only allow binary CL/ML constraints , but also a real valued degree of belief that two data instances belong to the same cluster or two different ones . We propose a new objective function for constrained spectral clustering , which is formulated as a constrained optimization problem . Then we show how to solve the objective function by converting it into a generalized eigenvalue system . Note that the unconstrained spectral clustering problem can be interpreted as the N Cut of an unlabeled graph . Similarly , our formulation can be interpreted as the N Cut of a labeled graph . 3.1 Objective Function
We encode user supervision with an N × N constraint matrix Q . Traditionally , constrained clustering only uses binary constraints : Must Link and Cannot Link , which can be naturally encoded as follows :
+1 if ML(i ; j ) Let u ∈ {−1 ; +1}N be a cluster indicator vector , where ui = +1 if node i belongs to cluster + and ui = −1 if node N∑ N∑ i belongs to cluster − , then
−1 if CL(i ; j ) 0 no supervision available
Qij = Qji =
: uT Qu = uiujQij i=1 j=1 is a measure of how well the constraints in Q are satisfied by the cluster assignment u : the measure will increase by 1 if Qij = 1 and node i and j have the same sign in u ; the measure will decrease by 1 if 1 ) Qij = 1 but node i and j have different signs in u , or 2 ) Qij = −1 but node i and j have the same sign in u .
Now to accommodate degree of belief constraints , we simultaneously relax the cluster indicator vector u and the constraint matrix Q such that : u ∈ RN ; Q ∈ RN×N :
Qij is positive if we believe nodes i and j belong to the same class ; Qij is negative if we believe nodes i and j belong to different classes ; the magnitude of Qij indicates how strong the belief is .
Consequently , uT Qu becomes a real valued measure of how well the constraints in Q have been satisfied , in the relaxed sense . For example , Qij < 0 means we believe nodes i and j belong to different classes , then in order to improve uT Qu , we should assign ui and uj with values of different signs ; similarly , Qij > 0 means nodes i and j are believed to belong to the same class , then we should assign ui and uj with values of the same sign . The larger uT Qu is , the better the cluster assignment u conforms to the given constraints in Q .
Now given this real valued measure , rather than trying to satisfy all the constraints given in Q , we can lower bound this measure with a constant ff ∈ R : uT Qu ≥ ff : −1=2v , above inequality becomes vT ¯Qv ≥ ff ;
By substituting u by D where
−1=2QD is the normalized constraint matrix .
¯Q = D
−1=2
We append this lower bound constraint to the objective function of unconstrained spectral clustering in Eq ( 2 ) , and we have :
Problem 1 . ( Constrained Spectral Clustering ) Given a normalized graph Laplacian ¯L , a normalized constraint matrix ¯Q and a threshold ff , we want to optimizes the following objective function : arg min v∈RN vT ¯Lv ; st vT ¯Qv ≥ ff ; vT v = vol(G ) ; v ̸= D1=21 : ( 3 )
Here vT ¯Lv is the cost of the cut , which is to minimize ; the first constraint vT ¯Qv ≥ ff is to lower bound how well the constraints in Q are satisfied ; the second constraint vT v = vol(G ) normalizes v ; the third constraint v ̸= D1=21 rules out the trivial solution D1=21 . Suppose v is the optimal solution to Eq ( 3 ) , then u is the optimal cluster indicator vector .
−1=2v
= D
∗
∗
∗
It is easy to see that the unconstrained spectral clustering in Eq ( 2 ) can be covered as a special case of our formulation where ¯Q = I and ff = vol(G ) . 3.2 Solving the Objective Function
To solve a constrained optimization problem , we normally use the Karush Kuhn Tucker Theorem [ 9 ] , which describes the necessary conditions for the optimal solution to the problem . We can derive a set of candidates , which are called feasible solutions , that satisfy all the necessary conditions . Then we can find the optimal solution among the feasible solutions using brute force method , given the size of the feasible set is small .
For our objective function in Eq ( 3 ) , we introduce La grange multipliers as follows : Λ(v ; ; ) = vT ¯Lv − ( vT ¯Qv − ff ) − ( vT v − vol(G) ) : ( 4 )
Then according to the KKT Theorem , any feasible solution to Eq ( 3 ) must satisfy the following conditions : ( Stationarity ) ¯Lv − ¯Qv − v = 0 ;
( Primal feasibility ) vT ¯Qv ≥ ff ; vT v = vol(G ) ; ( Dual feasibility ) ≥ 0 ;
( Complementary slackness ) ( vT ¯Qv − ff ) = 0 :
( 5 )
( 6 )
( 7 )
( 8 )
Note that Eq ( 5 ) comes from taking the derivative of Eq ( 4 ) with respect to v . Also note that we dismiss the constraint v ̸= D1=21 at this moment , because it can be checked independently , after we find the feasible solutions .
To solve Eq ( 5) (8 ) , we start with looking at the complementary slackness requirement in Eq ( 8 ) , which can be broken down into two mutual exclusive cases :
Case 1 : = 0 : In this case , the KKT conditions become :
¯Lv − v = 0 ⇒ ¯Lv = v vT ¯Qv ≥ ff ; vT v = vol(G ) :
( 9 )
Then combining Eq ( 11 ) and ( 12 ) we have fl = ( ff − fi ) :
Now recall that L is positive semi definite ( Property 1 ) , and so is ¯L , which means fl = vT ¯Lv > 0;∀v ̸= D1=21 :
Consequently , we have ff − fi = fl
> 0 ⇒ ff > fi :
Recall that ff is the lower bound of how well the given constraints are satisfied . And now we show that fi is a lowerbound of ff . Therefore , instead of letting user assign the value of ff explicitly , we let user assign the value of fi , and the output of algorithm will guarantee vT ¯Qv = ff > fi .
In summary , our method works as follows ( the exact im plementation is shown in Algorithm 1 ) :
This case is easy to check because the feasible solutions generated in this case are still the eigenvectors of ¯L . All we need to do is to remove the ones that fail to satisfy the constraint vT ¯Qv ≥ ff . Case 2 : ̸= 0 : In this case , for Eq ( 8 ) to hold vT ¯Qv − ff
1 . Generating candidates : The user specifies a value for fi , and we solve the generalized eigenvalue system given in Eq ( 15 ) . Note that both ¯L and ¯Q− fi=vol(G)I are Hermitian matrices , thus the generalized eigenvalues are guaranteed to be real numbers . must be 0 . Consequently the KKT conditions become :
¯Lv − ¯Qv − v = 0 ; vT v = vol(G ) ; vT ¯Qv = ff ; > 0 ; :
( 10 )
( 11 )
( 12 )
( 13 )
Unfortunately , under the assumption that ff is arbitrarily given by user and and are independent variables , Eq ( 1013 ) cannot be solved explicitly , and it may produce infinite number of feasible solutions , if a solution exists .
Thus we introduce an additional variable , fi , which is de fined as the ratio between and . Formally : fi = − vol(G ) :
( 14 )
The introduction of fi brings two computational benefits :
1 . It helps convert our problem into a generalized eigenvalue system , which can be solved efficiently and produces up to N feasible solutions .
2 . As we will show below , fi always lower bounds ff . Thus we can let user specify the value for fi , and our original constraint will be satisfied automatically .
Now we substitute Eq ( 14 ) into Eq ( 10 ) we obtain :
¯Lv − ¯Qv + fi vol(G ) v = 0 ; or equivalently :
¯Lv = ( ¯Q − fi vol(G )
I)v
( 15 )
We immediately notice that Eq ( 15 ) is a generalized eigenvalue problem once fi is given .
We denote fl = vT ¯Lv , by left hand multiplying vT to both sides of Eq ( 15 ) we have vT ¯Lv = vT ( ¯Q − fi vol(G )
I)v :
2 . Finding the feasible set : Removing generalized eigenvectors associated with non positive eigenvalues , and normalize the rest such that vT v = vol(G ) . Note that the trivial solution D1=21 is automatically removed in this step because if it is a generalized eigenvector in Eq ( 15 ) , the associated eigenvalue would be 0 . Since we have at most N generalized eigenvectors , the number of feasible eigenvectors is at most N .
3 . Choosing the optimal solution : We combine the feasible solutions from Case 1 and 2 , and choose from them the one that minimizes vT ¯Lv , say v
∗
.
∗
Then in retrospect , we can claim that v is the optimal solution to the objective function in Eq ( 3 ) for fi as given and ff = v 3.3 How To Set fi : Sufficient Condition for the
∗T ¯Qv
Existence of Feasible Solutions
∗
.
On one hand , our method described above is guaranteed to generate a finite number of feasible solutions . On the other hand , we need to set fi appropriately so that the generalized eigenvalue system in Eq ( 15 ) combined with the KKT conditions in Eq ( 10 13 ) will give rise to at least one feasible solution . In this section , we discuss such a sufficient condition : fi < maxvol(G ) ; where max is the largest eigenvalue of ¯Q . In this case , the matrix on the right hand side of Eq ( 15 ) , ¯Q − fi=vol(G)I , will have at least one positive eigenvalue . Consequently , the generalized eigenvalue system in Eq ( 15 ) will have at least one positive eigenvalue . Moreover , the number of feasible eigenvectors will increase if we make fi smaller . For example , if we set fi < minvol(G ) , min to be the smallest eigenvalue of ¯Q , then ¯Q − fi=vol(G)I becomes positive definite . Then the generalized eigenvalue system in Eq ( 15 ) will generate N − 1 feasible eigenvectors ( the trivial solution D1=21 with eigenvalue 0 is dropped ) .
Figure 1 : An illustrative example : the affinity structure says {1 ; 2 ; 3} and {4 ; 5 ; 6} while the node labeling ( coloring ) says {1 ; 2 ; 3 ; 4} and {5 ; 6} .
In practice , we normally choose the value of fi within the range
( minvol(G ) ; maxvol(G) ) :
In that range , the greater fi is , the more the solution will be biased towards satisfying the constraints in Q . Again , note that whenever we have fi < maxvol(G ) , the value of ff will always be bounded by fi < ff ≤ maxvol(G ) :
Therefore we do not need to take care of ff explicitly . 3.4 Generating Constraints from Labels
In practice , the pairwise constraints are often generated from known data labels , ie a ML is added when two instances have the same label and a CL is added when two instances have different labels . Similarly , the constraint matrix Q in our formulation can be conveniently generated from a ( partially ) labeled data set . Let X be an N × K matrix , where Xij is positive if we believe data instance i belongs to class j ; and negative otherwise ; the magnitude of Xij indicates the degree of that belief . Then Q can be generated by
Q = XX T :
( 16 )
Note that our model ’s capacity of incorporating real valued constraints makes it possible to better handle multi labeled data set : if node i and j share two labels whereas node k and l only share one label , then our formulation is able to generate constraints in such a way that node i and j are more strongly advised to be assigned into the same cluster than node k and l are . 3.5 A Graph Cut Interpretation
Unconstrained spectral clustering can be interpreted as finding the N Cut of an unlabeled graph . Similarly , our formulation of constrained spectral clustering in Eq ( 3 ) can also be interpreted as finding the N Cut in a labeled/colored graph .
Specifically , suppose we have an undirected , weighted graph .
The nodes of the graph are colored in such a way that nodes of the same color are advised to be assigned into the same cluster while nodes of different colors are advised to be assigned into different clusters ( eg Fig 1 ) . Let v be the solution to the constrained optimization problem in Eq ( 3 ) . We cut the graph into two parts based on the values of the ∗ entries of u can be interpreted as the cost of the cut ( in a relaxed sense ) , which is to minimize . On the other hand ,
−1=2v
. Then v
∗T ¯Lv
∗
= D
∗
∗ ff = v
∗T ¯Qv
∗
∗ ∗T Qu
= u can be interpreted as the purity of the cut ( also in a relaxed sense ) , according to the color of the nodes in respective sides . ∗ ∗ i and u For example , if Qij is a positive number , then u j having the same sign will help increase the purity of the cut , whereas their having different signs will decrease the purity of the cut . It is not difficult to see that the purity can be maximized when there is no pair of nodes with different colors that are assigned to the same side of the cut , which is the case where constraints in Q are completely satisfied . 3.6 An Illustrative Example
To illustrate how our approach works , we present a toy example as follows . In Fig 1 , we have a graph associated with the following affinity matrix :

A =

0 1 1 0 0 0 1 0 1 0 0 0 1 1 0 1 0 0 0 0 1 0 1 1 0 0 0 1 0 1 0 0 0 1 1 0
Unconstrained spectral clustering will cut the graph at edge ( 3 ; 4 ) and split it into two symmetric parts {1 ; 2 ; 3} and {4 ; 5 ; 6} ( Fig 2(a) ) . Now we introduce constraints as follows :

Q =
 :
+1 +1 +1 +1 −1 −1 +1 +1 +1 +1 −1 −1 +1 +1 +1 +1 −1 −1 +1 +1 +1 +1 −1 −1 −1 −1 −1 −1 +1 +1 −1 −1 −1 −1 +1 +1
Q is essentially saying that we want to group nodes {1 ; 2 ; 3 ; 4} into one cluster and {5 ; 6} the other . Although this kind of “ full supervision ” does not make sense in practice , it is used here just to make the result more obvious and intuitive . ¯Q has two distinct eigenvalues : 0 and 2:6667 . As analyzed above , fi must be smaller than 2:6667 × vol(G ) to guarantee the existence of a feasible solution , and larger fi means we want more constraints in Q to be satisfied ( in a relaxed sense ) . Thus we set fi to vol(G ) and 2vol(G ) respectively , and see how the results will be affected by different values of fi . We solve the generalized eigenvalue system in ∗ Eq ( 15 ) , and plot the resultant cluster indicator vector u in Fig 2(b ) and 2(c ) . We can see that as fi increases , node 4 is dragged from the group of nodes {5 ; 6} to the group of nodes {1 ; 2 ; 3} , which conforms to our expectation that greater fi value implies higher level of constraint satisfaction .
4 . ALGORITHM
In this section , we discuss the implementation issues of our method .
The routine of our method is similar to that of unconstrained spectral clustering . The input of the algorithm is an affinity matrix A , the constraint matrix Q ( or alternatively the label matrix X ) , and the threshold fi . Then we solve the generalized eigenvalue problem in Eq ( 15 ) and find all the feasible generalized eigenvectors . The output is the optimal ∗ ( relaxed ) cluster assignment indicator u . The algorithm is summarized in Algorithm 1 . Note that it only considers the solutions generated from Case 2 in Section 32 Those from Case 1 ( the trivial case ) can be examined separately .
( a ) Unconstrained
( b ) Constrained , fi = vol(G )
( c ) Constrained , fi = 2vol(G )
Figure 2 : The solutions to the illustrative example in Fig 1 with different fi . The x axis is the indices of ∗ the instances and the y axis is the corresponding entry values in the optimal ( relaxed ) cluster indicator u . Notice that node 4 is biased toward nodes {1 ; 2 ; 3} as fi increases .
Algorithm 1 : Constrained Spectral Clustering
Input : Affinity matrix A , constraint matrix Q , fi ; ∗ Output : The optimal ( relaxed ) cluster indicator u sults that conform to user supervision and expectation ?
;
2 . Does our method produce entirely novel clustering when given different sets of constraints ?
N
N i=1
∑
−1=2AD
1 vol(G ) ←∑
∑ j=1 Aij , D ← diag( 2 ¯L ← I − D −1=2 , ¯Q ← D 3 max ← the largest eigenvalue of ¯Q ; 4 if fi ≥ maxvol(G ) then 5 6 end 7 else 8 9 return u
= ∅ ;
−1=2QD
∗
N j=1 Aij ) ; −1=2 ;
Solve the generalized eigenvalue system in Eq ( 15 ) ; Remove eigenvectors associated with non positive eigenvalues and normalize the rest by v ← v∥v∥ vol(G ) ; ∗ ← arg minv vT Lv , where v is among the feasible v eigenvectors generated in the previous step ; return u
∗ ← D
−1=2v
∗
;
10
11 12 end
3 . Does our method outperform unconstrained spectral clustering and existing constrained spectral clustering techniques ?
4 . Can our method effectively utilize degree of belief constraints , which may carry information that binary constraints cannot encode ?
All data sets and source codes ( in Matlab ) used in the experiments are publicly available . Please contact the first author for further information . 5.1 Constrained Image Segmentation
First we validate the effectiveness of our approach in the context of image segmentation . We choose image segmentation as a demonstration for several reasons : 1 ) it is one of the applications where spectral clustering significantly outperforms other clustering techniques , eg K means ; 2 ) the results of image segmentation can be easily interpreted and evaluated by human ; 3 ) instead of generating random constraints , we can add in semantically meaningful constraints to see if the results of constrained clustering conform to our expectation .
The images we used were chosen from the Berkeley Segmentation Dataset and Benchmark [ 12 ] . The original images are 480 × 320 grayscale images in jpeg format . For efficiency consideration , we compressed them to 10 % of the original size , which is 48×32 pixels , as shown in Fig 3(a ) and 4(a ) . Then affinity matrix of the image was computed using RBF kernel , based on both the positions and the grayscale values of the pixels . As a baseline , we used unconstrained spectral clustering [ 14 ] to generate a 2 segmentation of the image . Then we introduced different sets of constraints to see if they can generate expected segmentation . Note that the results of image segmentation vary with the number of segments . To save us from the complications of parameter tuning , which is related to the contribution of this work , we always set the number of segments to be 2 .
The results are shown in Fig 3 and 4 . Note that to visualize the resultant segmentation , we reconstructed the image using the entry values in the relaxed cluster indicator vec∗ tor u . In Fig 3(b ) , the unconstrained spectral clustering partitioned the elephant image into two parts : the sky ( red
Our algorithm can be naturally extended to K way partition for K > 2 , following what we usually do for unconstrained spectral clustering [ 15 ] : instead of using the optimal generalized eigenvector u , we preserve top K generalized eigenvectors corresponding to positive generalized eigenvalues , and perform K means algorithm in the eigenspace .
∗
Since our model encodes constraints as a degree of belief , inconsistent constraints in Q will not corrupt our algorithm . Instead , they are enforced implicitly by the effort of improving uT Qu . Note that if the constraint matrix Q is generated from the partial label matrix X , then the constraints in Q will always be consistent .
The runtime of our algorithm is dominated by that of the generalized eigendecomposition . In other words , the complexity of our algorithm is on a par with that of unconstrained spectral clustering in big O notation , which is O(kN 2 ) , N to be the number of data instances and k to be the number of eigenpairs we need to compute .
5 . EMPIRICAL STUDY
In this section , we applied our method on several realworld data sets , with comparison to existing techniques . Our goal is to answer the following questions :
1 . Does our method generate semantically meaningful re
123456−15−1−05005115123456−15−1−05005115123456−15−1−05005115 ( a ) Original image
( b ) No constraints
( c ) Constraint Set 1
( d ) Constraint Set 2
Figure 3 : Segmentation results of the elephant image ( best viewed in color ) . The images are reconstructed based on the relaxed cluster indicator u . Pixels that are closer to the red end of the spectrum belong to one segment and blue the other . The labeled pixels are as bounded by the black and white rectangles .
∗
( a ) Original image
( b ) No constraints ( c ) Constraint Set 1 ( d ) Constraint Set 2
Figure 4 : Segmentation results of the face image ( best viewed in color).The images are reconstructed based on the relaxed cluster indicator u . Pixels that are closer to the red end of the spectrum belong to one segment and blue the other . The labeled pixels are as bounded by the black and white rectangles .
∗ pixels ) and the two elephants and the ground ( blue pixels ) . This is not satisfying in the sense that it failed to isolate the elephants from the background ( the sky and the ground ) . To correct this , we introduced constraints by labeling two 5 × 5 blocks to be 1 ( as bounded by the black rectangles in Fig 3(c) ) : one at the upper right corner of the image ( the sky ) and the other at the lower right corner ( the ground ) ; we also labeled two 5 × 5 blocks on the heads of the two elephants to be −1 ( as bounded by the white rectangles in Fig 3(c) ) . Then we used Eq ( 16 ) to generate the constraint matrix Q : a ML was added between every pair of pixels with the same label and a CL was added between every pair of pixels with different labels . The parameter fi was set as : fi = max × vol(G ) × ( 0:5 + 0:4 × # of constraints
) ; ( 17 )
N 2 where max is the maximum eigenvalue of ¯Q . In this way , fi is always between 0:5maxvol(G ) and 0:9maxvol(G ) , and it will gradually increase as the number of constraints increases . From Fig 3(c ) we can see that with the help of user supervision , our method successfully isolated the two elephants ( blue ) from the background , which is the sky and the ground ( red ) . Note that our method achieved this with very simple labeling : four squared blocks .
To show the flexibility of our method , we tried a different set of constraints on the same elephant image with the same parameter settings . This time we aimed to separate the two elephants from each other , which is impossible in the unconstrained case because the two elephants are not only similar in color ( grayscale value ) but also adjacent in space .
Again we used two 5 × 5 blocks ( as bounded by the black and white rectangles in Fig 3(d) ) , one on the head of the elephant on the left , labeled to be 1 , and the other on the body of the elephant on the right , labeled to be −1 . As shown in Fig 3(d ) , our method cut the image into two parts with one elephant on the left ( blue ) and the other on the right ( red ) , just like what a human user would do .
Similarly , we applied our method on a human face image as shown in Fig 4(a ) . The unconstrained spectral clustering failed to isolate the human face from the background ( Fig 4(b) ) . This is because the tall hat breaks the spatial continuity between the left side of the background and the right side . Then we labeled two 5 × 3 blocks to be in the same class , one on each side of the background . As we intended , our method assigned the background of both sides into the same cluster and thus isolated the human face with his tall hat from the background(Fig 4(c) ) . Again , this was achieved simply by labeling two blocks in the image , which covered about 3 % of all pixels . Alternatively , if we labeled a 5× 5 block in the hat to be 1 , and a 5× 5 block in the face to be −1 , the resultant clustering will isolate the hat from the rest of the image ( Fig 4(d) ) .
5.2 Clustering UCI Benchmarks
Next we evaluated our method ( CSP ) by clustering benchmark data sets from the UCI Archive [ 1 ] . We chose six different data sets with class label information , namely Hepatitis , Iris , Wine , Glass , Ionosphere and Breast Cancer Wisconsin ( Diagnostic ) . We performed 2 way clustering simply by partitioning the optimal cluster indicator according to sign :
51015202530354045510152025305101520253035404551015202530510152025303540455101520253051015202530354045510152025305101520253051015202530354045510152025305101520253035404551015202530510152025303540455101520253051015202530354045 Table 2 : The UCI benchmarks
#Instances #Attributes
Identifier Hepatitis Iris Wine Glass Ionosphere WDBC
80 100 119 214 351 569
19 4 13 9 34 30
Table 3 : The newsgroup data
Group Label
#Instances
3 4 5 9 10 11 composms windowsmisc compsysibmpchardware compsysmachardware rec.motorcycles recsportbaseball recsporthockey
53 60 59 65 64 51 positive entries to one cluster and negative the other . We removed the setosa class from the Iris data set , which is the class that is known to be well separately from the other two . For the same reason we removed Class 1 from the Wine data set , which is well separated from the other two . We also removed data instances with missing values . The statistics of the data sets after preprocessing are listed in Table 2 .
For each data set , we computed the affinity matrix using the RBF kernel . We randomly generated constraints using the groundtruth label information . For each round we randomly chose a certain percentage of data instances and assumed that their labels are known ; then we generated the constraint matrix Q following Eq ( 16 ) . Note that when no constraint was generated , the unconstrained spectral clustering was performed . The quality of the clustering results was measured by Rand index [ 16 ] , which tells how similar our clustering is as compared to the groundtruth class labels . The only parameter in our method , fi , was set according to Eq ( 17 ) throughout the experiments .
We compared our method to two existing techniques . The first one ( ModAff ) is from [ 8 ] , which modifies the affinity matrix directly : when a ML constraint is given , it changes the corresponding entries in A to 1 ; and 0 for CL constraint . Then unconstrained spectral clustering is performed on the new graph Laplacian . The second one ( GrBias ) is from [ 20 , 21 ] , which encodes partial grouping information as a projection matrix . Note that the GrBias method can only accommodate ML constraints . We also implemented the subspace trick in [ 5 ] and the affinity propagation algorithm in [ 11 ] . We did not present results from those two techniques because overall they did not perform as well as the two we presented .
We report the Rand index of all methods against the percentage of known labels ( from 0 to 100 % , by 10 % increment ) so that we can see how the quality of clustering varies when more constraints are added in . Note that at each stop , we randomly generate 100 sets of constraints and reported the mean , maximum and minimum Rand index of the 100 random trials , as shown in Fig 5 . From the results we can tell :
• Our method consistently and significantly outperforms unconstrained spectral clustering ( whose Rand index is the one reported at x = 0 ) . We can also notice the performance boost from x = 0 to x = 10 % , which means that our method can effectively improve the clustering result with a small number of constraints .
• Our method outperforms the two competitors in most cases . And more importantly , the performance of our method is much more stable over different data sets , different number of constraints , and different sets of randomly generated constraints . As a contrast , the GrBias produced good results on certain data sets with certain configurations , but bad results in other cases . One possible reason , among many others , might be that since it only uses ML constraints , it will not help much in cases where CL constraints are necessary to improve the results .
• Unlike the GrBias method , the performance of our method increases consistently with the number of given constraints , which indicates that our method can effectively use constraints to improve the clustering results . ( Similar observation was made in [ 8 ] that the performance of GrBias may drop when more constraints are provided . )
5.3 Results with Degree of Belief Constraints Lastly , we show that our method can effectively incorporate degree of belief constraints , which may carry richer information that binary constraints cannot accommodate . To make our case , we encode hierarchical ( multiple ) labels into degree of belief constraints , and see if our method can recover the hierarchical structure of the data set ( only ) based on given constraints . We chose a subset of the 20 Newsgroup data set1 , as shown in Table 3 . We randomly sampled about 350 documents from 6 groups . At the highest level , those groups belong to two topics : computer ( comp ) and recreation ( rec ) . We used these two topics as groundtruth labels when computing Rand index .
To generate binary constraints , we added a ML link between two articles within the same group ; CL between two articles from different groups . To generate degree of belief constraints , we converted the group titles into multiple labels , eg recsportbaseball became rec , sport , and baseball . Then given two articles , we compared the number of common labels they shared . For example , if those two articles came from the same group , we set the corresponding entry in Q to +3 ; if one was from recsportbaseball and the other from recsporthockey , we set the corresponding entry to +2 ; if they did not share any label at all , we set the entry to −1 ( recall that in our model , 0 does not mean CL but no constraints given ) .
After the constraints were generated , we performed our method with degree of belief ( CSP DoB ) and binary constraints ( CSP Binary ) , respectively . Our task was to cluster the data set into 6 clusters , and then compute the Rand index with respect to the two topic groundtruth ( comp and rec ) . As shown in Fig 6 , since the binary constraints only captured the group level relationship , the top level class information ( comp vs . rec ) cannot be recovered by using binary constraints . As a contrast , the degree of belief constraints preserved the hierarchical structure of the data set . Hence , although the number of clusters were assigned to be 6 , our
1http://peoplecsailmitedu/jrennie/20Newsgroups/
( a ) Hepatitis
( b ) Iris
( c ) Wine
( d ) Glass
( e ) Ionosphere
( f ) WDBC
Figure 5 : Clustering results on UCI benchmarks . The Rand index over different percentage of known labels is reported ( mean , maximum and minimum over 100 random constraint sets ) . lem and can be solved in closed form with polynomial time , through generalized eigenvalue decomposition . Our method introduces a user specified parameter fi , which serves as a tradeoff factor between the structure as defined by the original graph Laplacian and that by the constraint matrix .
Empirical results justified the effectiveness of our method . We used image segmentation to demonstrate that our method can produce meaningful and intuitive clustering with various sets of constraints . We also evaluated our method on benchmark data sets . We showed that our method can improve the quality of clustering by taking in both binary and real valued constraints over unconstrained spectral clustering . We also showed the advantage of our approach over existing techniques .
7 . ACKNOWLEDGMENTS
The authors gratefully acknowledge support of this re search from the NSF ( IIS 0801528 ) and ONR ( N000140910712 P00001 ) .
8 . REFERENCES [ 1 ] A . Asuncion and D . Newman . UCI machine learning repository , 2007 .
[ 2 ] S . Basu , I . Davidson , and K . Wagstaff , editors .
Constrained Clustering : Advances in Algorithms , Theory , and Applications . Chapman & Hall/CRC , 2008 .
[ 3 ] T . Coleman , J . Saunderson , and A . Wirth . Spectral clustering with inconsistent advice . In ICML , pages 152–159 , 2008 .
[ 4 ] I . Davidson and S . S . Ravi . Intractability and clustering with constraints . In ICML , pages 201–208 , 2007 .
[ 5 ] T . De Bie , J . A . K . Suykens , and B . De Moor .
Learning from general label constraints . In SSPR/SPR , pages 671–679 , 2004 .
Figure 6 : Clustering results on the newsgroup data set , with binary and degree of belief constraints . method with degree of belief constraints tended to merge the articles into 2 clusters : one corresponding to comp and the other rec . The resultant clustering successfully recovered the original hierarchical information , as indicated by the steadily increasing Rand index ( CSP DoB ) in Fig 6 .
6 . CONCLUSION
This paper addresses the problem of constrained spectral clustering . While constrained K means clustering has been well studied , existing techniques on constrained spectral clustering are limited because they are primarily focused on Must Link and Cannot Link constraints , which could be both insufficient and inflexible in practice . To overcome this , we propose a generalized framework for constrained spectral clustering . Our approach is more flexible in the sense that we can deal with both binary constraints and real valued degree of belief constraints . Our approach is also more principled since it can be considered a natural extension to the original objective function of unconstrained spectral clustering , as a cut on a labeled graph . Our objective function is formulated as a constrained optimization prob
020%40%60%80%100%05060708091Percentage of Known LabelsRand Index CSPModAffGrBias020%40%60%80%100%05060708091Percentage of Known LabelsRand Index CSPModAffGrBias020%40%60%80%100%05060708091Percentage of Known LabelsRand Index CSPModAffGrBias020%40%60%80%100%0405060708091Percentage of Known LabelsRand Index CSPModAffGrBias020%40%60%80%100%0405060708091Percentage of Known LabelsRand Index CSPModAffGrBias020%40%60%80%100%05060708091Percentage of Known LabelsRand Index CSPModAffGrBias020%40%60%80%100%0405060708091Percentage of Known LabelsRand Index CSP−DoBCSP−Binary [ 6 ] P . Drineas , A . M . Frieze , R . Kannan , S . Vempala , and
V . Vinay . Clustering large graphs via the singular value decomposition . Machine Learning , 56(1 3):9–33 , 2004 .
[ 7 ] X . Ji and W . Xu . Document clustering with prior knowledge . In SIGIR , pages 405–412 , 2006 .
[ 8 ] S . D . Kamvar , D . Klein , and C . D . Manning . Spectral learning . In IJCAI , pages 561–566 , 2003 .
[ 9 ] H . Kuhn and A . Tucker . Nonlinear programming .
ACM SIGMAP Bulletin , pages 6–18 , 1982 .
[ 10 ] Z . Li , J . Liu , and X . Tang . Constrained clustering via spectral regularization . In CVPR , pages 421–428 , 2009 .
[ 11 ] Z . Lu and M . ´A . Carreira Perpi˜n´an . Constrained spectral clustering through affinity propagation . In CVPR , 2008 .
[ 12 ] D . Martin , C . Fowlkes , D . Tal , and J . Malik . A database of human segmented natural images and its application to evaluating segmentation algorithms and measuring ecological statistics . In Proc . 8th Int’l Conf . Computer Vision , volume 2 , pages 416–423 , July 2001 .
[ 13 ] A . Y . Ng , M . I . Jordan , and Y . Weiss . On spectral clustering : Analysis and an algorithm . In NIPS , pages 849–856 , 2001 .
[ 14 ] J . Shi and J . Malik . Normalized cuts and image segmentation . IEEE Trans . Pattern Anal . Mach . Intell . , 22(8):888–905 , 2000 .
[ 15 ] U . von Luxburg . A tutorial on spectral clustering .
Statistics and Computing , 17(4):395–416 , 2007 .
[ 16 ] K . Wagstaff and C . Cardie . Clustering with instance level constraints . In ICML , pages 1103–1110 , 2000 .
[ 17 ] F . Wang , C . H . Q . Ding , and T . Li . Integrated KL ( K means Laplacian ) clustering : A new clustering approach by combining attribute data and pairwise relations . In SDM , pages 38–48 , 2009 .
[ 18 ] S . White and P . Smyth . A spectral clustering approach to finding communities in graph . In SDM , 2005 .
[ 19 ] Q . Xu , M . desJardins , and K . Wagstaff . Constrained spectral clustering under a local proximity structure assumption . In FLAIRS Conference , pages 866–867 , 2005 .
[ 20 ] S . X . Yu and J . Shi . Grouping with bias . In NIPS , pages 1327–1334 , 2001 .
[ 21 ] S . X . Yu and J . Shi . Segmentation given partial grouping constraints . IEEE Trans . Pattern Anal . Mach . Intell . , 26(2):173–183 , 2004 .
