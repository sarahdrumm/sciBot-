Handling Very Large Numbers of Association Rules in the
Analysis of Microarray Data
Alexander Tuzhilin
Department of Information Systems
Stern School of Business
New York University
44 West 4th St , New York , NY 10012
Gediminas Adomavicius
Department of Information and Decision Sciences
Carlson School of Management
University of Minnesota
321 19th Av South , Minneapolis , MN 55455 atuzhili@sternnyuedu
ABSTRACT The problem of analyzing microarray data became one of important topics in bioinformatics over the past several years , and different data mining techniques have been proposed for the analysis of such data . In this paper , we propose to use association rule discovery methods for determining associations among expression levels of different genes . One of the main problems related to the discovery of these associations is the scalability issue . Microarrays usually contain very large numbers of genes that are sometimes measured in 10,000s . Therefore , analysis of such data can generate a very large number of associations that can often be measured in millions . The paper addresses this problem by presenting a method that enables biologists to evaluate these very large numbers of discovered association rules during the post analysis stage of the data mining process . This is achieved by providing several rule evaluation operators , including rule grouping , filtering , browsing , and data inspection operators , that allow biologists individual gene regulation patterns at a time . By iteratively applying these operators , biologists can explore a significant part of all the initially generated rules in an acceptable period of time and thus answer biological questions that are of a particular interest to him or her . To validate our method , we tested our system on the microarray data pertaining to the studies of environmental hazards and their influence of gene expression processes . As a result , we managed to answer several questions that were of interest to the biologists that had collected this data . to validate multiple
Keywords Bioinformatics , analysis of microarray data , association rules , post processing of discovered rules , expert driven rule validation , rule filtering , rule grouping . gedas@umn.edu
1 . INTRODUCTION One of the major goals of molecular biology is to study how different genes regulate each other , and a major research effort is targeted towards understanding and discovery of gene regulation patterns . Over the past 10 years , the microarray method [ 26 ] became very popular for these discovery purposes . This method allows biologists to monitor behavior of large number of genes on a single microarray chip ( eg , up to 40,000 genes [ 8 ] ) in order to profile gene expressions under various environmental conditions , therapeutic agents , types of tissues , and other factors affecting gene expressions . Typically , biologists would generate a sample of tests using the microarray method , where a single test would contain information on the genes that are being profiled , and the sample size would range from a few dozens to a few hundred or even thousands of tests . Then biologists need to analyze these samples to discover gene regulation patterns . For example , one may discover that whenever gene X is upregulated and gene Y is downregulated , then gene Z is usually also upregulated . Many bioinformatics and data mining researchers have been working on applying data mining methods to the analysis of microarray data . In particular , clustering methods , first proposed for this problem in [ 11 ] , group genes into clusters that exhibit “ similar ” types of behavior in the experiments . Also , Tamayo et al [ 30 ] used Self Organizing Maps to organize human genes into biologically relevant clusters with respect to the problem of hematopoietic differentiation . The clustering methods allow biologists to design experiments helping them to understand further the relationships among the genes . However , they do not provide deep insights into specific relationships among the genes and understand underlying biological processes in the cell . In order to identify previously unknown functions of the genes , Brown et al [ 9 ] proposed to use Support Vector Machines ( SVMs ) that build classifiers predicting gene functions . One of the distinctive features of SVM is that they learn classifiers using both positive and negative examples . In cases when it is difficult to collect negative examples , Pavlidis et al [ 24 ] proposed a new probabilistic method using techniques borrowed from biological sequence analysis . In addition , Kurra et al [ 17 ] described a classification method to discriminate two types of leukemia using heuristic feature selection and a certain variant of perceptron based classification method that separates these two classes of leukemia . Also , Friedman et al [ 12 ] used Bayesian networks to analyze gene expression data and to discover and describe interactions between genes . Furthermore , Barash and Friedman [ 4 ] used context specific Bayesian clustering method to help in understanding the connections between transcription the factors and functional classes of genes . Moreover , Bicciato et al [ 7 ] presented a neural network based method to find relationships among different genes involved in major metabolic pathways and to relate specific genes to different classes of leukemia . Since gene expression data is often represented in the binary or ternary form ( ie , gene expressions are up or down regulated [ 19 ] , or unchanged , as will be discussed in the next section ) and since biologists often look for interactions among various genes , it is natural to use association rules [ 2 ] to represent interactions among multiple genes . Besides providing the relationship between gene expression profiles , association rules also provide the direction of the relationship unlike other techniques , such as clustering and classification . Some initial work on using association rules to capture these interactions has been reported in [ 6 ] and [ 16 ] . While Berrar et al [ 6 ] used the standard association rule discovery algorithm ( Apriori [ 3] ) , Kotala et al [ 16 ] introduced a new method for discovering associations in the microarray data that is based on Peano count trees ( P Trees ) . However , association rule methods face certain challenges when applied to microarray data that have not been addressed in [ 6 ] and [ 16 ] . Since microarray data has a very large number of variables ( ie , genes are often measured in thousands ) , association rule discovery methods tend to generate very large numbers of rules ( often measured in hundreds of millions or even billions ) . Although some of these rules contain very important biological relationships among different genes , other rules often represent spurious , irrelevant and already known relationships . Therefore , the challenge is to be able to explore and analyze very large numbers of biological relationships ( rules ) in an effective manner and to separate “ good ” relationships from the “ bad . ” One way to deal with the combinatorial explosion problem is to specify tight constraints on the types of association rules that are of interest to the biologists using constraint based mining methods such as the ones proposed in [ 5 , 25 , 28 ] , including the selection of only particular gene types to be used as inputs for the association rule generation algorithms . For example , Berrar et al [ 6 ] followed this strategy and restricted the set of genes used for the generation of association rules from 1500 to only 20 and the number of drugs from 1500 to only 20 . However , restricting the problem to only 20 genes and 20 drugs created a potentially very limiting situation of leaving out important variables and , therefore , missing important relationships among the genes because some of the genes involved in these relationships might be omitted . This paper addresses the challenge of analyzing very large numbers of discovered rules in the post processing stage of the data mining process by providing the biologist with a set of tools necessary for the analysis of very large numbers of association rules generated by standard association rule generation algorithms ( such as Apriori [ 3 ] ) on the microarray data . These tools leverage the knowledge about genomics that biologists have and let biologists play a central role in the discovery process through close interactions between the tools and the biologist . By utilizing these tools in an interactive and exploratory manner , the biologist can identify and focus on really important rules and separate them from the irrelevant , trivial or already known relationships among the genes . The rest of the paper is organized as follows . In Section 2 we formulate the gene regulation pattern discovery and post analysis problem . In Section 3 we present rule exploration methods to the expression level in interested in how gene expressions vary address this problem . In Section 4 we present a case study that tested our methods on some microarray data . 2 . PROBLEM FORMULATION One way to understand how different genes regulate each other is to measure gene expression levels [ 19 ] produced by a cell using microarray technologies [ 26 ] . Typically , biologists conduct a number of experiments measuring gene expression levels of a cell or a group of cells under various conditions affecting these expression levels . Biologists are interested in how different gene expressions change depending on the type of a tissue , age of the organism , therapeutic agents , and environmental conditions . From the computational point of view , is represented as a real number . Therefore , the result of a single experiment is an array of N real numbers . Moreover , the set of genes used in microarrays is determined by a biologist and remains the same for all the experiments . Therefore M microarray experiments result in an M×N matrix {xij}i=1,M , j=1,N , where xij represents the expression level of gene j in experiment i . Depending on a particular biological application , the number of experiments M can vary from a few dozens to several hundreds or even thousands , and the number of genes N can vary from several hundred to tens of thousands ( eg , [ 8 ] reports putting 40,000 genes on a single microarray chip ) . Moreover , the biologists are more these experiments relative to normal expression levels in an organism , rather than in their absolute values . Therefore , biologists typically normalize expression levels xij according to certain normalization criteria and the results are discretized according to whether they exceed certain predetermined thresholds or not . This process results in a discretized M×N matrix {rij}i=1,M , j=1,N where the values rij are of three different levels : unchanged ( denoted as # ) , upregulated [ 19 ] ( denoted as ↑ ) , and downregulated [ 19 ] ( denoted as ↓ ) . Certainly , one may choose more than 3 levels of gene expression level discretization . However , in many applications biologists assume these three levels of discretization , and we will follow this assumption in the paper . Given normalized and discretized gene expressions {rij}i=1,M , j=1,N , we can discover gene regulation relationships in the form of association rules . In particular , an experiment i can be represented as a transaction [ 2 ] consisting of N items ( genes ) {rij}j=1,N , each item rij taking one of the three values ( #,↑,↓ ) . Given this data , we want to find all the association rules with specified levels of confidence and support and let the biologists select only these rules that are interesting to them from a biological point of view . As mentioned earlier , one of the problems with this approach lies in large numbers of associations generated by rule discovery methods . Depending on the number of genes N in the gene expression matrix M×N and on the particular values of confidence and support , the number of discovered association rules can be measured in billions . As mentioned in Section 1 , one can impose constraints on the types of generated association rules , as was done in [ 5 , 25 , 28 ] . However , as was also explained in Section 1 , we either ( 1 ) still may end up with a very large number of discovered association rules , or ( 2 ) impose overly restrictive constraints on the data and many potentially important biological relationships may be missed . In Section 3 we present an approach that addresses this problem by providing a biologist with a set of tools for exploring very large numbers of discovered association rules in an iterative and systematic manner . to analyze very large numbers of
3 . RULE DISCOVERY In this section we present rule post processing methods allowing biologists regulation relationships among genes and select those that are of interest to them . The problem of post analysis of large numbers of discovered rules using filtering methods has been studied before in the KDD literature [ 1 , 13 , 15 , 20 , 22 , 27 , 28 , 32 ] , and we utilize some of this work in our approach . In particular , Klemettinen et al [ 15 ] and Imielinski et al [ 13 ] present the methods for the users to specify classes of patterns in which they are interested by providing pattern templates expressed in a certain specification language . The work of Tuzhilin and Liu [ 32 ] extends the work of [ 13 , 15 ] by presenting a template language that is based on a full set of first order logic expressions defined on multiple rulebases . Although the specification languages presented in [ 13 ] , [ 15 ] , and [ 32 ] differ from each other , they have one common theme : all of them are based on logical constraints that filter only the rules of interest to the user . We took the templates from [ 13 , 15 ] as a foundation and extended them to the biological domain , as described in Section 3.2 , by adding the constructs pertaining to genes and their families . Another type of filtering operator deals with the discovery of unexpected rules and various types of this operator are presented in [ 20 , 23 , 29 ] . In its most general form , this filtering operator takes a set of beliefs ( or previously discovered rules ) and returns all newly discovered rules that are unexpected with respect to the set of beliefs , where unexpectedness is defined differently in all the three references . We adapted the concept of unexpectedness , as introduced in [ 20 , 23 , 29 ] , to the genomics domain and introduced the CONTRADICT operator that identifies all the rules from the rule base that “ contradict ” a user specified template . We present this operator in Section 32 Finally , in [ 1 ] we used filtering operators to filter customer profile rules in personalization applications . In this paper , we adapt some of the filtering methods from [ 1 ] to the genomics domain and to the analysis of microarray data . 3.1 Post Processing of Discovered Rules Post processing of discovered gene regulation relationships is an iterative and interactive process in which the biologist selects specific rule exploration operators , such as rule filtering , rule grouping and other rule analysis operators and applies them to the set of discovered gene regulation relationships . As a result , the biologist can examine groups of relationships at a time , decide which groups are interesting and worth further exploration , which groups of rules are irrelevant , trivial , or already known , and discard these relationships from further consideration . By selecting these rule exploration operators in an interactive manner , the biologist can quickly focus on the rules that are of interest to him or her . We will further elaborate on this in Section 4 , when we present the case study . In the rest of this section , we will describe particular rule exploration operators , such as filtering , grouping and others . 3.2 Rule Filtering This operator allows the biologist to impose various constraints on the syntactic structure of the discovered biological rules using templates in order to reduce the number of rules to be explored . In other words , biologists have the ability to “ focus ” their analysis and exploration efforts only on the subset of rules that is of a specific interest to them . Rule templates filter biological rules from the total set of discovered rules by specifying various restrictions on the combinations of genes and their expression levels that can appear in the body and the head of the rule . These templates can be specified using the following notation : RulePart HAS Quantifier OF C1 , C2 , … , CN [ ONLY ] Here RulePart can be BODY , HEAD , or RULE , and it specifies the part of the rule ( antecedent , consequent , or the whole rule , respectively ) on which the constraint is being placed . C1 , C2 , … , CN is a comparison set , ie , it represents a list of genes ( possibly with the discovered rules will be compared . Each element Ci of this list can be one of the following : • A gene , eg , G17 ; • A gene with a particular expression level , eg , G17↑ ; • A gene with a list of allowable or unallowable levels ) against which their expression expression levels , eg , G17 = {↑ , # } or G17 ≠ {↓} ;
• A group ( or category ) of genes1 , represented by the name of the gene category , eg , [ DNA_Repair ] . We use square brackets with category names to differentiate between the category names and gene names ;
• A group of genes with an expression level , eg ,
[ DNA_Repair]↑ ;
• A group of genes with a list of allowable or unallowable expression levels , eg , [ DNA_Repair ] = {↑ , # } or [ DNA_Repair ] ≠ {↓} .
Quantifier is a keyword or an expression that specifies how many genes specified by the C1 , C2 , … , CN list have to be contained in RulePart in order to be accepted by this template . We use parentheses to enclose the quantifier expression . Quantifier can be one of the following :
•
Either ( ALL ) , ( ANY ) , or ( NONE ) , specifying the number of genes ( all of them , at least one of them , none of them , respectively ) from C1 , C2 , … , CN the RulePart must have ;
• A numeric value ; eg , ( 2 ) , which specifies that a rule must have exactly 2 genes from the comparison set ;
• A range of numeric values ; eg , ( 1 3 ) , which specifies that a rule must have 1 , 2 , or 3 genes from the comparison set ;
• A list of numeric values and/or ranges ; eg , ( 1 , 3 , 5 7 ) , which specifies that a rule must have either 1 , 3 , 5 , 6 , or 7 genes from the comparison set in order to be accepted by this template ; keywords ALL and NONE ( but not ANY ) can also be present in this list , eg , ( NONE , 2 , 3 ) or ( 1 , 3 ALL ) .
1 Genes can often be categorized or grouped according to various
( standardized ) gene categories , eg , by their function .
Finally , an optional keyword ONLY can be used to indicate that RulePart can have only the genes that are present in the C1 , C2 , … , CN list . Some examples on how to use templates to filter biological rules are provided below . 1 . All rules that contain at least one of the following genes : G1 ,
G5 , and G7 : RULE HAS ( ANY ) OF G1 , G5 , G7 For example , rule G1↑ ⇒ G3# matches this template , and rule G2↑ ⇒ G3↑ does not .
2 . All rules that contain some of the genes G1 , G5 , G7 , but no other genes : RULE HAS ( ANY ) OF G1 , G5 , G7 ONLY For example , rule G1↑ ⇒ G5↑ matches this template , and rule G1↑ ⇒ G3# does not .
3 . All rules that contain exactly one of the following genes : G1 , G5 , G7 . Moreover , only rules with upregulated G1 , downregulated G5 , and upregulated or downregulated ( but not unchanged ) G7 are acceptable : RULE HAS ( 1 ) OF G1↑ , G5↓ , G7={↑,↓ } For example , rule G1↑ ⇒ G3# matches this template , and rule G1↑ ⇒ G7↑ does not .
4 . All rules that contain either both G1 and G2 in the body
( antecedent ) or none of them : BODY HAS ( NONE , ALL ) OF G1 , G2 For example , rule G5↑ ⇒ G3# matches this template , and rule G1↑ ⇒ G7↑ does not .
5 . All rules that contain a DNA repair gene ( ie , a gene that belongs to the DNA repair group of genes ) in the head ( consequent ) : HEAD HAS ( ANY ) OF [ DNA_Repair ]
6 . All rules that contain exactly 3 genes in the body . In addition , all of them must be upregulated : BODY HAS ( 3 ) OF [ ALL_GENES]↑
In our template based rule filtering operator , each of the above templates can be used individually or several templates can be combined into one using Boolean operations AND , OR , and NOT . The matching semantics of such template combinations and the precedence of NOT , AND , and OR operators are defined in the standard way . We now present some examples of composite templates that use these Boolean operations . 7 . All rules that have up to 3 DNA repair genes and no other genes in the body , as well as gene G7 in the head of the rule : BODY HAS ( 1 3 ) OF [ DNA_Repair ] ONLY AND
HEAD HAS ( ANY ) OF G7
8 . All rules that have exactly 2 genes in the body and at least one of them belongs either to DNA repair or to Transcription category : BODY HAS ( 2 ) OF [ ALL_GENES ] AND BODY HAS ( ANY ) OF [ DNA_Repair ] , [ Transcription ]
9 . All rules that have no DNA repair genes , but 2 or more upregulated Transcription genes present : RULE HAS ( NONE ) OF [ DNA_Repair ] AND RULE HAS ( 2 ALL ) OF [ Transcription]↑
Since the filtering operator is usually applied to a very large number of rules , we implemented it in a very efficient manner using hash based and lookup table based data structures for storing rule templates . Using our implementation , the filtering algorithm runs in the time linear in the total size of the rules to be filtered . To make it more intuitive for biologists , we also provide a number of predefined operators ( ie , macros ) that directly support specific questions that biologists may ask . For example , a biologist may want to explore whether one group of genes influences ( implies ) another group of genes and vice versa . We provide a macro template
POSSIBLE_INFLUENCE(GeneSet1 , GeneSet2 ) that returns all the rules that contain some genes from GeneSet1 in the body ( and possibly some other genes ) and a gene from GeneSet2 in the head or vice versa , some genes from GeneSet2 in the body ( and possibly some other genes ) and a gene from GeneSet1 in the head . Using our template specification language , this macro template was defined as : POSSIBLE_INFLUENCE(GeneSet1 , GeneSet2 ) = BODY HAS ( ANY ) OF GeneSet1 AND
HEAD HAS ( ANY ) OF GeneSet2 OR
BODY HAS ( ANY ) OF GeneSet2 AND
HEAD HAS ( ANY ) OF GeneSet1
Consider the following template :
POSSIBLE_INFLUENCE( {G1 , G2} , {G3 , G4} )
BODY HAS ( ALL ) OF GeneExprSet AND HEAD HAS ( ALL ) OF G ≠ { ExpLevel }
Then , the rule G1↑ & G7↑ ⇒ G3↑ matches this template , and the rule G1↑ ⇒ G2↑ does not . Another example of a macro template is the CONTRADICT operator , that allows the biologist to gather all the rules that “ contradict ” a certain hypothesis in the sense defined in [ 20 , 23 , 29 ] . This macro template was defined as follows : CONTRADICT(GeneExprSet , G , ExpLevel ) =
That is , if a biologist believes that a certain set of gene expressions GeneExprSet ( possibly with some other genes ) induces a particular gene G to have a certain expression level ExpLevel , the operator CONTRADICT can be used to check if there are any rules that contradict this belief , ie , if there are any rules where GeneExprSet ( possibly with some other genes ) induces gene G to have the expression level other than ExprLevel . Assume , for example , that we have a template :
That is , we are assuming ( eg , based on previous biological knowledge ) that whenever G1 and G2 are both upregulated , G4 should be downregulated . The above template would match any rule that includes G1↑ and G2↑ in its body and G4↑ or G4# in its head , eg , the rule G1↑ & G2↑ & G23↓ ⇒ G4↑ . In summary , we took previously proposed template based rule filtering approaches , such as [ 1 , 13 , 15 ] , and enhanced them with
CONTRADICT( {G1↑ , G2↑} , G4 , ↓ ) biologically relevant constructs arising from idiosyncrasies of the genomics domain , such as gene hierarchies , specific values of gene expression levels in filters , and the genomics specific macros , including the CONTRADICT macro template . 3.3 Rule Grouping There can be many “ similar ” rules among the discovered rules , and it would be useful for biologists to be able to explore and analyze all these similar rules together rather than individually for several reasons . First , instead of potentially dealing with millions of rules , a biologist can be provided with a much smaller number of rule classes ( groups ) , which is easier to handle from the scalability point of view . Second , the ability to group the discovered rules provides a biologist with a high level overview of the rules and with the capability of the exploratory top down rule analysis of the rules . Therefore , it is important to provide methods that could group discovered rules into classes , according to some similarity criteria , that biologists could subsequently explore and analyze . In this section , we present a similarity based rule grouping method for this purpose . The problem of clustering similar rules was first studied in the KDD community in [ 18 ] . In particular , Lent et al [ 18 ] clusters discovered association rules in the two dimensional space using heuristic methods based on geometric properties of twodimensional grids . This approach is restricted only to the rules that have two fixed attributes ( both of them discrete and ordered ) in their antecedents , although some possibilities for handling higher dimensional data are also outlined in [ 18 ] . A different approach to grouping association rules that lifts the twodimensional restriction is presented in [ 33 ] , where arbitrary association rules are considered that have any number of numeric and categorical attributes in their bodies . The rules with similar structures can be grouped by merging adjacent intervals of numeric values in a bottom up manner by maximizing the interestingness of the resulting groups of rules . The two approaches [ 18 ] and [ 33 ] would work well for medium sized exploration problems having moderately large numbers of rules ( eg , tens of thousands ) . However , in large scale applications , such as microarray data analysis where millions of rules can be generated , the two approaches would still produce too many clusters to be of practical use . Another approach that is related to association rule grouping is presented in [ 31 ] , where the distance between two association rules is defined as the number of transactions on which the two rules differ . Using this distance measure , Toivonen et al [ 31 ] group all the rules into appropriate clusters . One of the limitations of this approach lies in that the distance measures selected for rule clustering are somewhat arbitrary . Moreover , it is not clear how to describe concisely the rule cluster to the end user since rules belonging to the same cluster may have substantially different structure . Still another approach related to rule grouping is presented in [ 21 ] , where a method for extracting the most important and representative rules ( the paper refers to them as “ direction setting rules ” ) from the large number of discovered rules . In our previous research [ 1 ] , we described a similarity measure for grouping customer profile in personalization applications . This measure is based on the concept of attribute hierarchies and allows to group profiling rules of different customers based on how similar characteristics of these customers rules are . In this paper , we propose to use a variant of this rulegrouping method to explore and analyze the association rules discovered in the microarray data . In particular , we introduce a gene hierarchy that is specified by the domain expert in a form of a tree ( some of these hierarchies are standardized already by biologists and he/she only needs to select the right one ) . Moreover , genes can be grouped in several different ways , and the biologist needs to select the most appropriate grouping of genes for the problem at hand . For example , one can organize genes based on their functions , eg , several genes of the yeast ( S.cerevisiae ) are categorized by the biologists as having the DNA repair function . Therefore , the leaves of the attribute hierarchy represent all the genes from the microarray dataset to which rule discovery methods were applied , ie , all genes that can potentially be present in the discovered rules . The non leaf nodes in the tree are obtained by combining several lower level nodes ( genes ) into one parent node ( functional category of the genes ) . For instance , Figure 1 presents an example of such a hierarchy , where genes G1 , G2 , and G3 are combined into functional category F1 and genes G4 and G5 are combined into functional category F2 . Then , functional categories F1 and F2 are further combined into a category ALL that represents all genes and corresponds to the root node of the tree .
G1 G2 G3
G4 G5
ALL
F2
F1
Figure 1 . An example of a gene hierarchy .
Given a gene hierarchy , the discovered rules are grouped by specifying the gene aggregation level in this hierarchy . A gene aggregation level is defined by the subset of all the nodes ( leaf and non leaf ) of the gene hierarchy , such that for every path from a leaf node to the root , exactly one node on such path belongs to this subset . Figure 2 presents several examples of gene aggregation levels . As mentioned earlier , the gene aggregation level is usually provided by a biologist .
G1 G2 G3
G1 G2 G3
G4 G5
G4 G5
ALL
F1
( b )
ALL
( a )
F1
F2
F2
Figure 2 . Examples of different gene aggregation levels .
After the rule aggregation level is specified , the discovered rules are aggregated by performing syntactic following the transformation : individual genes and their values ( expression levels ) in the rules are replaced with the corresponding node in the specified aggregation level . Consider , for example , the rule G1↑ & G2↓ ⇒ G5↓ that indicates that whenever gene 1 is upregulated and gene 2 is downregulated , gene 5 is usually downregulated . By applying the aggregation level from Figure 2(a ) , we will get the aggregated rule F1 ⇒ F2 , since both G1↑ and G2↓ will be replaced with F1 in the body of the rule and G5↓ will be replaced with F2 in the head of the rule . When a set of rules is aggregated , different rules could be mapped into the same aggregated rule . For example , consider the rules G1↑ & G2↓ ⇒ G5↓ and G1↑ ⇒ G4↑ . Using the aggregation level from Figure 2(a ) , both of these rules are mapped into the same aggregated rule F1 ⇒ F2 . Therefore , we can group a set of biological rules as follows . Two rules R1 and R2 belong to the same group according to the specified aggregation level if and only if they are mapped into the same aggregated rule R . Therefore , two different aggregated rules represent two disjoint groups of rules . Note , that all attributes ( ie , genes ) in the microarray dataset have exactly the same set of possible values ( ie , expression levels ↓ , ↑ , and # ) . Therefore , we can use the expression level information in the grouping process , therefore providing even more flexibility to biologists . Consider , for example , rule G1↑ ⇒ G4↑ . As demonstrated above , if we use the gene aggregation level from Figure 2(a ) and do not use expression level information in the aggregation process , this rule will be mapped into the aggregated rule F1 ⇒ F2 . However , if we choose to use the expression level information in the aggregation process , the rule G1↑ ⇒ G4↑ will be mapped into the aggregated rule F1↑ ⇒ F2↑ . Which of these grouping schemes to use ( ie , to use the expression values or not ) in the rule grouping process is up to the biologist . Note that , given the same gene aggregation level , using the gene expression levels in the grouping process will always produce more groups than not using them . Some examples of rule grouping using these two different grouping schemes are presented in Table 1 .
Table 1 . Grouping of rules using different grouping schemes . Groups obtained by grouping S using gene
Initial rule set S
1 ) G1↓ ⇒ G4↓ 2 ) G1↓ ⇒ G5↓ 3 ) G3↑ ⇒ G1↓ 4 ) G1↑ & G3↓ ⇒ G5↓ 5 ) G1↑ & G2↑ ⇒ G3↓ aggregation level from Figure 2(a ) . without exp . Levels F1 ⇒ F12 ( rules 3,5 ) F1 ⇒ F2 ( rules 1,2,4 ) with exp . levels
F1↑ ⇒ F1↓ ( rules 3,5 ) F1↓ ⇒ F2↓ ( rules 1,2 ) F1↑ & F1↓ ⇒ F2↓ ( 4 )
2 Note that , while the aggregate rule F1 ⇒ F1 may look like a tautology , in reality it is not . As mentioned above , aggregated rules are obtained from the originally discovered rules using purely syntactic the abovementioned aggregated rule does not imply any statement in some formal logic , but simply denotes a class of rules of a particular syntactic structure . transformations . Therefore , the rule grouping method has following The proposed distinguishing features that make it useful in the biological data mining applications requiring post analysis of large numbers of discovered rules . First , unlike the traditional clustering methods [ 10 ] , where the user has only a limited control over the structure and sizes of resulting clusters , a biologist has an explicit control over the granularity of the resulting rule groups in our approach . That is , a biologist can specify different gene aggregation levels in the gene hierarchy , which allows grouping the discovered rules according to the granularity important to that biologist ( ie , depending on how he or she wants to explore the rules ) . This property is very useful in the applications dealing with very large numbers of discovered rules ( eg , millions ) , because traditional clustering methods may still generate an unmanageable number of clusters . Moreover , the proposed method allows the biologist to incorporate the domain knowledge into the grouping process by specifying a gene hierarchy . Second , the rule groups ( denoted by different aggregated rules ) obtained by the proposed rule grouping method are equivalence classes , since any two biological rules R1 and R2 belong to the same rule class if and only if they are mapped into the same aggregated rule , given a specific gene aggregation level . This means that we can determine what rule class the particular biological rule R belongs to based solely on the structure of rule R . This property makes the proposed rule grouping method consistent and predictable , since the biologist knows to what class a rule belongs regardless of what other discovered rules are . This is in contrast to some of the traditional distance based clustering methods , where any two rules may or may not be in the same cluster depending on the other discovered rules . Third , one of the limitations of some of the other rule grouping approaches ( eg , [ 31] ) , as applicable to the analysis of microarray data , lies in that it is not clear how to describe concisely the resulting rule cluster to the end user for the purpose of evaluation , since rules belonging to the same cluster may have substantially different structures . In contrast , in our proposed grouping approach that is based on gene hierarchies , every rule cluster ( group ) is uniquely represented by its aggregated rule ( common to all rules in that cluster ) , that is concise and descriptive . Finally , the proposed rule grouping method works with large numbers of attributes , both numerical and categorical . Also , it scales up well . In fact , using lookup tables for gene hierarchies and hash table based structures for storing aggregated rules , the grouping algorithm is linear in the total size of the rules to be grouped . This in bioinformatics applications dealing with very large numbers of rules . 3.4 Other Rule Processing Operators Besides rule filtering and grouping operators , we have also developed rule browsing and data inspection operators . The rule browsing operator allows the biologist to view either individual rules or groups of rules based on the rule structure and select particular rules or groups of rules for a more in depth analysis . Also , it turns out that biologists often want to know which experiments ( transactions ) a particular rule “ covers , ” ie , which experiments support ( contribute ) to this particular rule . To realize this requirement , we have implemented the data inspection operator that returns all the experiments on which the rule holds . is especially important
Finally , all the rule exploration operators described in this section are combined into one integrated system that allows biologists to select them out of a “ toolbox ” and apply to the rulebase of genomic relationships in an iterative and interactive manner . n oxide
( 4NQO ) ,
4 nitroquinoline
4 . CASE STUDY We tested our methods on an Affymetrix GeneChip® microarray data described in [ 14 ] . This data contained information on how cells of yeast ( S.cerevisiae ) respond to various environmental and chemical damaging factors , such as methylmethane sulfonate ( MMS ) , tert butyl hydroperoxide ( t BuOOH ) , γ radiation , and other factors . Yeast cells were treated by these various factors , and gene expression levels were recorded before the treatment and at 10 , 30 , and 60 minutes after the treatment . Altogether , 28 measurements were recorded on 28 microarray chips , each chip containing expression levels of the whole yeast genome containing approximately 6200 genes . The biologists wanted to know how yeast cells respond to various damaging factors . To answer this broad question , they formulated several more specific questions that we explored with them using the methods described in Section 3 . To demonstrate how our method works on this particular genomic problem , we focus on the following two biological questions that were of interest to the biologists : 1 .
When genes involved in the DNA repair are upregulated , what other gene categories are also up or downregulated ?
2 . What genes induced after 10 minutes affect the transcription of genes induced after 30 minutes ?
Since each of these questions deals with specific groups of genes , we applied different constraints to the association rule generation algorithm ( using the method similar to the one described in [ 28 ] ) for each of these two questions and therefore , generated different association rule sets for these two questions . This allowed us to generate fewer association rules for each question than we would have generated for the union of all possible questions . For example , based on the advise from biologists , one of the constraints for the first question was to generate only the rules that contain up to 4 genes ( ie , up to 3 genes in the body of the rule , 1 – in the head ) . In the rest of this section , we will describe how we used our proposed biological rule filtering and grouping methods to handle these two questions . The first question was relatively simple . The association rule discovery algorithm generated about 70,000,000 rules based on our initial constraints . To find all the rules that are relevant to this question we first applied the following template BODY HAS ( ANY ) OF [ DNA_Repair]↑ ONLY AND
HEAD HAS ( ANY ) OF [ ALL_GENES]={↑,↓} which finds all rules of the form X1 & … & Xk ⇒ Y , where each gene expression Xi ( i=1 , … , k ) represents an upregulated gene belonging to the DNA repair category , and Y is a gene expression involving a gene ( any gene ) that is either upregulated or downregulated , but not unchanged . This template matched 1,673 rules . Then we identified similar rules among all the rules that matched the above template . Two rules were said to be similar if they to the in group belonged repair genes could be mapped into the same aggregated rule3 by using the primary functional category of each gene as its aggregation level . Based on this similarity specification , we grouped these 1,673 rules into 78 groups . For example , 328 of the 1,673 identified rules [ DNA_Repair]↑ ⇒ [ Protein_Synthesis]↓ , which contains all the rules that have only upregulated DNA the body and some downregulated protein synthesis gene in the head . These resulting 78 groups were of direct interest to biologists , and they were able to explore them further . The second question was more involved . To answer this question , we grouped genes into three groups : group GrpA contained all the genes that were induced ( ie , up or down regulated ) after 10 minutes , group GrpB contained all the genes induced only after 30 minutes ( but not after 10 ) , and group GrpC contained all the genes induced only after 60 minutes ( but not after 10 or 30 ) . Then the second question is reduced to the following more specific three questions :
• How genes in GrpA affect genes in GrpB ; • How genes in GrpA affect genes in GrpC ; • How genes in GrpB affect genes in GrpC .
To answer these questions , we started with the generation of the association rules pertinent to them . In particular , we used the constraints that removed genes with unknown function ( category ) , the genes that were always upregulated ( at all times ) , and a few other heuristics . Moreover , we used confidence and support levels of 70 % and 5 records respectively . As a result , we managed to reduce the total number of genes from 6200 to 1809 as elements of single item itemsets . Among these genes , 118 belonged to GrpA , 175 to group GrpB and 245 to GrpC . Using these genes , we generated 485,999 rules of the form X ⇒ Y , ie , one gene expression in the body implies one gene expression in the head . Since in this case the biologists were interested in knowing how pairs of genes affect each other , we limited our considerations only to this type of rules for this question . Because the other two questions were processed in a similar fashion , we will focus only on the first question in this paper , ie , how genes in GrpA affect genes in GrpB . A fragment of the exploratory analysis performed for this question is presented in Figure 3 . In particular , we started our explorations with the template : Template 1 :
BODY HAS ( 1 ) OF [ GrpA ] = {↑,↓} AND HEAD HAS ( 1 ) OF [ GrpB ] = {↑,↓}
This template matched 1,725 rules . We next decided to refine the previous template in the following way Template 2 :
BODY HAS ( 1 ) OF [ GrpA]↑ AND HEAD HAS ( 1 ) OF [ GrpB]↓ which produced no rules at all ( this discovery was confirmed by the biologists based on their prior knowledge about behavior of these two groups of genes ) . Then we decided to apply the template Template 3 :
BODY HAS ( 1 ) OF [ GrpA]↑ AND HEAD HAS ( 1 ) OF [ GrpB]↑
3 Here we are using the terminology introduced in Section 33 and it produced 1,654 rules . Finally , we decided to apply the grouping operator that grouped these 1,654 rules into 140 groups , based on the functional categories of genes . These groups were examined by biologists , and some interesting groups were identified . Sample groups that were discovered ( among the abovementioned 140 groups ) :
•
•
[ Stress_Response]↑ ⇒ [ Amino_Acid_Metabolism]↑ This group contained 15 rules . [ Transcription]↑ ⇒ [ Protein_Degradation]↑ This group contained 3 rules .
Template 1 ( 1,725 rules )
As a result of doing this type of analysis using our system , we managed to provide answers to the questions about gene regulation relationships that were of interest to the biologists . functional categories . Result : 140 groups
Group rules based on their
Template 3 ( 1,654 rules )
Template 2 ( no rules )
Figure 3 . A sample exploratory analysis of biological rules .
5 . CONCLUSIONS One of the main challenges related to applying association rule discovery methods to microarray data is the scalability issue . Since the number of genes placed on microarray chips is often measured in thousands , association rule discovery methods tend to generate very large numbers of association rules describing how different genes regulate each other . We addressed this problem by presenting several rule postprocessing operators , such as rule filtering , grouping , browsing and data inspection operators that help the biologists explore and analyze very large numbers of discovered rules in an interactive and systematic manner . We tested our methods on some microarray data together with the biologists that produced the data . As a result , we managed to answer the questions about gene regulation relationships that were of interest to them using our methods . Our approach empowers biologists by providing them with a set of tools that allow them to systematically analyze biological data on their own without any explicit help from the data miners . We believe that the development of such end user tools is one of the major trends in data mining and believe that our work contributes in a significant way to this effort . Although we applied our system to the analysis of microarray data , our methods are more general and are also applicable to the analysis of other types of biological data , including proteomic and pharmacogenomic data .
6 . ACKNOWLEDGMENTS The authors would like to thank Leona Samson and her team for providing us with the microarray data and for participating in the exploratory analysis of this data using our system .
7 . REFERENCES [ 1 ] Adomavicius , G . and Tuzhilin , A . Expert Driven Validation of Rule Based User Models in Personalization Applications . Data Mining and Knowledge Discovery , vol . 5 , nos . 1/2 , January/April 2001 .
[ 2 ] Agrawal , R . , Imielinski , T . , and Swami , A . Mining Association Rules Between Sets of Items in Large Databases . In Proceedings of the ACM SIGMOD Conference on Management of Data , pp . 207 216 , 1993 .
[ 3 ] Agrawal , R . , Mannila , H . , Srikant , R . , Toivonen , H . and Verkamo,AI , Fast Discovery of Association Rules . In Fayyad , UM , Piatetsky Shapiro , G . , Smyth , P . , and Uthurusamy , R . eds . , Advances in Knowledge Discovery and Data Mining . AAAI Press . 1996 .
[ 4 ] Barash , Y . and Friedman , N . Context Specific Bayesian Clustering for Gene Expression Data . In Proceedings of the Fifth Annual International Conference on Computational Molecular Biology ( RECOMB 2001 ) , 2001 .
[ 5 ] Bayardo , RJ , Agrawal , R . , and Gunopulos , D . ConstraintBased Rule Mining in Large , Dense Databases . In Proceedings of the 15th International Conference on Data Engineering ( ICDE’99 ) , 1999 .
[ 6 ] Berrar , D . , Dubitzky , W . , Granzow , M . , and Eils , R . Analysis of Gene Expression and Drug Activity Data by Knowledge based Association Mining . In Proceedings of Critical Assessment of Microarray Data Analysis Techniques ( CAMDA’01 ) , pp . 25 28 , 2001 .
[ 7 ] Bicciato , S . , Pandin , M . , Didone , G . , Di Bello , C . Analysis of an Associative Memory Neural Network for Pattern Identification in Gene Expression Data . Proceedings of BIOKDD’01 , 2001 .
[ 8 ] Bowtell , DD Options available—from start to finish for obtaining expression data by microarray . Nature Genetics , vol . 21 ( 1 Suppl):25 32 , 1999 .
[ 9 ] Brown , M.P , Grundy , WN , Lin , D . , Cristiani , N . , Sugnet , CW , Furey , TS , Ares , M , and Haussler D . Knowledgebased analysis of microarray gene expression data by using support vector machines . Proceedings of National Academy of Sciences , vol . 97 , no 1 . , Jan . 2000 .
[ 10 ] Duda , RO , Hart , PE , and Stork , DG Pattern
Classification , John Wiley & Sons , Inc . , 2001 .
[ 11 ] Eisen , MB , Spellman , PT , Brown , PO , Botstein , D . Cluster analysis and display of genome wide expression patterns . Proceedings of National Academy of Sciences , 95(25):14863 8 , 1998 .
[ 12 ] Friedman , N . , Linial , M . , Nachman , I . , and Pe’er , D . Using In to Analyze Expression Data .
Bayesian Networks
Proceedings of the Fourth Annual International Conference on Computational Molecular Biology ( RECOMB 2000 ) , 2000 .
[ 13 ] Imielinski , T . and Virmani A . , MSQL : A query language for database mining . ” Data Mining and Knowledge Discovery , 1999 .
[ 14 ] Jelinsky , S . , Estep , P . , Church , G , Samson , L . Regulatory Networks Revealed by Transcriptional Profiling of Damaged Saccharomyces cerevisiae Cells : RPN4 Links Base Excision Repair with Proteasomes . Molecular and Cellular Biology , 20(21 ) , Nov . , 2000 .
[ 15 ] Klemettinen M . , Mannila H . , Ronkainen P . , Toivonen H . , and Verkamo AI Finding interesting rules from large sets of discovered association rules . In Proceedings of the Third International Conference on Information and Knowledge Management , 1994 .
[ 16 ] Kotala , P . , Perera A . , Kai Zhou , J . , Mudivarthy , S . , Perrizo , W . , and Deckard , E . Gene Expression Profiling of DNA Microarray Data Using Peano Count Trees ( P Trees ) . Online Proceedings of the First Virtual Conference on Genomics and Bioinformatics , October 2001 . URL : http://midas10csndsunodakedu/bio/
[ 17 ] Kurra , G . Niu , W . , Bhatnagar , R . Mining Microarray Expression Data for Classifier Gene Cores . Proceedings of BIOKDD’01 , 2001 .
[ 18 ] Lent , B , Swami , AN and Widom , J . Clustering association rules . In Proceedings of International Conference on Data Engineering , 1997 .
[ 19 ] Lewin , Benjamin . Genes VI . Oxford ; New York : Oxford
University Press , 1997 .
[ 20 ] Liu , B . and Hsu , W . , 1996 . Post Analysis of Learned Rules . In Proceedings of the Thirteenth National Conference on Artificial Intelligence ( AAAI ’96 ) , pp . 828 834 .
[ 21 ] Liu , B . , Hsu , W . and Ma , Y . Pruning and summarizing the the 5th discovered associations . International Conference on Knowledge Discovery and Data Mining , 1999 .
In Proceedings of
[ 22 ] Meo , R . , Psaila , G . , and Ceri , S . An extension to SQL for mining association rules . Data Mining and Knowledge Discovery , vol . 2 , no . 2 , pp . 195 224 , 1998 .
[ 23 ] Padmanabhan , B . and Tuzhilin , A . A Belief Driven Method for Discovering Unexpected Patterns . ” In Proceedings of the Fourth International Conference on Knowledge Discovery and Data Mining ( KDD’98 ) , August 1998 .
[ 24 ] Pavlidis , P . , C . Tang , W . Noble , Classification of genes using probabilistic models of microarray expression profiles . In Proceedings of BIOKDD’01 , 2001 .
[ 25 ] Pei , J . and Han J . Can We Push More Constraints into Frequent Pattern Mining ? In Proceedings of the Sixth ACM SIGKDD International Conference on Knowledge Discovery and Data Mining ( KDD’00 ) , August 2000
[ 26 ] Pevsner PA , Lysov Y . , Khrapko KR , Belyavsky A . , Floreny’ev , Mirzabekov A . Improved Chips for Sequencing by Hybridization . Journal of Biomolecular Structure and Dynamics 9(2 ) , pp 399 410 , 1991 .
[ 27 ] Shen , WM , Ong , KL , Mitbander , B . , and Zaniolo , C . Metaqueries for data mining . In Advances in Knowledge Discovery and Data Mining , Chapter 15 , AAAI Press , 1996 . [ 28 ] Srikant , R . , Vu , Q . , and Agrawal , R . Mining Association Rules with Item Constraints . In Proceedings of the Third International Conference on Knowledge Discovery and Data Mining ( KDD’97 ) , AAAI Press , Menlo Park , California , 1997 .
[ 29 ] Suzuki , E . , 1997 . Autonomous Discovery of Reliable Exception Rules . In Proceedings of the Third International Conference on Knowledge Discovery and Data Mining ( KDD’97 ) , pp . 259 262 , 1997 .
[ 30 ] Tamayo , P , Slonim , D . , Mesirov , J . , Zhu , Q , Kitareewan , S . , Dmitrovsky , E . , Lander , E . , Golub , T . Interpreting patterns of gene expression with self organizing maps : Methods and applications to hematopoietic differentiation . In Proceedings of National Academy of Sciences , Vol . 96 , March 1999 .
[ 31 ] Toivonen , H . , Klemettinen M . , Ronkainen P . , Hatonen , K . and Mannila H . Pruning and grouping discovered association rules . In ECML 95 Workshop on Statistics , Machine Learning , and Knowledge Discovery in Databases . 1995 .
[ 32 ] Tuzhilin , A and Liu , B . Querying Multiple Sets of Discovered Rules . In Proceedings of the Eighth ACM SIGKDD International Conference on Knowledge Discovery and Data Mining ( KDD’02 ) , July 2002 .
[ 33 ] Wang , K , Tay , SHW and Liu , B . Interestingness based interval merger In Proceedings of the Fourth International Conference on Knowledge Discovery and Data Mining ( KDD’98 ) , August 1998 . for numeric association rules .
