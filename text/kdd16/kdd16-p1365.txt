NetCycle : Collective Evolution Inference in Heterogeneous Information Networks
Yizhou Zhang1,2
Yun Xiong1,2
Xiangnan Kong3
Yangyong Zhu1,2
1Shanghai Key Laboratory of Data Science , Shanghai , China
2School of Computer Science , Fudan University , Shanghai , China
3Worcester Polytechnic Institute , Worcester , MA , USA
{yizhouzhang14 , yunx , yyzhu}@fudaneducn xkong@wpi.edu
ABSTRACT Collective inference has attracted considerable attention in the last decade , where the response variables within a group of instances are correlated and should be inferred collectively , instead of independently . Previous works on collective inference mainly focus on exploiting the autocorrelation among instances in a static network during the inference process . There are also approaches on time series prediction , which mainly exploit the autocorrelation within an instance at different time points during the inference process . However , in many real world applications , the response variables of related instances can co evolve over time and their evolutions are not following a static correlation across time , but are following an internal life cycle . In this paper , we study the problem of collective evolution inference , where the goal is to predict the values of the response variables for a group of related instances at the end of their life cycles . This problem is extremely important for various applications , eg , predicting fund raising results in crowd funding and predicting gene expression levels in bioinformatics . This problem is also highly challenging because different instances in the network can co evolve over time and they can be at different stages of their life cycles and thus have different evolving patterns . Moreover , the instances in collective evolution inference problems are usually connected through heterogeneous information networks , which involve complex relationships among the instances interconnected by multiple types of links . We propose an approach , called NetCycle , by incorporating information from both the correlation among related instances and their life cycles . We compared our approach with existing methods of collective inference and time series analysis on two real world networks . The results demonstrate that our proposed approach can improve the inference performance by considering the autocorrelation through networks and the life cycles of the instances .
Categories and Subject Descriptors H28 [ Database Management ] : Database ApplicationsData Mining
Keywords Collective Inference , Evolution Inference , Heterogeneous Information Networks , Graph Mining , Data Mining
1 .
INTRODUCTION
Conventional supervised learning usually assumes that the instances are independent and identically distributed ( iid ) , where the response variables of different instances are inferred independently . In many relational data , however , the response variables of different instances can be related . For example , in financial networks , the loan listings borrowed by the same individual are more likely to share similar default risks than those borrowed by different people . An effective model for these relational data should be able to capture the dependencies among different instances during the inference process . Motivated by this challenge , collective inference problem [ 17 , 15 ] has attracted much attention in recent years , where the response variables within a group of instances are correlated and should be inferred collectively . In the literature , collective inference for both classification and regression problems , has been extensively studied [ 17 , 15 , 1 , 10 ] . Previous works on collective inference mainly focus on exploiting the autocorrelation among instances in a static network during the inference process , as shown in Figure 2(a ) . However , in many real world applications , the response variables of the instances can evolve over time , and the network can involve multiple kinds of relationships among the instances . For example , in P2P Lending networks , such as Prosper.com and Kickstarter.com , the financial activities of different loan listings can evolve over their entire fund raising periods . These loan listings are interacting with different borrowers and lenders [ 14 ] , as shown in Figure 1(a ) . In PPI networks , the expression level of different genes can also change over time , which is regulated by their complex chemical reactions with different molecules [ 18 ] . Besides , transportation networks , such as road traffic networks and public transit networks , can also involve multiple evolving attributes , representing the traffic volumes of different road segments or subway stations .
There are many approaches on time series prediction , which mainly exploit the autocorrelation within an instance at different time points during the inference process [ 5 , 12 , 9 ] .
1365 o i t a r i g n s a r i d n u f
1.2
1
0.8
0.6
0.4
0.2
0
Amount Request loan 1 loan 2 loan 3 loan 4 loan 5 loan 6
Amount Request
1.2
1
0.8
0.6
0.4
0.2 loan 1 loan 2 loan 3 loan 4 loan 5 loan 6 o i t a r i i g n s a r d n u f
Current Time
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
Time
0
0
0.9 ( c ) progress of fund raising within a life cycle
0.6
0.8
0.1
0.2
0.3
1
0.4
0.5
0.7
( a ) Prosper P2P Lending Network
( b ) progress of fund raising across time
Figure 1 : An example of collective evolution inference problem in P2P Lending networks . ( a ) an example of heterogeneous information network in P2P lending . ( b ) fund raising progress of the loan listings across time . ( c ) fund raising progress for the loan listings across fund raising periods , ie , theirlife cycles .
However , in many real world applications , the response variables of related instances can co evolve over time and their evolutions are not following a static correlation across time , but are following an internal life cycle . For example , in the fund raising networks , evolution of the fund raising activities in a loan listing usually follows its fund raising period ( life cycle ) , which includes a predefined starting time and ending time . Activities of the loan listing may show different patterns at different stages of its life cycle , as shown in Figure 1(c ) . This problem can be called as evolution inference , where each instance can evolve within its life cycle , and the response variable is associated with a series of values . As shown in Figure 2(b ) , the goal of evolution inference is to estimate yei i .
In this paper , we study the problem of collective evolution inference , where the goal is to predict the values of the response variables for a group of related instances at the end of their life cycles . This problem is very important in various applications , eg , predicting fund raising results in crowd funding and predicting gene expression levels in bioinformatics . Formally , collective evolution inference problem corresponds to predicting the response variables of a group of related instances at the end of their life cycles . This problem is highly challenging because different instances in the network can co evolve over time and they can be at different stages of their life cycles and thus have different evolving patterns . We summarize the unique challenges of collective evolution inference as follows : • Collective Evolution with Life Cycles : One major challenge of the collective evolution inference problem lies in the fact that the response variables values ( response values for short ) of the instances are evolving with a certain life cycle . Fortunately , the instances which have strong correlations are more likely to share similar evolution pattern during their life cycles . To better understand the collective evolution with life cycles , we give an example in Figures 1(b ) and 1(c ) , which describes the evolution of the fund raising ratio of the loan listings in P2P lending networks . As shown in Figure 1(b ) , the fund raising ratio is evolving during fundraising period . It is easy to think that the fund raising ratio at time T depends on previous status at time T−1 . However , the learning strategy of collective inference strictly follows the assumption that the response values of each instance will not change , which ignores the temporal information of the instances . Moreover , if we align the evolution of each loan listing by fund raising period , as shown in Figure 1(c ) , the loan listings 1 and 3 which created by same borrower are more likely to obey similar fund raising tendency during their life cycles . But collective inference problems usually
( a ) Collective Inference
( b ) Evolution Inference
( c ) Collective Evolution Inference
Figure 2 : Comparison of different inference problems . Yi denotes the response variable of the i th instance . yk i denotes the value of response variable Yi at time point k . Here si/ei is the starting/ending time point of the life cycle in the i th instance . The instances directly linked by a dotted line are related . focus on a “ snapshot ” of dynamic networks , while the snapshot captures the network at a certain time point . At a certain time point , the instances may be at different stages of their life cycles , which increased the difficulty of collective evolution inference . • Heterogeneous Dependencies : Another challenge of collective evolution inference is the complex correlations among instances in HINs . It turns out strongly connected instances are more likely to show up with similar growth/ evolving patterns in the same stages of their life cycles . The fundamental problem is how to effectively use the information provided by these multiple types of nodes and links , as well as the evolving tendency of each node . Collective inference approaches usually focus on homogeneous networks[1 , 16 ] with one type of links and nodes . It is necessary to study how to exploit the complex dependencies among nodes’ evolution in their life cycles in HINs , in order to predict the related instances more effectively .
In this paper , we first present collective evolution inference problem , which extends collective inference problem into dynamic networks , with the concept of life cycle . Then , we design a novel algorithm to solve the collective evolution inference problem , called NetCycle , which collectively infer the final values of a collection of nodes in a dynamic heterogeneous network by modeling the evolution tendency of the response variable . Finally , the experiments on real world networks indicate the effectiveness of our algorithm . To our
1366 D = {(xi , yi , si , ei)}n i=1 The data set with n instances , D = V1 .
V = {V1,··· ,VK} The set of nodes , involving K types of nodes . The target node type is V1 . X = {x1,··· , xn} The set of inherent attributes for all instances in D . Y = {y1,··· , yn} The set of response variables for all instances in D . i , ysi+1 i " A time series of values for the response variable Yi of the i th instance in D . si and ei The starting time and ending time of life cycle of i th instance in D . ,··· , yei T and t L and U The training set and testing set , where L#U = D and L$U = ∅ . U =#M
T denotes current time , while t can indicates any time . time T , ie , yk i ,··· , ysi+k−1 i i yi =!ysi k=1 Uk For ∀i ∈U k , the evolution process of Yi is only observed on the first k stages of its life cycle at
Ni The instances set which correlated with node v1i . Ni ⊆V 1 . best knowledge , this kind of problem has not been studied in the literature until recently .
S = {P1,··· ,P|S|} The set of meta paths type . Each Pl denotes a composite relationship between instances in V1 . overall goal of evolution inference is to estimate the probability distribute Pr ( Y e In this work , we simplify the problem by assuming the lengths of all life cycles are equal , ie , each instance has the same length in its life cycle . This assumption can be easily extended to unequal length cases by normalization . 2.2 Collective Evolution Inference
2 . PROBLEM DEFINITION
In this section , we first introduce some related concepts and notations , then define the problem . 2.1 Evolution Inference
U|X ,YL,Y o U ) . i =%ysi
& .
Table 1 : Important Notations .
Symbol Definition G = ( V,E ) A heterogeneous network . i i , ysi+1
,··· , yei
Suppose we have a data set D = {(xi , yi , si , ei)}n i=1 with n instances . Here xi ∈ Rd corresponds to the feature vector of the i th instance in the d dimensional space . yi = !ysi i " corresponds to a time series of values for the response variable Yi of the i th instance . Yi is evolving between time si ( starting time ) and ei ( ending time ) . ∀t ∈ [ si , ei ] , yt i corresponds to the value of Yi at time t . Here the response variable Yi is only evolving during the period of time [ si , ei ] , ie , the life cycle of the i th instance . si is the starting time of the life cycle for Yi , when the response variable Yi starts to evolve . ei is the ending time of the life cycle for Yi , after which the response variable Yi stops changing . Each instance in D can have a different life cycle , with different starting time and ending time . X = {x1,··· , xn} represents the set of features for all instances in D . Y = {y1,··· , yn} represents the set of target values for all instances in D . The indices of the instances in D are then divided into a training set L⊂{ 1,··· , n} and a test set U⊂{ 1,··· , n} , where L∪U = {1,··· , n} and L∩U = ∅ . ∀i ∈L , the evolution of the response variable Yi , ie yi , is fully observed . While in the test set U , ∀i ∈U , the evolution of the response variable Yi is only partially observed with different fractions . Suppose the life cycle of each instance has M stages , based upon the fraction of the evolution process being observed , the test set U can be divided into M disk=1 Uk . For ∀i ∈U k , the evolution process of Yi is only observed on the first k stages of its i ,··· , ysi+k−1 life cycle , ie , yk ∀i ∈U k , the task of evolution inference on the i th instance is to predict the value of Yi at the end of its life cycle , ie , yei i |∀i ∈U} to denote all the target values for prediction . We then use Y o U = {yk i |∀ 1 ≤ k ≤ M , i ∈U k} to denote all the observed evolution process in the test set and YL = {yi |∀ i ∈L} to denote all the evolution process in the training set . The joint groups , ie , U =#M i =%ysi
& . ∀1 ≤ k ≤ M and U = {yei i , based upon xi and yk i . We use Y e i
To estimate Pr ( Y e
U ) , conventional inference approaches usually require iid assumptions , and ignore dependency between different instances . The inference for each instance is performed independently :
U|X ,YL,Y o
Pr ( Y e
U|X ,YL,Y o
U ) ∝’i∈U
Pr(yei i |xi )
Link based Dependency
Collective inference approaches assume that the instances which directly linked in the network are related [ 1 ] . Given a network G = ( V,E ) , V is the set of instances ( nodes ) , V = D . E⊆ V ×V is the set of links between instances . We use T to represent the current time . ∀vi ∈V , collective inference methods can model Pr(yei Ni contains all variables Yj(∀vj ∈N i ) at time T , ie , Y T j |vj ∈N i} , and Ni denotes the instances set which correlated with vi , Ni ⊆V . Hence , by considering the correlation between instances , we will have :
Ni , xi ) . Here Y T
Ni = {yT i |Y T
Pr ( Y e
U|X ,YL,Y o
U ) ∝ ’vi∈U
Pr(yei i |Y T
Ni , xi )
( 1 )
Collective Evolution with Life Cycles
Note that different instances may be at different stages of their life cycles at time T , so it is inappropriate to infer yei i with Y T Ni , because the evolution tendency varies at different stages , which may mislead the inference result . Correlated instances share similar evolving pattern during their life cycles rather than during the absolute time . Suppose vi ∈U k , one better way is to replace Y T Ni by using Y k Ni . Here Y k |vj ∈N i} , contains all response values Yj(∀vj ∈N i ) at k th stage of their life cycles . Moreover , with the assumption that the network is static , collective inference methods usually ignore the evolution information . In order to utilize this information , one way is to iteratively predict the target value ysi+k based upon previous value ysi+k−1 , until si + k = ei , eg , autoregressive
Ni = {ysj +k j i i
1367 ( a ) collective inference
( b ) collective evolution inference
Figure 3 : The basic idea of collective inference and collective evolution inference . Here k represents the k th stage of life cycle . Uk is the instances set which stay in k th stage of life cycle at current time T . The single circle means observed values of the response variable , and the double circle means predict values of the response variable . i
|ysi+k−1 i model of order one ( AR(1 ) for short ) . These methods can model Pr(ysi+k , xi ) , but the results usually have large errors when the prediction horizon is long , because it only utilizes previous evolution process . Note that the instances with strong correlations may obey similar evolution tendency during their life cycles , as shown in Figure 1(c ) . By considering both link based dependencies and evolution information of instances , the idea of collective evolution inference is to model Pr(ysi+k Ni , xi ) , which utilizes the correlations between instances during their life cycles to reduce prediction errors . The task of collective evolution inference is to estimate : Pr ( Y e U|X ,YL,Y o =( F%ysi+k−1
U ) ∝ ’vi∈U Ni , xi& T < si + k ≤ ei ,Y k
|ysi+k−1
Pr(yei i |yei−1 i
,Y ei Ni
, xi )
( 2 ) ysi+k i i i
,Y k i ysi+k i si + k ≤ T
Here F denotes the models which estimate response variable Yi at time si + k , eg , AR(1 ) . Compared with collective inference , collective evolution inference avoids inferring Y e U simultaneously , by aligning the life cycle of each instance into the same position . And it also makes use of the evolution process during the life cycles of instances . We use time T to indicate si and ei ( ∀vi ∈V ) , as shown in Figure 3 , we describe the difference between collective inference and collective evolution inference based upon Eq 1 , 2 . Note that ∀vi ∈U k , T = si + k − 1 , and ∀vi ∈L , T ≥ ei , ie , yT Heterogeneous Dependencies i = yei i .
In many real world applications , the networks include multiple types of nodes and links , which are called heterogeneous information networks [ 10 ] .
Definition 1 . Heterogeneous information network is a special kind of information network , which can be represented as a directed graph G = ( V,E ) . V denotes the set of nodes , including K types of instances : V1 = {v11,··· , v1n1},··· ,VK
Figure 4 : Examples of different types of Meta path between two loan listings in P2P Lending Network .
= {vK1,··· , vKnK} , where vji represents the ith instance of type j . E⊆ V ×V denotes the links between the instances in V , which involves multiple types of links .
For example , as shown in Figure 1(a ) , the P2P Lending network includes multiple types of nodes , eg , loan listing , borrower , lender , group , which are connected through multiple types of links , eg , created , bidding , friend , joined . In this paper , we focus on studying the collective evolution inference problem on one type of nodes , instead of on all of them in HINs . The reason is different type of nodes have different variables in HINs , so it ’s unreasonable to assume all types of nodes share the same set of response variables . Without loss of generality , we define the first node type V1 as the target node type , ie , V1 = D . By mining the linkage structure of HINs , multiple types of dependencies among instances can be extracted . In next section , we propose a method to solve the collective evolution inference in HINs . We summarized all notations in Table 1 .
3 . PROPOSED METHOD
In this section , we first introduce a concept named meta path [ 11 ] in section 3.1 , which is often used to extract complex relationships among the instances in HINs . Then , we discuss how to solve the collective evolution inference problem in HINs based on meta path in section 3.2 , and propose a simple and effective algorithm for meta path based collective evolution inference in section 33 Finally , we discuss how to predict the node evolution process during the life cycle in section 34 3.1 Meta Path
The meta path is defined as a sequence of relations in the network schema . The instances in HINs are inter connected through multiple types of links . Each type of links from node type Vi to node type Vj corresponds to a binary relation R , where R(vip , vjq ) holds if the object vip and vjq are linked in R . For example , in Figure 1(a ) , the link type “ bidding ” is a relation between lender nodes and loan listing nodes , where R(vip , vjq ) holds if the lender node vip has a link of type “ bidding ” to the loan listing node vjq in the network . We can write the link type as “ lender bidding −−−−−→ loan listing ” . A meta path P corresponds a type of path within the network , containing a certain sequence of link types . For instance , we give three types of meta path between loan listings in Figure 4 , eg , a meta path “ loan listing bidding−1 −−−−−−−→ lender bidding −−−−−→ loan listing ” denotes the composite relationship between loan listing nodes , where the semantic meaning of this meta path is that the two loan listing nodes had been invested by same lender nodes . Here the link type “ bidding−1 ” represents the inverted relation of “ bidding ” .
1368 Input : G : a heterogeneous information network , M : number of stages in a life cycle , X : attribute vectors for all instances , A : a base learner for local model , Meta path Construction : Construct the meta path set S = {P1 , · · · , P|S|} : p max : maximum meta path length ( default=4 ) . M axIt : maximum # of iteration ( default=10 )
Breadth search on schema graph of G , starting from V1 by adding short meta path Pl that ends with V1 into S first :
1 . If the length of meta path Pl is greater than p max , exit the BFS ; 2 . If current meta path Pl cannot be reconstructed by the paths in S , then add Pl into S ; Otherwise , prune the current path from BFS .
Segment Training : i
)} by converting each instance xi to x′k i as follows : i
Collective Evolution Inference : i x′k
= [ ]
For each stage k = 1 , · · · , M , learn the segment modelf k : i , ysi+k
1 . Construct an extended training set Dk = {(x′k , PathRelFeature(v1i , Y k i =!xi , ysi+k−1
L , S)" . Note that ysi−1
For each stage k = 1 , · · · , M :
2 . Let fk = A(Dk ) be the segment model trained on Dk . Bootstrap : Estimate the response values sets in k th stage , for each v1i ∈#k , 0)" . Note that yT−j 1 . Construct the associate features x′i for each testing instance v1i ∈#k |v1i ∈#k L#{yT−j+k
= fk!(xi , yT−j+k−1 , PathRelFeature(v1i , Y k = fk(x′T−j+k the response values sets of testing instances ( v1i ∈U ) .
) for each testing instance v1i ∈#k
Iterative Inference:Repeat until convergence or #iteration > M axIt
=!xi , yT−j+k−1 |U| " : j=1 Uj} , S)" .
U =!ye1
2 . Update yT−j+k i as yT−j+k
) as : yT−j+k
1 , · · · , y
( ie , ysi+k yT−j+k i x′T−j+k e|U|
= [ ] . i i i i i i i
Output : Y e i i j=1 Uj ) as follows : j=1 Uj ( Suppose v1i ∈U j ) . j=1 Uj , suppose v1i ∈U j , produce an estimated values
Figure 7 : The NetCycle algorithm
P|S|(i ) , xi ) i ysi+k i
Pr(yei
,Y ei i ysi+k i denotes the nodes set where the nodes relate to node v1i through the meta path Pl , Pl(i ) = {v1j|(v1i , v1j ) ∈P l} . The meta path based dependencies can be used as follows : Pr ( Y e
U ) ∝ ’vi∈U i |yei−1 P1(i),··· ,Y ei U|X ,YL,Y o =( F%ysi+k−1 P1(i),··· , xi& T < si + k ≤ ei ,Y k Pl(i ) = {ysj +k
Here Y k |vj ∈ Pl(i)} , denotes the response values set in k th stage of life cycle , which the instances belong to Pl(i ) . The basic idea of meta path based collective evolution inference as shown in Figure 5 . An aggregation function ( eg , mean , count , etc . ) is often used to extract relational features from meta paths based correlated variables set [ 11 ] , as shown in Figure 6 . 3.3 NetCycle Algorithm si + k ≤ T
( 3 ) j
In this section , we propose an algorithm , called NetCycle , to estimate Eq 3 . Inspired by the success of ICA framework [ 1 ] in collective inference , we designed a similar inference procedure for our NetCycle method as shown in Figure 7 . The algorithm includes the following steps : Meta path Construction : Given a HIN , we first extract all non redundant meta paths for correlations of target instances type separately . A meta path Pl in S is nonredundant if Pl cannot be reconstructed by combining any subset of the meta paths in S . We only extract short metapaths with a maximum path length p max . It has been shown in [ 20 ] that long meta paths are not quite useful in capturing the linkage structure of HINs . Segmentation Training : We construct M extended train
)* by converting ing sets ∀1 ≤ k ≤ M,Dk = )(x′k each instance xi to x′k i using the functions in Figure 6 , and combining with previous value ysi+k−1 . Here Y k = {ysj +k |v1j ∈V 1} , contains all response variables Yj(∀v1j ∈ V1 ) atk th stage of their life cycles in Figure 6 . We use base learner to train one segment model on each stage , by using the extended training sets . Collective Evolution Inference : Overall , it is an ex i , ysi+k j i i
Figure 5 : Meta path based collective evolution inference in heterogeneous networks . • Y k Ni For each meta path Pl ∈ S : 1 . Get related instances for node v1i through meta path
= PathRelFeature!v1i,Y k , S = {P1,··· ,P|S|}" Pl , ie , the related index set C = Pl(i ) 2 . Y k Pl(i ) = Aggregation ( {yj|v1j ∈C} ) P1(i),··· ,Y k Return [ Y k
P|S|(i)]T
Figure 6 : The function of constructing relational features(PathRelFeature ) . 3.2 Meta path based Collective Evolution In ference
In HINs , there are complex dependencies not only among instances directly linked through links , but also among instances indirectly linked through different meta paths . In order to solve the collective evolution inference problem more effectively , we explicitly consider different types of meta path based dependencies among instances .
Meta path based dependencies refer to the dependencies among instances that are inter connected through a meta path , eg , the co borrower relation between loan listings can be represented as the meta path “ loan listing created−1 −−−−−−−→ borrower created −−−−−→ loan listing ” . Most relationships studied in network data can naturally be captured by different meta paths . Given a set of meta paths S = {P1,··· ,P|S|} , Pl(i )
1369 Figure 8 : Schema of datasets . The numbers of each type are tagged under the corresponding type .
( a ) Prosper Datasets
( b ) DBLP Dataset i tension of iterative inference algorithm [ 1 ] for the inference step . During the inference , we iteratively update the response variables set predictions of the testing instances in k th stage of life cycle , for each v1i ∈#k j=1 Uj . We use the predicted value yT−j+k as one of input attribute in predict the response values set in k + 1 stage , until k = M . In the end , we will get Y e Suppose the complexity of base learner A is C , the time complexity of learning the NetCycle model is O(pmax ·V 3 1 + M · C ) . While the time complexity of constructing meta paths is O(pmax · V 3 1 ) , which usually constructed through matrix multiplication . 3.4 Extension : Node Evolution Process Pre
U for the testing instances . diction i i
, ysi+k+1 i & . ,··· , yei
%ysi i ,··· , ysi+k
During the collective evolution inference process , for each instance v1i in test set U , suppose v1i ∈U k , the NetCycle algorithm can not only infer the target value yei i , but also the whole time series values of response variable Yi , ie , It can help to discover the evolution tendency over the instances’ life cycle . Further , the weight of parameters learned by segment models fk , can help to reflect the importance of each feature during life cycle ( including inherent attributes , previous value and topology features ) . Greater weight means greater impact on evolution , so we can use it to find the major factor of node evolution in different stages . For example , in P2P lending network , previous studies [ 2 ] validated that the fund raising process is mainly influenced by the investment rate in early stage , and mostly affected by social interactions ( eg , herding effect ) in latter stage over fund raising period .
4 . EXPERIMENTS 4.1 Data Collection
In order to validate the collective evolution inference performances , we apply our methodology to three real world HINs ( Summarized in Table 2 ) . •Prosper Dataset : Our first two datasets studied in this paper were extracted from Prosper P2P Lending platform1 . Prosper.com provides abundant lending information on website , including loan information , bidding , borrower and investor information , etc . The network schema of Prosper datasets is shown in Figure 8(a ) . In this network , there are four types of nodes : loan listing , borrower , lender and group , connected by four types of relations/links : created , friend , bidding and joined relationship . We treat loan listings as 1https://wwwprospercom/
Table 2 : Summary of datasets .
Dataset
Node Link Type Type
Feature
Instance
Prosper : 2006 ∼ 2007 Prosper : 2008 ∼ 2009
DBLP Dataset
4
4
3
4
4
2
5
5
30K+
100K(Unobserved )
30K+
100K(Unobserved )
150
2792 our target instances , with their funds raising ratio as the response variables . Then the life cycle of the instances is the loan listing ’s fund raising period . Each loan listing has five inherent attributes : maximum rate borrower willing to accept br , debt to income ratio dr , total amount requested ta , whether or not borrower is a home owner h , and loan description length dl [ 2 ] . We extract two subsets of loan listings in the network from 2006∼2011 , and remove all isolated points ( which did not receive any fund ) . The first dataset is extracted from Prosper : 2006∼2007 , and the second from Prosper : 2008∼2009 , each have 30K loan listings , we add 100K unobserved loan listings which randomly sampled from 2006∼2011 for each dataset . The fund raising period of each loan is divided into M stages , here M = 10 for all experiments in these two datasets . •DBLP Dataset : The third dataset , ie , DBLP four areas [ 8 ] , is a bibliography information network extracted from DBLP2 , which involves three types of nodes : conference , paper and author , connected by two types of relations/links : conference author links and co author links . We treat authors as our target instances , with the number of published papers as the response variables . In this dataset , the life cycle is defined as the first five years since the author published his/her first paper . The inference task is to predict the numbers of papers published in the first five years of each author ’s academic life , which we call the authors’ academic career problem , because most PhD degrees take five years , ie , M = 5 . For each author , we extracted a bag of words representation of all the paper titles published by this author as inherent attributes , which include 150 words ( terms ) as node features . In this paper , we select the authors who published more than 2 papers , and the network schema of DBLP dataset is shown in Figure 8(b ) . For detailed description of the DBLP dataset , please refer to [ 8 ] . 4.2 Algorithms for comparison
In order to demonstrate the effectiveness of our methodology , we compared with the following state of the art algorithms ( summarized in Table 3 ) :
2http://dblpuni trierde/db/
1370 Table 3 : Types of models , based on the kinds of features used .
Method
LIBLINEAR Herding Para3 GNetMine HCC HCC(with kernel)4 NetCycle(w/o network ) NetCycle labels
Self Neigh . Time Publication attr . ! ! info
!
[ 4 ] [ 2 ] [ 8 ] [ 11 ]
! ! ! !
! ! !
!
! ! !
[ 11 , 19 ]
This paper This paper
• LIBLINEAR [ 4 ] : This method is the base learner for following algorithms . It supposes that each instance is independent in the network . • Herding Para [ 2 ] : This method is only applied to Prosper dataset . This method extracts the temporal features of bidding behavior to predict whether the loan will raise enough funds with logistic regression . However , it is a verifying experiment which can only be used after fund raising period . We use a horizontal line to represent this method ’s performance in each stage . • GNetMine [ 8 ] : This is a graph based transductive classification approach based on information propagation model , which makes prediction on heterogeneous networks . It only uses static network structure , and assumes each node type shared by a group of similar labels . • HCC [ 11 ] : This is a collective classification approach , which works on heterogeneous network by exploiting dependencies based on multiple meta paths in the network . The same as our method , it focuses on predicting one type of nodes in heterogeneous networks . • HCC ( with kernel ) [ 19 ] : This framework can model both temporal and relational dependencies in dynamic networks , by giving different weight with temporal relational kernel to links in the temporal dimension . But the paper focuses on link prediction instead of collective inference problem . In order to compare with the method , we combine the idea of modeling dynamic networks with kernels and HCC method , to solve the collective inference problem in dynamic networks . • NetCycle ( w/o network ) : This is a weak version of our method without network structure . It only uses the inherent attributes of nodes and the previous values of the nodes response variables , and does not consider the dependencies between related instances . • NetCycle : This is our method proposed in Section 3.3 , which tries to solve collective evolution inference in HINs . For a fair comparison , all above algorithms use LIBLINEAR [ 4 ] . We use L2 regularized logistic regression as the base classifier and support vector regression as the base regression model . The weight of regularized item λ is set to be 0.001 , and the maximum number of iterations M axiter is set to be 10 . The evaluation metric of classification is accuracy , and the evaluation metric of regression is root mean square error ( RMSE ) . For all experiments , we use k = 0/k = 1 represents the start/end stage of nodes life cycles . 5 fold cross validations are used in all experiments .
3Prosper datasets only . 4Sharan et al . proposed an original way to model temporal network , however , they focus on the link prediction problem , we combined the idea with HCC as one of compared method .
0.2
0.2
0.9 0.85 0.8 0.75 0.7 0.65 0.6 0.55 y c a r u c c A
0.9
0.8
0.7
0.6
0.5 y c a r u c c A y c a r u c c A
0.78
0.77
0.76
0.75
0.74
0.73
0.2
0.9
0.85
0.8
0.75
0.7
0.65 e r o c s
F
0.6
0.4
Stage of life cycle
0.8
0.6 ( a ) prosper:2006∼2007
0.2
0.4
0.6
Stage of life cycle
0.9
0.8
0.7
0.6 e r o c s
F
0.5
0.4
Stage of life cycle
0.8
0.6 ( b ) prosper:2008∼2009
0.2
0.4
0.6
Stage of life cycle e r o c s
F
0.8 0.79 0.78 0.77 0.76 0.75 0.74 0.73
0.2
0.8
( c ) DBLP
0.4
0.6
Stage of life cycle
0.4
0.6
Stage of life cycle
0.8
0.8
0.8
Figure 9 : Collective evolution classification results . 4.3 Performances of Collective Evolution Clas sification
In our first experiment , we evaluate the effectiveness of the proposed NetCycle method on collective evolution classification problem . We apply our method on two problems : one is “ biding detection ” problem , which attempts to predict whether the loan listing will raise enough funds after fund raising period . We binary the predicting result of fundraising ratio to Succeed or Failed for comparison . Another is “ academic career ” problem , which tries to predict whether one author will engage in academic after graduation . The task can be represented as whether the author will publish his/her paper after five years . By hiding the response variables and links after stage k , we test all algorithms since different beginning stage k , and predict the final response values after their life cycles . Note that people pay more attention to positive instances , eg , investor only care about the loan listings which can receive enough funds in the end , and people care more about whether the author will continue to engage in academic career after PhD . We add Fβ score as another classification evaluation metric , here we set β = 05 The results are reported in Figure 9 . Due to the accuracy and F score are too small of logistic regression and
1371 E S M R
1.6
1.4
1.2
1
0.8
0.6
0.2
LIBLINEAR HCC HCC(with Kernel ) NetCycle(w/o network ) NetCycle
0.4
0.6
Stage of life cycle
0.8
E S M R
1.4
1.2
1
0.8
0.6
0.2
LIBLINEAR HCC HCC(with Kernel ) NetCycle(w/o network ) NetCycle
0.4
0.6
0.8
Stage of life cycle
( a ) prosper:2006∼2007
( b ) prosper:2008∼2009
E S M R
1.2
1
0.8
0.6
0.4
0.2
LIBLINEAR HCC HCC(with Kernel ) NetCycle(w/o network ) NetCycle
0.6 0.4 Stage of life cycle ( c ) DBLP
0.8
Figure 10 : Collective evolution regression results .
NetCycle ( w/o network ) in DBLP dataset ( less than 55% ) , so we did not shown the result in Figure 9(c ) .
The first observation in Figure 9 is : Most collective classification methods , eg , HCC and GNetMine , can achieve better accuracies than the baseline logistic regression . These results support that the heterogeneous dependencies among instances can improve classification performance . We also find that NetCycle ( w/o network ) and Herding Para are consistently and significantly outperforms than baseline , which support our claim that the evolution information of instances can also improve classification performance . Compared with all above algorithms , NetCycle always has best performance in each stage of life cycle , which explains that both heterogeneous dependencies among instances and the evolution information of node response variables can improve prediction performance in the classification task . Finally , we find that HCC method with kernel does not perform well , although it utilizes both heterogeneous dependencies among instances and the temporal information of instances . One possible reason is that it is hard to choose the suitable kernel to model the graph . Our algorithm almost achieves the best performance in all datasets . 4.4 Performances of Collective Evolution Re gression
Compare with all above competing algorithms , NetCycle is not only able to solve the classification problem , but also able to solve the regression problem . In order to validate the effectiveness of NetCycle , we made slight modifications to the competing algorithms , by referring the works of [ 13 ] in collective regression . The competing algorithms include : LIBLINEAR , HCC , HCC ( with Kernel ) and NetCycle ( w/o network ) . In this experiment , we apply NetCycle in collective evolution regression on two problems : predicting “ how much fund of the loan will be raised after bidding period ” , and predicting “ how many papers one author will publish during his/her PhD ” . The results are shown in Figure 10 .
The first observation in Figure 10 we have is that most approaches have better performance than the baseline in each dataset , especially in latter stages of life cycle . We also find that although most algorithms’ RMSEs have slightly i i n o s c e r P
1 0.95 0.9 0.85 0.8 0.75 0.7 0.65
0.2
1
0.9
0.8
0.7 y c a r u c c A
0.6
0.2
NetCycle(w/o network ) NetCycle
0.4
0.6
0.8
Stage of life cycle(k=0.1 )
NetCycle(w/o network ) NetCycle
0.4
0.6
0.8
Stage of life cycle(k=0.1 ) l l a c e R
1
0.9
0.8
0.7
0.6
0.5
0.2
E S M R
1.4 1.2 1 0.8 0.6 0.4 0.2 0 0.2
1
1
NetCycle(w/o network ) NetCycle
0.4
0.6
0.8
Stage of life cycle(k=0.1 )
NetCycle(w/o network ) NetCycle
0.4
Stage of life cycle(k=0.1 )
0.6
0.8
1
1
Figure 11 : Node evolution during life cycle decreasing tendency as time goes on , our methods ( including w/o network ) have more obviously decreasing tendency during life cycle , with the help of evolution information of the response variables during life cycles . Compared with NetCycle ( w/o network ) , NetCycle have better performance in the early stage of life cycle , which demonstrates the heterogeneous dependencies among instances can improve performance in collective regression problem . In all datasets , NetCycle has outstanding performance in every stage . 4.5 Performances of Node Evolution Process
Prediction
In our third experiment , we validate NetCycle ( including w/o network ) on predicting node evolution process in Prosper : 2006∼2007 dataset . We record the evolution process of the nodes since stage k = 0.1 , and use following metrics to evaluate the performance in each stage during their life cycles , including : precision of positive nodes , recall of positive nodes , accuracy and RMSE . The results are shown in Figure 11 , where similar trend holds for the other two datasets which cannot be shown due to space limitation .
We can find that both NetCycle and NetCycle ( w/o network ) have high precision in early stage , and only have little descent as time goes on . The decreasing tendency of NetCycle is greater than NetCycle ( w/o network ) . The recall of positive nodes is also very high in the early stage , but the decreasing tendency is more obvious than precision for both algorithms . The results show that the decreasing performance in dataset mostly due to the descent of recall . The last two figures are accuracy and RMSE , where the errors are monotone increasing for both algorithms , however , NetCycle has much slower increment speed of errors than NetCycle ( w/o network ) , which demonstrates our claim that the instances are collective evolution with life cycles . 4.6 Influence of different Meta paths
In this experiment , we study the influence of different meta paths on the collective evolution inference performance of our NetCycle model . Different types of meta paths have different semantic meanings , which correspond to different types of dependencies among the instances in HINs . We summarize all metapaths in Table 4 , which are extracted
1372 Table 4 : Summary of Meta Paths among Loan Nodes
Meta Path
Semantics of the Dependency
Notation
LBL
LLeL
LBBL
LLeLeL
LBLeL
LLeBL
LBGBL
LBGLeL
LLeGBL f riend bidding
Loan created−1 −−−−−−−−→ Borrower created bidding−1 −−−−−−−−→ Lender Loan Loan created−1 −−−−−−−−→ Borrower bidding−1 −−−−−−−−→ Lender Loan Loan created−1 −−−−−−−−→ Borrower bidding−1 −−−−−−−−→ Lender Loan Loan created−1 −−−−−−−−→ Borrower bidding−1 −−−−−−−−→ Lender Loan created−1 −−−−−−−−→ Borrower bidding−1 −−−−−−−−→ Lender
Loan f riend joined joined joined
LLeGLeL Loan
−−−−−→ Loan
−−−−−→ Loan
−−−−−→ Borrower created −−−−−→ Loan
−−−−−→ Lender bidding f riend
−−−−−→ Loan bidding f riend
−−−−−→ Lender
−−−−−→ Loan −−−−−→ Borrower created −−−−−→ Loan joined−1 −−−−−−−→ Borrower created −−−−−→ Loan joined−1 −−−−−−−→ Lender
−−−−−→ Group
−−−−−→ Group bidding joined
−−−−−→ Loan
−−−−−→ Group
−−−−−→ Group joined−1 −−−−−−−→ Lender joined−1 −−−−−−−→ Borrower created bidding
−−−−−→ Loan −−−−−→ Loan
Co borrower relation
Co investor relation
Loan ’s borrower are friend
Loan ’s lender are friend
Loan ’s borrower and Loan ’s lender are friend
Loan ’s lender and Loan ’s borrower are friend
Loan ’s borrower joined same group
Loan ’s lender joined same group
Loan ’s borrower and lenders joined same group
Loan ’s lenders and borrower joined same group y c a r u c c A
1
0.9
0.8
0.7
0.6
0.5
0.4
0.1 borrower lender users withfriend withgroup all y c a r u c c A
0.8
0.6
0.4
0.2
0
0.3
0.6 Stage of life cycle
0.9
0 3 5 10 100 1000
0.8
0.6
0.4
0.2
0
0.3
( a ) M axiter
Figure 14 : Influence of Parameters on NetCycle .
0.9
0.6 Stage of life cycle ( b ) λ
0.0001 0.001 0.01 0.1 1 10 100 1000
Figure 12 : Influence of meta path on NetCycle .
0.3 Stage of life cycle
0.7
0.12
0.1
0.08
0.06
0.04 t i h g e W
LBL LLeLeL LLeGLeL
0.02
0.1
0.2
0.3
0.5
0.4 0.6 Stage of life cycle
0.7
0.8
0.9
Figure 13 : The weights of meta paths during life cycle . from P2P lending network . In order to illustrate the influence of each path , we apply NetCycle with 6 groups of meta paths in the Prosper networks , including : only borrowers{LBL} , only lenders{LLeL} , users{LBL and LLeL} , withfriend{users , LBBL , LBLeL , LLeLeL and LLeBL} , withgroup{users , LBGBL , LBGLeL , LLeGLeL and LLeGBL} and all . We test each meta path group in 3 stages of loan ’s life cycle in Prosper:2006∼2007 dataset , the results as shown in Figure 12 . We find that NetCycle can get better performance with the increase number of meta path types . This support our intuition that meta path is very expressive and can represent indirect relationships that are very important for collective evolution inference tasks . 4.7 Case Studies
To better understand the output of our methods , we give a case study of the weights of meta paths in each stage of life cycle , to show the effectiveness of NetCycle in matching the node evolution pattern . The meta paths we used are from Prosper:2006∼2007 dataset , including : only borrowers ( LBL ) , only lenders ( LLeLeL ) , and with group ( LLeGLeL ) . In Figure 13 , we display the weights of each meta path learned by segment models during the life cycle .
As shown in Figure 13 , the first observation is that al l meta paths have large weights in the early stages , and the weights of meta paths have a declining tendency in the early stages . This result proves a phenomenon : “ investors prefer to invest new loan listings ” , which validated by Ceyhan [ 2 ] . The weights of meta paths LLeLeL and LLeGLeL have an similar increasing tendency in latter stage , it may be due to the following reason : as time goes on , the increased numbers of bids will attract more lenders to invest the loan , which also known as herding effect in financial domains . Ceyhan [ 2 ] also verified the herding effect in P2P Lending service . Compared with LLeLeL and LLeGLeL , we can find that the weights of LBL did not have obvious variation during loan ’s life cycle , because the relationship between borrower and loan will not change in the fund raising period . There exists a sharp increasing tendency for all meta paths in the last stage , however , the weights of all features have a sharp variation in the last stage , because we need to normalize the results into discrete values in the last stage . These variation tendency of meta paths provides insightful knowledge for us to understand the node evolution process . 4.8 Model selection
There exist two essential parameters in NetCycle , M axiter and λ . M axiter is the maximum number of iterations # in the iterative inference part of NetCycle , and λ is the weight of LIBLINEAR ’s penalty item ( L2 regularization ) . In previous experiments , we empirically set M axiter as 10 , and set λ as 0001 To test the stability of the performances of NetCycle method , we test the accuracies of different values of M axiter and λ in 3 stages of loan ’s life cycle on Prosper:2006∼2007 dataset , the result as shown in Figure 14 . Similar trend holds for the other two datasets which cannot be shown due to space limitation .
Figure 14 illustrates that NetCycle performs quite well and stably , and it is not sensitive to the values of M axiter
1373 and λ . In Figure 14(a ) , when the number of iterations is very small , eg , M axiter<3 , the results did not perform well , because the algorithm not reached convergence yet . However , with the increase of the number of iterations , the results do not change obviously . In Figure 14(b ) , we can find that smaller λ always has better performance at the early stage ( k=0.3 ) , and the results don’t change obviously as time goes on ( eg , k=0.6 or 09 ) There does not exist obvious differences at each stage .
5 . RELATED WORK
Our work on collective evolution inference is related to both collective inference and dynamic networks analysis . We will introduce recent related works of them in this section . Collective inference [ 6 ] of relational data , including collective classification [ 1 ] and collective regression [ 13 ] , have been investigated by many researchers . Basic collective classification problems focus on classification in homogeneous network [ 17 ] . Ji [ 7 ] studied a specialized classification problem on heterogeneous networks , where different types of nodes share a same set of label concepts . Kong [ 11 ] proposed a method called HCC based on meta path to solve the collective classification problem on one type nodes in heterogeneous networks . Loglisci [ 13 ] studied collective regression for handling autocorrelation of network data . All of them only paid attention to static networks , instead of dynamic networks . In this work , we compare with the methods in [ 7 , 11 ] as two competing algorithms .
On the other hand , in dynamic networks , Sharan [ 19 ] proposed a representational framework to model both temporal and relational dependencies in networks , but they only tested the model on the link prediction problem . Yu [ 21 ] used cascading process to predict the propagation of information . Cho [ 3 ] presented a point process to model the Spatial Temporal Networks . However , none of them focused on collective inference problem . Moreover , the evolution inference problem are very similar with autoregressive process . They both try to infer a time series values of the instances response variables in the future . But autoregressive process commonly studied the evolution pattern from previous sequence , while the evolution inference studied from correlated instances with the restrictions of their life cycles .
In addition , there exist several works in P2P lending networks [ 2 , 14 ] . Ceyhan [ 2 ] examined a simple model to validate the lenders’ bidding behavior during fund raising period on bidding detection problem , which we also used as one of competing algorithms .
6 . CONCLUSION
In this paper , we first present the collective evolution problem in dynamic networks , where the response variables of the nodes are evolving with a certain period time . Then we extend the problem into HINs , where the network includes multiple types of nodes connected through multiple types of links . We propose an effective algorithm , called NetCycle , to solve the collective evolution inference problem in HINs . The NetCycle method can not only predict the values of node response variables for collective inference problems , but also can predict the evolution tendency of the node response variables during life cycles . Empirical studies on real world tasks demonstrate the effectiveness of the proposed method .
7 . ACKNOWLEDGMENTS
The work was supported in part by the National High Technology Research and Development Program of China No.2015AA020105 , and the National Natural Science Foundation of China Projects No.61170096 , No71331005 The authors would like to thank Jinhong Mi and Lu Ruan for their comments .
8 . REFERENCES [ 1 ] M . Bilgic , T . Eliassi Rad , P . Sen , G . Namata , L . Getoor , and B . Gallagher . Collective classification in network data . AI Magazine , 29(3):93–106 , 2008 .
[ 2 ] S . Ceyhan , X . Shi , and J . Leskovec . Dynamics of bidding in a P2P lending service : effects of herding and predicting loan success . In WWW , 2011 .
[ 3 ] Y . S . Cho , A . Galstyan , J . Brantingham , and G . Tita .
Latent point process models for spatial temporal networks . DCDS B , 2013 .
[ 4 ] R . E . Fan , K . W . Chang , C . J . Hsieh , X . R . Wang , and
C . J . Lin . LIBLINEAR : a library for large linear classification . JMLR , 9(12):1871–1874 , 2008 .
[ 5 ] J . Hamilton . Time Series Analysis . Princeton Univ . Press ,
1994 .
[ 6 ] D . Jensen , J . Neville , and B . Gallagher . Why collective inference improves relational classification . KDD , 2004 .
[ 7 ] M . Ji , J . Han , and M . Danilevsky . Ranking based classification of heterogeneous information networks . In KDD , 2011 .
[ 8 ] M . Ji , Y . Sun , M . Danilevsky , J . Han , and J . Gao . Graph regularized transductive classification on heterogeneous information networks . In ECML , 2010 .
[ 9 ] E . Keogh , K . Chakrabarti , S . Mehrotra , and M . J . Pazzani .
Locally adaptive dimensionality reduction for indexing large time series databases . In SIGMOD , 2001 .
[ 10 ] X . Kong , B . Cao , and P . S . Yu . Multi label classification by mining label and instance correlations from heterogeneous information networks . In KDD , 2013 .
[ 11 ] X . Kong , P . S . Yu , Y . Ding , and D . J . Wild . Meta path based collective classification in heterogeneous information networks . In CIKM , 2012 .
[ 12 ] L . Li , J . McCann , N . S . Pollard , and C . Faloutsos .
Dynammo : mining and summarization of coevolving sequences with missing values . In KDD , 2009 .
[ 13 ] C . Loglisci , A . Appice , and D . Malerba . Collective regression for handling autocorrelation of network data in a transductive setting . JIIS , 2015 .
[ 14 ] C T Lu , S . Xie , X . Kong , and P . S . Yu . Inferring the impacts of social media on crowdfunding . In WSDM , 2014 .
[ 15 ] Q . Lu and L . Getoor . Link based classification . In ICML ,
2003 .
[ 16 ] L . K . Mcdowell and D . W . Aha . Labels or attributes ? : rethinking the neighbors for collective classification in sparsely labeled networks . In CIKM , 2013 .
[ 17 ] J . Neville and D . Jensen . Iterative classification in relational data . In AAAI Workshop , 2000 .
[ 18 ] J . Ren , J . Wang , M . Li , H . Wang , and B . Liu . Prediction of Essential Proteins by Integration of PPI Network Topology and Protein Complexes Information . Springer Berlin Heidelberg , 2011 .
[ 19 ] U . Sharan and J . Neville . Temporal relational classifiers for prediction in evolving domains . In ICDM , 2008 .
[ 20 ] Y . Sun , J . Han , X . Yan , P . Yu , and T . Wu . PathSim : Meta path based top k similarity search in heterogeneous information networks . In VLDB , 2011 .
[ 21 ] L . Yu , P . Cui , F . Wang , C . Song , and S . Yang . From Micro to Macro : Uncovering and predicting information cascading process with behavioral dynamics . In ICDM , 2015 .
1374
