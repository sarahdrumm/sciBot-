Regime Shifts in Streams : Real time Forecasting of
Co evolving Time Sequences
Yasuko Matsubara Kumamoto University yasuko@cskumamoto uacjp
Yasushi Sakurai Kumamoto University yasushi@cskumamoto uacjp
ABSTRACT
Given a large , online stream of multiple co evolving event sequences , such as sensor data and Web click logs , that contains various types of non linear dynamic evolving patterns of different durations , how can we efficiently and effectively capture important patterns ? How do we go about forecasting long term future events ?
In this paper , we present REGIMECAST , an efficient and effective method for forecasting co evolving data streams . REGIMECAST is designed as an adaptive non linear dynamical system , which is inspired by the concept of “ regime shifts ” in natural dynamical systems . Our method has the following properties : ( a ) Effective : it operates on large data streams , captures important patterns and performs long term forecasting ; ( b ) Adaptive : it automatically and incrementally recognizes the latent trends and dynamic evolution patterns ( ie , regimes ) that are unknown in advance ; ( c ) Scalable : it is fast and the computation cost does not depend on the length of data streams ; ( d ) Any time : it provides a response at any time and generates long range future events .
Extensive experiments on real datasets demonstrate that REGIMECAST does indeed make long range forecasts , and it outperforms state of the art competitors as regards accuracy and speed .
Categories and Subject Descriptors : H28 [ Database management ] : Database applications–Data mining Keywords : Time series ; Real time forecasting ; Regime shifts ;
1 .
INTRODUCTION
Time series event analysis is an important topic that has attracted huge interest in countless domains such as sensor network monitoring [ 10 , 24 ] , financial and economic analysis [ 37 , 35 ] , social activity mining [ 13 , 18 ] , online text [ 6 , 7 ] , and medical and health record data analysis [ 9 , 4 , 19 ] . In the real applications , a massive volume and variety of time stamped data is generated and collected at a very high logging rate , and this situation provides various new demands and opportunities for data scientists and analysts .
In this paper , we focus on the most important and challenging time series analysis task , namely , the real time forecasting of coevolving event streams , and specifically , we present REGIMECAST , an efficient forecasting method for co evolving time sequences .
KDD ’16 , August 13 17 , 2016 , San Francisco , CA , USA cfl 2016 ACM . ISBN 978 1 4503 4232 2/16/08 . . . $15.00 DOI : http://dxdoiorg/101145/29396722939755
REGIMECAST is designed as an adaptive non linear dynamical system , inspired by the concept of “ regime shifts ” in natural ecological systems [ 31 , 3 ] .
Intuitively , the problem we wish to solve is as follows :
INFORMAL PROBLEM 1 . Given a data stream X , which con sists of event entries of d dimensional data , ie , X = {x(1 ) , . . . , x(tc)} , where tc is the current time tick , forecast ls steps ahead future event x(tc + ls ) , immediately , at any point in time .
What is real time forecasting over data streams ? Assume that we have a data stream X , which is a semi infinite sequence of event entries of d dimensional data , {x(1 ) , x(2 ) , . . . , x(tc ) , . . .} , where x(tc ) is the most recent event , and tc increases with every new time tick . So , what would be the real requirements for forecasting data streams ? We need an efficient algorithm that reports upcoming unknown future events , immediately , at any point in time , while discarding redundant information . In short , the ideal solution would satisfy the following requirements .
• ls steps ahead forecasting : Assume that we have multiple sensors ( eg , accelerometers in automobiles or motion sensors in public areas ) , which generate d dimensional co evolving event entries , every millisecond . Given such a huge collection of event sequences , we want to forecast future events , efficiently and effectively , ( eg , to perform traffic accident prevention or home security monitoring and intrusion detection ) . Basically , our forecasting algorithm should be ( a ) it should generate more than , say , ls = 100 long term : steps ahead predictions , every time tick ; and ( b ) continuous : it should estimate future events , smoothly and continuously , by monitoring current trends and dynamic evolving patterns . With respect to the first property ( a ) , it is very important to predict long range future events . For example , if we receive an alert message , such as “ there will be a traffic accident in a second ” , it would be too late to avoid the accident . That is , faced with real time forecasting problems , short term ( say , 1 , 2 , 3 , . . . steps ahead ) prediction is meaningless . The second property , ie , ( b ) continuous processing is a requirement for data streams . Unlike the traditional time series forecasting approaches ( eg , ARIMA ) , which are static ( as opposed to dynamic ) , the ideal method should report future events , at every point in time , by capturing and updating the current dynamic evolving patterns , flexibly and continuously .
• Adaptive non linear modeling : As we will see later ( eg , in Figure 1 ( a) ) , real life time series event streams contain various types of distinct , dynamic evolving patterns of different durations , eg , the walking and house cleaning motion patterns in Figure 1 ( a ) , the normal and abnormal patterns seen in network traffic monitoring streams , and the patterns
1045 left/right legs l e u a V
2 0 −2 walking dragging sweeping
1000
2000
3000
( 100:120)−steps−ahead forecasted variables
Original data dustpan
4000
Time
5000 wipe window
Original walking
6000
7000
8000
RegimeCast left/right arms l e u a V
2 0 −2
( 1 )
1000
2000
3000
4000 ( 2 )
Time
5000
6000
7000
( 3 )
8000
( 4 )
( a ) Original data stream ( top ) and our real time forecasted result ( bottom )
Real−time forecasting : t=560
Real−time forecasting : t=4020
Real−time forecasting : t=6760
Real−time forecasting : t=8680
2
0 l e u a V
−2
Time
( 1 ) l e u a V
2
0
−2
( 2 ) l e u a V
2
0
−2
( 3 ) l e u a V
2
0
−2
( 4 )
300 400 500 600 700
560
660
680
3700 3800 3900 4000 4100
6500 6600 6700 6800 6900
8400 8500 8600 8700 8800
Time
Time
Time
( b 1 ) Walking ( tc = 560 )
( b 2 ) Dustpan ( tc = 4020 )
( b 3 ) Wipe a window ( tc = 6760 )
( b 4 ) Walking ( tc = 8680 )
Figure 1 : Forecasting power of REGIMECAST for a “ house cleaning ” motion event stream : ( a ) The original data ( top ) , our ( 100:120)steps ahead forecasted results ( bottom ) , and ( b ) snapshots of video clips ( top ) and REGIMECAST outputs ( bottom ) at four different time ticks . Given an original data stream , REGIMECAST incrementally and automatically identifies typical motions ( such as “ walking ” and “ using a dustpan ” ) , and also forecasts long range future events ( eg , in figure ( b 1 ) , at the current time tick tc = 560 , it makes ( 100:120) steps ahead predictions , ie , from ts = 660 to te = 680 ) . We note that our algorithm requires no prior training and no hint regarding the number of motions ( ie , regimes ) . For a more detailed explanation of our forecasting mechanism , please see Figure 3 . of growth , maturity and decline seen in product sales or Webbased online user activities ( eg , Figure 7 ) . Hereafter , we refer to such a distinct dynamic evolving pattern as a “ regime ” . As shown in Figure 1 ( a ) , a single event stream X consists of multiple regimes , where there are some abrupt changes of regimes , namely , “ regime shifts ” , such as , t = 1 , 000 , from a walking motion to a dragging motion . Consequently , our algorithm should identify any sudden discontinuity in an event stream , and recognize the current regime , immediately , so that it can forecast ls steps ahead future events , adaptively , at any time . We should also emphasize that these regimes are unknown in advance , and thus the algorithm should incrementally learn all arrived events , summarize them into a compact yet powerful representation . We thus propose using an adaptive non linear modeling approach that satisfies all the above requirements . We will discuss this further in subsection 32
Preview of our results . Figure 1 ( a ) shows the original event stream of a “ house cleaning ” motion ( top ) and the result we obtained with REGIMECAST ( bottom ) . The original data stream consists of four co evolving motion capture sensors : left/right arms and left/right legs . As shown in the figure , the original event stream is composed of several consecutive motions , including “ walking ” , “ dragging a mop ” , “ using a dustpan ” and “ wiping a window ” .
The bottom of Figure 1 ( a ) shows our ( 100:120) steps ahead forecasting results , and specifically , REGIMECAST forecasts ( 100:120)steps ahead future events , for every ( reporting ) time 1 . Figure 1 ( b1) (b 4 ) shows original video clips ( top ) and snapshots of REGIMECAST outputs ( bottom ) at four different time ticks ( ie , tc = 560 ,
1The reporting time window lp can be set by the user ( eg , lp = 20 ) . If it is set at lp = 1 , the algorithm reports a ls steps ahead single event , every 1 time tick .
4020 , 6760 , 8680 , respectively ) . In figures ( b 1) (b 4 ) , the estimated events are shown by bold colored lines , and the original sequences are shown by dotted gray lines . The red vertical axes show the time ticks {tc , ts , te} , where , tc is the current time tick . At each time tick tc , the algorithm tries to forecast ( 100:120) stepsahead future events , that is , from ts to te . For example , in the figure ( b 1 ) , at the current time tick tc = 560 , it predicts future events from ts = 660 to te = 680 . We will see this snapshot plot so often that we have given it a name , “ REGIMESNAP ” . Also , We will explain our detailed forecasting mechanism later in Figure 3 in subsection 41
Consequently , given a large collection of co evolving events , our method identifies important motion patterns ( eg , “ walking ” and “ wiping ” ) , and forecasts ls steps ahead future events , incrementally and automatically . Most importantly , our algorithm requires no prior training and no hint regarding the number of motions ( ie , regimes ) or trend changing ( ie , regime shift ) positions . Contributions . In this paper , we present REGIMECAST , which is a real time forecasting method for large co evolving data streams . Our method has the following desirable properties :
1 . Effective : it operates on a large collection of time series and performs long term event forecasting .
2 . Adaptive : it incrementally and automatically recognizes latent trends and non linear dynamic patterns ( ie , regimes ) while these patterns are unknown in advance .
3 . Scalable : the computation cost does not depend on data stream length .
4 . Any time : it generates long range predictions , immediately , at any point in time .
Outline . The rest of the paper is organized in the conventional way : Next we describe related work , followed by our proposed model and algorithms , experiments , discussion and conclusions .
1046 2 . RELATED WORK
In recent years , there has been an explosion of interest in mining time stamped data [ 29 , 30 , 24 , 23 , 33 ] . Similarity search and pattern discovery in time sequences have attracted huge interest [ 32 , 21 , 28 , 24 , 25 , 20 , 2 ] . Rakthanmanon et al . [ 27 ] proposed a similarity search algorithm for “ trillions of time series ” under the dynamic time warping ( DTW ) distance . The work in [ 17 ] proposed a scalable method for forecasting complex time stamped events , while , [ 14 ] developed AutoPlait , which is a fully automatic mining algorithm for co evolving sequences . Traditional approaches applied to time series data mining typically use linear method , such as auto regression ( AR ) , autoregressive integrated moving average ( ARIMA ) , linear dynamical systems ( LDS ) , Kalman filters ( KF ) and their derivatives including AWSOM [ 22 ] , TBATS [ 12 ] , PLiF [ 11 ] and TriMine [ 17 ] . Note that these methods are fundamentally unsuitable for our setting : they are all based on linear equations , and are thus incapable of modeling data governed by non linear equations . Existing non linear methods for forecasting tend to be hard to interpret and cannot be used easily for long term prediction , because they rely on a nearest neighbor search [ 36 , 1 ] . Non linear mining and analyses of epidemics and social activities have attracted a lot of interest [ 4 , 15 , 16 , 26 , 18 ] . The work described in [ 18 ] studied the rise and fall patterns in the information diffusion process through online social media .
3 . DESIGN PHILOSOPHY OF REGIMECAST
In this section , we present the fundamental concepts and design philosophy behind our method .
3.1 Regime shifts in natural systems
Large , abrupt , long lasting changes in the structure of complex systems – regime shift– it is a key concept for understanding realworld dynamical phenomena . Because of its importance and substantial impact on human society , regime shift has been widely studied over recent decades in various research domains , especially , in the field of environmental ecology [ 31 , 5 , 3 , 34 ] .
In ecology , a regime is defined as a characteristic behavior of a natural phenomenon over time , and a regime shift implies an abrupt change , in relation to the duration of a regime , from one characteristic behavior to another [ 5 ] . Typically , regime shifts are triggered either by internal processes , eg , weakening of stability , or by external shocks that exceed the stabilizing capacity of a system . Also , these transition patterns are sometimes gradual , rather than abrupt [ 34 ] .
For example , let us consider biological ecosystems , such as lakes , coral reefs and woodlands , where biotic/abiotic components ( eg , fishes , corals , water , mineral soils ) are interacting with each other , as a complex , adaptive non linear system . In such a natural ecosystem , we can observe several sudden changes of states . For example , one of the most dramatic state shifts is the the sudden loss of transparency and vegetation in shallow lakes caused by human induced eutrophication . Similarly , in a marine ecosystem , there is a transition from a coral dominated system to an fleshy brown macroalgae dominated system , which is possibly induced by hurricane or climate change . Also , as described in Figure 2 ( a ) , a woodland ecosystem can be alternated with a grassy open landscape . Landscapes can be kept open by herbivores ( or , fires and tree cutting ) , while woodlands , once established , are stable because adult trees cannot be destroyed by herbivores [ 31 ] 2 . Theoretical analysis and mathematical modeling . The most basic and minimum form of an ecological dynamical system can be
2
Image courtesy of dan at FreeDigitalPhotosnet
Woodlands !" Grasslands !"
Walking!
Wiping!
( a ) Ecological system
( b ) Motion sensors
Figure 2 : Illustration of regime shifts in an ecological system vs . sensor stream : ( a ) Regime shifts between two alternative stable states : woodlands and grasslands , and ( b ) regime shifts in motion sensors , between walking and wiping activities . described with the following ordinary differential equation ( ODE ) [ 31 ] : ds(t ) dt
= a0 + a1s(t ) + a2f ( s(t) ) ,
( 1 ) where , s(t ) shows the time evolving ecosystem property , such as nutrients or soils at time tick t , and a0 describes an environmental factor that promotes s(t ) , ( eg , nutrient loading ) , a1 is the rate at which s(t ) grows/decays in the system ( eg , nutrient removal rate , for a1 < 0 ) . The last term , a2 represents the rate at which s(t ) recovers again as a function f ( s(t) ) , ( eg , internal nutrient recycling ) , and the function f can cause alternative stable states .
Because of its simplicity and generality , the above dynamical equation and the concept of regime shifts have been applied outside ecology , to sociology , economics , political science and beyond . Next we present our proposed method , REGIMECAST , which is inspired by the regime shifts in natural dynamical systems .
3.2 Proposed model
Given a large event stream X , which contains various dynamic evolving patterns ( ie , regimes ) , our goal is to find important trends and summarize them as a compact but powerful and adaptive representative model , to perform , long term event forecasting .
So , what exactly are the most important properties for forecasting the event stream X ? Specifically , we want to describe the following three important properties :
• ( P1 ) Latent non linear dynamics • ( P2 ) Regime shifts in event streams • ( P3 ) Nested structure Similar to the natural dynamical systems described in subsection 3.1 , real event streams evolve naturally over time , depending on many latent factors , such as traffic , weather and driver ’s condition for automobile sensors , or user ’s preferences and customs for online Web click activities . We need to capture the complicated and hidden dynamics of real time series events that involve non linear phenomena . To handle ( P1 ) , we propose using latent non linear differential equations . We also want to automatically detect the switching positions of dynamic evolution patterns , that is , ( P2 ) regime shifts in event streams . Figure 2 compares regime shifts in an ecological system vs . an event stream ( ie , a motion sensor stream ) . We conjecture that event streams behave as a complex , adaptive non linear dynamical system in the same way that biotic/abiotic components in a natural ecosystem evolve and interact over time , where there are multiple alternative stable states ( ie , regimes ) , that can be switched to one another . We should also note that real event streams are composed of multi level nested systems , each of which has a different time scale , and can be integrated as a part of a larger system , that is , we need ( P3 ) . For example , as shown in Figure 7 , Web click activities exhibit long term evolution such as ten year
1047 patterns of growth and decline , as well as short term , say weekly , daily and hourly patterns . Similar behavior can be observed in natural systems , eg , both long term climate change and sudden hurricanes can affect a coral reef system [ 31 ] . We thus propose using a multi level nested modeling structure that enables more effective modeling and forecasting .
Now , we describe our concept in steps , adding complexity .
321 Latent non linear dynamical systems ( P1 )
We begin with the simplest case , where we have only a single dynamical pattern ( ie , regime ) , eg , walking motion in a sensor event stream , where , there are no regime shifts in the sequence ( P1 ) . In our basic model , we assume that there are two classes of time evolving activities :
• s(t ) : Potential activity , ie , k dimensional latent activity at time tick t , ( s(t ) = {si(t)}k i=1 ) .
Here , w(t ) describes the dynamical activity for each i th regime ( 1 ≤ i ≤ c ) at time tick t .
Consequently , we extend Model 1 , and propose the following model , which is designed as a complex and adaptive dynamical system :
MODEL 2 . Let si(t ) be the k dimensional latent activity of ith regime at time tick t ( ie , si(t ) = {sij(t)}k j=1 ) , w(t ) be the contribution strength of each i th regime at time tick t ( ie , w(t ) = {wi(t)}c i=1 ) , and v(t ) be the d dimensional estimated event at time tick t . Our full model can be described as the following equations ,
= pi + Qisi(t ) + AiSi(t ) ( i = 1 , . . . , c )
( 4 ) dsi(t ) dt dw(t ) dt
= r(t )
( 5 )
( 6 )
• v(t ) : Estimated event , ie , d dimensional actual activity that v(t ) = can be observed at time tick t , ( v(t ) = {vi(t)}d i=1 ) . c
X i=1 wi(t ) [ ui + Visi(t ) ]
Here , we can only observe the actual event v(t ) at time tick t , ( such as , actual variables generated by d sensors ) , while s(t ) is a hidden vector that evolves over time as a dynamical system . Consequently , a single regime can be described with the following equations :
MODEL 1 . Let s(t ) be the k dimensional potential activity at time tick t , and v(t ) be the d dimensional estimated event at time tick t . Our base model is governed by the following equations , ds(t )
= p + Qs(t ) + AS(t ) dt v(t ) = u + Vs(t )
( 2 )
( 3 ) with initial conditions s(0 ) = s0 , where , ds(t)/dt is the derivative with respect to time tick t and S(t ) shows the quadratic form matrix of s(t ) , ie , S(t ) = s(t)T s(t ) .
Here , p , Q , A describe the potential activity s(t ) , each of which captures linear , exponential , and non linear dynamical activities 3 , while , u , V show the observation projection , which generates the estimated event v(t ) at each time tick t . Also note that the nonlinear activity tensor A should be sparse , to eliminate the complexity of the system . We will explain this later in section 4 .
Consequently , we have the following :
DEFINITION 1
( SINGLE REGIME PARAMETER SET : θ ) . Let θ be a parameter set of a single non linear dynamical system , ie , θ = {s0 , p , Q , A , u , V} . We refer to θ as a single regime parameter set .
322 Regime shifts in event streams ( P2 )
Our next step is to answer the most important question , namely , how can we describe regime shifts in an event stream ( P2 ) ? Assume that we have a sensor stream that consists of c = 2 regimes , eg , walking and wiping motions ( Figure 2 ( b) ) . We want an adaptive model that can generate c distinct time evolving patterns , such as walking and wiping motions , where these patterns appear interchangeably , that is , the regimes can be switched to others . So what would be the best way to describe the dynamic evolving regime shift patterns among c distinct regimes ? We thus introduce an additional time evolving activity , namely ,
• w(t ) : Regime activity , ie , c dimensional latent regime shift activity among c regimes at time tick t .
3 In this paper , for simplicity , we use a quadratic function for the non linear activity tensor A . where , dw(t)/dt shows the derivative with respect to time tick t .
In Model 2 , we need an additional parameter , r(t ) , which is a cdimensional vector at time tick t . Let R be a parameter set of regime shift dynamics , ie , R = {r(t)}tc t=1 , where tc shows the length of the event sequence . We refer to R as a regime shift matrix . Please note that if there is a single regime ( ie , c = 1 ) , our full model is identical to Model 1 . Consequently , we have the following :
DEFINITION 2
( REGIME SET : Θ ) . Let Θ be a parameter set of regime set , namely , Θ = {θ1 , . . . , θc , R} , that describes nonlinear co evolving patterns of c regimes .
323 With nested structure ( P3 )
Until now , we have assumed a single level dynamical system , which consists of a regime set Θ . In reality , however , we should consider multi level , nested structure to describe multi scale dynamical activities , such as long term evolution ( eg , ten year pattern ) and short term ( eg , weekly ) dynamical events in online activities . So , is there any simple solution to capture this phenomenon ? To handle ( P3 ) , we propose using multi level regime set M = {Θ(1 ) , Θ(2 ) , . . . } , where each regime set Θ(i ) in M describes a dynamical system at a different time scale . The idea is that , given a set of multi level regimes in M , we generate the local estimated event v(i)(t ) at the i th level . The estimated event v(t ) can be organized simply by gathering all the local event set together . Full model parameter set of RegimeCast . Our complete model consists of the following :
DEFINITION 3
( COMPLETE SET OF REGIMECAST : M ) . Let M be a full parameter set , namely , M = {Θ(1 ) , . . . , Θ(h)} , that describes multi level time evolving patterns .
4 . STREAMING ALGORITHM
We now introduce our full algorithm , namely , REGIMECAST , which is an efficient and effective forecasting method for large coevolving event streams .
4.1 Problem formulation We first define some key concepts .
DEFINITION 4
( EVENT STREAM : X ) . Let X be a data stream that consists of event entries of d dimensional data , ie , X = {x(1 ) , . . . , x(tc)} , where tc is the current time tick . We refer to X as an event stream .
1048 Table 1 : Symbols and definitions .
Event stream X!
Θ(1 )
TSM DB
( 1 )
θ1
( 1 )
θ2
Θ( 2 )
M !
( b)!
Regime
Estimator
θ1
( 2 ) θ2
( 2 )
Time! t c
X
C
Report!
V F
Forecast window
( a)!
Regime Reader!
+
≈
( 1 ) V E
( 2 ) V E
V E
Future events!
Symbol Definition d tc X x(t ) s(t ) w(t ) v(t ) XC VF c(i ) ( i ) θj R(i ) Θ(i ) M
Number of dimensions Current time tick d co evolving event stream , ie , X = {x(1 ) , . . . , x(tc)} d dimensional event at time tick t , ie , x(t ) = {xi(t)}d Potential activity at time tick t , ie , s(t ) = {si(t)}k Regime activity at time tick t , ie , w(t ) = {wi(t)}c Estimated event at time tick t , ie , v(t ) = {vi(t)}d Current window , ie , XC = X[tm : tc ] Forecast window , ie , VF = V [ ts : te ] Number of regimes at i th level Parameter set of j th regime at i th level Parameter set of regime shift matrix at i th level Full parameter set at i th level Complete set of REGIMECAST , ie , M = {Θ(i)}h i=1 i=1 i=1 i=1 i=1
Current window!X
C
Forecast window
V F
"
!
!"
% ! Time tick!
"!!
Event stream!X
Estimated events!
V E t m
#!! t
$!! c t s t e
Arrived events!
Future ( unknown ) events!
Figure 3 : Illustration of REGIMESNAP : Given an event stream X ( black dotted lines ) , our algorithm estimates the current time series pattern VE ( colored bold lines ) , and reports lssteps ahead future events VF ( in a red box ) , incrementally and continuously . Here , XC = X[tm : tc ] is a current window ( ie , recently arrived events ) and VF = V [ ts : te ] is a ls steps ahead future ( ie , unknown ) event set .
Assume that we receive a new event x(tc ) , continuously , and tc increases with every new time tick . It would be convenient to treat the most recently arrived events , as a current window .
DEFINITION 5
( CURRENT WINDOW : XC ) . Let XC = X[tm : tc ] be the subsequence of length lc , starting from time tick tm and ending at tc ( 1 ≤ tm ≤ tc ) 4 .
Given the current window XC , our next step is to find the optimal regimes in M , and predict ls steps ahead future activities : VF = {v(ts ) , . . . , v(te)} using Model 2 .
DEFINITION 6
( ls STEPS AHEAD FORECAST WINDOW : VF ) . Let VF = V [ ts : te ] denote the ls steps ahead future events starting from time tick ts and ending at te ( tc ≤ ts ≤ te ) , where , ts = tc + ls , te = ts + lp , and lp is the length of the reporting window .
Figure 3 shows a snapshot of REGIMECAST at the current time tick tc , namely , REGIMESNAP . Here , the black dotted lines show the original event stream X , which consists of a d = 4 dimensional event sequence . The bold colored lines show our estimated events VE from time tick tm to te . Note that the subsequence from tc to te is future ( unknown ) events , and we need to estimate these hidden dynamical patterns , incrementally and continuously .
4We set lc = 3 · ls in our setting .
Figure 4 : Overview of the REGIMECAST algorithm : Given an event stream X , it first extracts the current window XC , and then ( a ) searches for the optimal regime patterns in the timeseries model database , and generates the ls steps ahead events VF . If there is a new ( ie , unknown ) regime pattern in XC , ( b ) it also estimates the new regime model parameter set θ , and inserts it into the database .
Consequently , given an event stream X , our goal is to capture the current time evolving patterns in XC , as a complex , non linear dynamical system , and predict the ls steps ahead forecast window VF , at any point in time . We formally define our problem as follows :
PROBLEM 1 . Given a data stream X = {x(1 ) , . . . , x(tc ) , . . .} at regular time intervals , report ls steps ahead future events VF at any point in time , ie ,
• identify the optimal regime patterns in XC , • update the model parameter set M that describe the dynamic patterns in XC ,
• report ls steps ahead future events , ie , VF .
4.2 Overview
We now introduce our forecasting algorithm , REGIMECAST , which consists of the following algorithms .
• REGIMEREADER : Estimates good regime dynamics and generates the estimated events VE = V [ tm : te ] , when we are given the current window XC and the model parameters Θ . • REGIMEESTIMATOR : Estimates a good regime parameter set θ for XC , when the current window XC contains a new regime pattern ( if required ) .
• REGIMECAST : Estimates the optimal event set VE
( i ) at each level i ( i = 1 , . . . , h ) , computes estimated event event set ( 2 ) + . . . , and reports the ls steps ahead VE = VE future events ie , forecast window VF . It also maintains the full model parameter set M .
( 1 ) + VE
Figure 4 illustrates how the REGIMECAST algorithm works . Given an event stream X = {x(1 ) , . . . , x(tc)} , where tc is the current time tick , our algorithm incrementally extracts the current window ( 2 ) + XC , estimates the current regime pattern VE = VE . . . , and reports ls steps ahead future events VF , at any point in time . It also maintains the time series model database ( TSM DB ) , and updates model parameters in M , if required .
( 1 ) + VE
4.3 Proposed algorithms
Here we present our proposed algorithms in steps . To simplify the discussion , let us focus on a simple step first , where we have a single level window XC and a regime parameter set Θ ( that is , we have a single level structure , h = 1 ) .
1049 Algorithm 1 REGIMEREADER ( XC , Θ ) 1 : Input : current window XC and current regime parameters Θ 2 : Output : Estimated events VE = V [ tm : te ] and updated regimes Θ 3 : /* ( I ) Individual regime estimation */ 4 : for i = 1 : c do 5 : /* Estimate s′ 6 : {θi[s0 ] , VC i} = arg min i for i th regime θi */
0 and activity VC
||XC − VC i = fC ( s′ i|| ; // VC
0|θi ) ;
′
′
′ s′
0,VC
′ i
7 : end for 8 : /* ( II ) Estimate regime activity at current time tick tc */ 9 : w(tc ) = arg min w1,,wc i=1 wiVC i|| ;
||XC − Pc
10 : r(tc ) = w(tc ) − w(tc − 1 ) ; // Calculate regime shift variable 11 : R = R ∪ r(tc ) ; Θ = {θ1 , . . . , θc , R} ; // Update full parameters 12 : VE = fE ( Θ ) ; // Calculate estimated event VE 13 : return {VE , Θ} ;
431 RegimeReader
Assume that we are given the current window XC and the current regime parameter set Θ = {θ1 , . . . , θc , R} . Our first goal is to estimate the dynamical event sequence VE = V [ tm : te ] , as shown in Figure 4 ( a ) . So , how can we estimate events VE , given the current regime set Θ ? The most straightforward solution would be simply to use the fixed parameters in Θ and calculate v(tm ) , v(tm + 1 ) , . . . , using Model 2 . However , in real event streams , the latent trends of the current window XC would dynamically and continuously change over time . That is , We should identify the optimized regimes in Θ that describe the characteristics of the current window XC . Most importantly , the algorithm needs to adaptively update parameters in Θ , so that it can describe the current activities in XC . Algorithm 1 shows the overall procedure for the adaptive regime detection , namely , REGIMEREADER . In short , the algorithm consists of two parts , namely , ( I ) individual regime optimization , and ( II ) regime shift identification . ( I ) Individual regime optimization . For each i th regime parameters θi ∈ Θ ( i = 1 , . . . , c ) , the algorithm tries to optimize the initial condition of potential activity , ie , s0 in θi , so that it minimizes the mean square errors between the original events and the estimated events , ie , min ||XC −VC i|| . Here , let fC ( s0|θ ) be a function that generates estimated events VC = {v(tm ) , . . . , v(tc)} in Model 2 , given regime parameters s0 and θ . ( II ) Regime shift identification . Given a set of c optimized event sequences {VC i}c i=1 , the algorithm estimates the latent dynamics of regime shifts at time tick tc , and specifically , it computes regime activity w(tc ) to optimize the regime set in Θ , and updates regime shift matrix R in Θ , according to Equation 6 ( ie , min ||XC − fC ( Θ)|| ) . Finally , it computes the estimated event VE = fE(Θ ) as the optimal events for the current window XC .
Here , we use the Levenberg Marquardt ( LM ) algorithm to mini mize the mean square errors || · || .
432 RegimeEstimator
Next , let us tackle the next question , namely , what if there is a new , unknown regime in XC ? We want to estimate the new regime parameter set θ that describes the dynamical patterns in XC , and insert it into the full parameter set Θ ( Figure 4 ( b) ) . Since θ consists of a large number of parameters , it is extremely expensive to optimize all the parameters simultaneously . Also , as we mentioned in subsubsection 321 , the non linear activity tensor A should be sparse , to avoid overfitting , and to simplify the dynamical patterns in a single regime . We thus propose an efficient and effective algorithm , namely , REGIMEESTIMATOR , which searches for the optimal solution in terms of both the linear and non linear parameters . The idea is that we split parameter set θ into two subsets , ie ,
Algorithm 2 REGIMEESTIMATOR ( XC ) 1 : Input : current window XC 2 : Output : Estimated model parameter set θ = {s0 , p , Q , A , u , V} 3 : /* Estimate linear dynamical parameters θL = {p , Q , u , V}*/ 4 : A = 0 ; // Initialize tensor A 5 : {s0 , θL} = arg min
||XC − VC || ; //VC = fC ( s′
0 , θ′
L , θN ) s′
0,θ′
L
6 : /* Estimate non linear dynamical parameters θN = {A} */ 7 : {s0 , θN } = arg min
||XC − VC || ; //VC = fC ( s′
0 , θL , θ′
N ) s′
0,θ′ N
8 : θ = {s0 , θL , θN } ; // Full parameter set 9 : return θ = {s0 , p , Q , A , u , V} ;
θL = {p , Q , u , V} and θN = {A} , each of which corresponds to a linear/non linear parameter set , and try to fit the parameter sets separately . Algorithm 2 shows the steps performed by REGIMEESTIMATOR in detail . Given a current window XC , it first set A = 0 , and estimates the initial condition s0 and linear parameters θL that describe linear dynamical patterns in XC . Here , we use the expectation maximization ( EM ) algorithm to optimize the parameters . It then estimates non linear elements in A to minimize the errors between XC and potential activity VC , using the LM algorithm . Also note that , for the non linear tensor A , we only estimate parameters for the diagonal elements aijk ∈ A ( i = j = k ) to eliminate the complexity .
433 RegimeCast
Until now , we have discussed how to generate the estimated event sequence VE at a single level regimes Θ . Our final goal is to capture multi level dynamical patterns M = {Θ(1 ) , . . . , Θ(h)} , and predict ls steps ahead forecast window VF ( see Figure 4 ) . As we described in subsubsection 323 , given a event stream X , we want to describe multi level dynamical activities , eg , yearly , weekly , and daily patterns . We thus propose multi scale modeling approach that enables more effective forecasting . The idea is that we decompose the current window XC into a set of multi scale event se(i ) shows the current quences XC = XC event sequence at the i th level . Specifically , the i th level sequence ( j)|H(i) ) , can be computed as follows : XC where g(·|t ) denotes the moving average of length t . 5
( i ) = g(XC −Pi
( h ) , where XC
( 1)+ . . . XC j=1 XC
The detailed REGIMECAST algorithm is shown in Algorithm 3 . ( i ) at Given a new event x(tc ) , it extracts the current window XC ( i ) . If there is no the i th level , and ( I ) estimates event sequence VE appropriate regime in Θ(i ) ( ie , the error between the current win(i)|| ) , dow and estimated events is more than ǫ , eg , ǫ = 1/2||XC ( II ) it creates a new regime θ and update the regime set Θ(i ) . Finally , ( III ) it reports ls steps ahead forecast window VF . Efficient event generation and dynamic point set ( DPS ) . Since our estimation algorithm , REGIMEREADER , is based on a complex dynamical system , described in Model 2 , it requires O(le ) time to calculate the potential activity SE = {s(tm ) , . . . , s(te)} at every time tick tc , where le shows the length of SE . However , it is a potential bottleneck for the real time processing . We thus propose an efficient approach for the dynamic event generation . Specifically , instead of computing all events SE = {s(tm ) , s(tm + 1 ) , s(tm + 2 ) , . . . , s(te)} , we generate a subset of SE , namely , a dynamic point set ( DPS ) : ˆSE = {s(tm ) , s(tm +δ ) , s(tm +2δ ) , . . . , s(te)} , where δ shows the time interval of the potential activity ( say , δ = 0.1 · ls ) . We use a simple yet powerful , numerical integration method , namely , the forth order Runge Kutta method [ 8 ] , to generate the dynamic point set ˆSE :
5In this paper , we set H = {2 · ls , 1} .
1050 Algorithm 3 REGIMECAST ( x(tc ) ) 1 : Input : a new event x(tc ) at time tick tc 2 : Output : ls steps ahead future events VF 3 : /* Initialize forecast window VF = 0 */ 4 : for i = 1 : h do ( i ) ; // current window at i level 5 : Compute XC 6 : /* ( I ) Parameter fitting for regime activities */ ( i ) , Θ(i)} = REGIMEREADER(XC 7 : {VE 8 : /* ( II ) Regime estimation ( if required ) */ 9 : VC 10 : if ||XC 11 : 12 : end if 13 : end for 14 : /* ( III ) ls steps ahead future event generation */ ( h ) ; VF = V [ ts : te ] ; 15 : VE = VE 16 : return VF ;
θ = REGIMEESTIMATOR(XC
( 1 ) + . . . , VE
( i ) , Θ(i) ) ;
( i ) = V ( i)[tm : tc ] ; // Estimated events from tm to tc
( i ) − VC
( i)|| > ǫ then
( i) ) ; Θ(i ) = {Θ(i ) ∪ θ} ; s(t + δ ) = s(t ) +
1 6
( K1 + 2K2 + 2K3 + K4 ) + O(δ5 )
( 7 )
2 K1 ) , K3 = δF ( s(t ) + 1 where , we define ds(t)/dt = F ( s(t) ) , and K1 = δF ( s(t) ) , K2 = δF ( s(t ) + 1 2 K2 ) , K4 = δF ( s(t ) + K3 ) . Consequently , the algorithm requires O(le/δ ) time to compute ˆSE , where le/δ shows the length of ˆSE . Theoretical analysis . Let le be the length of the estimate event set VE , and c be the number of regimes in M .
LEMMA 1 . The computation time of REGIMECAST is at least O(c · le/δ ) time per time tick , at most O(c · le/δ + lc ) time per time tick .
PROOF . For each time tick tc , REGIMEREADER requires O(c · le/δ ) time to estimate c optimal regimes VE . If there is a new regime in the current window XC , REGIMEESTIMATOR requires O(lc ) to estimate parameter set θ . Thus , we have at least O(c·le/δ ) time at most O(c · le/δ + lc ) time per time tick .
5 . EXPERIMENTS
In this section we demonstrate the effectiveness of REGIMECAST with real event streams . The experiments were designed to answer the following questions :
Q1 Effectiveness : How successful is our method in forecasting long term events in given input streams ?
Q2 Accuracy : How well does our method forecast future event entries ?
Q3 Scalability : How does our method scale in terms of compu tational time ?
Our experiments were conducted on an Intel Core i7 3770K 3.50GHz with 32GB of memory , running Linux . We normalized the values of each dataset so that they had the same mean and variance ( ie , z normalization ) , and set k = 4 for all datasets .
5.1 Q1 : Effectiveness
We demonstrate the forecasting power of REGIMECAST in terms of capturing important patterns of event streams . Sensor event streams . We first examine our forecasting results on real motion event streams . Figure 1 , Figure 5 and Figure 6 show our real time forecasting results for three motion capture steams : “ house cleaning ” , “ exercise ” and “ chicken dance ” , respectively . The datasets were obtained from the CMU motion capture database6 . Each event stream consists of d = 4 dimensional vectors ( left right legs and arms ) , and it contains various motions ( ie , regimes ) , such as walking and dancing . One of the results has already been presented in section 1 ( ie , Figure 1 ) . It automatically and effectively identifies multiple regime shift positions ( such as from the wiping motion to the walking motion ) , and forecasts long range future activities .
Figure 5 shows our real time forecasting results and some snapshots obtained at several different time ticks . Specifically , Figure 5 ( a ) consists of several regimes , which correspond to some exercise activities . The bottom of Figure 5 ( a ) shows the output for ( 100:120) steps ahead real time predictions , where we set the reporting window lp = 20 . More specifically , REGIMECAST generates ( 100:120) steps ahead future events for every lp = 20 time tick , ( eg , at time tick tm = 100 , it reports X[200 : 220 ] , at time tick tm = 120 , it reports X[220 : 240 ] , and so on ) . Figure 5 ( b ) shows four examples of REGIMESNAP at different time points , each of which belongs to one of four different regimes . As shown in the figures , our modeling approach successfully captures dynamical regime shift patterns , as well as the non linear dynamical evolving activities of four different regimes .
Figure 6 shows REGIMECAST for the chicken dance stream . Specif ically , the top of Figure 6 ( a ) shows the original stream , which is composed of four steps in the following order : “ beaks ” , “ wings ” , “ tail feathers ” and “ claps ” , and these steps are repeated again . It is a much more challenging task to forecast upcoming dance steps because the event stream contains several nested multi scale regimes . As shown at the top of Figure 6 ( b ) , each step can be decomposed into several basic movements , where each movement has a different tempo/speed . For example , “ tail feathers ” consists of “ moving arms , quickly ” and “ bending knees , once ” , The bottom of Figure 6 ( a ) and ( c 1) (c 3 ) show our entire output of ( 30:35) steps ahead forecasting results , and REGIMESNAP at several time ticks , respectively . As shown in the figures , our proposed method captures complicated dynamical activities , which consist of multiple hidden regimes , and successfully generates long range upcoming motion patterns . We should also note that our algorithm does not use any prior training or hint regarding the steps . It incrementally finds important dynamical patterns ( ie , regimes ) , estimates the parameters of the new regime and inserts it into the model database . Online activity streams . Next , we demonstrate our forecasting power as regards Web click activities . Figure 7 shows our results for GoogleTrend event streams , which consist of the search volumes for various queries ( ie , words ) on Google7 . Each query represents the search volumes related to keywords over time ( over twelve years , on a weekly basis ) . We performed our real time forecasts on four event streams , which were taken from the following domains : ( a ) OnlineTV , ( b ) Beer , ( c ) Social media and ( d ) Software . For each event stream , it continuously generates threemonths ahead predictions , every time tick .
Figure 7 ( a ) shows our forecasting result for OnlineTV , which contains d = 4 dimensional events : Netflix ( x1 ) , Hulu ( x2 ) , YouTube ( x3 ) and Amazon Prime ( x4 ) . Recently , there has been a rapid increase in new video streaming services , and REGIMECAST successfully captures the long range evolution and exponential rising patterns in all co evolving keywords . Note that there was a regime shift point from 2011 to 2012 , ie , Hulu ( x2 , shown as the green line ) has had a declining pattern since 2011 , which coincided with the ascent of Netflix ( x1 , shown as the blue line ) , possibly indicating that there was competition/interaction between the two services , and Netflix has been drawing customers’ attention away from Hulu . Most importantly , our algorithm , REGIMECAST , can auto
6MoCap : http://mocapcscmuedu/
7GoogleTrend : http://wwwgooglecom/trends/
1051 l e u a V
2
0
−2 l e u a V
2
0
−2 walking stretching
( left )
( both )
Original data
( right )
( left )
( both ) walking
Original
500
1000
1500
2000
2500
3000
3500
4000
4500
5000
Forecasted variables
Time
Forecasted result
RegimeCast
500
1000
1500
2000
( 1 )
2500
Time
3000
( 2 )
3500
4000
4500
( 3 )
5000 ( 4 )
( a ) Original event stream ( top ) and ( 100:120) steps ahead forecasting results ( bottom )
Real−time forecasting : t=2240
Real−time forecasting : t=3100
Real−time forecasting : t=4200
Real−time forecasting : t=4980 l e u a V
2
1
0
−1
−2 l e u a V
2
1
0
−1
−2 l e u a V
2
1
0
−1
−2 l e u a V
2
1
0
−1
−2
2000
2200
2400
2800
Time
3000 Time
3200
3900 4000 4100 4200 4300
4700 4800 4900 5000 5100
Time
Time
( b 1 ) Stretch/left ( tc = 2240 )
( b 2 ) Stretch/right ( tc = 3100 )
( b 3 ) Stretch/both ( tc = 4200 )
( b 4 ) Walking ( tc = 4980 )
Figure 5 : REGIMECAST is effective : Forecasting power of REGIMECAST for the motion event stream ( “ exercise ” ) . ( a ) The original data ( top ) , our ( 100:120) steps ahead predictions ( bottom ) , and ( b ) snapshots of video clips ( top ) and REGIMESNAP ( bottom ) at four different time ticks . REGIMECAST automatically identifies important regime patterns ( eg , “ stretching ” and “ walking ” ) , and also forecasts future events , incrementally , and effectively .
Original data beaks !"wings tail feathers claps# wings claps beaks tail feathers l e u a V l e u a V
2
0
−2
2
0
−2
200
400
600
800
1000
1200
RegimeCast
( 1 )
( 3 )
Time
( 2 )
( b ) Four steps of “ chicken dance ”
Real−time forecasting : t=540
Real−time forecasting : t=1044
Real−time forecasting : t=1116 l e u a V
2
0
−2
( 1 ) l e u a V
2
0
−2 l e u a V
2
0
−2
( 2 )
( 3 )
200
400
600
800
1000
1200
Time
450
500
550
950
1000
1050
Time
Time
1050
1100
1150
Time
( a ) Original stream ( top ) and our forecasted events ( bottom )
( c 1 ) tc = 540
( c 2 ) tc = 1044
( c 3 ) tc = 1116
Figure 6 : Real time forecasting of REGIMECAST for “ chicken dance ” : ( a ) Given the dance motion stream ( bottom ) , our proposed method incrementally identifies four basic steps , ie , ( b ) “ beaks ” , “ wings ” , “ tail feathers ” and “ claps ” in the sequence , and adaptively forecasts long range future patterns . ( c ) REGIMESNAP for four different time points . Here , it generates ( 30:35) steps ahead future events . We emphasize that our algorithm does not need any prior training or knowledge regarding the motions ( ie , regimes ) .
Original data
4
2
0 l e u a V
2004
2007
2010
2013
Netflix Hulu YouTube Amazon(P )
4
2
0 l e u a V
Original data l e u a V
2
0
2016 Time
−2 2004
RegimeCast
2
0 l e u a V
Corona Keystone 2007 Coors Modelo SierraNevada
2010
Time
2013
Regime Cast
Original data l e u a V
2
1
0
2010
2013
Time
RegimeCast
2007
Tumblr Facebook LinkedIn SoundCloud Yelp
−1 2004 l
2 e u a 1 V
0
Original data
2007
HTML Java SQL JavaScript HTML5
2010
2013
Time
RegimeCast
2
0 l e u a V
−2 2004
2
0 l e u a V
2004
2007
2010
2013
( a ) Online TV
−2 2004
2016 Time
2007
2010 ( b ) Beers
2013
Time
−1 2004
2007
2010 ( c ) Social media
2013
Time
−2 2004
2007
2010
Time
( d ) Software
2013
Figure 7 : REGIMECAST successfully forecasts 3 months ahead future events of online user activities : Each event sequence consists of the Google search volume for several keywords ( from 2004 to the present ) , ie , ( a ) OnlineTV ( 1:Netflix , 2:Hulu , 3:YouTube , 4:Amazon Prime ) , ( b ) Beer ( 1:Corona , 2:Keystone , 3:Coors , 4:Modelo , 5:Sierra Nevada ) , ( c ) Social media ( 1:Tumblr , 2:Facebook , 3:LinkedIn , 4:SoundCloud , 5:Yelp ) , ( d ) Software ( 1:HTML , 2:Java , 3:SQL , 4:JavaScript , 5:HTML5 ) . Given the online user activities ( top ) , it incrementally forecasts events three months ( ie , 13 weeks ) ahead , at every reporting window lp = 2 weeks ( bottom ) .
1052 4
3
2
1
E S M R
Forecasting error
4
RegimeCast ARIMA
3 E S 2 M R 1
RegimeCast ARIMA TBATS
0 1000
2000
3000
5000
4000
Time
Average
( a ) Forecasting error for each time tick ( left ) and average ( right )
2
0
−2
2
0 −2
ARIMA
1000
2000
3000
4000
5000
TBATS
1000
2000
3000
4000
5000
( b ) Forecasting results of ARIMA ( top ) and TBATS ( bottom )
Figure 8 : Forecasting error ( RMSE ) for the motion event stream : REGIMECAST consistently outperforms the state ofthe art methods with respect to accuracy between real values and the ( 100:120) steps ahead forecasted results . ( a ) Forecasting error for each time tick ( left ) and the average ( right ) . Lower is better . ( b ) Forecasting results of our competitors . Please also see the original stream and our result shown in Figure 5 ( a ) . e m i t k c o c l l l a W
2 10
1 10
0 10
3 10
2 10
1 10
0 10 e m i t k c o c l l l a W
RegimeCast RegimeCastF ARIMA TBATS
2 10
1 10 e m i t k c o c l l l a W
RegimeCast ( r ) RegimeCast RegimeCastF ( r ) RegimeCastF ARIMA TBATS
RegimeEstimator
1000
2000
3000
4000
5000
0 10
Sequence length
Average
( a ) “ Exercise ”
RegimeCast RegimeCastF ARIMA TBATS
RegimeCast ( r ) RegimeCast RegimeCastF ( r ) RegimeCastF ARIMA TBATS
2 10
1 10 e m i t k c o c l l l a W
2000
4000
6000
8000
0 10
Sequence length
Average
( b ) “ House cleaning ”
Figure 9 : Wall clock time vs . sequence length tc ( left ) and average ( right ) : REGIMECAST consistently wins . It is up to 270 times faster than TBATS .
E S M R
3
2.5
2
1.5
1
0.5
RegimeCast ARIMA TBATS
) . c e s ( e m i t k c o c l l l
50 75 100 125 150 175 200
Steps a W
2 10
1 10
RegimeCast ARIMA TBATS
50 75 100 125 150 175 200
Steps
( a ) forecasting error
( b ) computation time ls steps ahead forecasting over the motion event Figure 10 : stream ( “ exercise ” ) : REGIMECAST consistently wins . ( a ) Forecasting error ( RMSE ) vs . prediction length ls ; ( b ) Wall clock time vs . prediction length ls . Lower is better . matically identify sudden changes of regimes , and forecast upcoming events , adaptively and immediately .
Figure 7 ( b ) shows our result for Beer , which successfully captures the long term non linear dynamical evolution of the beer industry . There is significant growth of all the keywords with one exception , Coors ( shown as the red line ) , which is a popular beer , brewed in Colorado , US . Similarly , as shown in Figure 7 ( c ) and ( d ) , our proposed method also successfully identifies non linear dynamic patterns of Social media and Software , including growing and competing activities , and estimates optimal regimes . Our forecasted results are very close to the real event streams .
5.2 Q2 . Accuracy
Next , we discuss the quality of REGIMECAST in terms of forecasting accuracy . We compared our method with the following methods : ( a ) ARIMA , where we determined the optimal parameter set using AIC , and ( b ) TBATS [ 12 ] , which is a state of the art forecasting algorithm for complex seasonal time series .
Figure 8 shows the forecasting power of REGIMECAST for the motion event stream : “ exercise ” , which is shown in Figure 5 ( a ) . Specifically , Figure 8 ( a ) shows the root mean square error ( RMSE ) between the original and the ( 100:120) steps ahead forecasted events , where the left figure shows the RMSE for each time tick , and the right figure shows the average errors . A lower value indicates a better forecasting accuracy . Note that we omit the TBATS result for the left figure , due to high error values .
Figure 8 ( b ) shows the actual forecasting results of ARIMA and TBATS . Compared to our forecasted result , shown in Figure 5 ( a ) , ARIMA and TBATS are unsuitable for capturing complex , nonlinear dynamics and regime shifts ; they are linear models , and failed to forecast abrupt changes of regimes .
5.3 Q3 . Scalability
We also evaluate the efficiency of our forecasting algorithm . Figure 9 compares REGIMECAST with ARIMA and TBATS in terms of computation time for varying sequence lengths tc . Note that the figures are shown in linear log scales . To evaluate the efficiency of the dynamic point set ( DPS ) , which is described in section 4 , we also compared them with special versions of our method , REGIMECAST F , which uses full point set ( ie , it sets the time interval δ = 1 ) . As we expected , REGIMECAST generates long range future events , significantly faster than the competitors for the large streams ( ie , up to two orders of magnitude ) . In the left column of Figure 9 , each spike corresponds to REGIMEESTIMATOR process , which creates a new regime ( please see the red circle ) . The right column of Figure 9 shows the average computation time of entire event streams . Here , REGIMECAST/REGIMECAST F ( r ) shows the average computation time of REGIMEREADER , and REGIMECAST/REGIMECAST F is the computation time of REGIMECAST .
Discussion : ls steps ahead prediction . As we mentioned in the introduction section , one of our motivations is the long range forecasting over data streams . So , how long ahead can our method forecast future events ? Is there any difference between , say , 50 stepsahead and 200 steps ahead forecasting results ? We thus examine the forecasting power of REGIMECAST in terms of the future event length ls . Figure 10 shows the forecasting errors and speeds of REGIMECAST for varying the steps : ls = 50 , 75 , . . . , 200 . Specifically , Figure 10 compares our method with other methods in terms of ( a ) forecasting accuracy and ( b ) computation time . Thanks to our carefully designed models and algorithms , our method achieved a large reduction in both computation time and forecasting error for every step ls .
1053 6 . CONCLUSIONS
In this paper , we focused on the problem of real time forecasting over co evolving event streams . Our proposed method , REGIMECAST exhibits all the desirable properties :
1 . It is Effective : It captures complex non linear dynamic patterns in event streams and forecasts long term future events . 2 . It is Adaptive : It incrementally and automatically recognizes the current regimes and finds regime shift points immediately , while it requires no prior training .
3 . It is Scalable : Thanks to our efficient streaming algorithms , the computation time does not depend on data stream length . 4 . It is Any time : It provides a response at any time and gener ates long range future events , immediately .
Acknowledgement . This work was supported by JSPS KAKENHI Grant in Aid for Scientific Research Number JP15H02705 , JP16K12430 , JP26730060 , JP26280112 , and the MIC/SCOPE #162110003 . 7 . REFERENCES [ 1 ] D . Chakrabarti and C . Faloutsos . F4 : Large scale automated forecasting using fractals . CIKM , 2002 .
[ 2 ] V . Chandola , A . Banerjee , and V . Kumar . Anomaly detection : A survey . ACM Comput . Surv . , 41(3):15:1–15:58 , July 2009 . [ 3 ] C . Folke , S . Carpenter , B . Walker , M . Scheffer , T . Elmqvist ,
L . Gunderson , and C . S . Holling . Regime shifts , resilience and biodiversity in ecosystem management . Annual Review of Ecology , Evolution , and Systematics , 35:557–581 , 2004 .
[ 4 ] J . Ginsberg , M . Mohebbi , R . Patel , L . Brammer ,
M . Smolinski , and L . Brilliant . Detecting influenza epidemics using search engine query data . Nature , 457:1012–1014 , 2009 .
[ 5 ] S . Hare and N . Mantua . Empirical evidence for North Pacific regime shifts in 1977 and 1989 . Progress in oceanography , 47(2000):103–145 , 2000 .
[ 6 ] M . D . Hoffman , D . M . Blei , and F . R . Bach . Online learning for latent dirichlet allocation . In NIPS , pages 856–864 , 2010 .
[ 7 ] T . Iwata , T . Yamada , Y . Sakurai , and N . Ueda . Online multiscale dynamic topic models . In KDD , pages 663–672 , 2010 .
[ 8 ] E . Jackson . Perspectives of Nonlinear Dynamics : .
Cambridge University Press , 1992 .
[ 9 ] E . J . Keogh , S . Chu , D . Hart , and M . J . Pazzani . An online algorithm for segmenting time series . In ICDM , pages 289–296 , 2001 .
[ 10 ] J . Letchner , C . Ré , M . Balazinska , and M . Philipose . Access methods for markovian streams . In ICDE , pages 246–257 , 2009 .
[ 11 ] L . Li , B . A . Prakash , and C . Faloutsos . Parsimonious linear fingerprinting for time series . PVLDB , 3(1):385–396 , 2010 .
[ 12 ] A . M . D . Livera , R . J . Hyndman , and R . D . Snyder .
Forecasting time series with complex seasonal patterns using exponential smoothing . Journal of the American Statistical Association , 106(496):1513–1527 , 2011 .
[ 13 ] M . Mathioudakis , N . Koudas , and P . Marbach . Early online identification of attention gathering items in social media . In WSDM , pages 301–310 , 2010 .
[ 14 ] Y . Matsubara , Y . Sakurai , and C . Faloutsos . Autoplait :
Automatic mining of co evolving time sequences . In SIGMOD , pages 193–204 , 2014 .
[ 15 ] Y . Matsubara , Y . Sakurai , and C . Faloutsos . The web as a jungle : Non linear dynamical systems for co evolving online activities . In WWW , pages 721–731 , 2015 .
[ 16 ] Y . Matsubara , Y . Sakurai , and C . Faloutsos . Non linear mining of competing local activities . In WWW , 2016 .
[ 17 ] Y . Matsubara , Y . Sakurai , C . Faloutsos , T . Iwata , and
M . Yoshikawa . Fast mining and forecasting of complex time stamped events . In KDD , pages 271–279 , 2012 .
[ 18 ] Y . Matsubara , Y . Sakurai , B . A . Prakash , L . Li , and
C . Faloutsos . Rise and fall patterns of information diffusion : model and implications . In KDD , pages 6–14 , 2012 .
[ 19 ] Y . Matsubara , Y . Sakurai , W . G . van Panhuis , and
C . Faloutsos . FUNNEL : automatic mining of spatially coevolving epidemics . In KDD , pages 105–114 , 2014 .
[ 20 ] A . Mueen and E . J . Keogh . Online discovery and maintenance of time series motifs . In KDD , pages 1089–1098 , 2010 .
[ 21 ] T . Palpanas , M . Vlachos , E . Keogh , and D . Gunopulos . Streaming time series summarization using user defined amnesic functions . IEEE Transactions on Knowledge and Data Engineering , 20(7):992–1006 , 2008 .
[ 22 ] S . Papadimitriou , A . Brockwell , and C . Faloutsos . Adaptive , hands off stream mining . In VLDB , pages 560–571 , 2003 .
[ 23 ] S . Papadimitriou , J . Sun , and C . Faloutsos . Streaming pattern discovery in multiple time series . In VLDB , pages 697–708 , 2005 .
[ 24 ] S . Papadimitriou and P . S . Yu . Optimal multi scale patterns in time series streams . In SIGMOD , pages 647–658 , 2006 .
[ 25 ] P . Patel , E . J . Keogh , J . Lin , and S . Lonardi . Mining motifs in massive time series databases . In Proceedings of ICDM , pages 370–377 , 2002 .
[ 26 ] B . A . Prakash , A . Beutel , R . Rosenfeld , and C . Faloutsos . Winner takes all : competing viruses or ideas on fair play networks . In WWW , pages 1037–1046 , 2012 .
[ 27 ] T . Rakthanmanon , B . J . L . Campana , A . Mueen , G . E . A .
P . A . Batista , M . B . Westover , Q . Zhu , J . Zakaria , and E . J . Keogh . Searching and mining trillions of time series subsequences under dynamic time warping . In KDD , pages 262–270 , 2012 .
[ 28 ] Y . Sakurai , C . Faloutsos , and M . Yamamuro . Stream monitoring under the time warping distance . In ICDE , pages 1046–1055 , Istanbul , Turkey , April 2007 .
[ 29 ] Y . Sakurai , Y . Matsubara , and C . Faloutsos . Mining and forecasting of big time series data . In SIGMOD , Tutorial , pages 919–922 , 2015 .
[ 30 ] Y . Sakurai , S . Papadimitriou , and C . Faloutsos . Braid :
Stream mining through group lag correlations . In SIGMOD , pages 599–610 , 2005 .
[ 31 ] M . Scheffer , J . A . Foley , S . R . Carpenter , C . Folke , and B . H .
Walker . Catastrophic shifts in ecosystems . Nature , 413(6856):591–6 , 2001 .
[ 32 ] M . Vlachos , D . Gunopulos , and G . Kollios . Discovering similar multidimensional trajectories . In ICDE , pages 673–684 , 2002 .
[ 33 ] M . Vlachos , G . Kollios , and D . Gunopulos . Elastic translation invariant matching of trajectories . Mach . Learn . , 58(2 3):301–334 , Feb . 2005 .
[ 34 ] Y . R . Zelnika , E . Meron , and G . Bel . Gradual regime shifts in fairy circles . PNAS , 2015 .
[ 35 ] Y . Zhao , N . Sundaresan , Z . Shen , and P . S . Yu . Anatomy of a web scale resale market : a data mining approach . In WWW , pages 1533–1544 , 2013 .
[ 36 ] J . Zhou and A . K . H . Tung . Smiler : A semi lazy time series prediction system for sensors . In SIGMOD , pages 1871–1886 , 2015 .
[ 37 ] Y . Zhu and D . Shasha . Statstream : Statistical monitoring of thousands of data streams in real time . In VLDB , pages 358–369 , 2002 .
1054
