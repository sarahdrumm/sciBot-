Online Dual Decomposition for Performance and
Delivery Based Distributed Ad Allocation
Jim C . Huang
Amazon
Seattle , WA , USA huangjim@amazon.com
Rodolphe Jenatton
Amazon
Berlin , Germany jenatton@amazon.com
Cédric Archambeau
Amazon
Berlin , Germany cedrica@amazon.com
ABSTRACT Online optimization is central to display advertising , where we must sequentially allocate ad impressions to maximize the total welfare among advertisers , while respecting various advertiser specified long term constraints ( eg , total amount of the ad ’s budget that is consumed at the end of the campaign ) . In this paper , we present the online dual decomposition ( ODD ) framework for large scale , online , distributed ad allocation , which combines dual decomposition and online convex optimization . ODD allows us to account for the distributed and the online nature of the ad allocation problem and is extensible to a variety of ad allocation problems arising in real world display advertising systems . Moreover , ODD does not require assumptions about auction dynamics , stochastic or adversarial feedback , or any other characteristics of the ad marketplace . We further provide guarantees for the online solution as measured by bounds on cumulative regret . The regret analysis accounts for the impact of having to estimate constraints in an online setting before they are observed and for the dependence on the smoothness with which constraints and constraint violations are generated . We provide an extensive set of results from a large scale production advertising system at Amazon to validate the framework and compare its behavior to various ad allocation algorithms .
Keywords distributed optimization ; display advertising ; campaign optimization ; ad allocation ; budget pacing ; long term constraints ; demand side platform
1 .
INTRODUCTION
The past few years have seen significant interest and research in ad allocation in online display advertising , where the problem consists of serving ad impressions to users from many competing ads across a large number of websites and mobile apps , subject to a variety of advertiser objectives and constraints . For example , advertisers typically expect that Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page . Copyrights for components of this work owned by others than the author(s ) must be honored . Abstracting with credit is permitted . To copy otherwise , or republish , to post on servers or to redistribute to lists , requires prior specific permission and/or a fee . Request permissions from permissions@acmorg KDD ’16 , August 13 17 , 2016 , San Francisco , CA , USA cfl 2016 Copyright held by the owner/author(s ) . Publication rights licensed to ACM . ISBN 978 1 4503 4232 2/16/08 . . . $15.00 DOI : http://dxdoiorg/101145/29396722939691 an advertising platform will maximize ad performance ( ie , the ad ’s effectiveness at driving user behavior ) , subject to constraints on user targeting and constraints on ad delivery , such that the advertising platform is expected to spend as close to 100 % of an ad ’s budget as possible by the end of the ad ’s flight time under a cost per mille , or CPM , billing model . In the literature on display advertising [ 3 , 6 , 17 ] , online ad allocation is typically formulated as an online optimal assignment problem over a bi partite graph in which nodes correspond to both ads and bid requests ( ie , user visits to a web page ) . Bid requests are processed sequentially , with edges corresponding to possible assignments of an ad to a bid request with weight equal to the advertiser ’s welfare for the given ad/bid request pair . In practice , the ad allocation problem is characterized by being 1 ) online , and 2 ) distributed ( ie , variable updates must be executed in parallel across large fleets of machines ) , with 3 ) potentially multiple long term constraints that require estimation of quantities at bid request time ( eg , estimating the cost of an ad impression before winning it on external exchanges ) . Various algorithms have been proposed for the ad allocation problem in the online display advertising literature [ 3 , 6 , 9 , 10 ] , but these have largely been derived as either approximation algorithms or heuristics , increasing the difficulty and complexity in extending these methods to a variety of constraints [ 17 ] . The distributed aspect of online display advertising has not been explicitly addressed either , especially in the presence of long term constraints , which leads to further approximations in a production setting . Moreover , algorithms proposed have not accounted for highly variable , dynamic constraint violations ( eg , spend amounts ) per ad that are often encountered in practical online ad serving systems . This is one reason why ad allocation solved as an offline problem can often be sub optimal in practice [ 6 ] . Finally , the impact of having to estimate constraints in order to allocate ad impressions ( eg , in real time bidding , or RTB , exchanges , the clearing price of an ad auction is only revealed to us after we’ve decided on which ad to show ) .
To the best of our knowledge , a comprehensive and holistic framework that satisfactorily addresses the above challenges faced in practical web scale algorithms is still missing . In this paper , we present a general framework for deriving online and distributed ad allocation algorithms for dealing with a variety of online ad allocation problems in display advertising . Our contributions can be summarized as follows :
• We introduce a framework to derive online distributed optimization algorithms applicable to online ad alloca
117 tion problems with long term advertiser specified constraints ;
• We account for the impact of having to estimate constraints before they are observed , without explicitly assuming bandit feedback ;
• Leveraging the theoretical analysis provided in [ 12 ] , we show that our approach enjoys bounds on dynamic cumulative regret , which depend on the smoothness with which constraint violations and the constraints themselves occur to the oracle learner over time.These results do not make assumptions about auction dynamics , stochastic or adversarial feedback , or other characteristics of the ad marketplace .
• We validate the framework by reporting results on traffic data collected by a large scale display advertisement system at Amazon .
We call our framework online dual decomposition ( ODD ) , which allows us to efficiently solve general large scale optimization problems in a distributed and online fashion .
2 . ONLINE DISPLAY ADVERTISING AS AN
OPTIMAL ASSIGNMENT PROBLEM
In online advertising , each user visit to a web page triggers a bid request i to be sent in real time ( through possibly complex channels ) to a host , or machine , in an ad serving fleet . Each incoming bid request has a set of candidate ads that can be served : the set of candidates that are eligible to be shown for a bid request are determined by several advertiserspecified constraints such as behavioral or demographic targeting ( ie , an ad is to be/not to be shown only to users satisfying targeting criteria ) , or frequency capping ( ie , an ad is not to be shown more than some number of times to a given unique user over some time period ) , to name a few . Indexing bid requests by i , we denote by Ci ⊆ {1,··· , M} the subset of M ads that are eligible to be shown for bid request i as a result of such constraints . Indexing ads by j = 1,··· , M , the welfare of serving an impression for ad j ( ie , the value of showing the ad once to a user ) for bid request i is given by vij ≥ 0 . The welfare vij can be set to the expected value of serving one ad impression for ad j for bid request i , but other expressions for welfare may be used as well .
For bid request i , let assignment variable xij = 1 correspond to our decision to allocate ad j an impression , with xij = 0 otherwise . Let wi be the clearing price associated with allocating an impression for bid request i ( eg , the result of a second price auction on external ad exchanges ) . Similarly , let aij be the some advertising quantity ( eg , budget consumed ) incurred a result of allocating an impression for bid request i for ad j , where we generally assume that advertisers are charged per impression ( as opposed to , say , a cost per click or cost per action model ) . We note at this juncture that aij and the clearing price wi can be distinct in practice . In particular , the method by which aij is computed can vary from ad to ad and from one bid request to the next , depending on contracts that advertisers may hold with the ad serving system .
Given the welfare vij of serving an impression of ad j for bid request i , we wish to derive an online and distributed j∈Ci any bid request i , algorithm for selecting ads j such that in aggregate , we maximize total welfare across all advertisers subject to long term constraints specified by the advertisers as a function of all variables xij . We will also have the constraints that for xij ≤ 1 , such that we can show at most one ad per bid request ( we can also elect to show none ) . As we assume a distributed and online setting , bid requests are divided across time and among several hosts . Thus , there are two ways to partition bid requests : the first is by time , whereby we can divide the continuous time axis into rounds of T approximately even sized intervals indexed by t = 1,··· , T . For a given interval t , let It denote the set of bid requests processed across the entire fleet in that interval , such that the sets It form a partition of all bid requests . Given the above , let xt , ut denote assignment and utility1 vectors whose elements correspond to xij , vij−wi respectively , and define matrices At similarly . For illustration , Figure 1 shows a toy example of an assignment problem with scalar quantities and corresponding matrices and vectors as defined above .
Figure 1 : A toy assignment problem consisting of 4 ads and 5 bid requests divided into 2 rounds , with corresponding matrix and vector quantities At , xt , ut . Here , elements aij correspond to some advertising output of interest ( eg , budget consumed ) for bid request i and ad j , with xij ∈ {0 , 1} . Dark edges in the bipartite graph on the right correspond to a possible feasible assignment . Figure best seen in color .
As has been commonly done in online display advertising [ 3 , 6 , 9 ] , we formulate the canonical problem of allocating ad impressions as an optimal assignment problem , where the goal is to match ads to bid requests such that we maximize the total difference between welfare and clearing price ( profit ) across all ads and all bid requests for the ad serving platform . The standard optimal assignment problem can be written as a linear program ( LP ) relaxation of the corresponding combinatorial optimization problem with assignment variables X = {xij} :
∀ i , xij ≤ 1 ∀ i , j ∈ Ci , xij ≥ 0 . j∈Ci i,j∈Ci maximize
X
( vij − wi)xij with
We now introduce the online aspect of the problem ( we postpone discussion of the distributed aspects for later ) by partitioning bid requests into sets It for t ∈ {1,··· , T} . 1Utility measures the advertiser ’s preference between bid requests .
Bid requestsAds123412345Rounds12tij2664a1100000a120a2200000a2300a14003775266664x11x12x14x22x23377775266664v11 w1v12 w1v14 w1v22 w2v23 w2377775266400a4100000a420a3300000a3400a543775266664x33x34x41x42x54377775266664v33 w3v34 w3v41 w4v42 w4v54 w5377775AtxtutConstraintsAssignmentsUtilities118 Using matrix vector notation and introducing the quantity N ≡ maxt M|It| , we can compactly re write the optimal ast xt , where we signment problem as maximize
T t=1 u x1∈X1,··· ,xT ∈XT have defined
Xt ≡ x ∈ [ 0 , 1]Nfififi∀ i ∈ It , j∈Ci xij ≤ 1 and xij = 0 if j /∈ Ci ;
∀i /∈ It , xij = 0
, and xt is a row in the matrix X ∈ {0 , 1}T×N . In the online assignment problem , for round t the external world generates the vector ut , after which we must make allocation decisions xt and obtain reward u t xt . Thus , each element of vector xt ∈ Xt is an assignment variable xij , with the elements of vector ut similarly ordered to be equal to vij − wi .
It has been shown [ 6 ] that we can solve the optimal assignment problem iteratively for each bid request i by sorting ads j ∈ Ci by vij , picking the top ranking ad and assigning an impression to that ad [ 6 ] if maxj vij ≥ wi . For completeness and due to its central role in what follows , we formalize this result as a Lemma and reproduce the proof ( which can also be found in [ 6 ] ) in the Appendix . a dual variable for enforcing the constraint
Lemma 1 . Denote by xt to be the set of all xij ’s that are processed in round t . Let j(cid:63 ) = argmaxj∈Ci vij , and let βi be xij ≤ 1 . Then for each i ∈ It , we must have j∈Ci vij ,
β(cid:63 ) i = vij(cid:63 ) = max j∈Ci ˆxij(cid:63 ) = 1 , ˆxij = 0 ∀j ∈ Ci , j = j(cid:63 ) if β(cid:63 ) ˆxij = 0 ∀ j if β(cid:63 ) i ≥ wi , i < wi , such that ˆxt = argmaxxt∈Xt u t xt .
Thus , for a given round t , the above online algorithm sequentially allocates impressions such that the optimum ˆxt ∈ argmaxxt∈Xt u t xt is attained . In particular , the quantity β(cid:63 ) i plays the role of the bid submitted to an auction for a given ad impression opportunity within a larger advertising marketplace . Consistent with the practical reality of ad allocation , if β(cid:63 ) i < wi , we do not allocate any ad impression ( ie , we lost the auction ) and otherwise we get to allocate an ad impression to the winning ad j(cid:63 ) ∈ Ci . Thus , the calculation of ˆxt is wholly determined by computing bids β(cid:63 ) i and finding whether we win an ad impression or not via the clearing price wi for bid requests i ∈ It .
In the sequel , we take advantage of the above result to introduce concave functions of X for modelling long term constraints and solve the resulting non linear maximization problems via an online primal dual method ( with guarantees on the resulting solution as compared to the optimal offline solution ) , whilst preserving the computationally efficient primal steps with some simple modifications . Under our proposed framework , we will modify each bid as a function of i = maxj{vij − λj,taij} such that long term constraints to β(cid:63 ) t xt − λAtxt} for some dual variˆxt = argmaxxt∈Xt{u ables λ ( formally defined in the sequel ) that allow us to penalize violations of constraints . Our framework has the property that no knowledge of auction dynamics , assumptions about stochastic or adversarial feedback , or knowledge of other characteristics of the ad marketplace are needed to provide regret guarantees for online ad allocation . Moreover , as we will show , the resulting algorithm can be naturally extended to a distributed setting in which we must allocate ad impressions across a large number of ad serving hosts operating independently , which is key for practical large scale ad serving systems .
3 . OPTIMAL ASSIGNMENT WITH LONG
TERM CONSTRAINTS
As we will show , many online optimization problems of interest in online display advertising will consist of an optimal assignment problem with additional equality and inequality constraints on the primal variables xt , which introduces nontrivial challenges . We assume that these constraints are 1 ) T measured over T rounds , and 2 ) are linear in the assignment variables X , such that we can account for such constraints t=1 Atxt − bt , where by penalizing some measure of 1 At ∈ A ⊆ RK×N , bt ∈ RK . Building on the work from [ 12 ] , T
T the optimal assignment problem can be modified to :
T
Atxt − bt
( 1 ) maximize x1∈X1,··· ,xT ∈XT
1 T t xt − E u
1 T t=1 t=1 where E is a convex function measuring the residuals of the constraints . In this paper , we will assume that E is smooth in the sense that it has Lipschitz continuous gradients over the domain RK . We note that although the above optimization problem is not linear in all variables in the strict sense of the optimal assignment problem , the corresponding Lagrangian ( and primal dual algorithm that we will derive ) remains linear with respect to assignment variables X , which implies that the computationally efficient ranking scheme derived for the optimal assignment problem can be modified to solve for the primal variables in the above problem . Moreover , we note that unlike [ 2 ] , we are not interested in the ( unweighted ) average of xt vectors insofar as objectives and constraints are concerned , and we are explicitly interested in maximizing functions of xt that are time varying and highly dynamic . Before we continue , we illustrate two common problem classes that arise frequently in online display advertising that can be naturally formulated as optimization problems of the above form .
Example 1 . ( Max performance , target delivery ad allocation ) In this problem formulation , we wish to maximize ad performance ( as measured by welfare vij for each bid request and eligible ad candidate ) subject to the need to consume as close to 100 % of each ad ’s total budget for T rounds . Denoting 1 ) aij to be the revenue charged to the advertiser for ad j upon serving an impression for ad j and bid request i and 2 ) bj to be ad j ’s total budget to be delivered over T rounds , we have K = M ( one constraint per ad for M ads ) , At ∈ RM×N is a matrix whose ( j , i)th element is aij T and bt ∈ RM is a vector whose jth element is bj , so that t=1 Atxt − bt is the average error between the amount 1 T of budget consumed and the target amount of budget to be consumed over T rounds , which we wish to penalize via a suitable choice of E .
Example 2 . ( Max delivery , max cost per action ad allocation ) Here , we aim to maximize welfare subject to a constraint on the cost per action ( CPA ) for each ad , specified as cj > 0 . With K = M , let pij be the probability of user conversion , and let rij be the amount of revenue charged to
119 T t=1
1 T
T t=1 the advertiser upon serving an ad impression for bid request i and ad j . Given the quantities defined in Example 1 , we can formulate the CPA constraint for ad j as
∀ j , rijxij ≤ cj i i pijxij .
T t=1 Atxt − bt T This can be formulated equivalently as 1 where At is a matrix whose ( j , i)th element is ( rij − cjpij ) T t=1 Atxt − bt and bt = 0 so that penalizing values of 1 T above 0 is equivalent to a penalty for violating the CPA constraint for each ad . A list of possible instantiations for E for the above problems can be found in [ 12 ] . We highlight that in the general case , we allow K = M , which allows us to account for multiple constraints per ad , and/or diverse sets of constraints for different ads .
Consider now the Lagrangian , or saddle point function , for the problem in ( 1 ) , given by
L(X , λ ) =
1 T t xt−λ u
Atxt−bt
+E ( cid:63)(λ ) , ( 2 ) where λ ∈ Λ are dual variables that belong to the domain Λ ⊆ RK of E∗ , where E ( cid:63)(λ ) ≡ supz∈RK{λz − E(z)} is the Fenchel conjugate [ 4 ] of E for which we assume the domain is compact so that there exists Rλ ≡ maxλ∈Λ λ2 < +∞ . Moreover , we remark that E ( cid:63 ) is strongly convex by virtue of E having Lipschitz continuous gradients [ 14 ] . We recall that a function E ( cid:63 ) is strongly convex with modulus σ > 0 if 2 u− v2 for any u , v ∈ E ( cid:63)(u ) ≤ E ( cid:63)(v ) +∇E ( cid:63)(u)(u− v)− σ RK . We can rewrite the Lagrangian function described in
( 2 ) as L(X , λ ) = 1 u −∞
T t xt −λ t=1 Lt(xt , λ ) , where
+ E ( cid:63)(λ ) if λ ∈ Λ
Lt(xt , λ ) =
Atxt − bt otherwise .
T
To maximize Lt(xt , λt ) with respect to xt , it is straightforward to show that the result of Lemma 1 can be modified to accomplish this by ranking ads for each bid request , but using a modified bid of vij − λj,taij . Thus , in the sequel we will appeal to Lemma 1 for a computationally efficient method for solving the problem of computing ˆxt ∈ argmaxxt∈Xt Lt(xt , λ ) . In an offline setting where we would have the ability to iteratively update both primal variables xt , t = 1,··· , T and dual variables λ , the following canonical2 primal dual algorithm would allow us to solve for optimal variables x(cid:63 ) t , λ(cid:63 ) by repeating the two steps below until some convergence criterion is met :
• ( P offline ) Compute for all t = 1,··· , T Lt(xt , λ ) .
ˆxt ∈ arg max xt∈Xt
Lt(ˆxt , λ ) and gradient ∇λL( ˆX , λ ) =
• ( D offline ) Given ˆxt for all t = 1,··· , T , compute t ∇λLt(ˆxt , λ ) . Update all dual variables λ using a projected gradient descent method with step size η . Note that we speak about a project gradient scheme ( as opposed to
2There are in fact several primal dual algorithms that could be used to solve the offline problem ; we present a simple method to best illustrate the online method that follows . a projected subgradient method ) since the choice of E we will make in the experiments leads us to consider a function E∗ which is not only strongly convex , but also differentiable on its domain Λ .
The above algorithm is an offline algorithm that iteratively updates primal and dual variables until convergence . However , in practice , ad allocation requires us to make decisions in online , or sequential , fashion , such that the primal and dual steps above must be interleaved over rounds t = 1,··· , T . We now turn to formulating the ad allocation problem as an online convex optimization problem in which we sequentially update primal and dual variables ˆxt and ˆλt at each round .
4 . OPTIMAL AD ALLOCATION AS ONLINE
CONVEX OPTIMIZATION
To move to an online convex optimization formulation , we must also account for the fact that in an online setting , not only must we update primal and dual variables sequentially , but also the constraint matrices At are only observed after we allocate ad impressions for round t ( a practical example of this is that we often only find out how much to charge the advertiser once we have won an external RTB auction for a given winning ad ) . This requires us to estimate such matrices via ˆAt in order to produce primal variable updates . To this end , we introduce
ˆLt(xt , λ ) = u t xt − λ
( ˆAtxt − bt ) + E ( cid:63)(λ ) as the Lagrangian function for round t using the estimate ˆAt such that ˆLt(xt , λ ) = Lt(xt , λ)− λ( ˆAt − At)xt . Then , an online version of the primal dual method for each round t = 1,··· , T can be described as :
• ( P online ) Compute ˆxt ∈ argmaxxt∈Xt • ( D online ) From ˆxt , compute Lt(ˆxt , ˆλt ) . Given gradients ∇Lt(ˆxt , ˆλt ) , update dual variables ˆλt+1 using a projected online gradient descent method as
ˆLt(xt , ˆλt ) .
ˆλt − ηt∇Lt(ˆxt , ˆλt )
ˆλt+1 = ΠΛ with step size ηt .
• ( A online ) Given At , ˆAt , update ˆAt+1 via a projected online subgradient method with step size νt .
In the above online optimization problem , we require estimating constraint matrices for each round via ˆAt before we provide primal variable estimates ˆxt . This implies that ˆxt is obtained from a perturbation of Lt(xt , ˆλt ) via ˆLt(xt , ˆλt ) , with At observed only after we have made the ad assignment ˆxt .
Estimating At : To estimate constraint matrices At online , we assume that in addition to the dual variables being bounded in 2 norm with radius Rλ , we also have xt2 ≤ Rx for all t , xt ∈ Xt . Similarly , let RA be such that AF ≤ RA for all A ∈ A and A is convex . We further assume that we perform an online projected subgradient method on matrices ˆAt to estimate the sequence A1 , . . . , AT where ˆAt+1 = ΠA[ ˆAt − νtGt ] , with Gt a subgradient of A → At − AF √ at ˆAt . With the step size νt = RA/ t , it can be shown [ 12 ] that for any sequence {At}T t=1 , the overall cumulative regret bound for the estimation of xt ’s is additively impacted by
120 the term
T t=1
6RλRx√ T
At − At+1F + RA
, where · F stands for the Frobenius norm . This contribution captures the variations in the constraints At themselves from one round t to the next , plus a function of the largest constraint matrix ( as measured by RA ) observed over the course of the algorithm . With the above result and having described our online algorithm , we are now ready to present cumulative regret bounds for the above algorithm as measured by the difference in the primal objectives for the oracle solution and the online solution obtain from the above online algorithm , where both solutions account for advertiser objectives and long term constraints . That is , we will compare the performance of the online algorithm to that of an oracle algorithm which has complete knowledge of past and future , plus the ability to modify optimization variables in the past , so as to provide primal variables of the form t ∈ argmaxx∈Xt Lt(x , λ(cid:63 ) ) for each round t given the ofx(cid:63 ) fline dual optimal variables λ(cid:63 ) . We expect at the outset that the above algorithm should achieve performance which is a function of the oracle algorithm ’s performance plus factors that depend on the number of rounds T , as well as variability of constraints as measured by the oracle ’s ability to satisfy constraints . We present the bound in Theorem 1 , and direct the details of the proof ( as well as key technical Lemmas ) to [ 12 ] . We note that the version of the theorem which we state is for instance valid for the choice of E we make in the experimental section .
Theorem 1 . Let {x(cid:63 ) t}T assignment variables , and consider the sequence {ˆxt}T erated by our online algorithm . Let e(cid:63 ) corresponding optimal constraint residuals . We denote by t=1 be the offline primal optimal t=1 gent − bt be the t = Atx(cid:63 ) f ( cid:63 ) ≡ f ( x(cid:63 )
1,··· , x(cid:63 )
T ) ≡ 1 T t x(cid:63 ) u t − E(
1 T
Atx(cid:63 ) t − bt ) t}T the optimal primal objective value obtained for the assignments {x(cid:63 ) t=1 , and define ˆf ≡ f ( ˆx1,··· , ˆxT ) similarly . Provided that maxt=1,··· ,T,xt∈Xt,λ∈Λ ∇λLt(xt , λ)2 ≤ G for √ G > 0 , the projected online gradient descent/subgradients updates for ˆλt and ˆAt with step sizes ηt = L/t , νt = RA/ t imply
T t=1 t where E has Lipschitz gradients with modulus L .
Theorem 1 establishes that the projected online gradient descent updates for dual variables ˆλt , along with projected online subgradient updates for constraint matrices ˆAt , yield an overall cumulative regret bound that decomposes into three terms . The first term measures the smoothness , or regularity , of the sequences {e(cid:63 ) t=1 ( as measured by the oracle ’s ability to minimize constraint violations ) as well as {ut}T t ) . We can observe that if the residual vectors are constant e(cid:63 ) t = e(cid:63 ) for t=1 ( which have a direct influence on x(cid:63 ) t}T f ( cid:63 ) − ˆf ≤ GL T
( 1 + log(T ) ) · max t=1,··· ,T
+
G2L 2T
( 1 + log(T ))+
6RλRx√ T j − T e(cid:63 ) j=t+1
T − t T flflflfl2 t T e(cid:63 ) j
At − At+1F + RA flflflfl t T j=1 t=1 all t , the first term vanishes.3 The second term captures the contribution of having to perform online updates , which is is sub linear in the number of rounds T given previous results in the online convex optimization literature [ 11 , 19] ) . The third and last term captures the contribution to the regret due to the variation in constraint matrices At as measured byT t=1 At − At+1F . t=1,{ut}T
We note that Theorem 1 does not require any assumptions about the arrival order of bid requests , stationarity , or about the precise mechanisms under which feedback is generated ( eg , specific auction dynamics , marketplace characteristics , etc ) . Thus , Theorem 1 holds for any sequences of {At , bt}T t=1 , including those generated by an adversary , with the consequence that if the adversary is sufficiently powerful such that {Atx(cid:63 ) t=1 vary wildly ( ie , even the oracle algorithm is unable to obtain a smooth sequence {Atx(cid:63 ) t − bt}T t=1 ) , then the worst case bound on regret for our proposed online primal dual method can be large . Conversely , if the oracle algorithm is able to achieve a regular enough sequence {Atx(cid:63 ) t=1 , then our proposed online primal dual method is able to achieve the same performance plus a factor that is sublinear in the number of rounds . 5 . DISTRIBUTED ASPECTS OF ONLINE AD t=1,{ut}T t − bt}T t − bt}T
ALLOCATION h=1 u t xt =H
Having presented regret bounds for our proposed online algorithm , we now address the distributed aspects of ad allocation , which are a fundamental to the display advertising setting in practice . We note that for the allocation problem , we can write u htxht so that the primal step of computing ˆxt ∈ argmaxxt∈Xt Lt(xt , ˆλt ) can be decomposed across multiple hosts , each processing disjoint subsets of bid requests for round t by ranking candidate ads for each bid request to be processed on that host . We first present an offline distributed algorithm that leverages this decomposability , which we will quickly incorporate into an online and distributed algorithm . 5.1 Offline dual decomposition
If we temporarily ignore the online aspect of the ad allocation problem , a technique that would allow us to perform distributed optimization is to decompose the ad allocation problem across hosts for a given set of dual variables , collect primal solutions and then update the dual variables . We note that for any round t , we can partition the primal variables xt across hosts into disjoint sub vectors of variables such that xt = [ x1t,··· , xHt ] , where xht is the vector of primal variables associated with host h = 1,··· , H . Furthermore , by defining partitions Ih of bid requests across hosts h = 1,··· , H , we can perform similar partitions for ut , At , Xt ( so that xht ∈ Xht ) . With these partitions defined , the Lagrangian Lt(x , λ ) can then be decomposed as + E ( cid:63)(λ )
Lt(xt , λ ) = u
Atxt − bt t xt − λ
H H h=1
=
= htxht − λ u
Ahtxht + λ bt + E ( cid:63)(λ )
Fht(xht , λ ) + Gt(λ ) , h=1
3We refer the reader to [ 12 ] for an in depth discussion .
121 which is a sum over functions of xht with no overlap in primal variable arguments , plus a function of λ that is otherwise independent of variables xht . This implies that we can parallelize the primal step of estimating the allocation ˆxt ∈ arg maxxt∈Xt Lt(xt , λ ) across a number of hosts for a given λ , collect the solutions ˆxht and then update λ . The resulting distributed primal dual algorithm is then
• ( P offline & distributed ) Compute for each round t =
1,··· , T and for all hosts h = 1,··· , H : Fht(xht , λ ) ,
ˆxht ∈ arg max xht∈Xht gradient ∇L( ˆX , λ ) =
• ( D offline ) Collect solutions to form ˆxt = [ ˆx1t,··· , ˆxHt ] for all t = 1,··· , T . From ˆxt , compute Lt(ˆxt , λ ) and t ∇Lt(ˆxt , λ ) . Given the gradient , update dual variables λ using a projected gradient descent method with step size η .
The proposed algorithm consists of iteratively 1 ) performing a distributed Lagrangian maximization across all hosts to obtain maxx L(x , λ ) , followed by 2 ) a gradient descent method . This technique for solving large scale convex optimization problems in a distributed setting consists of dual decomposition [ 7 , 8 , 13 ] , which yields primal and dual optimal x(cid:63 ) , λ(cid:63 ) for a large enough number of iterations . However , in the online advertising setting , we do not have the ability to revise past ad allocations , nor can we realistically anticipate ( and hence make allocation decisions for ) future bid request opportunities . To address this whilst retaining the ability to decompose the problem across a large number of ad serving hosts , we next present online dual decomposition ( ODD ) , an extension of the dual decomposition technique to the online optimization setting . 5.2 Online dual decomposition ( ODD ) rithm for each round t = 1,··· , T :
Consider now the following distributed and online algo
• ( P online & distributed ) Define htxht − λ
ˆFht(xht , λ ) = u Compute for all hosts h = 1,··· , H :
ˆAhtxht .
ˆxht = arg max xht∈Xht
ˆFht(xht , ˆλt ) .
• ( D online ) Collect solutions to form ˆxt = [ ˆx1t,··· , ˆxHt ] . From ˆxt and given At , compute Lt(ˆxt , ˆλt ) and gradient ∇Lt(ˆxt , ˆλt ) , and update dual variables ˆλt+1 using a projected gradient descent method with step size ηt . • ( A online ) Given At , ˆAt , update ˆAt+1 via a projected online subgradient method with step size νt .
The above distributed primal step , combined with the online projected gradient descent for ˆλt and subgradients for ˆAt together form online dual decomposition ( ODD ) , which extends classical dual decomposition to an online setting in which we must make ad allocations and update dual variables in an online fashion whilst having to use estimates of constraint matrices ˆAt . In ODD , in each round t we 1 ) solve for allocations ˆxht that maximize ˆFht(xht , ˆλt ) ( distributed Lagrangian maximization with estimates of constraints ˆAt ) , followed by 2 ) updates of the dual variables ˆλt via an online dual gradient descent method on Lt(ˆxt , ˆλt ) and 3 ) online updates on ˆAt+1 . We note that the above algorithm naturally round and per host given by leverages the embarassingly parallel and computationallyefficient ranking algorithm resulting from Lemma 1 for the primal step , and otherwise enjoys the same regret bound as presented in Theorem 1 . The only additional assumption we’ve made for ODD is that there exists a centralized system for aggregating ad allocations , ie , budget spend per Aht ˆxht and constraint matrices Aht across hosts at the end of each round . From those pieces of information , global constraint violations can be computed for each ad ( given centralized knowledge of bt for each round ) and updates for dual variables can be computed and then propagated back to each host in the ad serving fleet . Such systems are generally used in the online display advertising platforms to track budget spend : we do not discuss details on systems architectures that could be used for this purpose . i∈It∩Ih
6 . RESULTS
To validate our proposed online distributed ad allocation algorithm , we conducted three series of experiments with the aim to empirically compare the performance and delivery characteristics of ODD with those of other online algorithms . We focus on the application of max performance , target delivery ad allocation described in Example 1 , for which we consider two key metrics : 1 ) performance as measured by return on ad spend ( ROAS ) , or the ratio of adattributed sales to ad spend , and 2 ) delivery , as measured by the fraction of an ad ’s budget that was successfully consumed relative to the fraction of the ad ’s flight time that has elapsed . More specifically , the goal in this class of problems is to maximize the ad ’s performance whilst consuming as close as 100 % of the ad ’s budget by the end of its run time . We chose E(z ) to be the Huber function ( see the detailed discussion in [ 12 ] ) for some non negative parameters R , L :
2Lλ2
This choice yields the strongly convex dual function E ( cid:63)(λ ) = IBR ( λ ) + 1 2 , where IBR is the indicator on the 2 ball such that ˆλt2 ≤ R for all rounds . 6.1 Experiment A : Simulation of ad allocation In this experiment , we simulated ad allocation for a sample of 36 ads configured with a variety of budgets , delivery profiles ( ie , the fraction of budget to be delivered in a given time period ) and targeting constraints encountered in our ad serving system , where ad impressions were allocated over a period of 24 hours with over 100MM bid request opportunities . To compare the performance and delivery characteristics of ODD , we examined 1 ) the proportional control heuristic of [ 6 , 15 ] and 2 ) the pdAvg approximation algorithm from [ 10 ] . The proportional control heuristic consists of modifying the welfare term wij for each ad by subtracting a term that is proportional to the error in delivery in a given round ( the difference between expected budget to be consumed in a round and actual amount delivered ) . The pdAvg approximation algorithm consists of modifying the welfare in similar fashion , but as a function of average welfare gained from allocating impressions for a given ad so far . All algorithmic parameters for the above algorithms were chosen from a discrete set in order to minimize total underand over delivery .
L 2 z2 Rz2 − R2
2
2L
E(z ) = if z2 ≤ R L , otherwise .
122 Figure 2 : Performance for each of the 36 ads in Experiment A , as measured by return on ad spend ( ROAS ) obtained by ODD ( blue ) , the proportional control heuristic ( green ) and the pdAvg algorithm of [ 10 ] ( red ) . Subplots are numbered by ad to ease comparison between Figures 2 and 3 . Figure best seen in color .
Figure 3 : Percent budget delivered as a function of expected percentage of budget consumed over a period of 24 hours for the 36 ads for ODD ( blue ) , the proportional control heuristic ( green circles ) and the pdAvg algorithm of [ 10 ] ( red ) for Experiment A . The black dotted line denotes the delivery profile matching exactly with the expected delivery profile for a given ad . Subplots are numbered by ad to ease comparison between Figures 2 and 3 . Figure best seen in color .
123 Figure 2 shows the performance ( ROAS ) metrics at the end of the flight time for each of the three algorithms . Figure 3 shows delivery profiles for each one of them as a function of the expected delivery . As can be seen , pdAvg is able to achieve improved performance over ODD ( for 16/36 ads ) , but at the cost of under delivery in such cases ( eg , see ads 2 , 5 and 30 ) . This is undesirable from the advertiser ’s perspective , as under delivery limits the overall impact of an ad and does not fully utilize the ad ’s budget to achieve the advertiser ’s performance goals . Conversely , for cases where pdAvg over delivered ( ie , spent more budget ahead of schedule ) , such as for ads 25 and 31 , the performance obtained was lower than that achieved by ODD . In aggregate , the performance metrics obtained for the ODD and pdAvg algorithms were very similar ( within 3 % of one another ) , but pdAvg demonstrated the highest variability in delivery ( consistent with observations in [ 3 ] ) in the form of over or under delivery ( standard deviation in percent budget consumed across the 36 ads was 0.16 % for ODD , 11.11 % for proportional control , 34.2 % for pdAvg ) By comparison , the proportional control heuristic was only able to outperform the ODD technique for 4/36 ads ( in all four cases , it underdelivered relative to the expected delivery profile ) , whilst yielding larger violations of delivery goals across the 36 ads as compared to ODD , but less variability in delivery as compared to pdAvg . Overall , ODD yielded a smoother delivery profile for all 36 ads with significantly less over or underdelivery as compared to the other algorithms , and with performance ( reward ) equal to that achieved by the best of the algorithms studied . 6.2 Live experiments in a distributed produc tion system at Amazon
The next two experiments were conducted within the distributed ad serving system at Amazon , where we compare the performance and delivery characteristics of ODD relative to a variant of the pdAvg algorithm .
621 Experiment B : Online A/B test at medium scale For the second experiment , we ran online tests of the ODD framework in a live production environment at Amazon where we compare our distributed optimization algorithm ( treatment ) to an ad allocation algorithm derived from pdAvg ( control ) . Figure 4 shows results from an online test consisting of 7 pairs of control and treatment ads with a variety of slot positions , slot sizes and use/non use of targeting , with the ad line items in treatment and control set to be otherwise identical . For this test , the exposure to external and non stationary ad marketplace dynamics over the duration of the experiment ( 14 days ) can lead to underand over delivery ( where in practice , advertisers are less sensitive to over delivery than under delivery ) . As can be seen , the use of ODD achieves positive performance lifts , with delivery close to the target of 100 % delivery for each ad .
622 Experiment C : Online A/B test at large scale Figures 5 and 6 show the results for the last experiment , where we compare our distributed optimization algorithm ( treatment ) to an ad allocation algorithm derived from pdAvg ( control ) . It is conducted with a larger scale test ( >25X the number of ads from Experiment B ) than the previous experiment ( leveraging a variety of slot positions , slot sizes and use/non use of targeting ) for a larger set of ads across 8 ad vertiser pools over a period of 21 days : we see a consistent and significant reduction in both over and under delivery for all ads in the treatment set . We also note an overall significant decrease ( ie , 39 % ) in the number of ads in the treatment group that under delivered as compared to the control group , and a 22 % decrease in the number of ads in the treatment group that over delivered as compared to the control group , where under and over delivery were defined by each advertiser . We also observe an overall 9 % decrease in the number of ads that under perform and a 19 % increase in the number of ads that achieve advertiser specified performance targets ( also defined by the advertiser ) . Last but not least , we observed overall performance lifts in the range of 10 % to 193 % : these results , taken cumulatively , demonstrate that our algorithm is able to achieve higher advertiser performance whilst being able to better enforce ad delivery constraints as compared to the control treatment .
7 . DISCUSSION
In this paper we have presented online dual decompositions as a technique for deriving practical online and distributed ad allocation algorithms for a variety of problems in online display advertising . In addition to having provided several empirical results derived from online advertising data , we have provided a theoretical analysis of the dynamic regret incurred by ODD , which includes a dependence on 1 ) the ability of an oracle algorithm to smoothly deliver ad impressions and 2 ) the smoothness with which constraints and constraint violations occur . While our analysis provides a regret bound that otherwise scales sub linearly with the number of rounds T , there remain several factors that arise in practice that can impact performance and delivery in a production setting outside of the allocation algorithm : examples of these include 1 ) changes in auction dynamics , 2 ) changes , misallocations of ad budgets and 3 ) mis specification of other campaign specific parameters , to name a few . The impact of such changes on delivery and performance in practice is not to be discounted ( and such impacts captured by our analysis in impacting the ability of an oracle algorithm to achieve smooth delivery ) and should be studied as part of future work .
In this paper we have provided regret analysis that does not require making any assumptions about how feedback is generated by the external ad marketplace ( eg , auction dynamics , stochastic versus adversarial pricing ) . While this provides a robust baseline for performance and delivery characteristics that can be expected from ODD in a practical setting , this does not preclude the use of stable domain knowledge and/or assumptions about the ad marketplace ( eg , forecasting data ) that could be useful in practice in improving performance and delivery properties for ODD . We also did not analyze the impact of delays and delayed feedback on the algorithm : we conjecture that adaptive gradient methods [ 1 , 16 ] for dealing with delays may be appropriate for this setting , which we leave for future work . In terms of dealing with incomplete feedback , we leave as future work an investigation into extensions of ODD into the bandits setting [ 5 ] . Last but not least , we did not examine different distributed systems architectures and their impact on both empirical performance and delivery of our framework , which would be fruitful directions for future investigation .
124 ( a )
( b )
Figure 4 : ( a ) Performance lift for treatment ads and ( b ) change in delivery for treatment ads using ODD relative to control ads as a result of ad allocation via ODD in Experiment B . For this test , the exposure to external and non stationary ad marketplace dynamics over the duration of the experiment ( 14 days ) can lead to under and over delivery ( in practice , advertisers are less sensitive to over delivery than under delivery ) . Here , the use of ODD achieves positive performance lifts , with delivery close to the target of 100 % delivery for each ad . Figure best seen in color .
( a )
( b )
Figure 5 : ( a ) Performance and ( b ) delivery characteristics obtained from ODD relative to control ads for Experiment C . For this test , the exposure to external and non stationary ad marketplace dynamics over the duration of the experiment ( 21 days ) can lead to under and over delivery ( where in practice , advertisers are less sensitive to over delivery than under delivery ) . Here we see overall performance lifts in the range of 10 % to 193 % and a consistent and significant reduction in both over and under delivery for all ads in the treatment set . Figure best seen in color .
( a )
( b )
Figure 6 : ( a ) Lift in performance and ( b ) change in delivery relative to control ads as a result of ad allocation via ODD for Experiment C . For this test , the exposure to external and non stationary ad marketplace dynamics over the duration of the experiment ( 21 days ) can lead to under and over delivery ( in practice , advertisers are less sensitive to over delivery than under delivery ) . Here we see decreases in the fraction of ads that under perform and/or under deliver , as well as an increase in the fraction of ads that perform or deliver up to advertiser specified expectations . Figure best seen in color .
125 [ 18 ] A . Schrijver . Combinatorial Optimization : Polyhedra and Efficiency , Volume A . Springer , 2003 .
[ 19 ] M . Zinkevich . Online convex programming and generalized infinitesimal gradient ascent . In Proceedings of the International Conference on Machine Learning ( ICML ) , 2003 .
Appendix
Proof ( Lemma 1 ) . Note that maximizing u spect to xt ∈ Xt is itself an LP , which can be written as : t xt with re maximize xt i∈It,j∈Ci subject to ∀ i ∈ It ,
( vij − wi)xij xij ≤ 1 j∈Ci
∀ i ∈ It , j ∈ Ci , xij ≥ 0 .
The dual of the above LP is given by i∈It
βi minimize
β subject to ∀ i ∈ It , j ∈ Ci , βi ≥ vij ,
∀ i ∈ It , βi ≥ wi , vij = vij(cid:63 ) ( otherwise β(cid:63 ) i ≥ wi , we with dual optimum β(cid:63 ) . Trivially , for a given i , if β(cid:63 ) must have β(cid:63 ) i = max i would violate j∈Ci i ≥ vij ∀ j ∈ Ci , which contradicts dual opthe constraint β(cid:63 ) timality ) . Now , since a feasible solution to the above primal LP exists ( trivially set all variables xij = 0 ) and the objective function is bounded , there exists at least one solution ˆxt that maximizes u t xt . Suppose that for a given i , we have i > 0 and we were to assign xij = 1 , xij = 0 ∀ j = j for β(cid:63 ) some j = j(cid:63 ) : call this vector of primal variables x t . Then the primal objective here would be u t x t < u t ˆxt , since vij(cid:63 ) > vij ( assuming no ties ) , which contradicts . Therefore xij(cid:63 ) = 1 , xij = 0 ∀ j = j(cid:63 ) maximizes u t x t . Finally , the ˆxij ’s are integral 0/1 variables ( ie : we cannot have fractional xij ’s that maximize u t xt : to see this , we note that the optimal allocation problem is equivalent to matching bid requests i ∈ U to a single ad j ∈ V in a bi partite graph G = ( U , V , E ) where U is the set of bid requests , V is the set of ads and E is the set of edges connecting nodes in U to nodes in V . In particular , for a given bid request i ∈ U , the set of edges incident on i is Ci . Now , the constraint in the primal LP can be written as Gx ≤ 1 with G being the incidence matrix of G . Since G is ( by construction ) bi partite , G is totally unimodular [ 18 ] and so the primal LP only has integral 0/1 solutions .
8 . REFERENCES [ 1 ] A . Agarwal and J . C . Duchi . Distributed delayed stochastic optimization . In Advances in Neural Information Processing Systems , pages 873–881 , 2011 .
[ 2 ] S . Agrawal and N . R . Devanur . Fast algorithms for online stochastic convex programming . In SODA 2015 ( ACM SIAM Symposium on Discrete Algorithms ) . SIAM Society for Industrial and Applied Mathematics , January 2015 .
[ 3 ] A . Bhalgat , J . Feldman , and V . Mirrokni . Online allocation of display ads with smooth delivery . In Proceedings of the 18th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining ( KDD 2012 ) , pages 1213–1221 , 2012 .
[ 4 ] S . P . Boyd and L . Vandenberghe . Convex
Optimization . Cambridge University Press , 2004 .
[ 5 ] O . Chapelle , E . Manavoglu , and R . Rosales . Simple and scalable response prediction for display advertising . ACM Trans . Intell . Syst . Technol . , 5(4):61:1–61:34 , Dec . 2014 .
[ 6 ] Y . Chen , P . Berkhin , B . Anderson , and N . Devanur .
Online bidding algorithms for performance based display ad allocation . In Proceedings of the 17th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining ( KDD ) , pages 1307–1315 , 2011 .
[ 7 ] G . Dantzig and P . Wolfe . Decomposition principle for linear programs . Operations Research , 8:101–111 , 1960 .
[ 8 ] H . Everett . Generalized Lagrange multiplier method for solving problems of optimum allocation of resources . Operations Research , 11(3):399–417 , 1963 .
[ 9 ] J . Feldman , M . Henzinger , N . Korula , V . Mirrokni , and C . Stein . Online stochastic packing applied to display ad allocation . In ESA’10 Proceedings of the 18th annual European conference on Algorithms : Part I , pages 182–194 , 2010 .
[ 10 ] J . Feldman , N . Korula , V . Mirrokni ,
S . Muthukrishnan , and M . Pal . Online ad assignment with free disposal . In Proceedings of the 5th conference on Web and Internet Economics ( WINE ) , 2009 . [ 11 ] E . Hazan , A . Agarwal , and S . Kale . Logarithmic regret algorithms for online convex optimization . Machine Learning , 69(2 3):169–192 , 2007 .
[ 12 ] R . Jenatton , J . Huang , C . Archambeau , and D . Csiba .
Online optimization and regret guarantees for non additive long term constraints . arXiv:1602.05394 , 2016 .
[ 13 ] L . Lasdon . Optimization theory for Large Systems .
MacMillan , 1970 .
[ 14 ] C . Lemarechal and J B Hiriart Urruty . Convex
Analysis and Minimization Algorithms II . Springer Verlag , 1993 .
[ 15 ] M . McEachran . Using Proportional Control For Better
Pacing . http://rubiconproject.com/technology blog/ using proportional control for better pacing/ , 2012 .
[ 16 ] B . McMahan and M . Streeter . Delay tolerant algorithms for asynchronous distributed online learning . In Advances in Neural Information Processing Systems , pages 2915–2923 , 2014 .
[ 17 ] A . Mehta . Online matching and ad allocation .
Foundations and Trends in Theoretical Computer Science , 8(4):265–368 , 2012 .
126
