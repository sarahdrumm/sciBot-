Diversity in Ranking via Resistive Graph Centers
Avinava Dubey IBM Research India avinavadubey@gmailcom
Soumen Chakrabarti
IIT Bombay soumen@cseiitbacin
Chiranjib Bhattacharyya
IISc Bangalore chiru@csaiiscernetin
ABSTRACT Users can rarely reveal their information need in full detail to a search engine within 1–2 words , so search engines need to “ hedge their bets ” and present diverse results within the precious 10 response slots . Diversity in ranking is of much recent interest . Most existing solutions estimate the marginal utility of an item given a set of items already in the response , and then use variants of greedy set cover . Others design graphs with the items as nodes and choose diverse items based on visit rates ( PageRank ) . Here we introduce a radically new and natural formulation of diversity as finding centers in resistive graphs . Unlike in PageRank , we do not specify the edge resistances ( equivalently , conductances ) and ask for node visit rates . Instead , we look for a sparse set of center nodes so that the effective conductance from the center to the rest of the graph has maximum entropy . We give a cogent semantic justification for turning PageRankthus on its head . In marked deviation from prior work , our edge resistances are learnt from training data . Inference and learning are NP hard , but we give practical solutions . In extensive experiments with subtopic retrieval , social network search , and document summarization , our approach convincingly surpasses recently published diversity algorithms like subtopic cover , max marginal relevance ( MMR ) , Grasshopper , DivRank , and SVMdiv .
Categories and Subject Descriptors H.3 [ Information storage and retrieval ] : Information Search and Retrieval General Terms Algorithms , Performance
Keywords graph , conductance , diversity , ranking
1 .
INTRODUCTION
Learning to rank is an active area of machine learning and data mining research [ 18 ] . Queries are short ( 1–2 words ) and are often an incomplete excerpt of the user ’s information need . For example , many person names are ambiguous . User attention drops off steeply with rank , and they rarely look beyond the first 10 or 20 hits .
Together , these two phenomena make diversity a critical requirement . The goal of the search engine is to “ hedge its bets ” and present a variety of response items within scarce screen real estate ( 10–20 top ranking positions ) , so as to Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page . To copy otherwise , to republish , to post on servers or to redistribute to lists , requires prior specific permission and/or a fee . KDD’11 , August 21–24 , 2011 , San Diego , California , USA . Copyright 2011 ACM 978 1 4503 0813 7/11/08 $1000 minimize the ( expected ) number of users who abandon the search without satisfying their information need .
Depending on the application , diversity of response items may be interpreted in different ways . For person name queries on the Web , search engines usually return home pages of different people sharing the name . For queries related to broad topics , diversity may mean adequate coverage of subtopics . For commerce search over laptops or cameras , users may expect a faceted or tabular view of models and attributes . In extractive document summarization , a minimal amount of non repetitive text must be extracted from given documents . Here the items are typically sentences . 1.1 Prior art
The diversity motive clearly requires a global item selection strategy , because the desirability of including an item in a query response obviously depends on other items , even if its intrinsic relevance does not . This central observation has led to two major approaches to diversity .
In the cover approach , the marginal worth of including an item in the response is evaluated as some function of the information it contains that is not elsewhere in the response . Subtopic coverage [ 29 ] , max marginal relevance ( MMR ) [ 4 ] and submodular coverage [ 17 , 16 ] are examples of this paradigm where the marginal utility is designed by hand . SVMdiv [ 28 ] and IndStrSVM [ 15 ] learn the marginal utility of subtopic coverage of documents from training data .
In the Markov walk approach , a graph is designed with nodes representing items . Weighted edges represent some form of similarity between items that is designed by hand , using domain knowledge . The resulting graph is often called a resistive graph , with edges having resistance ( equivalently , conductance representing transition probabilities ) . Random walk processes are defined on the graph . Nodes are included in the response based on visit rates [ 19 ] or expected numbers of visits before absorption [ 32 ] .
A recent , third approach to diversity uses proprietary clickthrough data [ 2 ] from search engines , sometimes in online settings [ 23 ] . The basic idea is that if clusters of users click to different pages after querying a person name , we know that future responses to the query should be diversified . For this approach to succeed , enough users should see diverse URLs to click in the first place , which means that “ coldstart diversity ” remains an important problem .
Here we focus on the first two approaches , and describe the most closely related work in more detail in Section 2 . 1.2 Our contributions cover and Markov walk paradigms above .
Our work began by recognizing some limitations in the • In the cover approach , at test time , how one item covers ( thus rendering redundant ) another item is not directly visible . Therefore , one cannot create features for the units of coverage , even if these are known during training ( as in subtopic queries ) . • The Markov walk approach can potentially get around
78 this problem by directly comparing items without reference to the units of coverage . However , existing work hardwires edge weights rather than learn them . • Markov walks express associativity [ 1 ] : a node i with large score linking to node j pulls up the score of j . However , diversity demands dissociative decisions : if i and j are both relevant and very similar , we should pick only one of them .
The last mentioned disconnect between the semantics of diversity and the Markov walk approach has led to somewhat contrived fixes that we will discuss in Section 2 .
Our main contribution is GCD ( graph center diversity ) , a new framework for diversity . Roughly speaking , GCD finds a sparse teleport [ 12 ] for an associative Markov walk to have a high entropy stationary distribution . It is semantically well motivated and more effective in practice than existing algorithms . GCD is novel in several key ways : • In standard Markov walks [ 12 , 26 ] , walk parameters , including the teleport vector , are inputs and node scores are the output . In contrast , in our new framework , the teleport is the output . We know of no other attempts to use Markov walks in this fashion . This critical role reversal allows us to reuse associative graphs for diversity , while avoiding their conceptual limitation . • In Markov walk approaches , walk parameters are handdesigned and hardwired . In contrast , we learn the walk parameters from an expressive parameter space , using training data . • Our framework incorporates attention decrease with rank ( “ presentation bias ” ) in a natural way .
Somewhat unsurprisingly , inference in GCD is NP hard . However , simple and practical heuristics work well . The framework is presented in Section 3 . Inference is discussed in Section 4 . Training the parameters is discussed in Section 5 . The training problem has some resemblance to structured learning [ 27 ] , but with additional complications . GCD has some similarity with maximizing diffusion of influence in networks [ 13 ] but the latter involves dynamic models . GCD is reminiscent of centerpiece subgraphs [ 25 ] . Their goal is not diversity , but salient hub nodes connecting a small set of query nodes , and walk parameters are not learnt .
In Section 6 we report on experiments with the TREC subtopic task , queries on the IMDB graph of movies , actors , and countries , and the DUC document summarization task . All data sets are public and have been used to evaluate recent algorithms . We show that the elegance of GCD is corroborated by substantially better diversity as evaluated by the end applications .
2 . RELATED WORK
2.1 Marginal relevance
Carbonell et al . [ 4 ] were among the earliest to note the potential conflict between relevance and diversity and offer a trade off . Given query q and a set of documents S already reported , maximum marginal relevance ( MMR ) proposes greedily choosing document arg maxd∈S λ sim1(d , q)− ( 1−λ ) maxd∈S sim2(d , d ) as the next document , for suitably designed similarity functions sim1 , sim2 and tuned parameter λ . Zhang et al . [ 31 ] , Chen et al . [ 5 ] and Guo et al . [ 11 ] offer probabilistic and/or mixture model formulations addressing the same basic issue .
2.2 Subtopic coverage
Zhai et al . [ 29 ] proposed subtopic coverage as a diversification objective and demonstrated effective algorithms on the TREC interactive track . In the learning to rank literature , Yue and Joachims [ 28 ] proposed a structured learning framework SVMdiv for diverse topic coverage , by using features that capture word coverage signals as surrogates of topic coverage . IndStrSVM [ 15 ] propose additional constraints to encourage diversity and balance appropriate for the specific application of summarization . SVMdiv and IndStrSVM stand out as among very few diversity approaches that learn from a powerful hypothesis space . 2.3 Submodular subset selection constraint ilarity , and seeks a subset S ⊂ V to maximize self similarity
An approach related to MMR [ 17 , 16 ] represents items as nodes V in a graph , edges with weights wij representing simi∈S,j∈V \S wij ( or a similar function ) while minimizing the redundancy or i,j∈S,i=j wij . Ie , they maximize the first term minus λ times the second , as in MMR . Such objectives are submodular , affording approximation guarantees from simple greedy algorithms . Despite using a graph representation , this approach has no connection with associative Markov walks . Enhanced with item sizes ci and a budget i∈S ci ≤ B , submodular subset selection has been shown to be particularly suited for document summarization . Similar subset selection has been used to summarize blogs [ 8 ] . That paper requires a fixed and known notion of how each blog posting covers subtopics , which precludes its application in our settings . It also proposes an online algorithm to learn preference weights of individual users on the fixed subtopics , but this has no connection with our learning algorithm . 2.4 Random walk variations
Closest to our proposal here are the following papers , each of which represents the documents to be ( re)ranked as nodes in a graph with edges representing similarity . Zhang et al . [ 30 ] design an “ affinity graph ” between items ( documents ) to be ranked . Suppose C(j|i ) is the probability of transition from item i to j . C(j|i ) is large if most words in i are also in j , reducing the novelty of i . They first compute PageRank on the affinity graph . The initial scores of items are set to their PageRanks . Then , in a loop , they remove the document j with the largest score s(j ) , and reduce the score of linked documents i by s(j ) C(j|i ) . Although it uses a PageRank computation , this approach is very similar in spirit to marginal relevance .
Zhu et al . ’s Grasshopper algorithm [ 32 ] also sets up a random walk with transition probabilities related to similarity between items . They find the top ranking item using conventional personalized PageRank [ 12 ] , but then make the corresponding node a sink , ie , having no outbound transition edges . The resulting graph no longer has a meaningful stationary distribution ( the PageRank of the sink state will be 1 ) , so they compute the expected number of visits to each node before the random walk is absorbed into the sink node . The node with most visits is the second ranked node . Then they make the second node a sink as well and continue the process . This is the graph analog to the k = 1 case of Chen and Karger [ 5 , Section 71 ]
The latest example of this style of formulation is DivRank [ 19 ] , which proposes a random walk with time variant tran
79 sition probabilities CT ( j|i ) at time T :
CT ( j|i ) = ( 1 − λ)r(j ) + λ
C0(j|i)NT ( j ) k C0(k|i)NT ( k ) where NT ( j ) is the ( random ) number of times node j has been visited up to time T and r is a multinomial teleport distribution . This translates into i
C0(j|i)NT ( j ) k C0(k|i)NT ( k ) pT ( i ) pT +1(j ) = ( 1 − λ)r(j ) + λ
Unfortunately NT ( i ) must be approximated with point estimates to keep the computation practical . Mei et al . argue that the above implements a “ rich gets richer ” effect as in preferential attachment [ 3 ] : through random choice and/or asymmetry in the graph neighborhood , one node will emerge the “ winner ” in each tightly connected subgraph . This strategy achieves the same end as Zhang et al . ’s [ 30 ] discounting of information richness through the affinity graph .
Other uses of such random walks exist [ 6 ] , but walk parameters are again hardwired , and the results are used to define similarity between items which is then used in the formulation .
Despite differences in specifics , much is in common across the above techniques [ 30 , 32 , 19 ] . In all cases a graph is defined with edges representing similarity , and a random walk is formulated with parameters that are predefined and hardwired . We argue that diversity has no semantic foundation in visit rates of random surfers and rich gets richer phenomena . Diversity is not the outcome of a social process . Diversity is a desirable property of a ranking that we should seek when query intent is uncertain . 2.5 Associative vs . dissociative graph models If nodes ( documents ) are labeled relevant or irrelevant , all graphs defined above would have associative edge potentials in graphical model terminology [ 14 ] , ie , neighboring nodes will tend to have the same label . This is just a restatement of the cluster hypothesis in IR , and has been used for collective ( associative ) ranking using the undirected graph Laplacian [ 21 ] . Let aij be the similarity between items i , j , b(i ) a noncollective score wrt the query , and f ( i ) the final score we seek . Laplacian techniques seek to minimize f ( j) 2 + ♦
,f ( i)− ,f ( i ) − b(i) 2 , ie , we want scores f ( i ) to be i,j aij i
“ smooth ” across edges while not differing much from the local scores b(i ) . PageRank corresponds to a directed version of the Laplacian [ 1 ] , but the edges continue to be associative . In contrast , diversity calls for dissociative edge potentials . Let the node labels now be “ report ” vs . “ do not report ” . Relevance is now a node potential [ 14 ] rather than a node label : in the absence of edges , relevant nodes should be reported and vice versa . But if an edge ( i , j ) represents a strong similarity and i , j are both relevant , then the diversity principle dictates that the labels across the edge be different rather than the same . It is therefore unsurprising that the above attempts to use an associative network in an essentially dissociative labeling task result in an uneasy fit .
While dissociative graphical models are a more natural expression of the diversity objective , they are computationally intractable [ 14 ] . In contrast , PageRank and Laplacian smoothing can be implemented efficiently via power iterations and quadratic optimization , respectively .
This raises the central question addressed in this paper : Can we retain the simplicity and efficiency of associative Markov walks while making dissociative ranking decisions ?
3 . DIVERSITY AS TELEPORT SEARCH the probability of teleporting , at any step .
In this section we introduce the GCD diversity framework . First we list the notation and facts about PageRank used hereafter . In what follows , i , j represent nodes ( interchangeably , items to be ranked ) in a graph . Let the number of nodes in the graph be N . • C(j|i ) is the probability of walking from node i to j . We will also write it as a matrix element C(j , i ) ( note the transposition ) . • α ∈ ( 0 , 1 ) is the probability of walking , and 1 − α is • When a teleport happens , the destination is node i with probability r(i ) ; r is a multinomial teleport distribution . • The resulting PageRank vector is called p(α , C , r ) and satisfies the recurrence p(α , C , r ) = αCp(α , C , r)+(1− α)r , which solves to p(α , C , r ) = ( 1 − α)(I − αC)−1r , where I is the identity matrix . We will denote ( 1−α)(I−αC)−1 as the the N×N matrix M . 3.1 From random surfer to teleported searcher In standard ( personalized ) PageRank , α , C , r are fixed , and the search engine uses p(α , C , r ) as an estimate of the prestige of pages . Ie , the actions of the random surfer determine the score and rank assigned by the search engine .
However , by now , the surfer ’s predominant access path into the Web is initiated by a search . Search engine rankings form a narrow peephole ( typically K = 10 links at a time ) through which users explore the Web . ( Search engines greatly influence visit and link rates of Web pages . Increased visibility via high PageRank can lead to more visits and links , which can set up a feedback [ 9 ] and delay or prevent prominence of newcomer pages . ) 311 Reversing the role of teleport r In successfully using an associative graph model for dissociative ranking , our key insight is to regard teleport as the output of the search engine as against an input to its ranking processes . Suppose we regard the K = 10 links returned by the search engine in response to a query as defining a teleport vector . The user then uses these response links to teleport to some of these pages . From there the user can locate other similar pages using a variety of devices :
• Following explicit hyperlinks • Acquiring vocabulary by reading documents and com• Consulting topic directories and hubs to locate related posing further queries pages
Thus , the search engine ’s initial response sets off a diffusion process through which the user experiences a subset of the corpus . 312 Omniscient view of relevance , b The search engine , meanwhile , has analyzed tens of billions of pages and has an “ omniscient ” view of the relevance of a document to the user ’s query . Fixing the query , the omniscient relevance score of document i is denoted b(i ) . In a typical linear scoring framework , this is just x qiw , where w is a scoring model vector and xqi is a vector space representation of document i for query q . In vector space cosine scoring , x qiw is already scaled to lie between 0 and 1 , with a score of 0 representing complete irrelevance . ( If this does not hold for the raw scores ,
80 a variety of transformations , such as the logit function , can be used . ) We rescale document scores so that the scores of all documents add up to 1 , thereby making b a multinomial distribution . To summarize :
The goal of the search engine is to choose teleport r so as to make the “ teleported searcher ” visit node i with probability close to b(i ) .
3.2 Teleport profile : Modeling rank bias
To start with , we can assume that the user samples each of the K links provided by the search engine uniformly at random . Under this assumption the teleport vector r induced by the search engine output will have exactly K nonzero elements , each equal to 1/K .
It is now established [ 10 , 22 ] that user attention to ranked responses is heavily skewed toward top ranks . Accordingly , we can use a decaying profile for teleport r . We insist that the K nonzero values be a1 , . . . , aK summing to 1 , with a1 ≥ ··· ≥ aK . Here are some profiles we evaluated . Uniform : This is the simplest option , ak = 1/K . Exponential : ak ∝ 2−k , motivated by clickthrough rates [ 10 ] . Reciprocal : ak ∝ 1/k , motivated by mean average preciLogarithmic : ak ∝ 1/ log k , motivated by the NDCG rank sion and mean reciprocal rank [ 18 ] . ing accuracy measure [ 18 ] .
In all cases , the K nonzero values in teleport r are predetermined ; the search engine must find K nodes and order them from 1 , . . . , K so that the design of r can be completed .
As a single profile policy across all queries and data sets , the logarithmic profile worked consistently better than other profiles in our experiments . However , it is conceivable that different kinds of queries ( eg , navigational vs . informational ) may benefit from different profiles . This is an interesting direction for future work . 3.3 Exploiting linearity and PPVs As we have seen , given teleport r , conductance matrix C , and walk probability α , the PageRank vector p = ( 1−α)(I− αC)−1r = M r , say . This means that p is a linear function of r . If we denote this functional dependency as pr , we have pcr = cpr for c ∈ R , and pr1+r2 = pr1 + pr2 .
A special class of teleport vectors , called impulse teleports , reset to one node with probability 1 . The impulse teleport to node i is written δi , where δi(i ) = 1 and δi(j ) = 0 for all j = i . The PageRank for δi , called the personalized PageRank vector for node i and denoted PPVi , is simply p(δi ) . Suppose we precompute PPVi for all nodes i . PPVi is the ith column of M , written M i . Then , given an arbitrary j M jr(j ) , using the teleport vector r , we can express pr = linearity property .
331 The divergence objective The problem thus reduces to the following : Given multinomial probability vectors M i , i = 1 , . . . , N and scalars a1 , . . . , aK adding up to 1 , find indices i1 , . . . , iK such that ( 1 ) where b is the omniscient relevance . In place of “ ≈ ” above , in an implementation , we would seek to
K k=1 akM ik ≈ b , mini1,,iK
( 2 ) where for ··· we can use L1 , L2 , KL , or some other suitable notion of divergence . k=1 akM ik flflflb −K flflfl
332 The entropy objective An important special case is when all b(i ) are equal . Eg , for each query in the well known subtopic search data set ( Section 6.1 ) , a set of ( only ) relevant documents is provided . In the GCD framework , it is reasonable to want the teleported searcher to visit all these relevant documents at the same rate . A similar situation holds in the IMDB data set ( Section 6.2 ) where the goal is to rank actors by prestige while maintaining diversity ( uniform distribution ) over countries . If b is uniform and KL divergence is used , ( 2 ) turns into maximizing the entropy ofK simplex be denoted by SD = {p|D the entropy H(p ) = −D defined as KL(p , p ) =D
Additional notation . Let the D dimensional probability d=1 pd = 1 , pd ≥ 0} . Let d=1 pd log pd where p ∈ SD . D can be any positive integer . The Kullback Leibler divergence is for p , p ∈ SD . k=1 akM ik . d=1 pd log pd p d
4 .
INFERENCE
There are now two questions remaining .
Inference . If α , C , b are fixed , how should the search engine design a sparse ( K = 10 non zeros , say ) teleport r ∈ SN such that the teleported searcher visits items at rates prescribed by b ? This section focuses on this question . Ie , the output of inference is an optimal r∗ , expressed as the choices of {ik} in ( 2 ) . Training . Suppose we are given an inference algorithm together with training data , ie , graph instances with r∗ specified . The goal of training or learning is to fit C on each graph such that the output of the inference algorithm is ( close to ) r∗ , or at least , the inference algorithm outputs some ˜r achieving an objective close to that obtained with r∗ . Our goal is to avoid hardwired notions of similarity between items as in much of the related work . Section 5 studies this problem . 4.1 Hardness Proposition 1 . Even with uniform profile a , maximizing the entropy ofK k=1 akM ik is NP hard .
Proof . Given an exact cover by 3 sets ( X3C [ 20 ] ) instance with a universe [ T ] = {1 , . . . , T} of elements ( 3 divides T exactly ) and sets indexed n ∈ [ N ] , the decision version of X3C asks if there exist K = T /3 sets whose union is [ T ] , and each element is covered exactly once . We prepare our matrix M which will be of size T ×N . Each column corresponds to a set ; rows corresponding to elements in the set are set to 1/3 , rest 0s . Suppose an X3C exists . This can be used to produce an r with fill T /3 , each element being 3/T , such that M r is a column vector of T elements , each equal to 1/T . The entropy is log T . Suppose an X3C does not exist . Then any choice of K columns of M will leave at least one element uncovered . i(1/T ) log pi , where at most T − 1 pi values can be positive . So the best bet is to make T log(T − 1 ) which them all 1/(T − 1 ) , for an entropy of T−1 is strictly less than log T .
The form of the objective is −
Proposition 2 . With uniform profile a and using L2 divergence , solving ( 2 ) for arbitrary b is NP hard .
81 Proof . This follows from the hardness of finding sparse solutions to linear least square problems [ 20 ] . 4.2 Heuristics
Given the hardness results , it is reasonable to try a greedy search . We collect K columns from the N columns of PPV matrix M from the input set successively , in each step choosing that vector which minimizes the divergence or maximizes the entropy . The procedure is shown in Figure 1 . 1 : input : PPV matrix M ; a1 ≥ ··· ≥ aK > 0 ; reference b 2 : output : sequence S of K columns chosen from M 3 : initialize S = ∅ 4 : for k = 1 , 2 , . . . , K do 5 : 6 : for each i ∈ [ 1 , N ] \ S do tentatively include column i in S
|S| |S| s=1 asM s s=1 as compute ψ = record ψ − b
7 :
8 : 9 : choose best column and commit inclusion in S
Figure 1 : Greedy teleport selection .
One way to estimate the gap between the greedy solution and the optimal is to bound the optimal using a relaxed integer program . Let zki ∈ {0 , 1} be decision variables indicating if the ith item ( column ) is placed at rank k , where i = 1 , . . . , N and k = 1 , . . . , K . The basic constraints on zki are ( exactly one item in each rank , assuming n ≥ k ) , and
( 3 )
∀k : ∀i :
( 4 ) ( each item goes to at most one rank among 1 , . . . , K ) . Once zki are relaxed to [ 0 , 1 ] , the generic divergence or entropy objectives lead to a convex optimization that can be efficiently executed . 5 . LEARNING GRAPH CONDUCTANCE i zki = 1 k zki ≤ 1
In this section we discuss the design of our edge weights , and how these are learnt from data . Some salient properties of our approach are summarized below . • Unlike prior work , we do not work with a single graph . We overlay one graph per feature to define edge conductance . • The per feature graphs are combined through a learn ing process .
Wherever associative graph models have been used to enhance diversity , edge conductance C(j|i ) have been hardwired and fixed by design . A common design has been to make C(j|i ) directly related to sim(i , j ) . If sim(i , j ) ∈ R+ , as is the case in TFIDF cosine or Jaccard similarity ,
C(j , i ) =
.
( 5 ) sim(i , j ) j sim(i , j ) has been frequently used . There is only one kind of edge conductance . 5.1 Edge features
Given nodes i and j , there may be multiple notions of symmetric similarity or asymmetric coverage between them . Each such notion is said to be a feature , indexed by f ∈ [ 1 , F ] . We will end this subsection with examples of features that we use . For each feature f , we get a conductance matrix Cf .
Now there are ( at least ) two ways to combine information from the per feature conductance matrices into a single one .
C = f λf Cf , where λf ≥ 0 and
The first way is to use a convex combination on Cf , ie , let f λf = 1 , ie , λ ∈ SF . The resulting matrix C is also stochastic , so now we can use M = ( 1 − α)(I − αC)−1 as usual . This creates a mixture of Markov walks and then finds the corresponding PPV matrix M , which sounds more natural . However , observe that the parameters to be learnt , λ , get involved in M as a matrix inverse , which makes the optimization over λ extremely complicated . Guided by preliminary experiments , we pursue an alternate parametrization : Mf = ( 1 − α)(I − αCf )
−1 , M ( λ ) =
λf Mf .
( 6 ) f
This parametrization simplifies the training procedure and is the focus of the study in the enusing paragraphs . 511 Conventional symmetric similarity features Most Markov walk based diversity algorithms [ 32 , 19 ] start with a symmetric edge weight based on some measure of similarity between the edge endpoints i , j . Specifically , they use cosine similarity between documents or sentences in some vector space . Other variations like ( weighted ) Jaccard may also be used . The raw edge weight is divided by the total outbound edge weight from a node to get outgoing transition probabilities , as shown in ( 5 ) . 512 Asymmetric coverage features ( MinSim ) Consider subtopic retrieval and a document i that is a concatenation of documents j1 and j2 . Then i is a good center , and , to bring this out , i should have high probability transitions to j1 , j2 . The converse need not , and perhaps should not hold .
This intuition ( also see [ 30 ] ) led us to the “ MinSim ” feature . Fix a word , and suppose it occurs ni , nj times in document i , j where there is a directed edge ( i , j ) . Then we say that the word contributes min{1 , ni/nj} to the edge ( i , j ) . Ie , if i contains the word as many times as j , i completely covers j as far as this word is concerned . ( For nj = 0 MinSim is defined to be 0 . )
We can now aggregate signals from different words in various ways . We did this by taking a simple average or a weighted averages of the MinSim scores , the weights being inverse document frequency ( IDF ) [ 24 ] . 513 Projecting out query information The items we are ( re)ranking for diversity are all assumed to be fairly relevant to the query . In case of subtopic retrieval , we expect that all documents in the relevant set contains some or most of the query words . One may argue that , in computing edge features , we should ignore query words . This is easy because we allow any number of potentially redundant edge features . Ie , we can compute edge features including or excluding query words , and retain both sets of features . 514 Encoding other application signals Earlier work on extractive document summarization [ 32 , 19 ] have observed and exploited that good summary sentences tend to come disproportionately from early parts of documents . They biased their teleport r by choosing r(k ) ∝ k−0.25 where k is the rank of the sentence in a document ( 0.25 was found by hand tuning ) . In our case , we can simply devise an additional edge feature and corresponding conductance matrix ( details in Section 63 )
82 5.2 Learning feature weights f , pq∗ f = Mqf r and pq∗ q ) ≥ H(Mqr ) .
The input data to the learner is {(q , Mq,f , r∗
For the qth query Mq(λ ) =
During training , each instance consists of a graph skeleton , together with Mf for each feature f . For the subtopic retrieval task , an instance corresponds to a query . For the summarization task , an instance is one or more related documents that need to be summarized together . For each instance , we are also given one or more optimal , sparse teleport vectors r∗ . The job of the learner is to fit a suitable λ to combine the Mf s . As a simple baseline we will start with all λf equal , and compare it with more elaborate algorithms . q )} where q is a query or task unit , Mqf the PPV matrix for query q and feature f , and r∗ q is/are one ( or more near ) perfect teleports . f λf Mqf is a matrix and r∗ q be a given vector vector such that f ∈ SN . ∗ pq q , where pq f = Mqf rq q is omitted when fixed or clear from context . We want to select λ so that , for each query , the entropy corresponding to r∗ to exceed the entropy of any other ( non optimal ) teleport r . Ie , we want H(Mqr∗ 521 Entropy maximization ( MaxEnt ) heuristic Ensuring H(M r∗ ) ≥ H(M r ) is nontrivial . As an early heuristic , we could just try to maximize the lhs . Consider the quantity ∗ H(M r say , where p∗ f are known multinomial vectors . Because H is concave , this is a benign optimization , and can be efficiently solved . We call this the MaxEnt trainer . 522 Exponentiated gradient ( EG ) approach We are also given an inference procedure which , given a query and the weights λ ( 6 ) , outputs ˆrq , a good if not ideal teleport . Unfortunately , the inference problem is NP hard , and can only be solved approximately . At this point it is unclear how to choose a λ to help the inference algorithm return a good r , given a new test query . In this section we propose a loss function and an associated subgradient based online procedure for learning λ . 5221 Loss function . In Section 4 we discussed a greedy inference algorithm which computes r with large H(Mq(λ)r ) . However , the ground truth r∗ may not equal r as obtained from the inference procedure . that H(M ( λ)rq ) ≥ H(M ( λ)r∗ to improve λ . This immediately motivates a loss
If the inference algorithm for a fixed λ gives us rq such q ) , then clearly we need to try f λf Mf r∗
.H(M ( λ)rq ) − H(M ( λ)r f λf p∗
∗ q ; λ ) = q )fi
) = H
= H
∗
, f q q
+
∆(rq , r
( 7 ) where [ c]+ = max{0 , c} . This loss is minimum if H(M ( λ)rq ) ≤ H(M ( λ)r∗ q ) for all q . The problem of minimizing this loss as a function of λ is not easy as the loss is non convex . In the sequel we derive a convex upper bound and derive a prox function based algorithm [ 7 ] for solving the problem in an online setup . 5222 Optimizing the loss . Let us rewrite the argument in the max function as a difference of two convex functions , specifically note that ∆(rq , r∗ −H(M rq ) and G∗ q ; λ ) = max(0,−Gq(λ ) + G∗ cave , G is convex in λ . Let p(λ ) = q ( λ ) ) where Gq(λ ) = q ) . Because H is conf and p∗(λ ) = q ( λ ) = −H(M r∗ f λf pq
λ0 i pt i
+ u(λ0 )
( λ − λ0 ) , f . We approximate G by its global under estimator : f λf pq∗ where uj(λ ) = Gq(λ ) ≥ ˆGq(λ ) = −H d i=1 j(1+log pj(λ))pt ij . This motivates a convex loss function which upperbounds ∆ . Specifically ,
∆(rq , r q , λ ) ≤ lq(λ ) ∗
= max
0 , G q ( λ ) − ˆGq(λ ) ∗
.
One can minimize lq as a function of λ . Though the problem is convex , one cannot invoke gradient based procedure for this purpose as lq is not differentiable . We exploit the fact that lq is sub differentiable and propose a subgradient based algorithm suited for the online setting . We use the subgradient
Here gq(λ)i = n gq(λ ) = implies that
ˆGq(λ ) ≥ G∗ q ( λ ) − u(λ0 ) , otherwise . q ( λ ) lq(λ ) − lq(λ
) ≤ ( λ − λ
( 8 ) Consider the online setup where queries are processed one gq(λ )
) j ( λ))pq∗ ij . This immediately
0 , ∇λG∗ j=1(1 + log p∗ after another . Let there exist
∗ λ
= arg min λ∈SF
LT ( λ ) lq(λ )
.
T q=1
=
1 T
T
T log F T t=1
We define the regret R as R(λ1 , . . . , λT ) = L(λ1 , . . . , λT ) − LT ( λ∗ ) where L(λ1 , . . . , λT ) = 1 Proposition 3 . Let there exist m such that q=1 lq(λq ) .
T m ≥ gq(λ)∞ ∀λ ∈ SF KL(λ , λt ) + η(λ − λt )
Then the iteration λt+1 = arg min λ∈Sd ensures that R(λ1 , . . . , λT ) ≤ 2m
∇λt lt(λt ) provided η =
( 9 )
( 10 ) log F m2T .
Proof . The proof follows Duchi et al . [ 7 ] . As a consequence of ( 8 ) , it is immediate to see that ) ) ≤ 1 T
( lt(λt ) − lt(λ
( λt − λ ∗
T gt(λ ) . ( 11 )
R =
1 T
∗
) t=1
The goal would then be to upperbound the rhs . To this end see that the iteration ( 10 ) leads to updates of the form Z exp ( −ηgq(λ)i ) where Z is chosen so that lhs λ(q+1)i = λqi sums to 1 over i . For such a choice of λt+1 one can prove
∗
, λt ) − KL(λ
∗
, λt+1 ) ≥ η(λt − λ gt − η2m2
)
KL(λ
( 12 )
See that the LHS simplifies to
∗
λtk exp,−η ( ∇lt(λt))k k
Exploiting ex ≤ 1 + x + x2 for |x| ≤ 1 , and assuming that η|gqi| ≤ 1 , log
λqk exp ( −ηgqk )
≤ log
1 − ηλ gq + η2
λqig2 qi
− ηλ
∗∇lt(λt ) .
= − log k gt + m2η2 ) ≤ −ηλ
≤ log(1 − ηλ
The last two inequalities follow because log is monotonically increasing and is upperbounded by the identity function which proves the claim . gt + η2m2 .
Using ( 12 ) and summing over all t we get , λ1 ) − KL(λ ∗
( λt − λ ∗ gt ≤ 1
KL(λ
∗
)
, λt+1 )
+ ηm2 .
T
η t=1 Dropping the second term in RHS we obtain the inequality n i=1
( λt − λ
∗
) gt ≤ 1 η
∗
KL(λ
, λ1 ) + ηT m2
T t=1
83 Taking λ1 = 1/F , where 1 is a vector of all 1s , yields KL(λ , λ1 ) ≤ log F . Finally the bound is proved by noting that the minimum of a √ b and ab . the optimum value is 2
η + bη is obtained at η = a
The learning algorithm tries to minimize ∆(rq , r∗ q ; λ ) by minimizing a convex upper bound in an online setup . The minimization is not easy as it yields a non differentiable objective but the problem is finessed by a prox function approach [ 7 ] .
6 . EXPERIMENTS
We compared GCD with most of the recent coverage/novelty
Figure 2 : S precision vs . S recall , subtopic retrieval .
[ 4 , 29 , 28 ] and Markov walk [ 32 , 19 ] based diversity algorithms . We explored three application areas with public data sets , reported in separate subsections next . 6.1 Diverse subtopic retrieval
In the TREC 6–8 interactive tracks , each query is associated with a set of subtopics and a set of relevant documents , and each document is marked with the set of subtopics for which it is relevant . This data set has been used earlier by Zhai et al . [ 29 ] and Yue et al . [ 28 ] . The subtopics and their coverage is used to compute diversity cognizant recall and precision scores for retrieval algorithms , but the algorithms are not supposed to know subtopic coverage information .
We used the following edge features : • Average MinSim coverage of one document by another , weighted by word IDF in the corpus of relevant documents for each query . • Symmetric cosine and Jaccard similarity between doc uments .
Each query is associated with only relevant ( to at least one subtopic ) documents . Thus , as in Yue et al . [ 28 ] , the relevance issue is thereby fixed for all algorithms , and only their effect on diversity is studied . We used a uniform b . For training , r∗ was obtained using greedy set cover given the subtopic/s covered by each relevant document .
1 τ
For evaluation , we used standard S recall and S precision originally proposed by Zhai et al . [ 29 ] for such data . Let SubTopics(d ) be the subtopics for which document d is relevant , and let a query have τ subtopics . The S recall at rank fififi . Let MinRank(π , r ) be the fififiK k=1 SubTopics(dk )
K is smallest rank at which S recall of r is achieved by a ranking π . Then S precision at recall r is MinRank(π∗,r ) MinRank(π,r ) ∈ [ 0 , 1 ] , k where π∗ is the optimal order . Let SubTopicsUpto(k ) = κ=1 SubTopics(dκ ) and NewTopics(dk ) = SubTopics(dk ) \ cision ) at rank K is defined asK SubTopicsUpto(k−1 ) . Then the S MAP ( mean average pre , a direct
NewTopics(dk ) analog of standard MAP . k=1
τ k
611 Accuracy of diversification As a summary view , Figure 2 shows S precision vs . Srecall for most of the recent algorithms . GCD stands out as dominating other algorithms over almost all recall levels . DivRank is excellent at small recall , and , given its simplicity , MMR is surprisingly good at larger recall .
Figure 3 shows subtopic aware MAP ( mean average precision ) or S MAP against rank of responses . Our GCD approach is clearly superior at all ranks . SVMdiv and DivRank are the runners up .
Figure 3 : Subtopic aware MAP ( S MAP ) .
Inference quality
612 Greedy search ( Section 4.2 ) was used throughout . We did spot checks on 17 queries , comparing relaxed integer program ( Section 4.2 ) entropy ( upper bound ) with greedy entropy ; average upper bound ÷ greedy was 1.0089 ; it was less than 1.008 for 16 queries .
Figure 4 : Effect of training λ .
613 Effect of training In Figure 4 we show test S MAP at ranks 1–10 after various forms of training λ . The baseline is no training , with all λf equal , ie , giving equal importance to all Mf matrices . The second set of bars correspond to the MaxEnt trainer described in Section 521 The final set of bars corresponds to the exponentiated gradient ( EG ) trainer described in Section 522 MaxEnt training shows a substantial benefit beyond using a uniform λ , and EG training further improves on that . The typical training time per instance of GCD is less than 10 seconds , while for SVMdiv it is over 3 hours . 614 Ablation study In GCD we changed both the edge representation and the algorithm . Compared to DivRank and Grasshopper ,
3545556575002040608S RecallS PrecisionGCDDivRankSVMdivGrasshopperMMRSubTopic0405060712345678910RankS MAPGCDSVMdivDivRankGrasshopperMMRSubTopic05055060650712345678910RankS MAPUniformMaxentEG84 Figure 5 : Ablation study . how much of the accuracy gains shown by GCD are because of a different graph , and how much of it is because of a different , trainable algorithm ? Figure 5 shows that moving from symmetric cosine to asymmetric MinSim greatly helps GCD , while it hurts DivRank and Grasshopper . In fact , GCD with cosine is worse than DivRank . This highlights the unified nature of our formulation .
6.2 Ranking in social networks
Grasshopper [ 32 ] introduced a diversity task quite distinct from subtopic retrieval and document summarization . It involves the IMDB database , represented as a graph with actors as nodes . Associated with each actor is a set of movies where s/he worked . Edges between actors nodes can be designed in various ways , depending on symmetric overlap ( cosine , Jaccard ) or asymmetric coverage ( MinSim ) in terms of movies associated with the endpoint nodes . Unseen by the algorithms , each actor is also associated with a country . The data involves 3452 actors , 1027 movies , and 47 countries .
Each algorithm has to rank the actors by some notion of network prestige . Since high prestige actors work in many movies , we expect that , as we collect more actors down the ranked list , we will rapidly increase the number of associated movies . If the ranking of actors is also diverse , we would expect to collect countries rapidly as well .
Figure 6 shows the number of distinct countries and movies associated with a prefix of top ranked actors from the lists returns by various algorithms , where parameters were chosen to maximize the performance of each algorithm . DivRank works well , but the diversity of GCD dominates others wrt both movies and countries .
6.3 Document summarization
Earlier diversity algorithms [ 32 , 19 ] were evaluated on sentence level document summarization . The goal is to return a set of sentences that have low redundancy among themselves , and “ covers ” well the rest of the sentences in the document/s being summarized . Representing sentences as nodes and symmetric similarity or asymmetric coverage as edges between sentence pairs makes it natural to apply Grasshopper , DivRank and GCD .
Prior work recognized that earlier sentences in documents are more likely to be included in good summaries , and encoded this in their teleport vectors . In GCD , since the teleport is our output , we need a different device . Within a document , sentence number i links to all sentences numbered j > i , and the last sentence loops back to the first one . This corresponds to the realistic reader/surfer model of reading a document starting at a given sentence , getting
Figure 6 : Simultaneous diverse country and movie coverage as a function of number of top actors . bored with some probability at each subsequent sentence and teleporting away .
The DUC 2004 data set includes human written , nonextractive summaries with associated ROUGE 1 scores [ 32 ] . We exhaustively searched the documents for sets of sentences that have ROUGE 1 scores close to the human summaries , and use these sets to define r∗ for training . We used the 50 labeled instances as defined by Task 2 of DUC 2004 , randomly split into 30 training and 20 test instances .
Algorithm MMR [ 4 ] SubTopic [ 29 ] Grasshopper [ 32 ] DivRank [ 19 ] GCD Submodular [ 16 ] Optimal
Train Test .324 .32 .341 .353 .365 .389 .421
.32 .323 .33 .345 .369 .373 .407
Figure 7 : Document summarization accuracy .
Figure 7 shows ROUGE 1 scores for different algorithms . GCD fares better than MMR , SubTopic , Grasshopper and DivRank . Submodular beats GCD by only 0.004 in test data . Here , GCD did not use information about sentence length and summary budget ( in words or bytes ) , whereas Submodular did . Leveling the playing field and comparing them again is left for future work . 6.4 Typical training and inference time
Recent work on diversity focuses more on formulation and quality than speed . In particular , evaluating Mf through matrix inversion can be expensive . On the TREC subtopic data set , SVMdiv takes over three hours to train . As a ballpark estimate , for executing the average query , SVMdiv takes 1s , GCD and Zhai et al . ’s subtopic algorithms take 2s each , Grasshopper takes 4s , and DivRank takes 3s . For IMDB , query times compare as Zhai < GCD < DivRank Grasshopper . Thus , although none of these algorithms
0405060712345678910RankS MAPGCD CosGCD AsymDivRank CosDivRank AsymGH CosGH AsymGCDDivRankGrasshopper010203040500200400600800#Actors#CountriesGCDDivRankGrasshopperMMRSubTopic0200400600800100012000200400600800#Actors#MoviesGCDDivRankGrasshopperMMRSubTopic85 are well suited for large scale real time deployment , GCD is quite competitive wrt prior art . 7 . CONCLUSION
The starting point of our work was to recognize that diversity algorithms [ 32 , 19 ] modeled around PageRank had no plausible generative or phenomenological explanation . Meanwhile , SVMdiv [ 28 ] can be trained to recognize topic coverage , and NetRank [ 1 ] can train graph conductances . The key difference between NetRank and this work is that here we are after dissociative selection , which is achieved by the graph center search . In this process , we gave an alternative , sound theoretical foundation of diversity around associative graph models . Giving inference guarantees and extending to clickthrough data are natural directions of future work . Acknowledgment . Thanks to Andrew Goldberg and Qiaozhu Mei for help with data sets and Yisong Yue for help with SVMdiv . Thanks to the reviewers for helping us improve the presentation . 8 . REFERENCES [ 1 ] A . Agarwal and S . Chakrabarti . Learning random walks to rank nodes in graphs . In ICML , 2007 .
[ 2 ] R . Agrawal , S . Gollapudi , A . Halverson , and S . Ieong .
Diversifying search results . In WSDM Conference , pages 5–14 , 2009 .
[ 3 ] A L Barab´asi and R . Albert . Emergence of scaling in random networks . Science , 286:509–512 , 1999 .
[ 4 ] J . Carbonell and J . Goldstein . The use of MMR , diversity based reranking for reordering documents and producing summaries . In SIGIR Conference , pages 335–336 , 1998 .
[ 5 ] H . Chen and D . Karger . Less is more : probabilistic models for retrieving fewer relevant documents . In SIGIR Conference , pages 429–436 , 2006 .
[ 6 ] A . Das Sarma , S . Gollapudi , and S . Ieong . Bypass rates : reducing query abandonment using negative inferences . In SIGKDD Conference , pages 177–185 , 2008 .
[ 7 ] J . Duchi , S . Shalev Shwartz , Y . Singer , and A . Tewari .
Composite objective mirror descent . In COLT , pages 14–26 , 2010 .
[ 8 ] K . El Arini , G . Veda , D . Shahaf , and C . Guestrin .
Turning down the noise in the blogosphere . In SIGKDD Conference , pages 289–298 . ACM , 2009 .
[ 9 ] A . Frieze , J . Vera , and S . Chakrabarti . The influence of search engines on preferential attachment . Internet Mathematics , 3(3):361–381 , 2006–2007 .
[ 10 ] L . A . Granka , T . Joachims , and G . Gay . Eye tracking analysis of user behavior in www search . In SIGIR Conference , pages 478–479 , 2004 .
[ 11 ] S . Guo and S . Sanner . Probabilistic latent maximal marginal relevance . In SIGIR Conference , pages 833–834 , 2010 . Poster .
[ 12 ] G . Jeh and J . Widom . Scaling personalized web search . In WWW Conference , pages 271–279 , 2003 .
[ 13 ] D . Kempe , J . M . Kleinberg , and ´E . Tardos . Influential nodes in a diffusion model for social networks . In ICALP , pages 1127–1138 , 2005 .
[ 14 ] D . Koller and N . Friedman . Probabilistic Graphical
Models : Principles and Techniques . MIT Press , 2009 .
[ 15 ] L . Li , K . Zhou , G R Xue , H . Zha , and Y . Yu .
Enhancing diversity , coverage and balance for summarization through structure learning . In WWW Conference , pages 71–80 , Apr . 2009 .
[ 16 ] H . Lin and J . Bilmes . Multi document summarization via budgeted maximization of submodular functions . In HLT Conference , pages 912–920 , Stroudsburg , PA , USA , 2010 . Association for Computational Linguistics .
[ 17 ] H . Lin , J . Bilmes , and S . Xie . Graph based submodular selection for extractive summarization . In Automatic Speech Recognition and Understanding Workshop , 2009 .
[ 18 ] T Y Liu . Learning to rank for information retrieval .
Tutorial at SIGIR , 2008 .
[ 19 ] Q . Mei , J . Guo , and D . Radev . DivRank : the interplay of prestige and diversity in information networks . In SIGKDD Conference , pages 1009–1018 , 2010 .
[ 20 ] B . K . Natarajan . Sparse approximate solutions to linear systems . SIAM Journal on Computing , 24(2):227–234 , apr 1995 .
[ 21 ] T . Qin , T Y Liu , X D Zhang , D S Wang , W Y
Xiong , and H . Li . Learning to rank relational objects and its application to Web search . In WWW Conference , pages 407–416 , 2008 .
[ 22 ] F . Radlinski and T . Joachims . Active exploration for learning rankings from clickthrough data . In SIGKDD Conference , pages 570–579 , 2007 .
[ 23 ] F . Radlinski , R . Kleinberg , and T . Joachims . Learning diverse rankings with multi armed bandits . In ICML , pages 784–791 , 2008 .
[ 24 ] G . Salton and M . J . McGill . Introduction to Modern
Information Retrieval . McGraw Hill , 1983 .
[ 25 ] H . Tong and C . Faloutsos . Center piece subgraphs : Problem definition and fast solutions . In SIGKDD Conference , 2006 .
[ 26 ] H . Tong , C . Faloutsos , and J Y Pan . Fast random walk with restart and its applications . In ICDM , 2006 .
[ 27 ] I . Tsochantaridis , T . Joachims , T . Hofmann , and
Y . Altun . Large margin methods for structured and interdependent output variables . JMLR , 6(Sep):1453–1484 , 2005 .
[ 28 ] Y . Yue and T . Joachims . Predicting diverse subsets using structural SVMs . In ICML , pages 271–278 , 2008 .
[ 29 ] C . X . Zhai , W . W . Cohen , and J . Lafferty . Beyond independent relevance : methods and evaluation metrics for subtopic retrieval . In SIGIR Conference , pages 10–17 , 2003 .
[ 30 ] B . Zhang , H . Li , Y . Liu , L . Ji , W . Xi , W . Fan ,
Z . Chen , and W Y Ma . Improving web search results using affinity graph . In SIGIR Conference , SIGIR ’05 , pages 504–511 , New York , NY , USA , 2005 . ACM .
[ 31 ] Y . Zhang , J . Callan , and T . Minka . Novelty and redundancy detection in adaptive filtering . In SIGIR Conference , pages 81–88 , 2002 .
[ 32 ] X . Zhu , A . B . Goldberg , J . Van , and G . D .
Andrzejewski . Improving diversity in ranking using absorbing random walks . In HLT NAACL , pages 97–104 , 2007 .
86
