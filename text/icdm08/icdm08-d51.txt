2008 Eighth IEEE International Conference on Data Mining 2008 Eighth IEEE International Conference on Data Mining
Robust Time Referenced Segmentation of Moving Object Trajectories∗
Hyunjin Yoon and Cyrus Shahabi University of Southern California
Los Angeles , CA 90089 0781
{hjy , shahabi}@usc.edu
Abstract
Trajectory segmentation is the process of partitioning a given trajectory into a small number of homogeneous segments wrt some criteria . Conventional segmentation techniques only focus on the spatial features of the movement and could lead to spatially homogeneous segments but with presumably dissimilar temporal structures . Furthermore , trajectories could be over segmented in the presence of outliers . In this paper , we propose a family of three trajectory segmentation methods that takes into account both geospatial and temporal structures of movement for the segmentation and is also robust with respect to time referenced spatial outliers . The effectiveness of our methods is empirically demonstrated over three real world datasets .
1 . Introduction
A trajectory of a moving object is a series of locations sampled at discrete instances of time and defined as a sequence of pairs , fi(p1 , t1 ) , ( p2 , t2) , . . .,(pn , tn)' , where pi is a two or three dimensional vector representing the geospatial position observed at a timestamp ti ( i = 1 , . . . , n ) . Various types of trajectory data tracking the movement of vehicles , animals , or human subjects have been acquired using location aware sensors and exploited to find similar trajectories [ 4 ] , discover frequent spatio temporal patterns [ 3 , 6 , 8 ] , and eventually obtain insights into the behavioral traits of moving objects .
Often the size of a trajectory , ie , the number of observations n , is large . For example , the elk trajectories used in [ 8 ] contain about 1430 observations on average , and the size of bus trajectories used in [ 3 ] varies in the range from 1000 to 7000 . It is therefore necessary to preprocess the trajectories to reduce the dimensionality and compress them in a compact and concise representation in order to process them efficiently in the subsequent data analysis tasks .
∗
This research has been funded in part by NSF grants IIS 0238560 ( PECASE ) , IIS 0534761 , IIS 0742811 and CNS 0831505 ( CyberTrust ) , and in part from the METRANS Transportation Center , under grants from USDOT and Caltrans . Any opinions , findings , and conclusions or recommendations expressed in this material are those of the author(s ) and do not necessarily reflect the views of the National Science Foundation .
Trajectory segmentation is an attempt to partition a given trajectory into a small number of homogeneous segments , such that the data within each segment are similar wrt some criteria and thus can be effectively described by a simple model [ 2 ] . A typical approach previously adopted for the trajectory segmentation [ 3,8 ] takes a simple sequence of sampled locations ( by dropping the timestamp component ) of a trajectory as an input , which we call a route of a moving object to explicitly distinguish it from a trajectory . The approach first selects a subset of the sampled locations , identified as characteristic points ( CPs ) , where the geometric structure ( eg , spatial closeness , co linearity , or movement direction ) of the given route changes substantially . Subsequently , only the selected CPs are retained to approximate the input trajectory as a sequence of lines , each connecting two consecutive CPs . Figure 1 illustrates a route with 9 sampled positions and its desirable segmentation into four continuous and non overlapping segments .
Y p5
S3
S2
S1 p1 p2 p4 p3 p9 p8
S4 p7 p6
X
: sampled positions : characteristic points
Figure 1 . An example of route segmentation Our key observation is that such segmentations discarding the time component could lead to spatially homogeneous segments but with presumably dissimilar temporal or spatio temporal structures unless a constant sampling rate is assumed1 . Suppose the first four locations in Figure 1 are acquired at irregular sampling rate , eg , time stamped at 1 , 2 , 3 , and 13 , respectively . From the timestamps together with the moving distances , it can be derived that the speed development of the moving object varies within the obtained segment S1 ; it is fast at first from p1 to p2 , similarly fast from p2 to p3 , and then moves slowly from p3 to p4 . Since the movement speed significantly changes at p3 , the segment S1 should have been partitioned at p3 to result in genuinely homogeneous segments in terms of both
1Irregular sampling rates are usually encountered in the real world sensor data due to the inherent imprecisions of sensor devices , missing data , network failure or delay , disturbance signals , etc .
1550 4786/08 $25.00 © 2008 IEEE 1550 4786/08 $25.00 © 2008 IEEE DOI 101109/ICDM2008133 DOI 101109/ICDM2008133
1121 1121 spatial and temporal semantics .
Another limitation of previous approaches is their vulnerability to outliers . A single extreme location value , typically depicted as a peak ( see p5 on the route in Figure 1 ) , is most likely selected as a characteristic point by the conventional segmentation due to its substantial change of geometric structure . However , if p5 is an incorrect noisy sensor value representing unrealistic movement and hence an outlier , a desired segmentation robust to noise would lead to a single segment connecting p1 to p9 , discarding this outlier . In order to detect whether p5 is indeed an outlier or just a surprising but a correct value , the associated temporal information must be exploited together with the spatial changes ( see Section 22 ) Otherwise , trajectories will be over segmented at all spatial outliers by erroneously considering them as CPs .
In this paper , we propose a family of three robust timereferenced trajectory segmentation algorithms that take into account both spatial and temporal structures presented in the trajectory data to identify genuine characteristics points . Intuitively , we attempt to partition a given trajectory into a small number of spatially and temporally homogeneous segments , such that each segment accurately approximates a linear movement at a constant speed . In addition , we utilize the spatio temporal properties of movement to guide the outlier detection so as to make the segmentation robust to outliers . Our experiments on three real world datsets indicate that our techniques outperform the conventional techniques , such the Douglas Peucker algorithm and the onepass approximation algorithm based on the Minimum Description Length principal as well as their simple temporal extensions , in terms of spatio temporal homogeneity while maintaining comparable spatial homogeneity .
2 . Preliminaries
In this section , we present our trajectory model and some basic definitions to be used in the rest of paper .
21 Trajectory Model
The movement of a moving object is typically traced by sampling its geographic locations at discrete instances of time by using location aware sensors . A trajectory S is a finite sequence of sampled locations during a closed time interval [ t1 , tn ] and defined as a sequence of pairs S = fi(p1 , t1 ) , ( p2 , t2) , . . .,(pn , tn)' , where pi ∈ d ( d ∈ {2 , 3} ) is a two or three dimensional location vector representing the geo spatial position sampled at a timestamp ti ∈ + . A route of the moving object is the projection of the trajectory S on the spatial space by dropping the temporal component , thus defined as the simple sequence of sampled position values Rs = fip1 , p2 , . . . , pn' . The size of a trajectory is defined as the number of samples and denoted as |S|=n .
Figure 2 illustrates a trajectory as a solid directed polyline in the spatio temporal space formed by combining the spatial plane spanned by X and Y axes ( shaded in the figure ) and the time dimension of Z axis . The dashed line on the ( shaded ) spatial plane shows the route . We assume an irregular sampling rate , that is , the time intervals between two consecutive samples , Δti = ti+1 − ti ( i = 1 , . . . , n − 1 ) , can vary even within a single trajectory . This is a reasonable assumption due to the inherent imprecision involved in the sensor data acquisition .
Time
Δti+1
Δti
Y ti+2 ti+1 tk ti
Trajectory
^ ( pk , tk )
( pi+1 , ti+1 )
( pi , ti ) pk^ pi pi+1
Route
X
Figure 2 . example of a trajectory and its route
As shown in Figure 2 , during a time interval [ ti , ti+1 ] , the unmeasured movement of a moving object is estimated by a linear interpolation using the observed positions pi and pi+1 , assuming that the object moves straight from the location pi to pi+1 at a constant speed . Therefore , at any instance of time tk within this time interval ( i ≤ k ≤ i + 1 ) , the estimated position .pk placed along the line can be calculated as follows :
.pk = tk − ti ti+1 − ti pi + ti+1 − tk ti+1 − ti pi+1 .
( 1 )
Definition 1 . A segment sij of a trajectory S of size n ( 1 ≤ i < j ≤ n ) is a continuous sub sequence of S , starting from ( pi , ti ) and ending at ( pj , tj ) . A segment sij is spatially and temporally homogeneous during the time interval [ ti , tj ] with respect to a pre specified distance threshold ε if all sampled locations pk observed at time tk ( i ≤ k ≤ j ) within this segment deviate from their estimated time referenced positions .pk by no more than ε . Note that .pk is obtained as in Equation 1 by a linear interpolation using the starting and the ending positions pi and pj , respectively , while assuming a linear movement with a constant speed during this time interval [ ti , tj ] . The distance between pk and .pk , denoted as T dist(pk , .pk ) , is computed using the Euclidean distance , and called time referenced distance in order to emphasize that the temporal structure is incorporated to measure the spatial dissimilarity . This time reference distance can be formulated as follows ; T dist(pk , .pk|sij ) = dist(pk , , where i ≤ k ≤ j and dist(· ) is the Euclidean distance . pi + tj − tk tj − ti tk − ti tj − ti pj ) ( 2 )
Figure 3(a ) illustrates a segment si,i+2 , starting from ( pi,ti ) and ending at ( pi+2,ti+2 ) . This segment is spatially
1122 1122 and temporally homogeneous since the Euclidean distance between the actually measured location pi+1 and the estimated location .pi+1 at the time instance ti+1 is less than a given distance threshold ε . Figure 3(b ) illustrates the projected view of the segment onto the spatial plane and shows how the time referenced distance T dist(pi+1 , .pi+1 ) is dif−−−−→ ferent from the perpendicular distance d⊥(pi+1 , pipi+2 ) widely employed in the previous segmentations [ 3 , 8 ] .
Time T dist(pi+1 , pi+1 )
^
ε
( pi+2 , ti+2 )
Y T dist(pi+1 , pi+1 )
^
( pi+1 , ti+1 ) Y
ε
^ ( pi+1 , ti+1 )
ε
( pi , ti ) ( a )
X
ε pi+1^ pi+2 pi+1 pi d ( pi+1 , pipi+2 )
X
( b )
Figure 3 . Spatially and temporally homogeneous segment
22 Outlier Detection
An outlier is a single extreme value that is substantially In different from the rest of data at some measures [ 1 ] . moving object trajectories , an outlier can be identified as an extreme rate of change of location value to a unit time interval and thus visually depicted as a peak in the spatiotemporal space as shown in Figure 4(a ) . Note that the peak in the spatio temporal space is different from the one in the spatial subspace . For example , Figure 4(a ) shows a significant change of location both at p4 and p7 , both of which are illustrated as peaks , thus outliers , in the spatial plane . However , considering that the time intervals taken to sample the locations p4 and p7 , p4 is not really a surprising rate of location change per unit time , while p7 could be indeed a substantial change in a short time interval . Unfortunately , the slow peak or the f ast peak is not distinguishable in the geo spatial representation unless a constant sampling rate is assumed . Detecting outliers simply based on the static geometric structure presented in route can be thus misleading due to the missing temporal information .
In order to identify the time referenced spatial outliers , spatio temporal features of movement must be incorporated . This suggests us to adopt the maximum movement speed as an indicator whether a peak is an error or just a surprising but a correct value representing the real movement . The key idea is that the maximum speed of a moving object can limit the upper bound of where the moving object could traverse in a given time interval . If the sampled location is beyond this range , it is considered as an error .
Consider the segment si−1,i+1 of a trajectory in Figure 4(b ) . Suppose the moving object ’s maximum speed υm is known in advance . If the object linearly moves at maximum speed from pi−1 , its position at time ti will be on the surface of a half ( smaller ) sphere of a radius r1 = υm×(ti − ti−1 ) as shown in Figure 4(b ) . The points on the surface of the half sphere are the furthest positions taken at the time instance ti . If the movement speed is less than υm , or it does not move , then the time referenced location at time ti is somewhere within the area bounded by the smaller half sphere . Similarly , in order to move to the location pi+1 by the time ti+1 during the time interval [ ti , ti+1 ] , the location at the preceding time instance ti should be at most on the surface of the ( larger ) half sphere of radius r2 = υm×(ti+1 − ti ) or somewhere inside it . Therefore , the time referenced location ( pi,ti ) beyond the range represents the unrealistic movement , thus indeed an inaccurate and noisy sensor measurement .
Outlier
( p7 , t7 )
Time
( p8 , t8 )
( p6 , t6 )
( p5 , t5 )
( p4 , t4 )
Y p4
Time
( pi+1 , ti+1 )
( pi , ti )
Y
Si 1,i+1 r1 r2 p7
X
( a )
( pi 1 , ti 1 )
( b )
X
Figure 4 . Outlier detection
Definition 2 . A location pi at time ti is a time referenced spatial outlier wrt a pre specified maximum speed υm if dist(pi − pi−1 ) > υm×(ti − ti−1 ) ∧ dist(pi+1 − pi ) > υm×(ti − ti−1 ) , where dist(· ) is the Euclidean distance . 3 . Trajectory Segmentation
In this section , we formalize the problem and present three trajectory segmentation algorithms as our solution . 31 Problem Definition
The trajectory segmentation problem considered in this paper can be formalized as follows ; given a trajectory ( p2,t2) , . . .,(pn,tn)' , deterS of size n , S =fi(p1,t1 ) , mine a minimum subset of the discrete instances of time , CT ={tc1 , tc2 , . . . , tck } ( 1 ≤ c1 < c2 < . . . < ck ≤ n ) , termed characteristic timestamps ( CTs ) , such that each segment scici+1 ( 1 ≤ i ≤ k − 1 ) that starts from ( pci,tci ) and ends at ( pci+1,tci+1 ) is spatially and temporally homogeneous during the corresponding time interval wrt a prespecified distance threshold ε ( by Definition 1 ) and none of the locations sampled at the characteristic timestamps is a time referenced spatial outlier wrt a pre specified maximum speed υm ( by Definition 2 ) .
The optimal solution that finds the minimum subset of the timestamps satisfying the constraints on the maximum deviation and the outliers exclusion can be obtained by using dynamic programming as in [ 9 ] or methods developed for the shortest path problem in digraph [ 7 ] . However , these are expensive solutions due to their time complexity usually ranging between O(n2 ) and O(n3 ) . Instead , we adopt a greedy approach based on the split or merge heuristics , which greedily selects the local optimum at each iteration as hoping to lead to a global optimum .
1123 1123
32 Top down Algorithm
Our top down segmentation algorithm takes an unsegmented trajectory as an input and selects one characteristic timestamp ti with the largest time referenced distance between the actually observed location pi sampled at this time ti and its estimated time referenced location pi If the observed location pi is an outliers wrt its preceding and succeeding locations and a given maximum speed , it should not be considered as the characteristic timestamp . Subsequently , it splits the sequence at ti into two subsequences , which is recursively repeated until no more observation deviates from its estimated time referenced position by more than the given distance threshold . Algorithm 1 RTR TopDown ( S , ε , υm ) 1 : CT ← ∅ ; n ← |S| ; // n > 2 2 : for i=2 to n 2 do 3 : 4 : if max(splitM easure ) ≤ ε then // No more split 5 : 6 : splitidx ← get the index of max(splitM easure ) ; 7 : 8 : CT 1 ← RTR TopDown(S1,splitidx , ε , υm ) ; 9 : CT 2 ← RTR TopDown(Ssplitidx,n , ε , υm ) ; 10 : return CT ← CT 1 splitM easure(i ) ← RobustTDist(Si−1,i+1 , 1 , υm ) ; return CT ← {t1 , tn} ;
CT 2 ; // Union the selected timestamps
// Recursively split the subsequences fi
Algorithm 1 shows the pseudocodes of our top down algorithm . We first compute the split measure of each observation in a given trajectory using the procedure RobustTDist( ) in lines 2 3 based on which we choose one splitting characteristic timestamp . The robust timereferenced distance function RobustTDist(Si−1,i+1 , 1 , υm ) in line 3 returns the spatial distance of the observation pi in the segment Si−1,i+1 to its estimated position if this observation is not an outlier wrt the given maximum speed υm and a zero value otherwise , as shown in Algorithm 2 . If the maximum value of the split measures is below the given distance threshold ε , there will be no more splits and the segmentation is stopped by returning the CTs found so far ( lines 4 5 ) . Otherwise , the input sequence is partitioned at the observation with the largest split measure value into two subsequences , each of which is recursively partitioned by the same RTR TopDown procedure as in lines 8 and 9 . Algorithm 2 RobustTDist ( Sstartidx,endidx , ith , υm ) 1 : tdist ← 0 ; cidx ← startidx + ith ; // cidx ≤ endidx 2 : if dist(pcidx , pcidx−1 ) > υm×(tcidx − tcidx−1 ) ∧ dist(pcidx+1 , pcidx ) > υm×(tcidx+1 − tcidx ) then return tdist ; .pcidx ← ( tcidx − tstartidx)/(tendidx − tstartidx)×pstartidx + ( tendidx − tcidx)/(tendidx − tstartidx)×pendidx ; return tdist ← dist(pcidx , .pcidx ) ;
// pcidx is an outlier
3 : 4 : else 5 :
6 :
The RobustTDist(Sstartidx,endidx , ith , υm ) procedure in Algorithm 2 computes the time referenced distance between the actually measured location observed at the ith timestamp in the input segment and its corresponding estimated location , ie , T dist(pith,.pith|Sstartidx,endidx ) as in
1124 1124
Equation 2 , assuming a linear movement at a constant speed within the input segment if the observation pith at time tith is not an outlier ( lines 5 6 ) . If the observation is an outlier wrt a given maximum speed υm , a zero value is returned so that its timestamp should not be selected as the characteristic timestamp in the top down algorithm .
The time complexity of the top down algorithm is O(kn2 ) after k number of splits , where n is the size of trajectory , and can be reduced to O(kn log n ) if an efficient data structure such as a priority queue is used to maintain the split measure values in order .
33 Bottom up Algorithm
A typical bottom up algorithm begins with the finest possible segments of a given trajectory and greedily merge two adjacent segments with the minimum merge cost .
Algorithm 3 RTR BottomUp ( S , ε , υm ) 1 : n ← |S| ; CT ← {ti|1 ≤ i ≤ n} ; 2 : for i=2 to n 1 do 3 : mgM easure(i ) ← RobustTDist(Si−1,i+1 , 1 , υm ) ; 4 : if min(mgM easure ) > ε then // No more merge 5 : 6 : mgidx ← get the index of min(mgM easure ) ; 7 : CT ← CT − {tmgidx} ; fi ← concatenate(S1,mgidx−1 , Smgidx+1,n ) ; 8 : S 9 : return RTR BottomUp(S
// Remove the selected CT return CT ; fi
, ε , υm ) ;
As shown in Algorithm 3 , we first initialize the set of characteristic timestamps ( CTs ) with the finest possible timestamps of a given trajectory of size n in line 1 . Subsequently , we compute the merge measure of the observation at each CT by using the same distance function RobustTDist( ) in lines 2 3 . If the minimum value of the merge measures exceeds the given distance threshold ε , the segmentation stops by returning the CTs found so far in lines 4 5 . Otherwise , we remove the timestamp of the observation with the minimum value from the CT set ( lines ) without the removed ob6 7 ) . The trajectory segment ( S servation is recursively merged until no more observation is an outlier wrt the given maximum speed υm or deviates from its estimated location by more than the given distance threshold ε ( line 8 9 ) . Note that the robust time referenced distance function returns a zero if an observation is an outlier so that outliers would be first removed from the CT set in the merging procedure . fi
The time complexity of the bottom up algorithm is O(kn ) after k number of merges and can be reduced to O(k log n ) if a priority queue is used to maintain the merge measure values in order .
34 Sliding Window Algorithm
As in other sliding window algorithms [ 8 ] , our sliding window algorithm fixes the first timestamp of a given trajectory as the first characteristic timestamp and attempts to place the next CT as far as possible as long as the considering segment remains spatially and temporally homogeneous . When the spatial and temporal homogeneity of the current segment becomes unsatisfied by adding another observation , we separate the segment ( without the current observation breaking the homogeneity ) from the trajectory and repeat the process with the current observation until the end of the trajectory . Algorithm 4 RTR SlidingWindow ( S , ε , υm ) 1 : n ← |S| ; CT ← {t1} ; startidx ← 1 ; 2 : while startidx + length ≤ n do curridx ← startidx + length ; 3 : for i=1 to length 1 do 4 : swM easure(i ) ← RobustTDist(Sstartidx,curridx,i,υm ) ; 5 : if max(swM easure ) > ε then 6 : CT ← CT ∪ {tcurridx−1} ; 7 : startidx ← curridx − 1 ; 8 : 9 : length ← length + 1 ; 10 : 11 : return CT ← CT ∪ {tn} ; ; length ← 2 ; length ← 2 ; else
As shown in Algorithm 4 , we first anchor the first timestamp as the first CT in line 1 , which is the starting observation of the segment under consideration . Each of the subsequent timestamps is considered in order as the potential candidate for the next CT . To this end , we compute the slidingwindow measure of each observation within the current segment Sstartidx,curridx using our distance function RobustTDist( ) in lines 4 5 . If any of the measures is larger than the given distance threshold ε , ie , the segment under consideration is not spatially and temporally homogeneous , we add the immediately preceding timestamp into the CT set to separate the segment from the rest and reset the variables as necessary in line 8 . Otherwise , we increase the length of the segment under consideration ( line 10 ) and proceed with the next observation . The same procedure ( lines 2 10 ) is repeated until the sequence ends .
The time complexity of the sliding window algorithm is O(kn ) , where k is the number of inner iterations required to update the slidngwindow measure of each observation in the increased segment and n is the trajectory size .
4 . Performance Evaluation
In this section , we evaluate the effectiveness of our robust time referenced trajectory segmentation algorithms on three real world trajectory datasets , tracing the movement of buses [ 3 ] , trucks [ 6 ] , and hands [ 10 ] , respectively . The summary information of the used datasets is shown in Table 1 and the detailed description can be found in [ 10 ] .
The performance of our segmentation algorithms are compared to those of conventional segmentation techniques on the routes of moving objects ; the well known DouglasPeucker ( DP ) algorithm [ 3 , 5 ] ( DP R ) and the one pass approximation algorithm based on the Minimum Description Length ( MDL ) principal [ 8 ] ( MDL R ) . We also apply these
1125 1125 two methods on the trajectories ( DP T and MDL T ) , considering time as another spatial dimension .
Table 1 . Summary of used datasets
Truck
Hand
Bus 2 108
Dimensions of location
# Total observations
# Trajectories Dataset size Range of trajectory size
3 660 65∼693 118,664 41 Selection of Maximum Speed Value
2 273 29∼992 112,203
79∼1095 66,096
Our segmentation algorithm requires the maximum speed υm as an input parameter to determine whether a spatio temporal observation is indeed an outlier . We employ a heuristic based on the sorted movement speed values to determine a sensible value of υm . We compute the movement speed between each pair of two consecutive samples from the entire trajectories in the dataset and then sort the speed values . By a visual inspection , we choose an extreme and substantially larger value than its immediate preceding one . In the bus and the truck datasets , we could observe such value around 80km/h , corresponding to the 99th percentile of the entire speed values . This implies that there exist few outliers in the vehicle datasets . Similarly , we obtained 150cm/s for the hand dataset , approximately corresponding to the 92th percentile , which indicates that about 8 % of the observations could be outliers . The same speed values are used for υm throughout the experiments . 42 Experimental Results
In order to measure the spatio temporal homogeneity presented in the obtained segments , we employ the spatio temporal homogeneity measure ( ST HM ) utilizing the statistics of the normalized movement speed per segment [ 10 ] . This measure attains a value closer to 1 when the movement speed varies less per segment , ie , the segments are more spatio temporally homogeneous .
Figure 5 shows the comparative results of this spatiotemporal homogeneity measure . The X axis represent the reduction ratio , ie , the ratio of the total number of noncharacteristic observations discarded upon the segmentation to the total number of observations in the dataset , and the Y axis is the spatio temporal homogeneity measure . The parameter values set for ε are specified in Figure 5(d ) . Each marker ( eg , denoted as × , ∗ , etc ) along the performance curve represents the performance obtained by using the corresponding ε in the same order from the left to the right . Recall that the maximum speed parameter υm is already determined as in Section 41
In Figure 5(a ) , the spatio temporal homogeneity retained by RTR BU and RTR TD is more or less the same on the bus dataset , which is slightly yet consistently better than RTR SW . The same results are consistently observed in the other two datasets [ 10 ] , thus omitted due to the space limitation . However , the relative difference appear to be marginal when the reduction ratio is less than about 04
Figures 5(b ) and 5(c ) present the comparison of our RTR BU to the conventional approaches in terms of the spatio temporal homogeneity over the truck and the hand datasets , respectively . RTR BU is selected because it consistently shows the best results among our approaches . As illustrated , the four conventional methods never beat RTRBU for all reduction ratios and in all three datasets . This observation shows that RTR BU identifies the characteristic observations where the spatio temporal structure significantly changes and the partitioned segments are more spatio temporally homogeneous . Another interesting observation is that the n¨aive extensions of two conventional techniques simply to the trajectories , DP T and MDL T , only attain as similar spatio temporal homogeneity as those of DP R and MDL R ( on the routes ) , respectively . This observation ascertains that semantically , the temporal dimension is indeed different from the spatial dimension , and hence should be incorporated in its own context like we do in our time referenced distance function . Recall that about 8 % of the total observations in hand dataset are considered outliers for υm=150cm/s , approximately corresponding to the 92th percentile , whereas the vehicle datasets have few outliers . The experiment results in Figure 5(c ) show that our RTR algorithms partition trajectories into more temporally homogeneous segments in the presence of outliers .
M H T S
1
0.95
0.9
0.85
0.8
0.75
0.7
0.65
0
M H T S
1
0.95
0.9
0.85
0.8
0.75
0.7
0.65
0
1
0.9
0.8
0.7
0.6
0.5
0
M H T S
0.6
0.8
0.8
RTR−BottomUp DP−R DP−T MDL−R MDL−T
0.4
0.2
0.6 Reduction Ratio ( b ) Truck dataset
RTR−TopDown RTR−BottomUp RTR−SlidingWindow
0.2
0.4
Reduction Ratio ( a ) Bus dataset
Dataset Methods RTR Family
Bus Truck
Parameter Values
Eps : 0 10 20 40 60 80 100 150 200 Eps : 0 5 10 20 40 60 80 100 150 200 MDLc : 0 0.5 1 3 5 6.5 8 10 Eps : .01 .05 .1 .2 .3 .4 .5 .6 .7 .8 .9 1 Eps : .01 .05 .1 .2 .3 .4 .5 .6 .7 .8 .9 MDLc : 0 .01 .05 .1 .5 1 2 3 4 5
DP R/T MDL R/T RTR Family
DP R/T MDL R/T
RTR−BottomUp DP−R DP−T MDL−R MDL−T
0.4
0.2
0.6 Reduction Ratio ( c ) Hand dataset
Hand
0.8
( d ) Parameter values
Figure 5 . Spatio temporal homogeneity
In addition , as an attempt to approximate the true spatial discrepancy between a trajectory and a set of its segments , we aggregate the time referenced distances and the perpendicular distances on every observation . A larger value indicates larger spatial deviation between a trajectory and its segments . Figure 6(a ) presents the spatial errors measured by the time referenced distance ( TDerr ) on the bus dataset . As expected , the TDerr produced by our RTR fam
1126 1126 ily is smaller than those of other approaches . Figure 6(b ) shows the spatial error measured by the perpendicular distance ( PDerr ) on the bus dataset . The DP family that explicitly minimizes the perpendicular distances show the lower PDErr than other methods . Our RTR algorithms yield similar or slightly larger PDErr when the reduction ratio is no larger than 04 The same results are consistently observed in the other two datasets [ 10 ] . In sum , the results of two spatial discrepancy measures indicate that our RTR segmentation algorithms maintain a comparable spatial homogeneity to the conventional techniques focusing only on the spatial relationships . x 106
8
6
4
2 r r
E D T x 106
2.5
2
1.5
1
0.5 r r
E D P
RTR−TopDown RTR−BottomUp RTR−SlidingWindow DP−R DP−T MDL−R MDL−T
0
0
0.2
0.4
0.6
0.8
Reduction Ratio
0
0
0.2
0.4
0.6
0.8
Reduction Ratio
( a ) Time referenced distance error on bus dataset
( b ) Perpendicular distance error on bus dataset
Figure 6 . Spatial error comparison
5 . Conclusion
In this paper , we proposed three robust time referenced trajectory segmentation algorithms that take into account both spatial and temporal structures presented in trajectory . The proposed segmentation methods employ our timereferenced distance function to partition a given trajectory into a small number of spatially and temporally homogeneous segments . In addition , we utilize the maximum movement speed to detect time referenced spatial outliers . Our experiments on three real world datsets indicate that our techniques outperform the conventional segmentation techniques in terms of spatio temporal homogeneity and maintain comparable spatial homogeneity .
References
[ 1 ] C . C . Aggarwal and P . S . Yu . Outlier detection for high dimensional data . In
SIGMOD ’01 , pages 37–46 , 2001 .
[ 2 ] E . Bingham , A . Gionis , N . Haiminen , H . Hiisil¨a , H . Mannila , and E . Terzi . In SIAM Data Mining Conf . ,
Segmentation and dimensionality reduction . pages 371–383 , 2006 .
[ 3 ] H . Cao , N . Mamoulis , and D . W . Cheung . Mining frequent spatio temporal sequential patterns . In ICDM ’05 , pages 82–89 , 2005 .
[ 4 ] L . Chen , M . T . ¨Ozsu , and V . Oria . Robust and fast similarity search for moving object trajectories . In SIGMOD , pages 491–502 , 2005 .
[ 5 ] D . H . Douglas and T . K . Peucker . Algorithm for the reduction of the number of points required to represent a line or its caricature . Cartographica : The Int . J . for Geographic Inf . and Geovisualization , 10(2):112–122 , 1973 .
[ 6 ] F . Giannotti , M . Nanni , F . Pinelli , and D . Pedreschi . Trajectory pattern min ing . In KDD ’07 , pages 330–339 , 2007 .
[ 7 ] H . Imai and M . Iri . Computational geometric methods for polygonal approx imations of a curve . Comput . Vision Graph . Image Process . , 36(1 ) , 1986 .
[ 8 ] J G Lee , J . Han , and K Y Whang . Trajectory clustering : a partition and group framework . In SIGMOD , pages 593–604 , 2007 .
[ 9 ] G . Papakonstantinou , P . Tsanakas , and G . Manis . Parallel approaches to piecewise linear approximation . Signal Proc . , 37(3):415–423 , 1994 .
[ 10 ] H . Yoon and C . Shahabi . Robust time referenced segmentation of moving object trajectories . Technical report , Univ . of Southern California , 2008 .
