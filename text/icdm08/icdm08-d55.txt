Efficient String Mining under Constraints via the Deferred Frequency Index
David Weese1 and Marcel H . Schulz2
1 Department of Computer Science , Free University of Berlin , Takustr . 9 , 14195
2 Department of Computational Molecular Biology , Max Planck Institute for
Berlin , Germany , weese@inffu berlinde
Molecular Genetics , Ihnestr . 73 , 14195 Berlin , Germany ,
International Max Planck Research School for Computational Biology and Scientific
Computing , marcelschulz@molgenmpgde
ABSTRACT We propose a general approach for frequency based string mining , which has many applications , eg in contrast data mining . Our contribution is a novel algorithm based on a deferred data structure . Despite its simplicity , our approach is up to 4 times faster and uses about half the memory compared to the best known algorithm of Fischer et al . Applications in various string domains , eg natural language , DNA or protein sequences , demonstrate the improvement of our algorithm .
1
Introduction
The storage of data in databases alone does not guarantee that all hidden information is readily available . A promising approach for knowledge discovery in databases is to mine frequent patterns , reviewed in [ 1 ] . This general paradigm can be applied in many application domains ranging from mining of customer data to optimize marketing strategies [ 2 ] , and language identification [ 3 ] , to finding protein fingerprints or binding motifs in biological sequences [ 4,5 ] . The latter is important in Computational Biology , where a gene is regulated by proteins , so called transcription factors , that bind to its promoter sequence . A common approach taken , is to contrast promoter sequences of genes that are believed to be regulated by the same factor , with promoters of unrelated genes to detect the transcription factor ’s binding motif . The rationale behind it , is to find sequence motifs that are representative ( frequent ) for one set of sequences and absent ( infrequent ) in another , often called discriminatory or contrast data mining [ 6,7 ] . Here the Frequency of a motif is defined as the number of distinct sequences in a set that contain the motif at least once . In this paper we propose an approach that can efficiently solve any frequency based string mining problem including the problem introduced above .
1.1 Related Work
There have been several approaches in the context of mining substrings with frequency constraints . Raedt and co workers introduced the first O(n2 ) algorithm ,
2 for databases of size n , in 2002 based on the level wise Apriori algorithm [ 8 ] . This algorithm is not suitable for large databases due to repeated scanning of the whole database . Chan and others [ 9 ] , as well as Lee et al . [ 10 ] , suggested indexing the database with a suffix tree . Still , suffix trees can be nicely replaced by linear arrays [ 11 ] , which was utilized by Fischer and colleagues [ 7 ] to devise a more efficient algorithm than that of Raedt et al . and Lee et.al [ 8,10 ] . One year later , an improvement to their previous algorithm , and the first optimal O(n ) time algorithm was presented by Fischer and the same co authors [ 12 ] . It was established as the fastest known algorithm for the problem , due to optimal time frequency calculation for substring indices via range minimum queries [ 13 ] .
1.2 Motivation
Fischer and colleagues achieved the optimality [ 12 ] at the expense of complicating the algorithm and adding another Θ(n ) space . In addition , both algorithms of Fischer et al . need to sort the whole suffix array and build additional arrays independent of the constraints of the problem . Hence , an interesting approach is to improve upon the frequency calculation of the algorithms [ 7,8,9,10 ] , while retaining the problem specific search space pruning . Indeed , we introduce an approach which combines both . We take advantage of partially constructed suffix trees , to design a problem oriented algorithm like the one of Raedt et al . and Chan et al . [ 8,9 ] . Additionally , we utilize a clever solution for the frequency calculation , which comes as a by product of the sorting procedure without any additional space overhead . On top of that , our approach is surprisingly simple and we show that it is always faster than the optimal algorithm of Fischer and colleagues over a broad range of pattern domains and for different types of frequency string mining problems .
2 Preliminaries
We consider strings over the finite ordered alphabet Σ and use the term pattern synonymously . Σ∗ is the set of all possible strings over Σ . A string φ is a sequence of letters φ[1 ] . . . φ[n ] , where each φ[i ] ∈ Σ . φψ is the concatenation of two strings φ and ψ . |φ| denotes the length of the string φ and φ[ij ] is a substring of φ from position i to j . If ψ ∈ Σ∗ is a substring of φ , we write ψ φ , and ψ ≺ φ if ψ = φ holds in addition . For a non empty set of strings Φ ⊆ Σ∗ , lcp(Φ ) gives the longest common prefix of all strings in Φ . If Φ contains exactly 1 string φ , lcp(Φ ) returns φ . A database D ⊆ Σ∗ has |D| many strings over Σ . The frequency and the support of a string φ ∈ Σ∗ in D is defined as follows : freq(φ,D ) := |{d ∈ D | φ d}| , supp(φ,D ) :=
. For a set of databases D1 , . . . ,Dm we define the frequency vector of φ :
|D| freq(φ,D )
( 1 )
( 2 ) freq(φ,D1 , . . . ,Dm ) := freq(φ,D1 ) , . . . , freq(φ,Dm )
.
For two vectors u , v ∈ Nm we define u ≤ v ⇔ ∀i=1,,mui ≤ vi . Example 1 . Suppose we are given two databases D1 = {abab , babb} and D2 = {baab , aaab} , then freq(b,D1,D2 ) = ( 2 , 2 ) and freq(ba,D1,D2 ) = ( 2 , 1 ) .
3
2.1 Predicates A frequency predicate on a set of databases D1 , . . . ,Dm is defined as a function that for any frequency vector v ∈ Nm evaluates to either true or false and must be false for the null vector . In general , our approach is applicable to the task of finding patterns φ ∈ Σ∗ whose frequencies satisfy a predicate pred on a given database set D1 , . . . ,Dm :
Th(pred ) = {φ ∈ Σ∗ | pred(freq(φ,D1 , . . . ,Dm ) ) is true} .
( 3 )
In the following , we will consider two specific examples of frequency string mining problems : Problem 1 . Given m databases D1 , . . .,Dm of strings over Σ and m pairs of frequency thresholds ( min1 , max1 ) , . . . , ( minm , maxm ) , the Frequent Pattern Mining Problem is to return all strings φ ∈ Σ∗ that satisfy mini ≤ freq(φ,Di ) ≤ maxi , for all 1 ≤ i ≤ m . This problem has been considered in a series of research papers [ 7,8,10 ] . The next problem considers discriminatory strings for two databases D1,D2 ∈ Σ∗ . D1 is usually called positive ( foreground ) set , where D2 is the negative ( background ) set . As a measure of difference the growth rate from D2 to D1 for a string φ is defined as
 supp(φ,D1 ) supp(φ,D2 ) , if supp(φ,D2 ) = 0 ∞
, otherwise growthD2→D1(φ ) :=
.
( 4 )
Problem 2 . Given a support condition ρs ( 1|D1| ≤ ρs ≤ 1 ) , and a minimum growth rate ρg > 1 , the Emerging Substring Mining Problem is to detect all strings φ ∈ Σ∗ st supp(φ,D1 ) ≥ ρs and growthD2→D1(φ ) ≥ ρg [ 9 ] . The minimum support rate ρs limits the solution space to representative strings of database D1 , where ρg is the discrimination threshold . Patterns which satisfy the conditions of Problem 2 are called Emerging Substrings . If the growth rate of the pattern is infinite it is called Jumping Emerging Substring , because it is a major discriminator between the databases under investigation . Example 2 . We now apply this problem to databases D1 and D2 from Example 1 with ρs = 1 and ρg = 2 and want to find all strings φ ∈ Σ∗ with supp(φ,D1 ) ≥ 1 and growthD2→D1(φ ) ≥ 2 . The corresponding frequency predicate pred for the
4
Emerging Substring Mining Problem is a function that maps the frequency vector ( d1 , d2 ) = freq(φ,D1,D2 ) of a string φ ∈ Σ∗ to a truth value as follows : pred(d1 , d2 ) := ( d1 ≥ ρs · |D1| ) ∧ ( d1 · |D2| ≥ ρg · d2 · |D1| )
= ( d1 ≥ 2 ) ∧ ( d1 ≥ 2d2 ) .
( 5 ) The set of patterns whose frequencies satisfy pred is Th(pred ) = {bab , ba} . b for example is not an Emerging Substring , because supp(b,D1 ) = 1 but growthD2→D1(b ) = 1 < ρg .
2.2 Monotonicity We will now introduce the monotonic property of frequency predicates that we use later to restrict the search space of our algorithm . Examples 3 and 4 show that the frequency predicates of Problem 1 and 2 contain a monotonic subpredicate . Definition 1 . If for a frequency predicate pred : Nm → {true,false} holds that :
∀u,v∈Nm,u≤v pred(u ) ⇒ pred(v )
,
( 6 ) then pred is called monotonic . Proposition 1 . For a monotonic3 frequency predicate pred on databases D1 , . . . ,Dm ⊆ Σ∗ it holds that : ∀φ,ψ∈Σ∗,φψ : . ( 7 ) Proof . Each occurrence of ψ is also an occurrence of φ . Thus , freq(ψ,D1 , . . . ,Dm ) ≤ freq(φ,D1 , . . . ,Dm ) holds .
Example 3 . As seen in Example 2 the frequency predicate for the Emerging Substring Mining Problem is : pred(freq(ψ,D1 , . . . ,Dm ) ) ⇒ pred(freq(φ,D1 , . . . ,Dm ) ) pred(d1 , d2 ) = ( d1 ≥ ρs · |D1| ) ∧ ( d1 · |D2| ≥ ρg · d2 · |D1| ) .
( 8 ) Generally , pred is not monotonic as shown in Example 2 . Recall that ba is emerging although b is not . However , if we consider only the left inequality : predm(d1 , d2 ) := ( d1 ≥ ρs · |D1| ) ,
( 9 ) predm is monotonic , as for all u , v ∈ N2 , u ≤ v holds u1 ≥ ρs·|D1| ⇒ v1 ≥ ρs·|D1| . Obviously it holds that pred ⇒ predm . Example 4 . For the Frequent Pattern Mining Problem with pred(d1 , d2 ) = ( min1 ≤ d1 ≤ max1 ) ∧ ( min2 ≤ d2 ≤ max2 )
( 10 ) analogously predm(d1 , d2 ) := ( min1 ≤ d1 ) ∧ ( min2 ≤ d2 )
( 11 ) is monotonic and pred ⇒ predm holds . 3 Note that what we call monotonic is called anti monotonic in [ 8,7 ] , as they consider pattern predicates instead of frequency predicates .
5
2.3 Suffix Trees and Suffix Arrays In this section we will define the generalized suffix tree of a database D = {φ1 , . . . , φd} . To distinguish the suffixes of strings in D , we will use string markers $j at the end of each string φj . String markers are artificial symbols $j that must not occur in any string of D and we implicitly assume $j ∈ Σ . We define the artificial order $1 < $2 < . . . < $d < c for any c ∈ Σ \ {$1 , . . . , $d} . A generalized suffix tree for a database D over Σ is a rooted directed tree with edge labels from Σ∗ , st every concatenation of symbols from the root to a leaf node yields a suffix of φj$j for a string φj ∈ D . Each internal node has at least two children , and no two edges out of the same node are allowed to have edgelabels starting with the same character . By this definition , each node can be mapped one to one to the concatenation of symbols from the root to itself . The node of a concatenation string α will be denoted by ¯α . We will also need the concept of a generalized suffix array for a database D over Σ . Therefore , all strings φj ∈ D are concatenated by their string markers $j to form conceptually one string φ1$1φ2$2 . . . φd$d , the union string of D . The generalized suffix array stores the starting positions of all lexicographically ordered suffixes of the union string [ 14 ] . Generalized suffix trees , generalized suffix arrays , and the union string of a set of databases D1 , . . . ,Dm are defined analogously using string markers $1 , $2 , . . . , $ ˜d i=1 |Di| . Figure 1 shows the generalized suffix tree of the Example 1 database D1 . with ˜d =m
Fig 1 . The resulting generalized suffix tree for database D1 = {abab , babb} . As mentioned in the text , to the end of every string from D1 a unique string marker $1 and $2 for the first and second string is appended , respectively .
3 The Algorithm
This section introduces the Deferred Frequency Index ( DFI ) which is fundamentally based on a generalized lazy suffix tree [ 15 ] . The DFI algorithm constructs
6 only the upper part of a generalized suffix tree in a top down manner . To understand the DFI algorithm we will at first explain the idea of the write only , top down construction algorithm , abbreviated as wotd algorithm .
3.1 The wotd algorithm
A lazy suffix tree is a suffix tree whose nodes are created on demand , ie when they are visited the first time . For instances where only upper parts of the suffix tree are required , using a lazy suffix tree can be more efficient than constructing the whole suffix tree . Giegerich et al . introduced the first lazy suffix tree data structure [ 16 ] that utilizes the wotd algorithm [ 15,16 ] for the on demand node expansion . The wotd algorithm is a suffix tree construction algorithm that expands a rooted directed tree starting with a tree consisting of only the root node step by step to at most the entire suffix tree . We describe a variant of the wotd algorithm to create a generalized suffix tree . Suppose a given non empty database D = {φ1 , . . . , φd} over Σ and a rooted directed tree T . Each node in T is either in expanded or unexpanded state . In the beginning , T contains only the unexpanded root node . Let R be a function that returns for any string α ∈ Σ∗ the set of suffixes with string markers of strings in D so that :
R(α ) := {αβ$j | αβ is a suffix of φj} .
( 12 ) R(α ) comprises all suffixes of strings in D that begin with the string α . In relation to nodes ¯α of the generalized suffix tree of D , R(α ) contains the concatenated edge labels of paths between the root node and leaf nodes below ¯α . When an unexpanded node ¯α of the lazy suffix tree has to be expanded , R(α ) can be used to determine the subtree below ¯α . The node expansion of ¯α works as follows : R(α ) is divided into groups R(αc ) of the same character c that follows α . Let αcβ be the longest common prefix of R(αc ) . Out of ¯α an edge will be created , labeled with cβ leading to a node αcβ . If R(αc ) is a singleton group , the leaf node αcβ is marked as expanded . Otherwise , it is a branching node and marked as unexpanded . After all groups were processed , ¯α will be marked as expanded . Algorithm 1 shows how the whole generalized suffix tree can be constructed recursively starting with expandN ode(root ) on a tree T that contains only the unexpanded root node . It can easily be modified to create only an upper part of the suffix tree .
3.2 Monotonic Hull
We now show how to connect arbitrary frequency predicates with the wotdalgorithm . To do so , we give a theoretical description of the minimal set of nodes that need to expanded .
Definition 2 . Given frequency predicates pred and predhull . predhull is called a monotonic hull of pred , if it is monotonic and pred ⇒ predhull holds .
Algorithm 1 : expandNode(¯α ) : unexpanded node ¯α
Input Divide R(α ) into subsets R(αc ) of suffixes starting with character c after α foreach c ∈ Σ and R(αc ) = ∅ do
7
// leaf node
// branching node
1
2
3
4
5
6
7
8
9
αcβ ← lcp(R(αc ) ) if |R(αc)| = 1 then
Create the expanded node αcβ below ¯α else
Create the unexpanded node αcβ below ¯α expandNode(αcβ )
Mark ¯α as expanded
The most trivial monotonic hull of each frequency predicate pred is predhull ≡ true . If we take a look at the generalized suffix tree T of databases D1 , . . . ,Dm , we make the following observations :
Proposition 2 . Let pred be an arbitrary frequency predicate and predm an arbitrary monotonic frequency predicate on D1 , . . . ,Dm . For all pairs of fathers and sons ¯α and αβ in T it holds that : 1 . If pred(freq(αβ,D1 , . . . ,Dm ) ) is true then for each string χ with α ≺ χ αβ 2 . If predm(freq(αβ,D1 , . . . ,Dm ) ) is true then predm(freq(α,D1 , . . . , Dm ) ) is pred(freq(χ,D1 , . . . ,Dm ) ) is true . true .
Proof . The frequency vectors of αβ and χ with α ≺ χ αβ must be equal . If not , there would be a branching node between ¯α and αβ which contradicts the assumption ¯α would be the father of αβ . Hence 1 . holds . 2 . is a direct consequence of Proposition 1 as α is a substring of αβ .
In consequence of Proposition 2 , it satisfies to evaluate pred only on the nodes of T to compute the set Th(pred ) . For every monotonic hull predhull of pred the set of nodes , whose frequencies satisfies predhull , is a directed connected subgraph of T , which if non empty , contains the root node . Outside of this subgraph there is no node fulfilling pred . Our algorithm exclusively traverses this subgraph to compute the set Th(pred ) . Hence , we are interested in keeping the subgraph as small as possible , leading to the next definition :
Definition 3 . predhull is called the optimal monotonic hull of pred , if it is a monotonic hull of pred , and for each monotonic hull pred’hull of pred , it holds that predhull ⇒ pred’hull . In other words , if predhull is optimal , the corresponding subgraph is minimal .
8
Algorithm 2 : expandNodeWithConstraint(¯α , pred , predhull )
Input : unexpanded node ¯α Freq = divideAndCountFreq( ¯α ) foreach c ∈ Σ and R(αc ) = ∅ do
αcβ ← lcp(R(αc ) ) if pred(Freq[c ] ) then
Output strings χ with αc χ αcβ 4 if predhull(Freq[c ] ) then if |R(αc)| = 1 then
Create the expanded node αcβ below ¯α else
Create the unexpanded node αcβ below ¯α expandNodeWithConstraint(αcβ , pred , predhull )
// leaf node
// branching node
1
2
3
4
5
6
7
8
9
10
11
12
Mark ¯α as expanded
3.3 The Deferred Frequency Index
In the following we will show how the DFI can be built for any given frequency predicate pred and a monotonic hull predhull . Algorithm 2 starts with expandNodeWithConstraint(root , pred , predhull ) on a tree T with α as the unexpanded root node . First , divideAndCountFreq is called for the current node ¯α in line 1 . Identically to algorithm 1 , the set R(α ) is divided into groups R(αc ) of suffixes starting with the same character c ∈ Σ after their prefix α . In addition , an array Freq , that stores in Freq[c ] the frequency vector freq(αc,D1 , . . . ,Dm ) , is returned . In the next section we explain the implementation details of function divideAndCountFreq . The longest common prefix of every non empty group R(αc ) is determined and assigned to αcβ in line 3 . If the predicate pred evaluated with the frequency vector Freq[c ] is true , by Proposition 2 all strings χ with αc χ αcβ belong to T h(pred ) and are output4 . In line 6 predhull is evaluated on Freq[c ] . Only if true is returned , the subtree below the node αcβ may contain a node ¯γ with γ ∈ Th(pred ) and will be expanded recursively . If false is returned , the node αcβ is not created , as no further subtree expansion is necessary . Algorithm 2 is correct and outputs the set Th(pred ) because of the following : For each database substring φ there is a path from the root ending in a node or on an edge to a node . This node has the same frequency vector as φ and will be visited if it satisfies predhull and output iff it satisfies pred . As predhull is a monotonic hull , no node that satisfies pred is left out by the algorithm . For the Emerging Substring Mining Problem and the Frequent Pattern Mining Problem one only needs to replace pred and predhull in Algorithm 2 with the predicates deduced in Examples 3 and 4 , respectively . The monotonic hulls for these problems are also optimal as Proposition 3 and 4 prove ( see Appendix ) .
4 In fact , we omit to output strings χ with a trailing $j of a string .
9
Fig 2 . The generalized suffix tree of our example databases D1 and D2 . For clarity , the artificial string markers $j are omitted . Considering the problem of Example 2 , the DFI would construct only the white nodes . Grey nodes are not built . The bold nodes ba , bab represent the Emerging Substrings . Each node holds the frequency vector of its corresponding substring ( compare the frequencies of ¯b and ba with Example 1 ) .
Figure 2 shows the DFI for the Emerging Substring Mining Problem considered in Example 2 .
3.4 Algorithm Details
In this section we explain the function divideAndCountFreq in detail ( Algorithm 3 ) . The sets R(α ) are in fact not stored as sets of strings , but as intervals of a generalized suffix array SA . SA is initialized with numbers from 1 to |S| , where S is the union string of D1 , . . . ,Dm . We need a function getSeqNo that returns , for each character position i , the sequence number j if $j is the next string marker at or to the right of position i in S . We also need a function getDatabaseNo that returns , for each sequence number j , the corresponding database number k if $j is a string marker of a string in Dk . When divideAndCountFreq(¯α , pred , predhull ) is called , SA[lr ] contains the start positions of suffixes of S starting with α . Each start position corresponds to a suffix in R(α ) . Because ¯α is unexpanded , the suffixes in SA[lr ] have been sorted with counting sort [ 17 ] up to the first |α| characters by previous function calls . Because counting sort is stable , the positions in SA[lr ] are in increasing order . Therefore , the corresponding sequence numbers of the positions are stored in contiguous blocks . Counting sort divides R(α ) into buckets R(αc ) for each character c ∈ Σ ( lines 3–4 ) . The frequency of each bucket can simply be counted by counting blocks of equal sequence numbers ( line 5 ) .
10
We keep track of three arrays in the size of the alphabet , ie |Σ| , namely Bucket , Freq and Last . Bucket is the original array from counting sort , and Bucket[c ] counts the occurrences of αc . Freq stores frequency vectors , and Freq[c][k ] determines how often αc occurred in distinct sequences of Dk . Last is used to construct Freq ( lines 5–8 ) .
Algorithm 3 : divideAndCountFreq(¯α )
: unexpanded node ¯α
Input Output : freq(αc,D1 , . . . ,Dm ) for each c ∈ Σ Require : SA[lr ] stores all suffixes starting with α , suffixes with equal
Ensure : suffixes with equal sequence numbers are contiguous in output sequence numbers are contiguous in this interval intervals SA[Bucket[c]Bucket[c + 1 ] − 1 ]
1
2
3
4
5
6
7
8
9
10
Init Bucket , Freq , Last with 0s // start to sort the first char after prefix α for i ← l to r do c ← S[SA[i ] + |α| ] Bucket[c ] ← Bucket[c ] + 1 if Last[c ] = getSeqNo(SA[i ] ) then
Last[c ] ← getSeqNo(SA[i ] ) k ← getDatabaseNo(getSeqNo(SA[i] ) ) Freq[c][k ] ← Freq[c][k ] + 1
Sort suffixes in SA[lr ] stable using Bucket ( Counting sort [ 17 ] lines 6–11 ) // now Freq[c ] contains the frequency vector freq(αc,D1 , . . . ,Dm ) return Freq
4 Experiments
To evaluate the performance of our algorithm , we conducted a number of experiments with databases of different characteristics . We used a previously compiled set of human and drosophila core promoters [ 18 ] , the UniProt [ 19 ] proteome sets of human and mouse , release 12.6 , verses of the King James Bible and the Bible in Basic English , and posts of 5 computer newsgroups from the UCI Machine Learning Repository divided into Windows and non Windows groups . The alphabet size |Σ| or the sizes of these databases are shown in Table 1 . An experiment consists of two databases D1,D2 . These were searched for Emerging Substrings and for the solution of the Frequent Pattern Mining Problem with different values of ρs and varying min1 , respectively . As ρg and max2 had no measurable influence on the tested algorithms only the results for ρg = 5 and max2 = |D2| are shown . The results for other values look similar [ 7 ] . We made no other restrictions , ie max1 = ∞ , min2 = 0 . The theoretically optimal algorithm of Fischer et al . has turned out to be the
2
11 hitherto fastest algorithm in practice for the two introduced string mining problems [ 12 ] . Hence , we used the implementation of Fischer ’s algorithm as reference in our experiments . Both programs were written in C++ and compiled using the same compiler options . They run under Linux on an Intel Xeon 3.2 GHz with 2 GB of RAM . To reduce influences from the operating system and secondary storage units , the output was redirected to the null device , and each experiment was repeated 5 times . We measured the running time and space consumption of both algorithms using the GNU tools time and memusage .
Table 1 . Characteristics and short names for the different databases we used . name description
HProm human promoters DProm drosophila promoters
HProt human proteome MProt mouse proteome
KJB BBE
WN CN king james bible bible in basic english windows newsgroup computer newsgroup
|Σ| 5 5
24 24
128 128
128 128 size ( mb ) #seqs source
23 16.7
17.6 16
4.1 4.2
3.9 3.4
Fitzgerald et al . [ 18 ]
15011 10914
40827 Uniprot [ 19 ] 35344
31102 Chinese and English 31102 Bible Online5 2000 Machine Learning 3000
Repository [ 20 ]
Table 2 . Experimental setups and space consumption in MB for various minimum support values . experiment name
D1,D2
DNA Promoters Proteomes English Bibles Newsgroups
HProm , DProm HProt , MProt
KJB , BBE WN , CN
Fischer ρs ∈ [ 0 , 1 ] 919.57 779.01 193.83
167
DFI
DFI
ρs = .001
531.19 365.49 109.46 104.43
ρs = .01 475.82 330.95 96.96 82.25
DFI
ρs = .1 468.15 327.74 95.38 79.76
Figure 3 shows , that our approach is in all cases faster than the approach of Fischer et al . even for small values ρs or min1 when the whole suffix tree needs to be constructed . As an example , for ρs = 0.2 the DFI is with 16 seconds on the Proteome datasets roughly 4 times faster than the algorithm of Fischer et al . Considering reasonable6 values of ρs < 0.2 and min1 < 0.2 · |D1| our algorithm 5 http://wwwo biblecom/ 6 Dong and Li [ 21 ] report that a minimum support of 1%–20 % for finding Emerging
Patterns could contribute significantly to knowledge discovery .
12
Emerging Substrings
Frequent Patterns s r e t o m o r P A N D s e m o e t o r P s e l b i B h s i l g n E s p u o r g s w e N
Fig 3 . Runtime comparison of the algorithm of [ 12 ] ( dotted ) and our DFI implementation ( solid ) for the Emerging Substring Problem ( left ) and the Frequent Pattern Mining Problem ( right ) . Experiment details are listed in Table 2 .
000204060810020406080100support threshold runtime ( s)rrsFischer et al.DFI020406080100020406080100120minimum frequency threshold ( %)runtime ( s)Fischer et alDFI0002040608100102030405060support threshold runtime ( s)rrs0204060801000102030405060minimum frequency threshold ( %)runtime ( s)000204060810024681012support threshold runtime ( s)rrs02040608010002468101214minimum frequency threshold ( %)runtime ( s)0002040608100246810support threshold runtime ( s)rrs02040608010005101520minimum frequency threshold ( %)runtime ( s ) 13 is 1.5–4 times faster in practice . This is surprising , because our algorithm has a worst case running time of O(n2 ) [ 15 ] , in contrast to the O(n ) algorithm of Fischer and colleagues . Both algorithms have an O(n ) memory consumption , but ours needs only about half of the memory , see Table 2 . Fischer ’s algorithm has an almost constant running time and space consumption as it does not take advantage of the monotonic pruning of the suffix tree like our deferred approach does . The runtime peaks for small values of ρs or min1 are due to the high amount of strings in the solution space that were output .
5 Discussion and Future Work
We presented a new approach to constraint based string mining that outperforms the best known algorithm by Fischer et al . [ 12 ] in runtime and space consumption as the experiments show . The better running time can be attributed to various factors . Most importantly , the optimal monotonic hull of a frequency predicate , is incorporated to prune the search space to a minimum , resulting in the deferred frequency index . Moreover , the frequency information is extracted as a constant time by product during the suffix tree construction . Our algorithm inherits the good cache locality from the wotd algorithm [ 15 ] and in addition uses less memory than Fischer ’s algorithm . Depending on the problem at hand , the implementation of our algorithm could be improved . If the DFI should only be used to output the result of Th(pred ) , the memory consumption of the algorithm could be further reduced . As each node is visited at most once , at any time only nodes of the suffix tree on the path from the root to the current node need to be stored . A small alphabet ( eg DNA ) leads to a dense suffix tree with many branching nodes at the top , as observed by Kurtz [ 22 ] . In that case , a runtime improvement could be expected by replacing the top of the suffix tree with a q gram index . We believe that our constraint oriented algorithm will be useful for the data mining community . Considering constraints during the mining process will play an important role in further algorithmic development , because reducing the solution space of any mining approach to a compact but representative set is one of the open challenges , as mentioned by Han et al . [ 1 ] . In the spirit of this observation , the simplicity of our approach opens various avenues of further research . One is to combine Jumping Emerging Substrings to build powerful classifiers as was done for Jumping Emerging Patterns [ 23 ] . This could be achieved by restricting to minimal and highly significant Jumping Emerging Substrings . In a recent work [ 24 ] , a formulation of a similarity pattern predicate composed of an anti monotonic part was introduced . Our idea can easily be applied , to improve on their approach . Another direction is to extend the algorithm presented here to deal with gap constraints like was done in the work of Ji and colleagues [ 25 ] . Our algorithm is freely available at http://wwwseqande/projects/dfihtml and part of the C++ Sequence Analysis Library SeqAn [ 26 ] .
14
Acknowledgements
We thank Knut Reinert who brought the topic to our attention , Clemens Gr¨opl for helpful discussions , Markus Bauer , Ole Schulz Trieglaff , and Killian McCutcheon for proofreading .
References
1 . Han , J . , Cheng , H . , Xin , D . , Yan , X . : Frequent pattern mining : current status and future directions . Data Min . Knowl . Discov . 15(1 ) ( 2007 ) 55–86
2 . Berry , MJ , Linoff , GS In : Data Mining Techniques : For Marketing , Sales , and
Customer Support . 1 edn . John Wiley & Sons ( 1997 ) 51–62
3 . Muthusamy , YK , Barnard , E . , Cole , RA : Reviewing automatic language iden tification . IEEE Sig . Proc . Mag . 11(4 ) ( 1994 ) 33–41
4 . Zhang , MQ : Computational analyses of eukaryotic promoters . BMC Bioinfor matics 8(Supp 6 ) ( 2007 ) S3
5 . Birzele , F . , Kramer , S . : A new representation for protein secondary structure prediction based on frequent patterns . Bioinformatics 22(21 ) ( 2006 ) 2628–2634
6 . Redhead , E . , Bailey , TL : Discriminative motif discovery in dna and protein se quences using the DEME algorithm . BMC Bioinformatics 8 ( 2007 ) 385
7 . Fischer , J . , Heun , V . , Kramer , S . : Fast frequent string mining using suffix arrays .
In : IEEE ICDM ’05 , IEEE Computer Society ( 2005 ) 609–612
8 . Raedt , LD , Jaeger , M . , Lee , SD , Mannila , H . : A theory of inductive query answering . In : IEEE ICDM ’02 , IEEE Computer Society ( 2002 ) 123–130
9 . Chan , S . , Kao , B . , Yip , CL , Tang , M . : Mining emerging substrings . In : DASFAA
’03 , IEEE Computer Society ( 2003 ) 119–126
10 . Lee , SD , Raedt , LD : An efficient algorithm for mining string databases under constraints . In : KDID ’04 , Springer ( 2004 ) 108–129
11 . Abouelhoda , M . , Kurtz , S . , Ohlebusch , E . : Replacing suffix trees with enhanced suffix arrays . Journal of Discrete Algorithms 2 ( 2004 ) 53–86
12 . Fischer , J . , Heun , V . , Kramer , S . : Optimal string mining under frequency con straints . In : PKDD ’06 , Springer ( 2006 ) 139–150
13 . Fischer , J . , Heun , V . : Theoretical and practical improvements on the RMQproblem , with applications to LCA and LCE . In : CPM ’06 , Springer ( 2006 ) 36–48 14 . Manber , U . , Myers , E . : Suffix arrays : a new method for on line string searches . In :
SODA ’90 , SIAM ( 1990 ) 319–327
15 . Giegerich , R . , Kurtz , S . , Stoye , J . : Efficient implementation of lazy suffix trees .
Software Pract . Exper . 33(11 ) ( 2003 ) 1035–1049
16 . Giegerich , R . , Kurtz , S . : A comparison of imperative and purely functional suffix tree constructions . Sci . Comput . Program . 25 ( 1995 ) 187–218
17 . Cormen , TH , Leiserson , CE , Rivest , RL , Stein , C . : 8.2 : Counting sort .
In :
Introduction to Algorithms . 2 edn . MIT Press and McGraw Hill ( 2001 ) 168–170
18 . Fitzgerald , PC , Sturgill , D . , Shyakhtenko , A . , Oliver , B . , Vinson , C . : Comparative genomics of drosophila and human core promoters . Genome Biol . 7 ( 2006 ) R53
19 . The UniProt Consortium : The Universal Protein Resource ( UniProt ) . Nucl . Acids Res . 36(suppl 1 ) ( 2008 ) D190–195 ftp://ftpebiacuk/pub/databases/ integr8/uniprot/proteomes .
20 . Asuncion , A . , Newman , D . : UCI machine learning repository . http://wwwics uciedu/~mlearn/MLRepositoryhtml ( 2007 )
15
21 . Dong , G . , Li , J . : Efficient mining of emerging patterns : discovering trends and differences . In : KDD ’99 , ACM ( 1999 ) 43–52
22 . Kurtz , S . : Reducing the space requirement of suffix trees . Software Pract . Exper .
29(13 ) ( 1999 ) 1149–1171
23 . Li , J . , Dong , G . , Ramamohanarao , K . : Making use of the most expressive jumping emerging patterns for classification . In : PADKK ’00 , Springer ( 2000 ) 220–232
24 . Mitasiunaite , I . , Boulicaut , JF : Looking for monotonicity properties of a similarity constraint on sequences . In : SAC ’06 , ACM ( 2006 ) 546–552
25 . Ji , X . , Bailey , J . , Dong , G . : Mining minimal distinguishing subsequence patterns with gap constraints . Knowl . Inf . Syst . 11(3 ) ( 2007 ) 259–286
26 . D¨oring , A . , Weese , D . , Rausch , T . , Reinert , K . : SeqAn an efficient , generic C++ library for sequence analysis . BMC Bioinformatics 9 ( 2008 ) 11
Appendix Proposition 3 . Let D1,D2 be two databases , ρs , ρg ∈ R , and pred : N2 → {true , f alse} be defined as : pred(d1 , d2 ) = ( d1 ≥ ρs · |D1| ) ∧ ( d1 · |D2| ≥ ρg · d2 · |D1| ) .
The monotonic hull predhull of pred with : predhull(d1 , d2 ) := ( d1 ≥ ρs · |D1| ) is optimal .
( 13 )
( 14 )
Proof . We assume predhull is a non optimal monotonic hull of pred . Then there ( cid:59 ) pred’hull . Thus , d ∈ N2 exists a monotonic hull pred’hull of pred with predhull exist so that predhull(d1 , d2 ) is true and pred’hull(d1 , d2 ) is false . By the contraposition of the monotonicity criterion , pred’hull(d1 , 0 ) also is false . It holds that pred(d1 , 0 ) = predhull(d1 , d2 ) = true and pred ( cid:59 ) pred’hull . This is a contradiction to pred’hull being a monotonic hull of pred . Hence the proposition holds . Proposition 4 . Let min1 , max1 , min2 , max2 ∈ N , ( min1 , min2 ) ≤ ( max1 , max2 ) , and pred : N2 → {true , f alse} be defined as : pred(d1 , d2 ) = ( min1 ≤ d1 ≤ max1 ) ∧ ( min2 ≤ d2 ≤ max2 )
The monotonic hull predhull of pred with : predhull(d1 , d2 ) := ( min1 ≤ d1 ) ∧ ( min2 ≤ d2 )
( 15 )
( 16 ) is optimal . Proof . Analogously holds for a pred’hull and d ∈ N2 : predhull(d ) is true and pred’hull(d ) is false . Thus it holds that ( min1 , min2 ) ≤ d and pred’hull(min1 , min2 ) also is false . It holds that pred(min1 , min2 ) = true and pred ( cid:59 ) pred’hull . This is a contradiction to pred’hull being a monotonic hull of pred . Hence the proposition holds .
