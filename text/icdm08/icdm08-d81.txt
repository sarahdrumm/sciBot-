Autonomous Forex Trading Agents
Rui Pedro Barbosa and Orlando Belo
Department of Informatics , University of Minho , 4710 057 Braga , Portugal
{ruibarbosa,obelo}@diuminhopt
ABSTRACT In this paper we describe an infrastructure for implementing hybrid intelligent agents with the ability to trade in the Forex Market without requiring human supervision . This infrastructure is composed of three modules . The “ Intuition Module ” , implemented using an Ensemble Model , is responsible for performing pattern recognition and predicting the direction of the exchange rate . The “ A Posteriori Knowledge Module ” , implemented using a Case Based Reasoning System , enables the agents to learn from empirical experience and is responsible for suggesting how much to invest in each trade . The “ A Priori Knowledge Module ” , implemented using a Rule Based Expert System , enables the agents to incorporate non experiential knowledge in their trading decisions . This infrastructure was used to develop an agent capable of trading the USD/JPY currency pair with a 6 hours timeframe . The agent ’s simulated and live trading results lead us to believe our infrastructure can be of practical interest to the traditional trading community .
Keywords : Forex trading , data mining , hybrid agents , autonomy .
1 Introduction
The Forex Market is the largest financial market in the world . In this market currencies are traded against each other , and each pair of currencies is a product that can be traded . For instance , USD/JPY is the price of the United States Dollar expressed in Japanese Yen . At the time of writing of this paper the USD/JPY price is 102.55 , meaning we need 102.55 JPY to buy 1 USD . Trading this pair in the Forex Market is pretty straightforward : if a trader believes the USD will become more valuable compared to the JPY he buys USD/JPY lots ( goes long ) , and if he thinks the JPY will become more valuable compared to the USD he sells USD/JPY lots ( goes short ) . The profit/loss of each trade can be expressed in pips . A pip is the smallest change in the price of a currency pair . For the USD/JPY pair a pip corresponds to a price movement of 001 The actual value of each pip depends on the amount invested . For example , if we buy/sell 100,000 USD/JPY each pip is worth 1,000 JPY ( 100,000 times 0.01 ) , or 9.75 USD ( 1,000 divided by 10255 )
While it is very easy to trade in the Forex Market , it is actually pretty hard to be profitable doing it . Exchange rate prices are just too unpredictable . This unpredictability is due in part to the fact that the Forex Market is a 24 hours a day decentralized market , with many types of participants with different goals . Add to this the non stop stream of news coming out each day that can affect several pairs at the same time , and
P . Perner ( Ed. ) : ICDM 2008 , LNAI 5077 , pp . 389–403 , 2008 . © Springer Verlag Berlin Heidelberg 2008
390
RP Barbosa and O . Belo it becomes clear why the Forex Market is one of the hardest financial markets to beat . Trying to overcome these intrinsic hardships of Forex trading has led Forex Market participants to steadily move from traditional trading to algorithmic trading . This move , often referred to as the “ algorithms arms race ” , is happening at a very fast pace . The adoption of algorithmic trading in the Forex Market is expected to grow from 7 % by the end of 2006 to 25 % by 2010 [ 1 ] .
With this growing interest in quantitative methods in mind , we will describe an infrastructure for implementing autonomous Forex trading agents that makes extensive use of artificial intelligence models . The concept of using artificial intelligence models in trading is not exactly new , as there are already plenty of studies in this field . A special emphasis has been given to the use of neural networks to perform financial time series prediction [ 4][7][11 ] . In fact , several studies have shown that neural networks can model financial time series better than traditional mathematical methods [ 6][8 ] . Lately , researchers have displayed a growing interest in the development of hybrid intelligent systems for financial prediction [ 5][9][12 ] . These studies have shown that hybrid systems can outperform non hybrid systems .
Even though most studies demonstrate that artificial intelligence models can produce reasonably accurate financial predictions , that in itself will not impress most traditional traders . These studies usually measure a model ’s performance based on its accuracy ( for classification ) or the mean squared error ( for regression ) . The problem with this approach , from a trader ’s point of view , is that higher accuracy does not necessarily translate into higher profit . A single losing trade can wipe out the profit of several accurately predicted trades . A low mean squared error is also far from being a guarantee that a model can produce profitable predictions [ 3 ] . Some studies try to tackle this problem by using model predictions on out of sample data to simulate trades . This might make for a better study from a traders’ point of view , but it is still not a perfect solution . Simulated trades do not account for problems that frequently occur while trading live , such as slippage and partial fills . The effect of these problems on the overall profitability of a trading strategy is not negligible .
In the end , profit and drawdown are the only performance gauges that really matter to the trading community . Any performance claims are also expected to be backed up by a meaningful track record of live trading . With that in mind , our study will be exclusively directed at what the trading community wants . We will describe an infrastructure for implementing trading agents whose main goal is to maximize the profit and to minimize the drawdown while trading live . Each implemented agent is also expected to be able to operate autonomously , placing trades and handling money management without requiring human intervention . The infrastructure is loosely based in the decision process of a traditional trader : it enables the agents to intuitively recognize patterns in financial time series , to remember previous trades and use that empirical knowledge to decide when and how much to invest , and to incorporate knowledge from trading books and trading experts into the trading decisions .
2 Infrastructure
The infrastructure for implementing trading agents is represented in Figure 1 . This infrastructure defines two percepts ( price changes over a period of time and result of
Autonomous Forex Trading Agents
391 previous trades ) and a single action ( placement of new trades ) . The agent ’s structure is organized in three interconnected modules :
• Intuition Module – this module is responsible for predicting if the price of a currency pair will go up or down . This prediction is done by an Ensemble Model , which consists of several classification and regression models that try to find hidden patterns in price data .
• A Posteriori Knowledge Module – this module uses information from previous trades to suggest when and how much to invest in each trade . This suggestion is done by a Case Based Reasoning System . Each case in this system corresponds to a trade executed by the agent and its final result ( profit or loss in pips ) .
• A Priori Knowledge Module – this module is responsible for making the final trading decision , using the prediction from the Intuition Module and the suggestion from the A Posteriori Knowledge Module . This decision is done by a Rule Based Expert System , which contains several rules regarding when to invest and when to stop a trade . These rules must be provided to the agent because it will not be able to learn them by itself while trading .
Fig 1 . Infrastructure for implementing trading agents
2.1 The Intuition Module
A common definition for intuition is “ knowing without reasoning ” . It is hard to explain how this mental process works and even harder to try to implement its
392
RP Barbosa and O . Belo software equivalent . In a loose way we can look at intuition as a complex pattern recognition process [ 2 ] . Even if we are oversimplifying a complex concept , that definition perfectly suits our needs . We can easily base our trading agents’ intuition in a set of classification and regression models capable of finding hidden patterns in nonlinear financial data .
To implement the pattern recognition mechanism we could follow the typical approach of training a model with as much training data as possible , verifying that it was able to recognize past patterns in some out of sample test data and finally use it to predict future prices . If the future price predicted is higher than the current price then we should go long ( buy ) and if it is lower we should go short ( sell ) . But this strategy has several problems :
• It is susceptible to overfitting – the only way to decide if a model is accurate before using it to make predictions is to analyze its performance with the training and test data . By selecting a model based on this performance we may be selecting a model that performs well with those sets of data , but does not have any ability to generalize from the training data to new unseen data .
• It is “ dumb ” – once trained the model will not be able to learn anymore . This would not be a problem if the training data contained all the information that the model needs to be aware of . Unfortunately that is never the case when dealing with financial time series , no matter how big the training set is .
• It cannot live up to the expectations – anyone who has ever watched the price action of a major currency pair for a couple of sessions will know that expecting a model to accurately predict a price in the future is probably unrealistic , especially when dealing with smaller timeframes . The price is just too volatile .
• It is optimized for accuracy instead of profit – learning algorithms aim at building models that are accurate . When trading , high accuracy does not necessarily mean high profitability .
• It is not autonomous – because it is susceptible to overfitting and it cannot learn , the model needs to be continuously monitored to make sure it does not need to be retrained or replaced with a better model .
To try to overcome these problems we implemented the Intuition Module using an Ensemble Model . This Ensemble is a weighted voting system composed of several classification and regression models , where the weight of each vote is based on the profitability of each model . The models do not try to predict the price in the future , they simply try to predict what will happen to the price in the future . The prediction of each model thus corresponds to one of two classes : “ the price will go up ” or “ the price will go down ” . That is straightforward for classification models , but for regression models we need to convert the price prediction into one of the classes . That is very simple to accomplish : if the predicted price is higher than the current price then the predicted class is “ the price will go up ” , otherwise it is “ the price will go down ” .
Before each prediction , the available instances ( each consisting of the correct class to be predicted and a set of attributes that depends on the model ) are divided into two datasets : the test set consisting of the most recent N instances , and the training set
Autonomous Forex Trading Agents
393 consisting of all the instances left . Using these two sets of data the following sequence of steps is applied to each model in the Ensemble :
1 . The model is retrained using the training set and tested using the test set . 2 . For each instance in the test set a trade is simulated ( if the model predicts “ the price will go up ” we simulate a buy , otherwise we simulate a short sell ) . The results from the simulation are used to calculate the overall profit factor , long profit factor and short profit factor of the retrained model :
( 1 )
( 2 )
( 3 )
3 . If the overall profit factor of the retrained model is higher or equal to the overall profit factor of the original model , then the retrained model replaces the original model in the Ensemble . Otherwise , the original is kept and the retrained model is discarded .
4 . The selected model makes its prediction : if it predicts “ the price will go up ” the weight of its vote is its long profit factor ; if it predicts “ the price will go down ” the weight of its vote is its short profit factor . If the weight is a negative number then it is replaced with zero , which effectively means the model ’s prediction is ignored .
After all individual models have made their predictions , the ensemble prediction is calculated by adding the votes of all the models that predicted “ the price will go up ” and then subtracting the votes of all the models that predicted “ the price will go down ” . If the ensemble prediction is greater than zero then the module ’s final prediction is “ the price will go up ” , otherwise if it is lower than zero the final prediction is “ the price will go down ” .
There are several reasons why we decided to perform the predictions using an
Ensemble Model and the previously described algorithm :
• Some models are more profitable under certain market conditions than others . An Ensemble Model can be more profitable than any of its individual models because it can adapt to the market conditions . That is accomplished by continuously updating the weight of the vote of each of the individual models : as a model becomes more profitable its vote becomes more important .
• Some models are better at predicting when the market will go up and others are better at predicting when the market will go down . By using an Ensemble Model we can combine the qualities of the best models at predicting long trades and the best models at predicting short trades . That is accomplished by using the models’ long profit factor and short profit factor as their votes’ weight .
394
RP Barbosa and O . Belo
• An Ensemble Model makes our trading strategy resilient to changes in market dynamics . If a single classification or regression model is used for prediction and it starts turning unprofitable , the trading strategy will soon become a disaster . On the other hand , if that model is a part of our Ensemble Model , as it becomes unprofitable its vote continuously loses weight , up to a point where its predictions are simply ignored . And since our strategy tries to improve the models by retraining them with more data as it becomes available , it is very likely that the unprofitable model will end up being replaced with a more profitable retrained version of itself .
• Our algorithm optimizes profitability instead of accuracy . Obviously the learning algorithms used to retrain the models still optimize their accuracy , but the decision to actually make the retrained models a part of the Ensemble Model is based entirely on their profitability .
• Retraining the models before each prediction is the key to our agents’ autonomy . The agents can keep learning even while trading , because new unseen data will eventually become a part of the training set .
Our strategy is not without faults though . The decision to replace an original model with a version of itself trained with more data is based on the simulated profitability displayed with the test data . This means we are selecting models based on their test predictions , which might lead to selecting models that overfit the test data . However , this ends up not being a very serious problem , because our algorithm eventually replaces unprofitable models with more profitable retrained versions of themselves ( that might or might not overfit a different set of test data ) .
2.2 The A Posteriori Knowledge Module
Deciding when to buy or short sell a financial instrument is a very important part of successful trading . But there is another equally important decision : how much to invest in each trade . If we have a model that consistently produces profitable predictions we might feel tempted to double our investment per trade . That will in fact double the profit , but will also double the exposure and the drawdown ( loosely defined as the maximum loss an investor should expect from a series of trades ) . Keeping the drawdown low is of vital importance to traditional traders because , no matter how profitable a trading strategy is , a large drawdown can cause a margin call and pretty much remove the trader from the market . So doubling the investment per trade is not the best money management strategy for our trading agents . A better way to increase the profitability without a proportional increase in the risk would be to double the investment in trades with high expected profitability , use the normal investment amount for trades with average expected profitability , and skipping trades with low expected profitability .
In order to determine the expected profitability of a trade we will be looking at the individual predictions of the models that are part of the Ensemble Model . Intuitively , we might expect that the probability of a trade being successful will be higher if all the individual models make the same prediction ( all predict “ the price will go up ” or all predict “ the price will go down ” ) , compared to a trade where the models’ predictions are mixed ( some predict “ the price will go up ” and some predict “ the
Autonomous Forex Trading Agents
395 price will go down ” ) . Empirical evidence demonstrates that those expectations are well founded . Certain combinations of individual predictions really are more profitable than others . Our agents’ money management strategy is based on that empirical observation .
We implemented the A Posteriori Knowledge Module using a Case Based Reasoning System where each case represents a trade previously executed by the agent . The following information is contained in each case in the database : the predicted class , the trade result ( profit or loss in pips ) and the individual predictions from the models in the Ensemble Model . The agent uses that information to calculate the expected profitability of a trade before it is placed . It then decides if a trade is worth opening , and if so how much should be invested . The following sequence of steps is executed before each trade is placed :
1 . The Intuition Module makes the ensemble prediction and sends the sequence of individual predictions from the models in the Ensemble to the Case Based Reasoning System . This system retrieves from its database all the cases with the same class prediction and the same sequence of individual predictions .
2 . If the number of retrieved cases is not higher or equal to a predefined minimum number of cases , the Case Based Reasoning System removes the last prediction in the sequence of individual predictions and retrieves the cases again . This process is repeated until enough cases are retrieved .
3 . The Case Based Reasoning System calculates the overall profit factor of the retrieved cases using Equation ( 1 ) . That is the expected profitability of the trade . 4 . If the overall profit factor is greater or equal to a predefined value the agent doubles the investment ; if it is lower than another predefined value the agent skips the trade ; otherwise , the regular investment amount is used .
After a trade is executed and closed , a new case is inserted in the Case Based Reasoning System database . Our infrastructure uses the overall profit factor of the matching cases in the database to make the money management decision , which is yet another way in which it tries to optimize the profit .
2.3 The A Priori Knowledge Module
No matter how “ smart ” the implemented agents are , there is still some trading knowledge they will not be able to pick up from their empirical trading experiences . For this reason , the module responsible for making the final trading decision consists of a Rule Based Expert System where important rules can be defined by trading experts .
Some of these rules can be quite simple . For example , we may want the agents to skip trades in low liquidity days , such as those around Christmas or New Year ’s Day , when the already naturally high volatility of the Forex Market is exacerbated . Or we may want them to skip trades whenever major economic reports are about to be released , to avoid the characteristic chaotic price movements that happen right after the release . The primary example of such a report is the United States Nonfarm Payrolls , or NFP , released on the first Friday of every month .
Other more important rules are those where the settings for take profit and stop loss orders are defined . These are necessary so that the agents know when to exit each
396
RP Barbosa and O . Belo trade . A take profit order is used to close a trade when it reaches a certain number of pips in profit , to guarantee that profit . A stop loss order is used to close a trade when it reaches a certain number of pips of loss , to prevent the loss from widening .
Before each trade the Rule Based Expert System receives the prediction from the Intuition Module and the suggested investment amount from the A Posteriori Knowledge Module . It then uses the rules defined by the expert traders to make the final decision regarding the trade direction , investment amount and exit conditions . The agents can be made completely autonomous by using a broker ’s proprietary API to send the final trade decisions directly into the market .
3 Sample Implementation
There are countless ways in which our infrastructure can be used to implement a trading agent . As a sample implementation , we opted for developing an agent with the ability to place a trade every 6 hours , from Sunday 18:00 GMT to Saturday 00:00 GMT , using the USD/JPY currency pair .
3.1 Agent ’s Intuition
To implement the agent ’s Intuition Module we had to select the classification and regression models to be inserted in its Ensemble Model . The first step to accomplish this was to obtain historical price data that could be used to train the models.1
We decided to download the data in the form of USD/JPY 6 hours candlesticks . A candlestick is a figure that displays the high , low , open and close price of a financial instrument over a specific period of time . Using higher timeframe candlesticks would probably make more sense , because the higher the timeframe the less noise would be contained in the financial time series . But since the amount of data available was scarce , we needed to use the 6 hours timeframe to be able to obtain enough instances to train the models . We downloaded 4,100 candlesticks , comprising the period from May 2003 to January 2007 . These candlesticks were used to calculate the price return over each 6 hours period , which was one of the attributes we inserted in the training instances . Using the return instead of the actual price to train the models is a normal procedure in financial time series prediction , because it is a way of removing the trend from the series . Of the available returns , 4,000 ( corresponding to the period from May 2003 to December 2006 ) were used to train the models and the remaining 100 ( corresponding to the month of January 2007 ) were used to test the models .
Table 1 describes the exact attributes used to train and test each model in the Ensemble . While the classification models tried to predict the next class ( “ the price will go up in the next 6 hours ” or “ the price will go down in the next 6 hours ” ) , the regression models tried to predict the price return in the following 6 hours period . That return was then converted to a class ( if the predicted return was greater or equal to zero than the class prediction was “ the price will go up in the next 6 hours ” , otherwise it was “ the price will go down in the next 6 hours ” ) . The models were trained with attributes such as the hour , the day of the week and the current class or
1 Our agent ’s training data sources were wwwdukascopycom and wwwoandacom
Autonomous Forex Trading Agents
397
Table 1 . Attributes used to train each model in the Ensemble
Model
Attributes
Instance Based K*
C4.5 Decision Tree
RIPPER Rule Learner
Best First Decision Tree
Naïve Bayes
Logistic Decision Tree
Multilayer Perceptron
Hidden Naïve Bayes
K Nearest Neighbor
Instance Based K*
Support Vector Machine hour ( nominal ) , day of week ( nominal ) , last 6 returns moving average , current class hour ( nominal ) , day of week ( nominal ) , last 6 returns moving average , current class hour ( nominal ) , day of week ( nominal ) , current class hour ( numeric ) , day of week ( numeric ) , last 6 returns moving average , previous return , current return hour ( nominal ) , day of week ( nominal ) , current return hour ( nominal ) , last 6 returns moving average , current class hour ( nominal ) , day of week ( nominal ) , last 6 returns moving average , current return hour ( nominal ) , current class hour ( nominal ) , day of week ( nominal ) , last 6 returns moving average , current class hour ( nominal ) , day of week ( nominal ) , last 6 returns moving average , current class hour ( numeric ) , day of week ( numeric ) , last 10 returns moving average , last 2 returns moving average , current return
Prediction next class next class next class next class next class next class next class next class next class next return next return return . We also tried several attributes regularly used in technical analysis by traditional traders , such as moving averages , the Relative Strength Index , the Williams %R and the Average Directional Index , amongst others . Of these , only the moving averages added predictive power to the models . The usefulness of the moving averages was not unexpected , as it had already been demonstrated by several studies in the past [ 10 ] .
All the models were trained and tested using the Weka data mining software.2 As previously mentioned , before each trade the Intuition Module uses a fixed size dataset to test the models and calculate their simulated profitability . We decided that our agent would use a test set consisting of the most recent 100 instances . The decision to use only 100 instances for testing might seem a bit odd , as most literature regarding supervised learning would recommend the use of at least 30 % of the available data . However , there are several reasons why we made our agent use such a small set of test data :
2 Weka is an open source data mining software available at wwwcswaikatoacnz/ml/weka/
398
RP Barbosa and O . Belo
• Usually we would need a lot of test data to make sure a model did not overfit the training data . Our agent does not need that because its predictions are not based in a single model . So even if one of its models overfits the training data , that is not necessarily a problem . Over time the agent is able to ignore models that overfit the data ( ie , models that are unprofitable in out of sample trading ) and eventually replaces them with retrained versions of themselves . That is the reason why we can save much needed data for training , which would otherwise be required for testing .
• Heteroskedasticity is a key feature of most economic time series . This means that the volatility is clustered : usually a long period of low volatility is followed by a short period of high volatility and this pattern is repeated ad eternum . Since the weights of the models’ votes are based in their simulated profitability using the test instances , we need to keep the test set small enough that the weights can adapt quickly when the market enters a period of high volatility . In other words , the shorter the test set , the faster the agent can adapt to changes in market dynamics .
• A new instance is available after each trade . This instance becomes a test instance , and the oldest instance in the test set becomes a training instance . This means that , as time goes by , the training set grows while the test set remains the same size and moves like a sliding window . What this implies is that the shorter the test set , the faster the new instances can be used for training . In other words , the shorter the test set , the faster the agent can learn new patterns .
After completing the implementation of the Intuition Module , we used its predictions to simulate trades with out of sample data corresponding to the period from February 2007 to March 2008 . Figure 2 casts some light into the way the Intuition Module was able to adapt to the changing market conditions over that period of time . It shows the average long and average short weights of the votes of the 11 models in the Ensemble , and the USD/JPY price changes .
As the price trends up the long votes’ average weight increases , while the short votes’ average weight shrinks , and vice versa . The periods marked with arrows in the chart are particularly interesting . Over these periods , the average weight for long
Fig 2 . Average weight of the models’ votes
Autonomous Forex Trading Agents
399
Fig 3 . Performance comparison using different module combinations votes is very close to zero . What this means is that models predicting that “ the price will go up in the next 6 hours ” are being ignored . So if a single model with short profit factor greater than zero predicts “ the price will go down in the next 6 hours ” , then the final ensemble class prediction will automatically be the same , even if the other 10 models predict a price increase . It is this mechanism of selecting the best models according to the market conditions that allows the Intuition Module to quickly adapt to changes in the price trend and volatility .
The accumulated profit in pips over the simulation period for the Intuition Module is displayed in Figure 3 . After an initial period of unprofitable trading , where the weights of the models’ votes in the Ensemble were adapting to the market conditions , the Intuition Module was able to recover and ended up with a profit of 3,330 pips after 1,276 trades . It is fairly obvious that this trading strategy needs improvements : the drawdown is too high ( 463 pips ) and the profit curve is too volatile and erratic .
3.2 Agent ’s Empirical Knowledge
Implementing the agent ’s A Posteriori Knowledge Module was as easy as defining a couple of user variables regarding money management . After a couple of trial and error tests , we decided to use the following settings :
• double the investment whenever the overall profit factor of the cases retrieved is greater or equal to 1 ;
• skip trades whenever the overall profit factor of the cases retrieved is lower or equal to 0 ;
• require a minimum of 7 retrieved cases before a decision is taken .
The chart in Figure 3 shows the result of combining the Intuition Module and the A Posteriori Knowledge Module to simulate trades using the out of sample data . This combination performed 907 trades , with a final profit of 4,837 pips and a drawdown
400
RP Barbosa and O . Belo of 882 pips . Compared to using the Intuition Module alone , the profit increased 45 % and the drawdown increased 90 % . There was also an important reduction of 29 % in the number of trades . So the A Posteriori Knowledge Module was able to increase the final profit while making fewer trades , but this strategy needs improvement because the drawdown is too high .
3.3 Agent ’s Expert Knowledge
To implement the agent ’s A Priori Knowledge Module we just had to define the rules in the Rule Based Expert System . We started by defining some rules to avoid low liquidity days . These should not have a big impact in the trading results . But we also added one rule that will certainly have a significant impact : each trade is accompanied by a take profit order of 20 pips . This means that whenever a trade reaches a profit of 20 pips it is automatically closed . In other words , we are capping our maximum profit per trade to 20 pips ( 40 pips when the investment is doubled ) . A trade that is not closed with the take profit order will only be closed when the 6 hours period ends and a new trade is open .
Figure 3 shows the results of combining the Intuition Module and the A Priori Knowledge Module to simulate trades with the out of sample data . This strategy netted 3,958 pips of profit , with a drawdown of 360 pips . Compared to using the Intuition Module alone there was a 19 % increase in the profit and a 22 % decrease in the drawdown . The lower drawdown is exactly what we needed , but unfortunately there is also a big profit reduction if we compare these results with the ones obtained with the combination between the Intuition Module and the A Posteriori Knowledge Module .
3.4 Results
Through simulation , we have shown that each module makes a different contribution to the trading profit and the drawdown . The actual agent consists of all the three modules working together . Figure 3 shows the agent ’s simulated trading results . The agent was able to take advantage of the A Posteriori Knowledge Module ability to increase the profits and the A Priori Knowledge Module ability to reduce the drawdown . It obtained a final profit of 5,742 pips with a drawdown of 421 pips . This is , by any standards , an excellent performance .
By looking at Figure 3 it is easy to see that not only is the agent more profitable than any combination of its modules , its profit curve is also the smoothest . We can also see that the agent is not directionally biased : it is profitable no matter if the USD/JPY price is going up or down . It is also important to note that the agent performed acceptably in periods of high volatility ( such as the month of August ) .
Table 2 resumes the trading statistics of both the agent and the module combinations . The first interesting statistic in this table is the fact that the Intuition Module can only predict if the price will go up or down with 52.74 % accuracy . This percentage might seem too low , but it makes sense when we consider that this module optimizes profitability instead of accuracy . Therefore , even though the module is not very accurate , the profit it obtains from the accurately predicted trades is a lot higher than the losses it suffers from incorrectly predicted trades . Its success rate , ie , the
Autonomous Forex Trading Agents
401
Table 2 . Trading statistics
Accuracy 52.74 %
Success 52.74 %
Profit 3,330
54.47 %
54.47 %
4,837
52.74 %
64.89 %
3,958
54.41 %
66.67 %
5,742
Drawdown
463
882
360
421
Trades 1,276
907
1,276
873
Module combination
Intuition Intuition + A Posteriori Knowledge Intuition + A Priori Knowledge Agent percentage of trades that are closed in profit , is equal to its accuracy because all the trades are closed at the end of the 6 hours period , when a new trade is opened .
The 54.41 % accuracy of the agent is higher than the accuracy of its Intuition Module because both its A Posterior Knowledge Module and its A Priori Knowledge Module can make it skip trades that are expected to be unprofitable . That explains why the agent did only 873 trades , against the 1,276 trades that would have been performed by the Intuition Module alone . The agent has a 66.67 % success rate , which is considerably higher than its accuracy . That is due to the take profit rule in the A Priori Knowledge Module . This rule allows the agent to be profitable even if it makes a wrong prediction , just as long as the price moves at least 20 pips in the predicted direction .
While pips are a good way to measure the performance of our Forex trading agent , it might be interesting to see how that performance translates into actual money won or lost . Forex investments are usually leveraged ( which means they are done with borrowed funds ) , so the total profit obtained by the agent will always depend on the size of its trades . Let us assume we have a starting capital of $100,000 , and we want our agent to use a low risk trading strategy , with trades of 100,000 USD/JPY . As long as the agent has more than $100,000 in its account its trades will not be leveraged , except when it doubles the investment for trades with high expected profitability . As previously seen , for a USD/JPY price of 102.55 , the pip value for a 100,000 USD/JPY trade will be $975 Since our agent obtained a total profit of 5,742 pips , its profit in dollars after 14 months of trading is $55,985 , or 60 % . This is a really good performance , but things get even more interesting if we consider the agent could have used a higher initial leverage . Figure 4 displays the equity curves for a $100,000 account , using different trade sizes .
Amazingly , if the agent used a standard trade size of 2,000,000 USD/JPY , its $100,000 account would have grown to $1,219,690 in 14 months , or around 1,120 % . However , it is easy to see why using such high leverage would be too risky in live trading . From November 23rd to December 5th the agent suffered its maximum drawdown of 421 pips . A trade size of 2,000,000 USD/JPY corresponds to $195 per pip , so there was a drawdown of $82,095 . This loss is barely noticeable in the equity curve displayed in Figure 4 , because it happened at a time when the agent had already a really high account balance . But let us imagine the agent placed its first trade on November 23rd . Its initial balance of $100,000 would then drop $82,095 in 13 days , which would inevitably result in a margin call . The agent would not be able to trade again , and would end up with a loss of over 80 % . If the agent was using a more
402
RP Barbosa and O . Belo
Fig 4 . Equity curves for different trade sizes reasonable trade size of 500,000 USD/JPY , the maximum drawdown would have been only $20,528 , and it would have turned $100,000 into $379,980 in 14 months .
As previously mentioned , simulated results can give us a general idea regarding an agent ’s ability to be profitable while trading live , but cannot provide any guarantees . There are many details concerning live trading that can have a tremendous impact in the final net profit . The only way to prove that an agent can be profitable is to allow it to create an extensive track record of live trading . In order to accomplish this we integrated our agent with an Electronic Communication Network , where it has been trading autonomously since the middle of June 2007 . As expected , the agent ’s actual live trading results are not as good as the simulated results , with a decrease of around 22 % in the total profit . This difference is due to commissions , slippage , partial fills and interest payments , amongst other things . But the agent ’s results are still very good , with an average profit of 5.1 pips per live trade , which compares with an average profit of 6.6 pips per simulated trade over the same period of time .
Obviously , it is still too soon to reach any conclusions regarding the agent ’s profitability in the long run , because its live trading track record is too short . But so far our results seem to show that the agent is capable of profiting from inefficiencies in the Forex Market . Furthermore , we expect the agent ’s success rate to increase over time , as its models are trained with more data and more cases are inserted in its CaseBased Reasoning System .
4 Final Remarks
In this paper we described an infrastructure for implementing agents with the ability to trade autonomously in the Forex Market . The infrastructure is loosely based in traditional trading , ie , the agents are capable of : • recognizing patterns in financial time series , • learning from empirical experience , • incorporating knowledge obtained from non experiential sources into the trading strategy .
Autonomous Forex Trading Agents
403
Each of these capabilities corresponds to a module in the infrastructure , named
Intuition , A Posteriori Knowledge and A Priori Knowledge Module , respectively .
There are multiple ways the infrastructure can be used to implement a trading agent . In this paper we described a sample implementation of an agent capable of trading the USD/JPY currency pair with a 6 hours timeframe . Using simulated trading we were able to demonstrate the positive impact of each of the infrastructure ’s modules in the trading profit . Live trading results seem to suggest that the agent is indeed capable of being profitable while trading without supervision . However , only after a couple of years will we be able to make any claims regarding the agent ’s ability to survive and thrive in all market conditions .
A common way to reduce the risk inherent to trading is through diversification . In our case , investment diversification can be easily achieved by simply using the infrastructure to implement a basket of agents trading different uncorrelated currency pairs and using different time frames . Even though the infrastructure was developed with the Forex Market in mind , it is obvious it can be used to implement agents capable of trading any other financial instruments , such as stocks or futures . In fact , it would be an excellent idea to implement such agents and to add them to the basket of currency trading agents . We are currently looking into this multi agent investment strategy . Given the growing interest in algorithmic and quantitative trading , it is our belief that it will be of much interest to the traditional trading community .
References
1 . Cole , T . : Foreign Exchange Implications of Algorithmic Trading . In : Foreign Exchange
Contact Group , Frankfurt , Germany , May 23 ( 2007 )
2 . Thomas , A . : The intuitive algorithm . Affiliated East West Press ( 1991 ) ISBN 8185336652 3 . Swingler , K . : Financial Prediction , Some Pointers , Pitfalls , and Common Errors . Stirling
University ( 1994 )
4 . Franses , P . , Griensven , K . : Forecasting Exchange Rates Using Neural Networks for
Technical Trading Rules . Erasmus University ( 1998 )
5 . Abraham , A . : Analysis of Hybrid Soft and Hard Computing Techniques for Forex
Monitoring Systems . Monash University ( 2002 )
6 . Dunis , C . , Williams , M . : Modelling and Trading the EUR/USD Exchange Rate : Do Neural
Network Models Perform Better ? Liverpool Business School ( 2002 )
7 . Kondratenko , V . , Kuperin , Y . : Using Recurrent Neural Networks To Forecasting of Forex .
St . Petersburg State University ( 2003 )
8 . Kamruzzamana , J . , Sarker , R . : Comparing ANN Based Models with ARIMA for
Prediction of Forex Rates . Monash University ( 2003 )
9 . Abraham , A . , Chowdhury , M . , Petrovic Lazarevic , S . : Australian Forex Market Analysis
Using Connectionist Models . Monash University ( 2003 )
10 . Kamruzzamana , J . , Sarker , R . : ANN Based Forecasting of Foreign Currency Exchange
Rates . Monash University ( 2004 )
11 . Yu , L . , Wang , S . , Lai , K . : Adaptive Smoothing Neural Networks in Foreign Exchange
Rate Forecasting . Chinese Academy of Sciences ( 2005 )
12 . Yu , L . , Wang , S . , Lai , K . : Designing a Hybrid AI System as a Forex Trading Decision
Support Tool . Chinese Academy of Sciences ( 2005 )
