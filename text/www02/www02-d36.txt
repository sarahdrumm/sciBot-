Probabilistic Question Answering on the Web
Dragomir Radev
The University of Michigan
Weiguo Fan
Virginia Polytechnic Institute and State University
Hong Qi
The University of Michigan
Harris Wu
The University of Michigan
Amardeep Grewal
The University of Michigan
Abstract
Web based search engines such as Google and NorthernLight return documents that are relevant to a user query , not answers to user questions . We have developed an architecture that augments existing search engines so that they support natural language question answering . The process entails five steps : query modulation , document retrieval , passage extraction , phrase extraction , and answer ranking . In this paper we describe some probabilistic approaches to the last three of these stages . We show how our techniques apply to a number of existing search en
1
Radev et al . 2 gines and we also present results contrasting three different methods for question answering . Our algorithm , probabilistic phrase reranking ( PPR ) , uses proximity and question type features and achieves a total reciprocal document rank of .20 on the TREC8 corpus . Our techniques have been implemented as a Web accessible system , called NSIR .
1 Introduction to Web based Q&A
Given the amount of information that is available on the Web , it is not surprising that it is an ideal source of answers to a large variety of questions . The problem is that existing front ends to the Web such as NorthernLight , Google , and AlltheWeb ’s FAST search engine are designed to retrieve documents that are relevant to a user query , posed in an idiosyncratic language , and not to a question formulated in a human language such as
English .
We claim that it is much more natural for a user to type a question such as Who wrote
King Lear ? or What is the largest city in Northern Afghanistan ? rather than queries such as ( wrote OR written OR author ) AND ( ‘King Lear’ ) . We also believe that when a user is looking for an answer , rather than a document , then the search engine should return an actual answer , possibly in the context of the document where it occurs .
The process of retrieving answers from questions is known as Natural Language Question
Answering ( NLQA ) .
In this paper , we will introduce a method for Web based question answering called
Probabilistic Phrase Reranking ( PPR ) . It is fully implemented at the University of Michi gan as a Web accessible system , called NSIR ( pronounced answer ) . The existing NLQA
Radev et al . 3 systems that are closest to NSIR are Ask Jeeves1 , Mulder2 ( Kwok et al . , 2001 ) , and
Ionaut3 ( Abney et al . , 2000 ) . Ask Jeeves accepts questions but doesn’t actually return answers and rather engages in a menu driven dialogue with the user . Mulder is no longer available on the Web for a comparison . Ionaut is fast and interactive , but it is based on a local cache of files and doesn’t provide access to the full Web .
We should note that all search engines allow a user to enter a natural language ques tion instead of a query . The search engines then remove certain frequent stop words such as is or where and treat the rest of the question as a query . Thus search engines behave as if they can handle the first stage of NLQA ( input in the form of a question ) . However , they still provide documents rather than answers as their output results . For example , when we asked the question What is the largest city in Northern Afghanistan ? in the Google4 search engine , we got the following results back ( the full list has been truncated for reasons of space ) .
Yahoo! Full Coverage Afghanistan within three miles of the airport at Mazar e Sharif , the largest city in northern Afghanistan , held since 1998 by the Taliban . There was no immediate comment ukfcyahoocom/photos/a/afghanistanhtml 13k Cached Similar pages washingtonpost.com : World died in Kano , northern Nigeria ’s largest city , during two days of anti American riots led by Muslims protesting the US led bombing of Afghanistan , according to wwwwashingtonpostcom/wp dyn/print/world/ Similar pages
The result consists of short summaries of all relevant documents plus pointers to the documents themselves .
It is clear that a document returned by the search engine as
1http://wwwaskcom 2http://mulder.cx 3http://wwwionautcom:8400/ 4http://wwwgooglecom
Radev et al . 4 relevant to the input question is likely to contain the answer . If the very first returned document doesn’t contain the answer , it is still possible for another top ranked document to contain it . The problem becomes then how to identify the correct answer within the top n relevant documents returned by a search engine .
A similar output , produced by AlltheWeb is shown in Figure 1 .
Figure 1 : Sample output from AlltheWeb .
After reviewing relevant previous work , this paper will describe our new method for
Web based NLQA . The PPR technique ( Probabilistic Phrase Reranking ) relies on an existing search engine to return documents that are likely to contain the answer to a user question . PPR goes through several stages until it extracts and ranks the most likely answers to the question . These stages are query modulation , document retrieval , passage ( or sentence ) retrieval , phrase ( answer ) extraction and answer ranking . These are described in more detail in the following Sections .
All experiments described in this paper were performed by the authors using AlltheWeb ,
Google , and Northern Light in the period September – November 2001 .
Radev et al . 5
2 Related Work
START ( Katz , 1997 ) is one of the first web based QA systems . However , it focuses only on questions about geography and the MIT InfoLab . A pre compiled knowledge base is used to answer questions . Another earlier system , MURAX ( Kupiec , 2001 ) , uses an encyclopedia as a knowledge base to answer trivia questions . Given a question , MURAX uses a shallow parser to extract potential answers from sections of the encyclopedia based on the phrasal relationships between words in the question .
A large number of QA systems have emerged recently . Primarily , they follow two directions : one direction is to use the TREC Q&A ( Voorhees and Tice , 2000 ) data as the test corpus and develop their own search engines and answer extraction techniques on top of the corpus ; the other direction is to use the WWW as the potential answer source and use generic search engines , such as Google , to retrieve information related to the question and do further post processing to extract the answers for the questions . We will review some recent work in this section .
2.1 Related work from TREC
The TREC question answering evaluation ( Voorhees and Tice , 2000 ) is the motivating force behind a recent surge in question answering research . Systems participating in
TREC have to identify short passages from a 2 GB text corpus that contain answers to a list of factual questions . The IBM team ( Prager et al . , 1999 ; Radev et al . , 2000 ) introduced the technique of predictive annotation , a methodology for indexing texts for
2.1 Related work from TREC
Radev et al . 6 fact seeking question answering . The idea of this approach is that texts in documents are annotated with labels anticipating their being targets of certain kinds of questions .
Given a question , their system retrieves a set of passages that may contain the answers .
The potential answers are then extracted from these passages and ranked using a linear ranking function with various heuristics , which is learned by logistic regression .
Hovy et al . ( Hovy et al . , 2000 ) developed a Q&A system called Webclopedia based on
IR and NLP techniques . A given question is first parsed to create a query to retrieve the top ranked documents . These top ranked documents are then split into segments and further ranked . Potential answers are then extracted and sorted according to a ranking function involving the match with the question type and patterns . These question pat terns are manually constructed . The classification of each question and potential answer to these patterns is done using rules learned from a machine learning based grammar parser .
Abney et al . ( Abney et al . , 2000 ) described a method based on named entity identi fication techniques . For each question , a set of relevant passages that mostly contain the answers is first identified . A candidate set of entities are extracted from these retrieved passages . Both the question and these extracted entities are classified into a pre defined set of categories . Only those entities that match the category required by the question are retained and re ranked using the frequency and other position related information .
Clarke et al . ( Clarke et al . , 2000 ) also applied the passage retrieval techniques for initial preprocessing . The passage ranking algorithm utilizes semantic match information between the query type and term , the IDF like ( inverse document frequency , a measure of the spread of a word or phrase among documents in a corpus ) term weighting information of each term and also the coverage of these query related terms in the passage itself .
A statistical context free grammar parser based on WordNet is used to determine the
2.2 Related work on the Web
Radev et al . 7 question category . Those top ranked passages are then scanned for patterns matching the answer category and the potential answers are extracted and ranked using various quality heuristics .
A different technique , named boosting , which integrates different forms of syntactic , semantic and pragmatic knowledge , is presented in ( Harabagiu et al . , 2000 ) . For ex ample , question reformulation is used to construct a query that contains more semantic information based on WordNet , and named entity recognition techniques are employed to ensure high quality passage retrieval . Potential answers are extracted from the seman tically rich passages that match the question type . These candidate answers are further justified by using abductive reasoning , and only those that pass the test are retrieved .
The system , named Falcon , scored very high in recent TREC Q&A evaluation contests
( Voorhees and Tice , 2000 ; Voorhees , 2001 ) .
TextRoller , the best Q&A system in recent TREC 10 contest ( Soubbotin , 2002 ) , used a relatively unique approach called pattern based approach for answer identification . In this approach , NLP techniques is no longer used . Instead , various patterns for different types of questions are defined and used in pattern matching from passages , and answer selection and ranking of those potential answers .
2.2 Related work on the Web
The TREC conference offers an exciting environment for competitive research on Question
Answering . However , the questions that can be answered from the fixed text corpus as in TREC are limited . Various efforts are now under way which try to port existing Q&A techniques to a much larger context — the World Wide Web . Our earlier study ( Radev et al . , 2001a ) already shows that the current WWW search engines , especially those with a very large index like Google , offer a very promising source for question answering .
2.2 Related work on the Web
Radev et al . 8
Agichtein et al . ( Agichtein et al . , 2001 ) presented a technique on how to learn search engine specific query transformations for question answering . A similar transformation technique also appeared in ( Glover et al . , 2001 ) . The idea is that the current query interfaces of most generic search engines , such as Google , etc . , do not provide enough capability for direct question answering in a natural language mode . By transforming the initial natural questions into a certain format which includes more domain specific information , one can dramatically improve the chances of finding good answers at the top of the search hit lists . A set of transformation rules are learned from a training corpus and applied to the questions at search time , and the experiments have shown promising results . Their work , however , is focused on improving the chances of getting high quality documents from a search engine .
It does not provide any mechanism to identify the true answers from the search results . An even more general framework on query transformation is discussed in ( Radev et al . , 2001b ) . A total of 15 query modulation operators are identified and trained using the EM algorithm over a wide range of training questions . The best operators tailored to different questions are then identified and applied for later online question answering using the web search engines .
A relatively complete , general purpose , web based Q&A system is discussed recently in ( Kwok et al . , 2001 ) . Techniques similar to those used in the TREC conferences are applied to the web as a whole . For example , the user question is processed by a parser to learn its syntactic structure . In order to help extract the answers and make the classifica tion task easier , the questions are classified into three categories : nominal , numerical and temporal . Similar to the techniques used in ( Agichtein et al . , 2001 ; Radev et al . , 2000 ) , various query modulation techniques , such as query expansion , noun phrase formation , and transformation are applied to the initial questions to get high quality results for later answer extraction . Their answer extraction module utilizes both IDF information
Radev et al . 9 and word distance to extract answers . These extracted answers are then assigned scores based on their contexts in documents and then further clustered into groups . The mem ber with the highest score in each group is selected as a representative for that group and is presented to the user as a potential answer .
Our system is different from ( Kwok et al . , 2001 ) in that we do not use a deep natural language parser . As the authors admit on the Mulder Web page , such approaches are very slow and are not usable on the Web until faster parsers and/or hardware become available . In fact , the Mulder system runs on 100 workstations in parallel ( Oren Etzioni and Daniel S . Weld , Personal Communication , 2002 ) to make it scalable . Instead , we replace these time consuming parts with approaches based on rule based classifiers and probabilistic phrase reranking and still achieve reasonable performance on a single Sun workstation . As will be shown later , these new additions offer a much more scalable approach for the web context than previous work .
3 A Probabilistic Approach to
Phrase Reranking
3.1 The general architecture of our system
Our general approach includes the following stages :
• query modulation — that is the process of converting a question to an appropriate query . This is an optional stage . We have already described an approach for query modulation in ( Radev et al . , 2001b ) . In this paper we will present an approach that doesn’t need query modulation to answer natural language questions .
3.1 The general architecture of our system
Radev et al . 10
What is the largest city in Northern Afghanistan ?
Query modulation
( largest OR biggest ) city “ Northern Afghanistan ”
Document retrieval wwwinfopleasecom/cgi bin/id/A0855603 wwwwashingtonpostcom/wp dyn/print/world/
Sentence retrieval
Gudermes , Chechnya's second largest town … location in Afghanistan's outlying regions within three miles of the airport at Mazar e Sharif , the largest city in northern Afghanistan
Answer extraction
Gudermes Mazer e Sharif
Answer ranking
Mazer e Sharif Gudermes
Figure 2 : The architecture of the NSIR system .
• question type recognition — in this stage questions are subdivided depending on the type of answer that they expect : eg , person , place , organization , distance , etc .
• document retrieval — the process of returning documents that are likely to contain , among other things , the answer(s ) to the input question .
• passage ( or sentence ) retrieval — the process of identifying in the retrieved docu ments the textual units that contain the answers .
• answer extraction — that is where the relevant sentences or passages are split up into constituent phrases , each of which is a potential answer candidate .
• phrase ( answer ) ranking — these phrases extracted in the previous stage are ranked with the goal of getting the right answer near the top of the phrase level hit list .
3.2 Evaluation metric
Radev et al . 11
3.2 Evaluation metric
As an evaluation metric , we use total reciprocal document rank ( T RDR ) . The value of
T RDR is the sum of the reciprocal values of the rank of all correct documents among the top n ( arbitrary ) extracted by the system :
T RDR =
N
Xi
1 ranki
( 1 ) where N is the number of returned documents , passages , or phrases . The main reason of using the proposed TRDR as the main performance measure is that there may be multiple correct answers per question or the same correct answer may appear in multiple documents of different ranks . For example , if the system has retrieved 10 documents , of which three : the second , eighth , and tenth , contain the correct answer , T RDR for that given paraphrase is 1
10 = 725 TRDR can be defined similarly for the sentence
2 + 1
8 + 1 level or the phrase level . In these cases , it is based on the rank of the correct sentences
( resp . , phrases ) . The TRDR metric is similar to the MRR metric used in the TREC evaluation . The difference between the two is that in TREC , only the top ranked answer counts whereas , in our case , we want to be able to distinguish between two runs , one of which only gets a correct answer in second place and another , which gets correct answers not only in second , but also in eighth and tenth places . Using TRDR rather than the metric employed in TREC , we are able to make such finer distinctions in performance .
Another departure from the TREC scheme is our inability to perform a manual evaluation due to the large number of judgments that are needed to evaluate the different methods described in this paper . We need to rely instead on an automatic evaluation scheme in which a document ( resp . , sentence or phrase ) is checked by a program for the presence
( even unjustified ) of the expected answer . This sort of evaluation is similar to the lenient evaluation described in ( Voorhees and Tice , 2000 ) . In the next subsection , we will show
3.3 Manual vs . automatic evaluation consistency
Radev et al . 12 that it is a reasonable compromise to use an automatic evaluation mechanism to measure performance in a large system . We should note here that for all experiments described in this paper we have used the TREC8 , TREC9 , and TREC10 corpora from NIST ( Voorhees and Tice , 2000 ) . They contain a total of more than 1,000 question/answer pairs . Unless otherwise indicated , we have tuned our system based on the 200 questions from TREC8 since this is period when most of our training experiments were conducted . The Mulder system uses a different metric for evaluation , namely user effort , which measures the total number of words shown on a page before the first correct answer is identified . We chose to use a metric closer in spirit to the established metrics in TREC .
3.3 Manual vs . automatic evaluation consistency
There are some cases where the document does match the answer patterns but does not actually support the answer . For example , 1987 is one of the answers for the ques tion When was London ’s Docklands Light Railway constructed ; automatic evalua tion cannot tell if a document containing 1987 is really about when the railway was constructed or about other events that happened in 1987 , a distinction which a human can judge correctly . The question that arises is to what extent the automatic evaluation is consistent with human judges . So we did an experiment to examine the consistency between the results of automatic and manual evaluation .
We ran the first 100 TREC8 questions on the AlltheWeb search engine and evaluate the first 5 hits automatically and manually . Document level TRDR performance scores are computed for each question and for both methods . We use the formula to get the
Radev et al . 13
Pearson correlation between the two data sets , r = nP xy − P xP y rnP x2 − ( P x)2nP y2 − ( P y)2
( 2 ) where x and y are the 100 reciprocal performance scores of manual evaluation and auto matic evaluation , respectively . The Pearson correlation score derived from this formula is
.538 which shows reasonably correlation between the manual and automatic performance scores and , as a result , justifies the use of automatic evaluation when manual evalua tion is too expensive ( eg , on tens of thousands of question document pairs ) . Note that this automatic method for evaluation contrasts with the small scale manual evaluation described in ( Agichtein et al . , 2001 ) .
4 Question type identification
To identify the semantic type of the question is an important step before extracting the actual answer . For example , a question like Who was the tallest US president ? expects a person as the answer . Currently , we have 17 question types , listed in Table 1 .
Two methods have been implemented to categorize questions : decision rule induction using Ripper ( Cohen , 1996 ) and a heuristic rule based algorithm . 1200 questions from
TREC8 , TREC9 and TREC10 are used in our experiment . The automatically identified question types ( qtype ) are then compared against manually annotated question types .
PERSON NUMBER
DESCRIPTION ABBREVIATION LENGTH DURATION OTHER
RATE REASON NOMINAL
PLACE
DATE DEFINITION ORGANIZATION KNOWNFOR MONEY PURPOSE
Table 1 : List of question types ( qtypes )
4.1 Machine learning approach
Radev et al . 14
Description is used for questions seeking a description of some person , such as Who was Whitcomb Judson ? ; while questions like Who invented the paper clip ? should be labeled as a Person . Nominal describes questions which have nominal phrases as an swers but cannot be assigned to other specific categories such as person or organization .
Questions not belonging to any of the above types fall in Other .
4.1 Machine learning approach
Ripper is the machine learning tool used for question categorization . In our experiment , each question is represented by 13 features , 9 of which are semantic features based on
WordNet . For instance , one of the semantic features is ifNounIsMoney , which checks if the hypernyms of the first noun in the sentence contains money related words such as monetary , economic , liability , etc . The questions have also been processed by
LTCHUNK ( Mikheev , 2000 ) , which yields the NumberOfNounPhrases features . All the features are listed in Table 2 .
QuestionWords WordBesideWhwords ifNounIsMoney ifNounIsDuration ifNounIsLocation ifNounIsRate NumberOfNounPhrases
Whword ifWordBesideIsWealthy ifNounIsLength ifNounIsPerson ifNounIsGroup ifNounIsNumber
Table 2 : Features for question representation
Several experiments have been done using Ripper for question type identification .
Questions from TREC9 , TREC8 and TREC10 were incrementally added to the training data set . In addition , we manually added 37 data points to the training data set , which helps produce more robust rules . For example , , how , many , n , , y , , , , , , , ,
LENGTH:4 . means that questions which have wh word how many followed by a Length noun should be categorized as a Length type . These manual data points are very help
4.2 Heuristic algorithm
Radev et al . 15 ful when Ripper uses a training data set to produce the hypotheses . For the example data point , Ripper generates a hypothesis which can be represented as LENGTH 5 0 IF
( ifNounIsLength LIKE y ) AND ( wordbeside LIKE many ) . So when Ripper predicts question types on the test data set , it will know that the questions such as How many miles is it from London , England to Plymouth , England are expecting a length as the answer . The Results of using Ripper to identify question types are listed in Table
3 .
Train
Test
Train Error Test Error
TREC9
TREC8
22.4 %
TREC8,9
TREC10
17.03 %
TREC8,9,10
20.69 %
24 %
30 %
Table 3 : Results ( in error rate ) of using Ripper to identify question types
4.2 Heuristic algorithm
The second method for type identification that we use to categorize questions is heuristic in nature . Question categorization seems trivial since the question word is often a good indication of the semantic type of the answer . However , this is not true even for the who questions . 484 TREC9 questions containing wh words are examined with respect to the mapping between wh words and question types .
As it can be seen from Table 4 , only a small number of these wh words can determine the question types , such as when and why . what questions can cover almost all the different types . For the exceptions of who and where questions , we use the simple rules like those listed in Table 5 .
But for what/which questions , syntactic and semantic analysis is needed .
In our
4.2 Heuristic algorithm
Radev et al . 16
Wh word
Types who ( 102 )
PERSON(77 ) DESCRIPTION(19 ) ORG(6 ) where(60 )
PLACE(54 ) NOMINAL(4 ) ORG(2 ) when(40 )
DATE(40 ) why(1 )
REASON(1 ) what /which(233 )
NOMINAL(78 ) PLACE(27 ) DEFINITION(26 ) PERSON(18 ) ORG(16 ) NUMBER(14 ) ABBREVIATION(13 ) DATE(11 ) RATE(4 ) KNOWNFOR(8 ) MONEY(3 ) PURPOSE(2 ) REASON(1 ) TRANSL(1 ) LENGTH(1 ) DESCOTHER(10 ) how(48 )
NUMBER(33 ) LENGTH(6 ) RATE(2 ) MONEY(2 ) DURATION(3 ) REASON(1 ) DESCOTHER(1 )
Table 4 : Analysis of Wh words and their corresponding types
Template who is <Person Name>
Types
Description who ( manufacture|produce|grow|provide ) Organization
Table 5 : Sample rules
4.2 Heuristic algorithm
Radev et al . 17 system , Brill ’s transformation based POS tagger is used to tag questions ( Brill , 1995 ) .
What/which can either be tagged as a WDT ( determiner ) as in What state in the
United States covers the largest area ? , or as a WP ( wh phrase ) as in What is the population of Japan ? . The base noun phrase right after a WDT what can often be used to determine the question type . We select the last noun of this noun phrase as the informative noun which will be further used to determine the question type with seman tic analysis . For example , in the question What/WDT card/NN company/NN sells/VBZ
Christmas/NNP ornaments/NNS ?/ . , the first base noun phrase is card company , so company becomes the informative noun for this question ; we then categorize this ques tion as ORGANIZATION . Compared to WDT what , questions with a WP what are more complicated for this task . First , the verbs in questions are used to categorize questions like What caused the Lynmouth floods ? in which the verbs indicate the types ; then questions are typed as DEFINITION if the number of question words is one or two ex cluding wh words or any determiners ; for the remaining questions , the system needs to extract the informative noun . Our general heuristic for finding the informative noun is to locate the last noun of the first base noun phrase . For example , in the question What ’s the average salary of a professional baseball player ? , we get two base noun phrases which are the average salary and a professional baseball player , and we then use salary as the informative noun for this question . Different heuristics are used for questions like What was the name of the first Russian astronaut to do a spacewalk ? or What person ’s head is on a dime ? . These heuristics have also been applied to the questions containing no wh word , like Name a film in which Jude
Law acted .
The decision of some questions’ types are left to the informative nouns . This is implemented through a lexicon built manually that maps nouns to their corresponding
4.2 Heuristic algorithm
Radev et al . 18 categories , such as length|circumference|diameter|diam|radius –> LENGTH . So if the informative noun is diameter , then the question will be categorized as a LENGTH type .
WordNet has been used to build the mapping lexicon . Table 6 shows the result of using our heuristics to determine the question types . The first line is the results of the heuristics generated by only looking at TREC9 questions ; the second includes both TREC8 and
TREC9 questions ; the last line shows the results of the heuristics after being modified by all three TREC question sets . It is somewhat disappointing to see that the addition of TREC 8 questions in training does not help the testing performance on TREC 10 questions .
Train
Test
TREC9 TREC8 TREC10
TREC9
7.8 %
15 %
18 %
TREC8,9
7.4 %
6 %
18.2 %
TREC8,9,10
4.6 %
5.5 %
7.6 %
Table 6 : Results ( in error rate ) of using heuristics to identify question types
The accuracy has been greatly improved by using heuristics . When using Ripper , the training error rate is around 20 % , and the test error rate is even higher , going to
30 % when trained on TREC8,9 and tested on TREC10 . As it can be seen from Table 6 , training error rate never goes above 8 % and the testing error is around 18 % . It should be noted that the training error rate exists because some questions are really hard to categorize without any additional information . For example , questions like Who won could expect a person as its answer such as Who won the Nobel Peace Price in 1991 , but it also could expect an organization such as Who won the Superbowl in 1982 .
Radev et al . 19
5 Document retrieval
We use the offline interfaces to three of the major search engines , AlltheWeb , Northern
Light , and Google . The input to these interfaces is a query ( or a question in our case ) .
The output is a list of the URLs of the top matching documents . We use the Perl
LWP::Download module to retrieve the actual documents before we split them up into sentences and/or phrases . We retrieve the top 40 documents from the search engine .
In the evaluation section we will show our method ’s performance on the document level as well as the passage and phrase levels . Note : all retrievals used in this paper were performed in late October and early November of 2001 .
6 Sentence ranking
The purpose of sentence ranking is to reduce the computational complexity of the later phrase ranking stage . Producing phrases directly from the downloaded documents re quires substantial computation .
To perform sentence ranking , two models were used in our system . One is based on an N gram model . The other is based on the traditional Vector Space model .
For the N gram model , the question submitted by a user is parsed to generate un igrams , bigrams , and trigrams . Various lexical statistics about these n grams are used for sentence ranking . The formula for scoring sentences ( passages ) by proximity to the words of the query using the N gram model is as follows :
Score = w1PN1 i=1 tfi ∗ idfi + w2 PN2 j=1 tfj + w3PN3
Normalized F actor k=1 tfk
( 3 ) where Ni(i = 1 , 2 , 3 ) is the total number of occurrences of unigram , bigram , and
Radev et al . 20 trigram in a sentence . wi(i = 1 , 2 , 3 ) is the linear combination weight . We set the weights as 1 , 1.5 , and 4 , respectively in our experiments . tfi is the term frequency of the i gram . idf is the inverse document frequency , which measures the rarity of a unigram .
Normalized F actor is defined as follows :
1 if Sentence Length < 40
Sentence Length/40 if Sentence Length > 40
 
Another sentence ranking function is designed based on modification of the Okapi ranking function used for document ranking ( Robertson et al . , 1996 ) . It is defined as follows :
Score(S ) = XT ∈Q
3 × tf × idf
0.5 + 1.5 × Sentence Length Sentence Lengthavg
+ tf
( 4 ) where Sentence Length is the length of a sentence in words and Sentence Lengthavg is the average sentence length in the top 20 documents returned from a search . tf and idf have a similar meaning as above in the linear combination formula , except that they are calculated based on single terms ( unigrams ) only . In the evaluation section , we show the performance of NSIR on the sentence level .
7 Phrase extraction and ranking
7.1 Potential answer identification
In our study , we convert all retrieved documents from the Web into chunks using an off the shelf chunker ( Mikheev , 2000 ) . For a typical question , after downloading the top 40 hits from a given search engine , the chunker produces several tens of thousands of phrasal chunks . Here is an example . Given the question ( from TREC8 ) Who is the author of the book , “ The Iron Lady : A Biography of Margaret Thatcher ” ? , 10,360 phrases are returned .
7.2 Phrase ranking
Radev et al . 21
Of these 10,360 phrases , 10 contain the correct answer Hugo Young . However , these 10 phrases are scattered among the 10,360 phrases and need to be identified automatically .
To address this issue , our current algorithm utilizes the following feature : proximity between the text and the question — that is , a phrase that contains most query terms gets a high score , however a phrase that is near a phrase that contains most query terms will get a slightly lower score . Figure 3 shows the effect of proximity on the score of a phrase . Phrases that are next to a large number of query words get higher scores than phrases that are further away . activation weight 1
0
Pi w
Pi 1 pi
Pi+1
Pi+w phrase position
Figure 3 : Proximity feature .
7.2 Phrase ranking
Answer Extraction and Ranking is the module that looks at additional sources of in formation to improve the performance of the previous module . We have been exper imenting with the so called part of speech phrase signatures which identify with a particular question or answer type . For example , the expected answer type for the ques tion about Margaret Thatcher ’s biography is a person . We can compute the probabilities
P ( PHRASETYPE|SIG ) for all possible signatures and phrase types . For example , the
7.2 Phrase ranking
Radev et al . 22 phrase signature for the phrase Hugo Young is determined by the chunker as NNP NNP .
The probability P ( PERSON|NNP NNP ) is 458 We will call this probability the signa ture score . For a given phrase , we can then multiply two numbers , the proximity score from the previous subsection and the signature score from the current subsection . Fig ure 4 shows some of the most common part of speech ( POS ) signatures and the phrase types that correspond to each of them . The part of speech symbols are generated by the text chunker ( Mikheev , 2000 ) . For instance , VBD indicates the past participle form of a verb , JJ is an adjective , DT is a determiner ( eg , the ) , and NNP is a proper noun .
Other Q&A systems use commercial grade named entity taggers . Our approach could also benefit from such taggers although phrase signatures seem to work quite well .
NO ( 100 % ) NO ( 86.7 % ) PERSON ( 3.8 % ) NUMBER ( 3.8 % ) ORG ( 2.5 % ) PERSON ( 37.4 % ) PLACE ( 29.6 % ) DATE ( 21.7 % ) NO ( 7.6 % )
Signature Phrase Types VBD DT NN NNP DT JJ NN NO ( 75.6 % ) NUMBER ( 11.1 % ) PLACE ( 4.4 % ) ORG ( 4.4 % ) NNP NNP PLACE ( 37.3 % ) PERSON ( 35.6 % ) NO ( 16.9 % ) ORG ( 10.2 % ) DT NNP
ORG ( 55.6 % ) NO ( 33.3 % ) PLACE ( 5.6 % ) DATE ( 5.6 % )
Figure 4 : Common part of speech signatures and their corresponding phrase types . A NO means that this particular signature cannot be the answer to any type of question . The frequencies are derived from a manually annotated corpus of text unrelated to the TREC corpus .
Note that the step of answer identification and ranking can be done based on sentences instead of the original downloaded documents . We will compare the performances of these approaches in the experiments section .
Radev et al . 23
8 Example
Let ’s consider question 21 from TREC8 : Who was the first American in space?.5 The expected correct answer is Alan Shepard .
We submit this question to the Google search engine and get the following results back ( see Figure 5 ) . Note that a number of person names appear in the hit list . These include several occurrences of the correct answer as well as many other names . The top
40 documents returned by Google for this question contain a total of 14,717 phrases , of which approximately 2 % are names of people for a total of 300 names . Among these names , our system needs to pick out the instances of Alan Shepard .
Figure 5 : Google result given TREC8 Question 21 .
It is not difficult to see from Figure 5 that articles in the top 2 of the hit list are about the first American woman , not the first American in general . The correct answer
5This question was used as a running example in the Kwok et al . paper as well . appears in the third hit .
The output of our system at the sentence level is shown in Figure 6 .
Radev et al . 24
American in space Alan Shepard Becomes the First American in Space 1961 On May 5 1961
Alan Shepard Jr . was launched into space .
Keep in mind that Alan Shepard was the first American in space not the first man .
First American woman in space : Sally Ride First American woman in space : Sally Ride Sally Ride was the first American woman to travel into space .
Submitted by Anonymous Contributor Title : First American woman in space : Sally Ride Description : Physicist Sally Ride was the first American woman in space participating in two missions aboard the Space Shuttle Challenger .
It was the first American space flight involving human beings .
Privacy Copyright Disclaimer First American in Space May 5 In 1961 I lived in a small town in Florida called Neptune Beach .
As a Mercury astronaut he was chosen to be the first American in space .
He was the first American to dare the unknown and enter space .
Figure 6 : The top ranked sentences from our system ( names of PERSONs are shown in bold face , and the correct answer is boxed ) .
Figure 7 shows the top phrases retrieved by our system directly from the documents and using the proximity feature only . Figure 8 reflects the use of both features ( proximity and qtype ) but without taking into account the top ranked sentences . Figure 9 shows how these phrases are re ranked after taking into account the top sentences from the returned documents and also the qtype feature . As we will show in the following sections , such combination of features improves overall system performance by a factor of at least 2 .
Let ’s consider an example . The top ranked phrase in Figure 7 is the Space Flight
Operations contractor .
Its signature is DT NNP NNP NNP NN . That signature is not associated with the expected question types PERSON or PLACE . In other words ,
P ( PERSON|DT NNP NNP NNP NN )
= P ( PLACE|DT NNP NNP NNP NN )
Radev et al . 25
Rank Probability and phrase 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 41
0.600 the DT Space NNP Flight NNP Operations NNP contractor NN . . 0.599 International NNP Space NNP Station NNP Alpha NNP 0.598 International NNP Space NNP Station NNP 0.598 to TO become VB 0.595 a DT joint JJ venture NN United NNP Space NNP Alliance NNP 0.594 NASA NNP Johnson NNP Space NNP Center NNP 0.587 will MD form VB 0.585 The DT purpose NN 0.577 prime JJ contracts NNS 0.568 First NNP American NNP 0.567 this DT bulletin NN board NN 0.566 Space NNP : : 0.563 ’Spirit NN ’ ” of IN 0.562 space NN 0.561 February NPN
0.516 Alan NNP Shepard NNP
Figure 7 : Document + Phrase , proximity only , Question 21 from TREC 8 . The highestranking correct answer is in position 41 out of 14,717 phrases when phrases are ranked solely based on proximity .
= 0
As a result , the combined probability is 0 . On the other hand , the highest ranking Alan
Shepard is in forty first place out of 14,717 phrases with a proximity score of 516
When taking into consideration the qtype feature in addition to proximity , that phrase moves up to tenth place with a score of 376 That score is the product of the proximity score .516 and the qtype score 729 How was the qtype score computed ? It is equal to
P ( PLACE|NNP NNP ) + P ( PERSON|NNP NNP )
( 5 ) or in terms of actual numbers , .373 + 356 We should note here that we have modified the output of Ripper to specify the top two candidate categories for each question — that is why we are getting both PERSON and PLACE as candidate question types for this question .
Finally , the phrase Alan Shepard moves even higher in the list ( to sixth place ) when the list of phrases is limited to the 1,935 phrases in the highest ranking 50 sentences returned by our sentence ranking component . Overall , our TRDR for this question is .18
( .14 + .03 + 01 )
Radev et al . 26
Rank Probability and phrase 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
0.465 Space NNP Administration NNP . . 0.446 SPACE NNP CALENDAR NNP . 0.414 First NNP American NNP 0.399 International NNP Space NNP Station NNP Alpha NNP 0.396 her PRP$ third JJ space NN mission NN 0.396 NASA NNP Johnson NNP Space NNP Center NNP 0.394 the DT American NNP Commercial NNP Launch NNP Industry NNP 0.390 the DT Red NNP Planet NNP . . 0.380 First NNP American NNP 0.376336 Alan NNP Shepard NNP 0.376 February NNP 0.375 Space NNP 0.374 International NNP Space NNP Station NNP 0.372 Als NNPS 0.371 The NNP Spirit NNP
Figure 8 : Document + Phrase , proximity + qtype , Question 21 . The highest ranking correct answer moves up to 10th place based on proximity and question type .
Rank Probability and phrase 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
0.479 Neptune NNP Beach NNP . . 0.449 February NNP 0.447 Go NNP 0.438 Space NNP 0.432 Go NNP 0.425 Alan NNP Shepard NNP 0.424 First NNP American NNP 0.421 Space NNP May NNP 0.411 First NNP American NNP woman NN 0.402 Life NNP Sciences NNP 0.386 Space NNP Shuttle NNP Discovery NNP STS 60 NN 0.382 the DT Moon NNP International NNP Space NNP Station NNP 0.370 Space NNP Research NNP A NNP Session NNP 0.367 First NNP American NNP 0.359 Sally NNP Ride NNP Sally NNP Ride NNP
Figure 9 : Document + Sentence + Phrase , proximity + qtype , Question 21 . The correct answer moves to 6th place when a sentence filter is used before extracting answer phrases .
Radev et al . 27
9 Experimental comparison
We performed several experiments at different levels of granularity to study how we can effectively improve our chances of finding good answers from the search results . As we mentioned earlier , we have several different ways of pruning the search space to get the answers at different levels : document , sentence , and phrase .
We will next compare each of these ranking schemes from searches of all three search engines .
9.1 Document level performance
Question
Search Engine Average Compared to
#>0
AlltheWeb
Compared to
AlltheWeb
Source
TREC8
AlltheWeb
NorthernLight
Google
TREC9
Google
TREC10
Google
0.836 1.050 1.336
1.553
1.339
25.61 % 59.92 %
149 ( 200 ) 163(200 ) 164 ( 200 )
603 ( 693 )
410 ( 500 )
9.40 % 10.07 %
Table 7 : The performance comparison among search engines at the document level . A score of 1 or above means that either the top ranked document is the single correct answer or that the correct hits have a sum of reciprocal ranks equal to 1 or above ( eg , 2 , 4 , 5 , 20 ) .
The performance at the document level from all three engines is summarized in Table
7 , where Average is the average of all total reciprocal scores . # > 0 is the number of times that correct answers are identified in the top 40 documents . The numbers in the parenthesis are the total number of questions for evaluation in a track . Using the results from AlltheWeb as the baseline , we can see from the TREC8 results that both
NorthernLight and Google did better overall than AlltheWeb in getting good answers , with Google completely dominant in this category . Using Google improves the chance of finding correct answers by almost 60 % . Moreover , Google returns documents containing
9.2 Sentence level performance
Radev et al . 28 correct answers for 164 questions out of 200 , a 10 % improvement over AlltheWeb . Google is the best engine as the source for potential answers in Web based question answering .
We list in Table 7 the document level performance results of Google for TREC9 and
TREC10 questions .
9.2 Sentence level performance
Table 8 summarizes the performance results for sentence ranking using results from var ious search engines . The sentence ranking results using the linear combination formula is listed in the row under Linear , and similar results using the modified Okapi formula are listed under Okapi .
Question
Source
Search Engine
Measure Average
Percentage of the upper
Compared
#>0 to bound
AlltheWeb
Percentage of the upper
Compared to bound
AlltheWeb
TREC8
AlltheWeb
Northern
Light
Google
TREC9
Google
TREC10
Google
Upper Linear Okapi
Upper Linear Okapi
Upper Linear Okapi
Upper Linear Okapi
Upper Linear Okapi
2.131 0.313 0.262
2.526 0.477 0.440
2.553 0.540 0.493
2.769 0.685 0.611
2.356 0.642 0.610
14.68 % 13.60 %
18.87 % 17.41 %
21.15 % 19.32 %
24.74 % 22.07 %
27.25 % 25.89 %
52.33 % 51.73 %
72.63 % 70.19 %
148/200 99/200 99/200
159/200 121/200 119/200
159/200 137/200 135/200
566/693 495/693 496/693
406/500 320/500 317/500
66.89 % 66.89 %
76.10 % 74.84 %
86.16 % 84.91 %
87.46 % 87.63 %
78.82 % 78.08 %
22.22 % 20.20 %
38.38 % 36.36 %
Table 8 : Sentence ranking comparison for TREC questions
In each cell of the row for Average , the three values reported are : total recipro cal value for the top 50 sentences of each question , improvement over the upper bound for a particular engine , and the improvement using one engine over the baseline engine
— AlltheWeb . The upper bound performance is obtained by calculating the total re ciprocal score for all those sentences containing the answer with the assumption that these sentences are ranked at the top of the list . For example , if there are a total of five sentences containing the answer , then the upper bound for the sentence ranking is
9.3 Phrase level performance
Radev et al . 29
( 1+1/2+1/3+1/4+1/5 ) . An ideal phrase ranking algorithm would achieve the upper bound . Giving upper bounds at each stage ( document , passage , phrase ) allows for the performance at each stage to be measured separately . A similar upper bound definition is used for phrase ranking evaluation discussed in the next subsection .
As can be seen from the TREC8 results ( shown in Table 8 ) that Linear combination sentence ranking , using sentences extracted from the top 20 search results from Google , gives the best results . Similarly , the column for #>0 reports the number of questions where the correct answers have been found in the sentences produced by the sentence ranking formula , along with the comparison with the upper bound and that of the base line engine of AlltheWeb . Again using the linear combination formula with the Google engine gives the best result : 137 out of 200 . Note that we lose some of the correct answers for 22 ( 159–137 ) questions . This is due to the fact that some of the sentences that contain the answers are not ranked at the top according to the sentence ranking formula . Our later manual evaluation of these results shows that some of these problems are caused by our simple sentence segmenter while others simply reflect the existence of spurious answers . To further test the sentence level performance on more questions , we apply the sentences ranking formulas to TREC9 and TREC10 questions as well using
Google as the backend . The results , summarized in Table 8 , show that linear sentence ranking is still better than the Okapi sentence ranking . Overall , the results for TREC9 and TREC10 are relatively better than those for TREC8 .
9.3 Phrase level performance
The phrase level performance is shown in Table 9 . D+P means phrases are generated and ranked from the original downloaded documents . D+S+P means phrases are created and ranked from the top 50 sentences after sentence ranking . Four different types of
9.3 Phrase level performance
Radev et al . 30
Question
Search Engine
Source
Upper Appearance Proximity Proximity Bound and Qtype
Order
TREC8
AlltheWeb D+P
NorthernLight D+P
Google D+P
Google D+S+P
2.176 2.652 2.698 1.941
TREC9
Google D+S+P
2.017
TREC10
Google D+S+P
1.873
0.026 0.048 0.068 0.065
0.068
0.051
0.038 0.054 0.058 0.065
0.071
0.059
0.105 0.117 0.157 0.199
0.162
0.158
Table 9 : Phrase ranking performance performance are reported . The upper bound definition is similar to the one used in sentence ranking . Appearance Order means that the phrases are ordered based on the appearance position of these phrases in the order of their original ranked documents .
Proximity utilizes only the proximity information , ie , the overlap between a phrase and a user query , to rank phrases . Proximity and qtype uses both the proximity and the signature information to do the phrase ranking , which is essentially our proposed
PPR ( probabilistic phrase ranking ) approach .
As can be seen in Table 9 , using our PPR approach ( the last column ) produced much better results than using “ Appearance Order ” and “ Proximity ” alone . This indicates the advantage of our PPR approach over simple heuristics . For TREC 8 questions , Google again is the best in the D+P ( document + phrase ) performance category among the three search engines examined . A further test using D+S+P ( document + sentence + phrase ) on Google shows that the performance is dramatically improved over the D+P approach using our PPR approach ( the last column ) , which demonstrates that sentence extraction and ranking from original retrieved documents can indeed improve the Q&A performance than using original documents directly . The final TRDR performance of
NSIR is 0199 As a comparison , the value of MRDR ( mean reciprocal document rank ) would be 0.151 which is significantly lower than those in TREC ( the top performance at TREC8 was around 40 ) There are multiple reasons for this discrepancy . First ,
Radev et al . 31
TREC8 questions were pulled directly from the 2 GB TREC corpus by rephrasing existing sentences . Second , all questions were guaranteed to have answers in the corpus . Third , the TREC corpus consists only of clean news articles while the Web contains significantly more heterogeneous texts .
We also test the Google ( D+S+P ) on TREC9 and TREC10 questions and find the re sults are comparable to what we get for TREC8 questions . These results are summarized in Table 9 as well .
10 Conclusions and future work
We presented a probabilistic method for Web based Natural Language Question Answer ing . It has been implemented in a robust system and has been tested on a realistic corpus of questions .
One thing we didn’t address in this paper is the scalability issue . Even though the current system performs relatively faster than other Web based question answering systems , the current system ’s performance for real time question answering remains to be improved . One thing that deserves further attention is that , after extensive testing , we found that many pre processing steps such as page downloading , sentence segmentation , part of speech tagging , etc . , take most of the response time . Even though , parallel processing can be used to speed up the downloading phase , the dependence of existing web search engines as answer sources is really the bottleneck of our system . We expect to improve performance significantly by using a pre pre built snapshot of a search engine ’s content .
NSIR currently takes between 5 and 30 seconds per question depending on the ( user specified ) number of documents to be downloaded from the Web and on the ( again user
Radev et al . 32 specified ) number of phrases to extract . The current version of NSIR doesn’t include query modulation ( Radev et al . , 2001b ) ( the process of converting a question to the best query for a given search engine ) .
In our future work , we plan to add query modulation to the system , fine tune various phrases of the system , and experiment with additional heuristics in answer selection . We also plan to combine the PPR approach with other efficient heuristics to further improve the final performance of our system .
11 Acknowledgments
We would like to thank Bojan Peovski and Michael Gimbel for help with data annotation , and Timothy Allison and Airong Luo for proofreading .
REFERENCES
References
Radev et al . 33
Abney , S . , Collins , M . , and Singhal , A . ( 2000 ) . Answer extraction . In the Proceedings of
ANLP 2000 .
Agichtein , E . , Lawrence , S . , and Gravano , L . ( 2001 ) . Learning search engine specific query transformations for question answering . In the Proceedings of the 10th World
Wide Web Conference ( WWW 2001 ) , Hong Kong .
Brill , E . ( 1995 ) . Transformation based error driven learning and natural language pro cessing : A case study in part of speech tagging . Computational Linguistics , 21(4):543–
566 .
Clarke , C . L . A . , Cormack , G . V . , Kisman , D . I . E . , and Lynam , T . R . ( 2000 ) . Question answering by passage selection ( multitext experiments for TREC 9 ) . In NIST Special
Publication 500 249:The Ninth Text REtrieval Conference ( TREC 9 ) , pages 673–683 .
Cohen , W . W . ( 1996 ) . Learning trees and rules with set valued features . In Proceedings of the Thirteenth National Conference on Artificial Intelligence and the Eighth Innovative
Applications of Artificial Intelligence Conference , pages 709–716 , Menlo Park . AAAI
Press / MIT Press .
Glover , E . J . , Flake , G . W . , Lawrence , S . , Birmingham , W . P . , Kruger , A . , Giles , C . L . , and Pennock , D . M . ( 2001 ) . Improving category specific web search by learning query modifications . In The Proceedings of the Symposium on Applications and the Internet ,
SAINT 2001 , San Diego , California .
Harabagiu , S . , Moldovan , D . , Pasca , M . , Mihalcea , R . , Surdeanu , M . , Bunescu , R . , Gˆırju ,
R . , Rus , V . , and Morarescu , P . ( 2000 ) . Falcon : Boosting knowledge for answer engines .
REFERENCES
Radev et al . 34
In NIST Special Publication 500 249:The Ninth Text REtrieval Conference ( TREC 9 ) , pages 479–488 .
Hovy , E . , Gerber , L . , Hermjakob , U . , Junk , M . , and Lin , C Y ( 2000 ) . Question answer ing in webclopedia .
In NIST Special Publication 500 249:The Ninth Text REtrieval
Conference ( TREC 9 ) , pages 655–664 .
Katz , B . ( 1997 ) . From sentence processing to information access on the World Wide
Web . In Natural Language Processing for the World Wide Web : Papers from the 1997
AAAI Spring Symposium , pages 77–94 .
Kupiec , J . ( 2001 ) . Murax : A robust linguistic approach for question answering using an on line encyclopedia . In the Proceedings of the 16th SIGIR Conference , Pittsburgh ,
PA .
Kwok , C . , Etzioni , O . , and Weld , D . S . ( 2001 ) . Scaling question answering to the web . In the Proceedings of the 10th World Wide Web Conference ( WWW 2001 ) , Hong Kong .
Mikheev , A . ( 2000 ) . Document centered approach to text normalization . In Proceedings of SIGIR 2000 , pages 136–143 .
Prager , J . , Radev , D . , Brown , E . , and Coden , A . ( 1999 ) . The use of predictive annotation for question answering in TREC8 . In NIST Special Publication 500 246:The Eighth
Text REtrieval Conference ( TREC 8 ) , pages 399–411 .
Radev , D . R . , Libner , K . , and Fan , W . ( 2001a ) . Getting answers to natural language queries on the web . Journal of the American Society for Information Science and
Technology ( JASIST ) .
Radev , D . R . , Prager , J . , and Samn , V . ( 2000 ) . Ranking suspected answers to natural
REFERENCES
Radev et al . 35 language questions using predictive annotation . In the Proceedings of the 6th Confer ence on Applied Natural Language Processing ( ANLP ) , Seattle , Washington .
Radev , D . R . , Qi , H . , Zheng , Z . , Blair Goldensohn , S . , Zhang , Z . , Fan , W . , and Prager , J .
( 2001b ) . Mining the web for answers to natural language questions . In the Proceedings of ACM CIKM 2001 : Tenth International Conference on Information and Knowledge
Management , Atlanta , GA .
Robertson , S . E . , Walker , S . , Jones , S . , Hancock Beaulieu , M . M . , and Gatford , M .
( 1996 ) . Okapi at TREC 4 . In Harman , D . K . , editor , Proceedings of the Fourth Text
Retrieval Conference , pages 73–97 . NIST Special Publication 500 236 .
Soubbotin , M . M . ( 2002 ) . Patterns of potential answer expressions as clues to the right answers . In NIST Special Publication 500 250 : The Tenthth Text Retrieval Conference
TREC 10 , pages 293–302 , Gaithersburg , MD .
Voorhees , E . ( 2001 ) . The TREC 9 question answering track evaluation . In NIST Special
Publication 500 249 : The Ninth Text Retrieval Conference TREC 9 , Gaithersburg ,
MD .
Voorhees , E . and Tice , D . ( 2000 ) . The TREC 8 question answering track evaluation . In
Text Retrieval Conference TREC 8 , Gaithersburg , MD .
