Spatio Temporal Outlier Detection in Precipitation Data
Elizabeth Wu
School of Information
Technologies
The University of Sydney
Sydney , Australia ewu1@itusydeduau
School of Information
Technologies
Wei Liu
The University of Sydney
Sydney , Australia weiliu@itusydeduau
Sanjay Chawla
School of Information
Technologies
The University of Sydney
Sydney , Australia chawla@itusydeduau
ABSTRACT The detection of outliers from spatio temporal data is an important task due to the increasing amount of spatio temporal data available , and the need to understand and interpret it . Due to the limitations of previous data mining techniques , new techniques to detect spatio temporal outliers need to be developed . In this paper , we propose a spatio temporal outlier detection algorithm called Outstretch . To apply this algorithm , we first need to discover the top k outliers ( high discrepancy regions ) for each time period . For this task , we have extended the Exact Grid and Approx Grid algorithms developed by Agarwal et al . [ 2 ] to develop ExactGrid Top k and Approx Grid Top k . One advantage of these algorithms is that they use the Kulldorff spatial scan statistic , which is able to calculate a valid discrepancy value that allows the discovery of all the outliers , unaffected by neighbouring regions that may contain missing values . After generating the sequences , we show one way they can be interpreted , by comparing them to the phases of the El Ni˜no Southern Oscilliation ( ENSO ) weather phenomenon to provide a meaningful analysis of the results .
Categories and Subject Descriptors H28 [ Database Management ] : Database Applications Data Mining
General Terms Algorithms
Keywords Spatio temporal data mining
1 .
INTRODUCTION
Spatio temporal data mining is the discovery of interesting spatial patterns from data over time using data mining techniques on spatially and temporally distributed data . One such pattern is a spatio temporal outlier .
A spatio temporal outlier is a spatio temporal object whose thematic ( non spatial and non temporal ) attributes are significantly different from those of other objects in its spatial and temporal neighbourhoods . An extended discussion of the definition of a spatio temporal outlier is provided in Section 2 .
The interest in utilising spatio temporal data mining techniques for the discovery of outliers in space and time has been prompted by the increasing amount of spatio temporal data available and the need to interpret it effectively [ 6 ] . Another driving force behind the increasing popularity of data mining tools is the inadequacies of existing methods used for outlier detection . Using classical data mining techniques has limitations in the discovery of outliers [ 10 ] . Such algorithms are often restrictive as outliers do not fit to a specified pattern , and determining these patterns is often more computationally challenging than finding the outliers themselves .
The ability to discover an increased number of patterns more accurately could enhance our understanding of many different application areas . One such application area is in the field of Hydrology , where knowledge about the behaviour of unusual precipitation could allow governments and individuals to better prepare for extreme events such as floods . Performing data mining on geographic data forms one part of the process of Geographic Knowledge Discovery ( GKD ) , which is ‘the process of extracting information and knowledge from massive geo referenced databases’ [ 10 ] . One part of GKD is geographic data mining , which is the use of computational techniques and tools to discover patterns that are distributed over geographic space and time [ 11 ] , while taking into consideration data features that are specific to geographic domains [ 14 ] . In this study , we conduct our experiments on South American precipitation data provided by the NOAA [ 9 ] , and as such , we also need to consider the geographical features of the data .
Following this , we compare our results to the El Ni˜no Southern Oscillation ( ENSO ) using the Southern Oscillation Index ( SOI ) , since ENSO is said to have a teleconnection , or relationship , with precipitation . ENSO consists of two phases El Ni˜no and La Ni˜na . The SOI is a measure of the strength and phase of an El Ni˜no or La Ni˜na event . A prolonged negative SOI is associated with an El Ni˜no event , while a positive SOI is associated with a La Ni˜na event . We obtained the values for the SOI from the National Oceanic and Atmospheric Administration ( NOAA ) Climate Prediction Center [ 12 ] . The calculation of the SOI by the NOAA is provided in greater detail in [ 17 ] . In South America , El Ni˜no is associated with increased precipitation over parts of South America , so understanding the relationship between extreme precipitation events and ENSO is an important task . 1.1 Contributions
In this paper , we make the following contributions :
• We modify the Exact Grid algorithm to create the Exact Grid Top k algorithm from [ 1 ] which finds the top k highest discrepancy regions , rather than only the single highest discrepancy region .
• We provide an approximate algorithm known as Approx
Grid Top k , an extension of the Approx Grid algorithm from [ 1 ] which is able to approximate the discrepancy of outliers , and is more computationally efficient than Exact Grid .
• We extend the above algorithm to develop Outstretch to find and store sequences of high discrepancy regions over time into a tree structure .
• We provide the RecurseNodes algorithm to allow the extraction of all possible sequences and sub sequences from the Outstretch tree structure .
• We apply Outstretch to South American precipitation data , to show that it is capable of finding outlier sequences from the data set .
• We illustrate one way the data could be analysed by comparing the discrepancy of regions to the SOI .
1.2 Paper Organisation
This paper is organised as follows . Section 2 defines and describes the properties of a spatio temporal outlier . Section 3 provides an overview of related work . Section 4 describes our method of discovering spatio temporal outliers . Section 5 outline the experimental setup and the results we achieved . A discussion of our technique and results , followed by a conclusion and suggestions for further research is given in Section 6 .
2 . SPATIO TEMPORAL OUTLIERS
An outlier can constitute different things in different application settings , and as a result the precise definition of an outlier is difficult to capture [ 13 ] . Spatio temporal outlier detection is an extension of spatial outlier detection . Spatiotemporal outlier detection aims to find spatial outliers also , but instead of just looking at a single snap shot in time , it considers the behaviour of these outliers over several time periods . Cheng and Li [ 5 ] define a spatio temporal outlier to be a “ spatial temporal object whose thematic attribute values are significantly different from those of other spatially and temporally referenced objects in its spatial or/and temporal neighbourhoods ” . Birant and Kut [ 3 ] define a spatiotemporal outlier as “ an object whose non spatial attribute value is significantly different from those of other objects in its spatial and temporal neighborhood ” . From these definitions , Ng [ 13 ] notes two possible types of outliers extreme and non extreme . We focus on extreme value outliers . If the values under examination follow a normal distribution for example , then we would only be interested in the extreme values at the tail of the distribution .
Figure 1 : A moving region
Since a spatio temporal outlier is a spatio temporal object , we also need to provide a definition of a spatio temporal object . Theodoridis et al . [ 15 ] define a spatio temporal object as a time evolving spatial object whose evolution or ‘history’ is represented by a set of instances ( o id , si , ti ) , where the spacestamp si , is the location of object o id at timestamp ti . According to this definition , a two dimensional point or region is represented by a line or solid respectively in three dimensional space . An example of a moving region is shown in Figure 1 .
3 . RELATED WORK
In previous work , Birant and Kut [ 3 ] define two spatial objects ( S objects ) as temporal neighbors if the “ values of these objects are observed in consecutive time units such as consecutive days in the same year or in the same day in consecutive years ” . As we follow the definition of a spatio temporal object provided by Theodoridis et al . [ 15 ] , we consider that a spatio temporal outlier may exist over more than one time period , while Birant and Kut regard a spatio temporal outlier to be a spatial outlier from a single time period that is different from its immediate temporal neighbours . For example , in our work if there is higher than average precipitation in Peru over the years 1998 2002 , then the solid in three dimensional space is an outlier . In experiments conducted by Birant and Kut [ 3 ] , they discover a region in the Mediterranean Sea that is a spatial outlier in 1998 , where the years immediately preceeding and following it , 1997 and 1999 , contain different values for the region . While this is also considered to be an spatio temporal outlier by our definition , we are also able to discover spatio temporal outliers that persist over several time periods and which may move or evolve in shape and size .
One well known method for determining the discrepancy of spatial outliers is the spatial scan statistic , first introduced in [ 8 ] . This statistic has been applied by [ 1 ] to spatial grid data sets using an algorithm called Exact Grid . Their algorithm is provided in more detail in Section 31 In this paper , we extend Exact Grid to find the top k outlier regions , rather than only finding the single ‘highest discrepancy’ region as they do .
Previous work using the spatial scan statistic to detect space time clusters in point data has been done in [ 7 ] . This is done using a pyramid with square cross sections at each time interval , that can either expand or contract from the start to finish of the time interval . They generate candi date clusters in a biased random fashion using a randomised search algorithm . However , their algorithm is limited to point data , and our application domain consists of spatial grid data . Also rather than searching for clusters , we aim to discover outliers .
We have adopted the concept of using rectangular crosssections at particular time periods from [ 7 ] , however the methods we have used to generate the initial rectangles , and also the subsequent rectangles are different . These changes allow us to accommodate the discovery of outliers from data located in a spatial grid , and to find all sequences of square or rectangular outliers that are stationary , move and/or change shape . 3.1 Spatial Scan Statistics
The Exact Grid algorithm finds every possible different rectangular region in the data using four sweep lines to bound them . Once found , a well known spatial scan statistic known as Kulldorff ’s scan statistic is applied to give each rectangular region a discrepancy value that indicates how different it is from the rest of the dataset [ 2 ] .
One of the most notable advantages of using the spatial scan statistic is that its ability to detect outliers is unaffected by missing data regions . This is particularly important in geographical data , which often contains a large number of missing values for regions and time periods .
The Kulldorff spatial scan statistic uses two values : a measurement and a baseline . The measurement is the number of incidences of an event , and the baseline is the total population at risk . For example , when finding disease clusters , the measurement m would be the number of cases of the disease and the baseline b would be the population at risk of catching the disease [ 1 ] .
To calculate the Kulldorff scan statistic , d(m , b , R ) for a region R with measurement value m and baseline value b , we first need to find the measurement M and baseline B values for the whole dataset , where M = Σp∈U m(p ) and B = Σp∈U b(p ) , where U is a box enclosing the entire dataset . We then use these global values to find m and b for the lob(p ) B . Once these values have been found , we then perform a simple substitution into the Kulldorff scan statistic , which is given by d(mR , bR ) = mRlog( mR bR and 0 otherwise . cal region R , by letting mR = Σp∈R m(p ) M and bR = Σp∈R
) + ( 1 − mR)log( 1−mR 1−bR
) if mR > bR
Figure 2 : An example grid for calculating Kulldorff ’s scan statistic
3 . Extract all possible sequences from the tree using the
RecurseNodes algorithm .
The resulting output from the above steps is a list of all sequences and subsequences of outliers found in the dataset . Each of these steps is described in the following subsections . 4.1 Exact Grid Top k
The Exact Grid algorithm was proposed by Agarwal et . al [ 1 ] . It uses 4 sweep lines to find all possible different shaped regions that are located over a grid space of size g × g . It takes O(g4 ) time to run the algorithm , since there are O(g4 ) rectangles to consider . Running time is minimised by maintaining a count of the m and b values for each row between the left and right scan lines . By doing this they are able to calculate the Kulldorff discrepancy value in constant time . Our extension to the Exact Grid algorithm , called Exact Grid Top k , finds the top k outliers for each time period .
Since the Exact Grid algorithm only finds the single highest discrepancy outlier , it did not have to take into account overlapping regions , as any region which had a lower discrepancy was simply replaced . When adding regions to the list of top k algorithms however , we need to consider the case where there are overlapping regions , or else we could end up with a list of top k regions that lie over the same area . This is illustrated in figure 3 , where the green region is overlapping the blue region .
An example of the application of the Kulldorff scan statistic is provided in Figure 2 . In this example , the maximum discrepancy of the shaded area is calculated by finding M = 6 , B = 16 , mR = 4 16 . Substituting this into the formula gives a value of d(mR , bR ) = 03836
6 and bR = 4
4 . OUR APPROACH
This section describes our approach taken to discover seIt consists of three quences of spatial outliers over time . main steps :
1 . Find the top k outliers for each time period , using the Exact Grid Top k or Approx Grid Top k algorithms .
2 . Using these top k for each time period , find all the sequences of outliers over time and store into a tree , using the Outstretch algorithm .
Figure 3 : The overlap problem
The different types of overlap that we considered are shown in Figure 4 .
However , simply eliminating the highest region is not always the best solution . Particularly if the regions only overlap slightly , as this could eliminate some potentially interesting outliers . Therefore , we have introduced a threshold our algorithm , as it would be more difficult to search irregular shapes for overlaps .
( a )
( b )
( c )
( d )
( e )
( f )
Figure 6 : The union solution to the overlap problem
( g )
( h )
( i )
Figure 4 : All possible overlap types between two regions parameter , so we can specify the maximum amount of allowable overlap between regions .
Figure 5 : The chain overlap problem
Another issue that had to be dealt with is the scenario where there is a chain of overlaps , as shown in Figure 5 . In this scenario , the discrepancy of the blue region is less than that of the green , and the discrepancy of the green is less than the yellow ( ie . d(blue ) < d(green ) < d(yellow) ) . If we are eliminating regions based on the highest discrepancy , and we find the blue region first and add it to our list of top k outliers , when we find the green region , it will replace the blue region in the top k outlier list . Then , when we find the yellow region , it will replace the green region in the list of top k outliers . This creates a chain effect , which is problematic , as the blue region may be quite different or far from the yellow region and yet has been eliminated .
One option that was considered was to form a union between the two regions , and then if the union was of higher discrepancy , discard the other two outliers and store the union in the list of top k . This concept is shown in Figure 6 . However , this would have decreased the efficiency of
Instead , to deal with the overlap problem , we chose to allow some overlap between regions . The amount of overlap is specified as a percentage , and the algorithm allows the user to vary this to the most appropriate amount for their particular application domain . The procedure is described in the following paragraphs .
The Exact Grid Top k algorithm finds the top k outliers for each time period by keeping track of the highest discrepancy regions as they are found . As it iterates through all the region shapes , it may find a new region that has a discrepancy value higher than the lowest discrepancy value ( kthvalue ) of the top k regions so far . We then need to determine if this region should be added to the list of top k regions . To do this we need to determine the amount of overlap that the new region has with regions already in the top k .
For any top k region that this new candidate region overlaps with , we first calculate the percentage overlap between the two regions . If it overlaps more than the maximum percentage specified by the user , such as 10 % , then we compare the discrepancy values of the two regions . If the new region has a higher discrepancy value , it will replace the other region , otherwise the new region will not be added . In the case where the percentage overlap is below the specified maximum allowable overlap , the region will added to the list of top k , provided that it does not violate the overlap condition with any other top k region . The Exact Grid Top k algorithm is shown in Algorithm 1 .
Exact Grid Top k computes the overlapping region in O(n ) using the subroutine in Algorithm 2 , since it has to check the new potential top k region against all previous regions for overlap . Because of this , the total time required by the algorithm is O(n5 ) .
The Update Top k subroutine calls the get overlap method , which calculates the percentage overlap between region c , the current region under examination , and each of the regions topk in the list of top k regions . If the overlap is less than the maximum overlap percentage , the region will be added to topk and will bump the kth highest discrepancy region off the list . Otherwise only the highest discrepancy region will be kept in topk . 4.2 Approx Grid Top k
Instead of using two horizontal sweep lines in addition to
Algorithm 1 Exact Grid Top k Algorithm Input : g ∗ g grid with values m(i , j ) , b(i . , j ) , max overlap Output : Top k highest discrepancy regions topk —————————————————————————–
Algorithm 2 Update Top k Subroutine Input : c , topk , max overlap Output : Top k highest discrepancy regions topk —————————————————————————–
Initialize m[y ] = m(i , y ) , b[y ] = b(i , y ) for all y for y = 2 to g do m[y]+ = m[y − 1 ] , b[y]+ = b[y − 1 ] m+ = m(j , y ) , b+ = b(j , y ) , m[y]+ = m , b[y]+ = b end for // Bottom Sweep Line for k = 1 to g do
// Top Sweep Line for l = k to g do if k = 1 then m = m[k],b = b[k ] end for // Right Sweep Line for j = i+1 TO g do m = 0 , b = 0 for y = 1 to g do
1 : // Left Sweep Line 2 : for i = 1 to g do 3 : 4 : 5 : 6 : 7 : 8 : 9 : 10 : 11 : 12 : 13 : 14 : 15 : 16 : 17 : 18 : 19 : 20 : 21 : 22 : 23 : 24 : 25 : 26 : 27 : 28 : 29 : 30 : 31 : end for end if end for end for end for else m = m[l ] − m[k − 1 ] , b = b[l ] − b[k − 1 ] end if if ( d(m , b ) > topk(k ) ) then c=the current region , topk=update topk(c,topk ) the two vertical sweep lines to determine the testing area , our Approx Grid Top k algorithm follows Agarwal ’s [ 1 ] method of approximation . That is , all the points inside the grids project onto the right sweep line , using the following linear function :
L(mR , bR ) = cos(sin(π2/8))mR − sin(sin(π2/8))bR where R is the right sweep line . After this , we find the interval r on the right sweep line which maximises the linear function .
As shown in Algorithm 3 , the main difference between Exact Grid Top k and Approx Grid Top k is their approach to creating the test rectangles from the grid . The two algorithms both used two vertical lines to determine the left and right edges of the test area . However , while ExactGrid Top k uses two horizontal lines ( line 15 and line 17 in Algorithm 4.1 ) to form the bottom and top edge , ApproxGrid Top k projects all points inside the two vertical lines onto the right vertical sweep line ( line 6 to line 9 in Algorithm 3 ) . By doing this , Approx Grid Top k reduces the maximising problem down to one dimension . Thus , instead of two sweep lines moving from the bottom to the top , it simply finds the preceding interval r which maximises the above function ( line 11 in Algorithm 3 ) . Then the ends of this interval are used as the top and bottom edges of the ov=get overlap(c , tk ) if ov < max overlap then else add c to topk
1 : for all tk = topk do 2 : 3 : 4 : 5 : 6 : 7 : 8 : 9 : end if 10 : end for end if if dval(c)>dval(tk ) then replace tk with c in topk test rectangle ( line 12 in in Algorithm 3 ) .
Algorithm 3 Approx Grid Top k Algorithm Input : g × g grid with values m(i , j ) , b(i , j ) , max overlap Output : Top k highest discrepancy regions topk —————————————————————————–
Initialize m[y ] = m(i , y ) , b[y ] = b(i , y ) for all y // Right Sweep Line for j = i+1 TO g do for y = 1 to g do m[y ] = m[y ] + m(j , y ) , b[y ] = b[y ] + b(i , y ) end for // The interval that maximizes the linear function r = arg maxr∈R L(r ) , ( yb , yt ) = r if yb = 1 then m = m[1],b = b[1 ] m = m[yt ] − m[yb − 1 ] , b = b[yt ] − b[yb − 1 ] end if if ( d(m , b ) > topk(k ) ) then c=the current region , topk=update topk(c,topk )
1 : // Left Sweep Line 2 : for i = 1 to g do 3 : 4 : 5 : 6 : 7 : 8 : 9 : 10 : 11 : 12 : 13 : 14 : 15 : 16 : 17 : 18 : 19 : 20 : 21 : 22 : 23 : 24 : end for end if end for else
The runtime of Approx Grid Top k is O(n4 ) since the number of iterations required is g3k . This includes g iterations for the left sweep line , g iterations for the right sweep line , g iterations for finding the maximized interval and k iterations for the update topk routine . 4.3 The Outstretch Algorithm
To discover sequences of outliers , we developed Outstretch , which is detailed in Algorithm 4 . Outstretch takes as input the top k values for each year period under analysis , and a variable r , the region stretch , which is the number of grids to ‘stretch’ by on each side of an outlier . This is shown in Figure 7 .
Figure 7 : Region Stretch Size r
Oustretch then examines the top k values of the second to last available year periods . For all the years , each of the outliers from the current year are examined to see if they are framed by any of the stretched regions from the previous year , using the function is framed . If they are , the variable ‘framed’ will return true , and the item will be added to the end of the previous years child list . In this way , the Outstretch algorithm stores all possible sequences over all years into a tree structure , outlier tree .
An example of a possible tree structure is shown in Figure 8 . The first node is the empty set . The following nodes are each of the outliers found at different time periods . In the figure , each is labeled with 2 numbers . The first indicates the time period from which the outlier comes from , and the second is an identification number . The Outstretch algorithm stores all single top k outliers from each time period , yrly topkvals , as rows in a table , where each of these rows contains the outliers children . An example of this table , that corresponds with the example tree in Figure 8 is given in Figure 9 .
Outlier
( 1,1 ) ( 1,2 ) ( 1,3 ) ( 2,1 ) ( 2,2 ) ( 2,3 ) ( 2,4 ) ( 2,5 ) ( 3,1 ) ( 3,2 ) ( 3,3 ) ( 3,4 ) ( 3,5 ) ( 3,6 ) ( 3,7 )
Number of Child Children
List ( 2,1),(2,2 ) ( 2,3),(2,4 ) ( 2,5 ) ( 3,1),(3,2 )
( 3,3),(3,4 ) ( 3,5 ) ( 3,6),(3,7 )
2 2 1 2 0 2 1 2 0 0 0 0 0 0 0
Figure 9 : The outlier table corresponding to the outlier tree shown in Figure 8 these outliers sequences are discovered they are stored into a tree .
Algorithm 4 Outstretch Algorithm Input : yrly topkvals , region stretch ( r ) , years ( y ) Output : outlier tree ( tr ) —————————————————————————– c = yrly topkvals(yr ) for all c do
1 : for yr = 2 to y do 2 : 3 : 4 : 5 : 6 : 7 : 8 : 9 : 10 : 11 : 12 : end for end if end for end for p = yrly topkvals(yr 1 ) for all p do framed = is framed(c,p,r ) if framed = true then tr(p,len(tr(p))+1 ) = c
Figure 8 : An example outlier tree built by the Outstretch algorithm
The example shown in Figure 10 shows how a sequence of outliers over three time periods can be collected . In each diagram , the outlier is represented by the solid blue region , while the stretch region is represented by the shaded blue region . In this example , the stretch size r equals 1 . To begin , the outlier from the first time period is found . Then the region is extended by the stretch size on all sides , and is searched for outliers that are enclosed by it in the following year . If one is found that lies completely within the stretch region , a new stretch region is generated around the new outlier . This new stretch region is then searched for outliers in the third time period . This process continues until all time periods have been examined or there are no outliers that fall completely within the stretch region . As each of
The Outstretch algorithm runs in O(n3 ) , since for each of the time periods available it iterates through all the top k outliers for that period , and compares them against all the outliers from the previous time period . 4.4 The RecurseNodes Algorithm
From the tree structure , all possible sequences can be extracted using a simple recursive algorithm , described in Algorithm 5 . RecurseNodes takes 4 input variables . The first , outlier tree , contains a list of each node and its children . The second , sequence , contains the sequence nodes so far , not including the child value . The third , child list is a list of all the children of the last sequence item . Finally , sequence list , is a list of all the sequences that have been generated from the outlier tree at any point in time . The RecurseNodes algorithm has a running time of O(ny ) where n is the total number of length 1 outliers , and y is the number of years of data and maximum possible length of an outlier sequence .
( a ) Outlier at t=1
( b ) Outlier at t=2
( c ) Outlier at t=3
Figure 10 : Example Outstretch Algorithm Sequence
Algorithm 5 RecurseNodes Algorithm Inputs : outlier tree(tr ) , sequence(seq ) , child list(ch list ) , sequence list(seq list ) Outputs : sequence list ( seq list ) —————————————————————————–
1 : for all c in ch list do new seq = seq + c 2 : // append new seq to the end of seq list : 3 : seq list(len + 1 ) = new seq 4 : //get the grandchildren : 5 : 6 : gchildr = tr(c ) 7 : if size(gchild ) > 0 then 8 : 9 : 10 : end if 11 : end for seq list = RecurseNodes(tr,new seq,gchildr,seq list )
5 . EXPERIMENTS
5.1 Data
Some features of geographical data need to be considered when performing geographical data mining . Traditional data mining algorithms often assume characteristics of the data that are inconsistent with those of geographical data [ 4 ] . For example , often the data is assumed to be independent and/or identically distributed over space . These assumptions would violate Tobler ’s first law of Geography , which states that ‘everything is related to everything else , but near things are more related than distant things’ [ 16 ] .
Geographical data dependencies and features should be considered when performing data mining on such data . Some additional data features that are specific to geographical data have been described in [ 11 ] and [ 14 ] .
For the purpose of our experiments , we have removed some of the temporal dependencies in the data through deseasonalisation . By removing the seasonal effect of precipi tation and instead considering how much each value deviates from the value expected at that particular time of the year , we are able to discover more interesting patterns .
Secondly , we have had to consider the effects of missing data . In our dataset , there are a large number of missing values , mostly in regions that do not lie over land masses . One of the advantages of using the spatial scan statistic is that it is able to discover significant outliers despite their close proximity to regions that contain missing data .
For the Exact Grid algorithm , one approach of dealing with missing values was to set missing value as the average value in the dataset . That would mean that the measurement m for the grid cell would be 0 , while the baseline b for the grid cell would become 1 . This large baseline measure has an impact on the data , and causes larger grids to be selected as high discrepancy regions due to the larger baseline population considered to be at risk . Instead , the aproach we have adopted for each missing grid , is to set the baseline b to 0 , and the measure m to 0 .
The data used in our experiments is the South American precipitation data set obtained from the NOAA [ 9 ] . It is provided in a geoscience format , known as NetCDF . A description of the data is provided in both [ 9 ] and [ 17 ] . The data are presented in a grid from latitude 60◦S to 15◦N and longitude 85◦W to 35◦W . It contains daily precipitation values from around 7900 stations , whose values are averaged for each grid between 1940 2006 .
Before we apply our algorithms to the data however , it must be pre processed . Raw precipitation values may not provide interesting patterns alone , as it is usually known which reagions are likely to have more rainfall . A more interesting statistic is the deviation from the normal amount of precipitation . Data in this form is deseasonalised , and the process is described in [ 17 ] .
Once we have completed the deseasonalisation procedure , we take the average of the deseasonalised values over each period , for each grid , before running either the Exact Grid Top k or Approx Grid Top k algorithm .
5.2 Experimental Setup
The effectiveness of the Outstretch algorithm is evaluated by counting the total number of spatio temporal outliers in the outlier tree , and the length of these outliers .
For this experiment , we set the input variables as shown in Figure 11 .
The first variable , Allowable Overlap is the maximum allowable size of two overlapping regions . This means that if two regions are overlapping by less than 10 % , we will not replace the one with the lower discrepancy value with the other as normal . This enables us to find outlier regions that are located nearby but represent different regions .
The second , Number of top k , is the maximum number of high discrepancy regions that are to be found by the ExactGrid Top k and Approx Grid Top k algorithms . In this case , we chose to find a maximum of 5 high discrepancy regions .
The third , Extreme Rainfall , sets the threshold percentage that the deseasonalised average rainfall must exceed to be considered extreme . In our experiments we chose the 90th percentile of values . This means that in South America , given deseasonalised average rainfall for all regions , we consider only those regions whose rainfall was significantly different from the mean of all regions by more than 90 % .
Year 1995 1996 1997 1998 1999 2000 2001 2002 2003 2004
Exact Grid Top k Approx Grid Top k
5 5 5 5 5 5 5 5 5 5
5 4 4 4 3 3 2 3 2 3
Figure 13 : Number of Top k found for each year
The final variable , Region Stretch , describes the number of grids to extend beyond the outlier to check for outliers that fall completely inside it in the subsequent region , as shown in Figure 7 . In these experiments , we stretch each outlier region by 4 grid cells on each of its sides to find outliers in subsequent time periods , but this can be altered depending on the size of the area the user wishes to search .
Variable Allowable Overlap Number of top k Extreme Rainfall Region Stretch
Value 10 % 5 90 % 4
Figure 11 : Variable Setup
The following table describes the subset of South American precipitation data that we use in our experiments from [ 9 ] . A description of the subset of data we used is provided in Figure 12 .
Variable Number of Year Periods First Year Last Year Grid Size Num Latitudes Num Longitudes Total Grids
Value 10 1995 2004 25◦x25◦ 31 23 713
Figure 12 : Experiment 1 Data Setup
Figure 14 : Length and Number of Outliers Found
5.3 Experimental Results
The application of our algorithm to South American precipitation data involved three steps . First , each of the top k highest discrepancy regions are found for each time period . Second , a tree is built to store all possible sequences . Third , and finally , all possible sequences and sub sequences are extracted from the tree .
The first stage of our algorithm involved finding the top k outliers at each time step using the Exact Grid Top k and Approx Grid Top k algorithms . The results of this are shown in Figure 13 , which show that when we set k = 5 , we were able to find 5 top outlier regions for all years using the Exact Grid Top k algorithm and usually less than 5 top outlier regions using the Approx Grid Top k algorithm .
From the second and third stages of our algorithm , we found a total of 490 outlier sequences over 10 years when using the Exact Grid Top k algorithm and 326 outlier sequences for the Approx Grid Top k algorithm . These sequences ranged from a minimum length of 1 to a maximum length of 10 , since there are 10 year periods in our data subset . The results of this are summarised in Figure 14 .
Figure 15 and 16 show the mean discrepancy for the outlier sequences generated by the Exact Grid Top k and the Approx Grid Top k algorithms respectively . The discrepancy is plotted at the middle year of the sequence . For example , if we have a sequence from 1999 to 2001 , the mean discrepancy for the points in the sequence will be plotted on the graphs as a point for the year 2000 . Both graphs also show the mean SOI for each year . From these graphs we can see that during years where the SOI is negative , there is a lower discrepancy value , while positive SOI years coincide with a higher discrepancy value . This means that during El Ni˜no years , which are identified by prolonged negative SOI values , the outliers are not as different , as indicated by their lower discrepancy value , from surrounding regions as in non El Ni˜no years .
To evaluate the performance of Approx Grid Top k and Exact Grid Top k , we ran both algorithms over 1995 to 2004 . This is shown in Figure 17 , where we can see the Approx Grid Top k algorithm is much faster .
6 . DISCUSSION AND CONCLUSION
In this paper , we have introduced the Exact Grid Top k and the Approx Grid Top k algorithms to find the topk high discrepancy regions from a spatial grid . We have shown that Approx Grid Top k is able to find a similar number of outliers from each time period , significantly faster than the Exact Grid Top k algorithm by approximating the discrepancy of the outlier regions . We have also extended this algorithm to include the ability to discover spatio temporal outlier sequences that change location , shape and size , using our algorithm Outstretch , which stores the found sequences into a tree structure . And finally , to extract all possible sequences from the tree , we have provided the RecurseNodes algorithm .
Our results demonstrate the successful application of our algorithm to precipitation data . We have shown that our
Exact Grid Top k Approx Grid Top k
229s
35s
Figure 17 : Time taken to discover the Top k regions over 10 years
Conference on Information Technology Interfaces , pages 179–184 , 2006 .
[ 4 ] S . Chawla , S . Shekhar , W . Wu , and U . Ozesmi .
Modelling spatial dependencies for mining geospatial data : An introduction . Geographic Data Mining and Knowledge Discovery , Taylor & Francis , New York , NY , pages 131–159 , 2001 .
[ 5 ] T . Cheng and Z . Li . A multiscale approach for spatio temporal outlier detection . Transactions in GIS , 10(2):253–263 , 2006 .
[ 6 ] J . Han , R . B . Altman , V . Kumar , H . Mannila , and
D . Pregibon . Emerging scientific applications in data mining . Communications of the ACM , 45(8):54–58 , 2002 .
[ 7 ] V . Iyengar . On detecting space time clusters . In
Proceedings of the tenth ACM SIGKDD international conference on Knowledge discovery and data mining , pages 587–592 , Seattle , WA , 2004 . ACM , New York , NY .
[ 8 ] M . Kulldorff . A spatial scan statistic . Comm . in Stat . :
Th . and Meth . , 26:1481–1496 , 1997 .
[ 9 ] B . Liebmann and D . Allured . Daily precipitation grids for south america . Bull . Amer . Meteor . Soc . , 86:1567–1570 , 2005 .
[ 10 ] H . J . Miller . Geographic data mining and knowledge discovery . Wilson and A . S . Fotheringham ( eds . ) Handbook of Geographic Information Science , 2007 .
[ 11 ] H . J . Miller and J . Han . Geographic data mining and knowledge discovery : An overview in Geographic Data Mining and Knowledge Discovery . Taylor & Francis , New York , NY , 2001 .
[ 12 ] National Oceanic and Atmospheric Administration
( NOAA ) Climate Prediction Center . Monthly Atmospheric & SST Indices wwwcpcnoaagov/ data/indices [ accessed : February 2 , 2008 ] .
[ 13 ] R . T . Ng . Detecting outliers from large datasets in Geographic Data Mining and Knowledge Discovery . Taylor & Francis , New York , NY , 2001 .
[ 14 ] S . Openshaw . Geographical data mining : key design issues . In Proceedings of GeoComputation ’99 , 1999 .
[ 15 ] Y . Theodoridis , J . R . O . Silva , and M . A . Nascimento .
On the generation of spatiotemporal datasets . In Proceedings of the 6th International Symposium on Advances in Spatial Databases , pages 147 – 164 . Springer Verlag , 1999 .
[ 16 ] W . R . Tobler . A computer model simulation of urban growth in the Detroit region . Economic Geography , 46(2):234–240 , 1970 .
[ 17 ] E . Wu and S . Chawla . Spatio Temporal Analysis of the relationship between South American Precipitation Extremes and the El Nino Southern Oscillation . In Proceedings of the 2007 International Workshop on Spatial and Spatio temporal Data Mining . IEEE , 2007 .
Figure 15 : Mean discrepancy of Exact Grid Top k sequences and the mean SOI
Figure 16 : Mean discrepancy of Approx Grid Top k sequences and the mean SOI algorithm is capable of finding spatial outlier sequences and subsequences that occur over several time periods in the South American precipitation data . In addition , we have shown one possible way of interpreting the results by comparing the behaviour of the outlier regions to the El Ni˜no and La Ni˜na phases of the ENSO phenomenon .
Future work in this area could use a similar approach to that taken in this paper , but instead apply it to point data . In [ 1 ] an algorithm known as Exact is also provided to discover high discrepancy regions in point data .
7 . REFERENCES [ 1 ] D . Agarwal , A . McGregor , J . M . Phillips ,
S . Venkatasubramanian , and Z . Zhu . Spatial scan statistics : Approximations and performance study . In KDD ’06 : Proceedings of the 12th ACM SIGKDD international conference on Knowledge discovery and data mining , pages 24–33 , 2006 . [ 2 ] D . Agarwal , J . M . Phillips , and
S . Venkatasubramanian . The hunting of the bump : On maximizing statistical discrepancy . In Proc . 17th Ann . ACM SIAM Symp . on Disc . Alg . , pages 1137–1146 , January 2006 .
[ 3 ] D . Birant and A . Kut . Spatio temporal outlier detection in large databases . In 28th International
