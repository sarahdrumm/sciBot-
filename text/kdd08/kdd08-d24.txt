Banded Structure in Binary Matrices
Gemma C . Garriga
HIIT
Helsinki University of Technology , Finland gemmagarriga@hutfi
Esa Junttila
HIIT
University of Helsinki , Finland esajunttila@cshelsinkifi
Heikki Mannila
HIIT
University of Helsinki and
Helsinki University of Technology , Finland heikkimannila@cshelsinkifi
ABSTRACT A 0–1 matrix has a banded structure if both rows and columns can be permuted so that the non zero entries exhibit a staircase pattern of overlapping rows . The concept of banded matrices has its origins in numerical analysis , where entries can be viewed as descriptions between the problem variables ; the bandedness corresponds to variables that are coupled over short distances . Banded data occurs also in other applications , for example in the physical mapping problem of the human genome , in paleontological data , in network data and in the discovery of overlapping communities without cycles .
We study in this paper the banded structure of binary matrices , give a formal definition of the concept and discuss its theoretical properties . We consider the algorithmic problems of computing how far a matrix is from being banded , and of finding a good submatrix of the original data that exhibits approximate bandedness . Finally , we show by experiments on real data from ecology and other applications the usefulness of the concept . Our results reveal that bands exist in real datasets and that the final obtained ordering of rows and columns have natural interpretations .
Categories and Subject Descriptors F22 [ Analysis of Algorithms and problem complexity ] : Nonnumerical Algorithms and Problems ; H28 [ Database management ] : Database Applications—Data mining
General Terms Algorithms , Experimentation , Theory
Keywords 0–1 data , banded matrices , consecutive ones property
1 .
INTRODUCTION
Matrices with 0–1 values occur in many different applications . A typical example is market basket data gathered by retail companies [ 1 ] . Further than this , binary matrices abound in a large variety of fields ranging from information retrieval ( documents and words occurrences ) [ 5 ] , to bioinformatics and computational biology ( genes and probes mappings ) [ 2 , 16 ] , or ecology and paleontology ( sites and species occurrences ) [ 3 , 12 ] . Understanding the properties of such matrices is therefore important for many applications . A fundamental problem is to uncover structures that will reveal the nature of the relations between the rows and the columns of the binary dataset .
In this paper we study the banded structure of binary matrices . A 0–1 matrix is fully banded if both rows and columns can be permuted so that the non zero entries exhibit a staircase pattern of overlapping rows . See Figure 1 .
Figure 1 : An example of a fully banded matrix .
The concept of banded matrices has its origins in numerical analysis , where the matrix entries indicate connections between variables in the function to be optimized . From the computational point of view , working with banded matrices is always preferable . The work load involved in performing certain operations such as multiplication falls significantly for banded matrices [ 10 ] , often leading to huge savings in terms of calculation time and complexity . There has been much research focused on minimizing the bandwidth of a matrix ( broadly , the distance of non zero entries from the main diagonal of the matrix ) by applying permutations on the original matrix [ 4 , 10 , 19 ] .
From the data analysis perspective banded structures can occur in many applications . Consider for example the physical mapping problem of the human genome . Genome biologists break the genome into pieces ( clones ) which by recursive breaking can be eventually sequenced together . Unfortunately , the information about the relative positions of clones is lost during the breaking process . The physical mapping process starts with the experimental data from which information about the clone overlaps can be derived . The biological community has invested considerable efforts in the analysis of clone–probe matrices , in order to determine useful properties of both clone and probe orderings [ 2 ] . For another application , consider the presence/absence data from paleontology . Rows represent sites and columns represent species . A banded structure signifies an overlapping nested pattern between a set of species occurring in a spatially correlated set of sites . Another application where bands are potentially visible is in the discovery of overlapping communities without cycles in network data [ 6 ] .
Needless to say , fully banded matrices are not expected to arise in a real noisy environment . Therefore we study the problem of determining which is the minimum number of transformations one needs to do on the original binary matrix to uncover a banded structure . The number of such transformations will measure how far is a matrix from being banded . A simple example is shown in Figure 2 . In its original form the matrix seems to be random , yet when permuted suitably , it exhibits a high concentration of 1s confined close to the main diagonal band . This simple example already reflects the complexity involved in this problem . Another optimization problem we consider to cope with the unavoidable noise is finding a maximum subset of rows and columns from the original matrix that will exhibit an almost banded structure . Here we explore the combinatorial properties related to bandedness and propose algorithmic solutions to solve the associated optimization problems .
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30
2 9 4 20 15 21 14 29 11 3 13 12 16 17 22 25 24 30 1 26 27 6 18 19 5 28 8 10 7 23
1 2 3 4 5 6 7 8 9
0 1
1 1
2 1
3 1
4 1
5 1
6 1
7 1
8 1
9 1
0 2
1 2
2 2
3 2
4 2
5 2
6 2
7 2
8 2
9 2
0 3
1 3
2 3
3 3
4 3
5 3
6 3
7 3
8 3
9 3
0 4
6 2
5 2
2 1
0 3
3 3
9 2
7 1
5 3 1
7 5 2
4 2
4 3
8 6 1
3 1
2 2
3 2
1 4 2
0 4
0 2
7 7 3
9 2 3
8 2
1 8 3
6 3
1 1
2 3
9 1
5 3
0 9 1 1
4 1
8 3
6 1
( a )
( b )
Figure 2 : An example of a binary matrix in its original form ( a ) , and after permuting rows and columns to uncover its banded structure ( b ) .
The rest of this paper is organized as follows . In Section 2 we give a formal definition of the concept of bandedness and study its theoretical properties . Section 3 introduces the definition of the banded optimization problems . In Section 4 and Section 5 we propose algorithmic solutions for the banded augmentation problem ; and in Section 6 for the banded submatrix problem . Finally Section 7 shows empirical results and Section 8 discusses related work .
2 . BANDEDNESS AND ITS COMBINATO
RIAL PROPERTIES
This section studies the combinatorial nature of banded matrices . We introduce an incompatibility graph between the columns of the matrix that will characterize the proper permutations for obtaining a fully banded structure . On the other hand , we also define an intuitive binary relation between the rows which , under those proper column permutations , will lead to a banded structure . The combination of these two results drive to a polynomial test for bandedness . 2.1 Bandedness
Consider a n × m binary matrix M . In the genetic fingerprinting application , rows would correspond to probes and columns to clones ; in the ecological application , rows would be sites and columns would be species . We denote the i th row of M by Mi and the j th column of M by M j . Given a permutation π of natural numbers {1 , . . . , m} and a row vector Mi , we denote with M π i the permutation of the vector Mi induced by π . In general M π represents the matrix resulting from applying the column permutation π to each one of the rows of M . Similarly , M π κ represents the permutation of rows and columns according to κ and π respectively . Sometimes it is useful to interpret the row and column vectors of M as sets of indices , that is a row Mi is as well a set of column indices that appear in the row .
A matrix is fully banded if both rows and columns can be permuted in a way that the non zero entries exhibit a staircase pattern of overlapping rows . See Figure 1 .
Definition 1 . A binary matrix M is fully banded if there exists a permutation of rows κ and a permutation of columns π such that ( 1 ) for every row i in M π κ the entries with 1s occur in consecutive column indices {ai , ai + 1 , . . . , bi} and ( 2 ) these indices satisfy ai ≤ ai+1 and bi ≤ bi+1 .
If M is fully banded also its transpose , M T is fully banded . Another trivial observation is that for a matrix to be banded it has to satisfy at least the consecutive ones property on the rows and the columns . Formally , a binary matrix M is a consecutive ones matrix if it is possible to order the columns so that , in every row , the non zero entries occur in consecutive positions [ 21 ] : this is exactly what we require in part ( 1 ) of the above definition . A consecutive interval of ones from a row will be denoted as [ a , b ] : all the entries between columns a and b are 1s and the rest 0s . Unless explicitly stated , when a binary matrix M is said to satisfy the consecutive ones property we assume that it comes permuted to exhibit this consecutive arrangement of ones in all rows . Thus we can omit permutation π from the notation . Testing the consecutive ones property of a binary matrix and representing permutations π ( if they exist ) can be done in polynomial time via PQ trees [ 7 ] , and more recently , in linear time with a certifying algorithm [ 15 ] ; unfortunately , these algorithms do not handle noise .
However , not all matrices with the consecutive ones property are banded , ie , part ( 2 ) in the definition is not superfluous . For example , the following is a consecutive ones matrix for the rows and the columns yet none of the row/column permutations leads to a staircase pattern of ones .
1 1 1 0 0 1 1 1
0 0 0 1 01 @ A
( 1 )
On the other hand , even if the matrix is fully banded , we cannot expect that all column permutations from the consecutive ones property will lead to an overlapping sequence of rows . An example is the following matrix , which as shown in Equation 2 has consecutive ones for the rows but it is only banded when the last column is placed first .
0 0 0 1 1 1 1 1
0 0 1 1 01 @ A
( 2 )
Next we characterize exactly the relation of banded matrices with consecutive ones matrices . This will be possible via the following binary relation between rows .
Definition 2 . Let Mi = [ a , b ] and Mj = [ a′ , b′ ] be two rows with the consecutive ones property . We say that Mj is properly included in Mi , denoted Mj ≺ Mi , if and only if a < a′ and b′ < b . We denote by Mi ⌢ Mj whenever Mi ⊀ Mj and Mj ⊀ Mi .
As an example , the third row in the small matrix of Equation 2 is properly included in the second row . The rows of a consecutive ones matrix M are a Sperner family of intervals if for any two rows Mi , Mj we have Mi ⊀ Mj and Mj ⊀ Mi ; that is , Mi ⌢ Mj . This Sperner property on the family of row intervals can be seen as a restricted version of the Sperner property on the family of row sets : two rows Mi and Mj with Mi ⊂ Mj might , or might not satisfy M π j . This depends on the column permutation π of the consecutive ones arrangement for M , which , at the end , determines the starting and ending points of the row intervals . For example , the third row in Equation 2 would not be properly included in the second row if the last column was placed first . The following characterizes this relation . i ⊀ M π
Lemma 1 . A 0 1 matrix M is fully banded if and only if M is a consecutive ones matrix for a permutation of columns π where every two rows i and j satisfy M π j ⌢ M π i . i ⌢ M π
Basically the proof goes as follows : if for every two rows M π i = [ ai , bi ] and M π j = [ aj , bj ] with consecutive ones we have M π j , then : either ai ≤ aj and bi ≤ bj or aj ≤ ai and bj ≤ bi . Under these conditions we can easily establish a preorder of rows by sorting them in ascending value of ai ’s , while resolving ties with the ascending value of their bi ’s . This preorder will essentially define the banded structure of Definition 1 . The other direction is trivially implied from the definition of fully banded matrices . 2.2 An incompatibility graph for bandedness As we have just argued with Lemma 1 , the set of valid consecutive ones orderings that preserve the banded property is simply a subset of the valid orderings for the ( less restricted ) consecutive ones relation . Therefore , for fully banded matrices the problem lies in identifying the proper permutation of the consecutive ones property that will preserve bandedness , if such permutation exists . Unfortunately , checking whether a matrix is fully banded would be unfeasible if we had to go through all the permutations of the consecutive ones property of the same matrix : there might be exponentially many such permutations . In the remaining of this section we will study the incompatibilities that arise under certain permutations of the columns to derive a polynomial test for bandedness .
A very convenient data structure to deal with the valid column orderings of a consecutive ones relation is the incompatibility graph introduced in [ 15 ] . An incompatibility graph is simply an undirected graph whose vertices are pairs of elements ( a , b ) , for all column indices a 6= b , and whose edges reflect the incompatibility relation derived from the following observations .
Suppose we want to discover the consecutive ones ordering of a set of columns . For each pair of columns a , b of M , we have that the order ( a , b ) ( column a before b ) is incompatible
( a,b )
( a,c )
( a,d )
( b,c )
( b,d )
( c,d )
( b,a )
( c,a )
( d,a )
( c,b )
( d,b )
( d,c )
( a,b )
( a,c )
( a,d )
( b,c )
( b,d )
( c,d )
( b,a )
( c,a )
( d,a )
( c,b )
( d,b )
( d,c )
Figure 3 : The incompatibility graph corresponding to the matrix from Equation 1 , with row sets M1 = {a , b , c} , M2 = {b , c , d} , and M3 = {c} . The upper figure shows the incompatibilities introduced by only the first row M1 = {a , b , c} , together with the rule ( x , y ) and ( y , x ) are incompatible . The lower figure shows the whole graph obtained by adding the incompatibilities from all rows . M has the consecutive ones property as this graph is bipartite . with order ( b , a ) . Moreover , for a triplet of columns a , b , c and a row i of M with a , c ∈ Mi and b /∈ Mi , the pairs ( a , b ) and ( b , c ) cannot appear in the same consecutive ones relation . Namely , they would imply that b goes between a and c in the column ordering , which would imply that M fails to be consecutively ordered in the i th row . Therefore ( a , b ) and ( b , c ) are incompatible . The incompatibility graph G(M ) of M is formed by adding all edges of these types . A toy example of an incompatibility graph is shown in Figure 3 . It is then clear that a consecutive ones relation must not contain incompatible pairs , thus giving the following result .
Proposition 1
( [15] ) . A binary matrix M has the consecutive ones property if and only if its incompatibility graph G(M ) is bipartite .
Next we study further the observation given by Lemma 1 and use of the incompatibility graph to test the bandedness property in polynomial time . The idea is to augment the graph G(M ) with more incompatibility edges ; basically , those incompatibility ordering pairs that restrict the consecutive ones orderings to those preserving a Sperner family of row intervals . We call the augmented graph ˆG(M ) .
Suppose we have two different rows i and j of M and Mi ⊂ Mj . Let a , b , c ∈ Mj be column indices such that a ∈ Mi but b , c /∈ Mi . Then if the matrix is fully banded , the orderings ( b , a ) and ( a , c ) cannot both hold . Namely , if b is before a and a is before c , we have entries as follows . row Mi : Mj : b 0 1 a 1 1 c 0 1
But in this case the ordering cannot satisfy the conditions of a full band . We call these new edges added to G(M ) to form ˆG(M ) the set of Sperner conflicting pairs . As an example consider the matrix in Equation 1 : it has the consecutiveones property , as shown in the incompatibility graph of Figure 3 . However , when adding to that graph the incompatible pairs from M1\M3 = {a , b} and M2\M3 = {b , d} , the final graph would not be bipartite anymore . This implies that the matrix in Equation 1 is not banded in any of the consecutive ones permutation .
The number of Sperner conflicting pairs that can be potentially added to the graph ˆG(M ) is at most quadratic in n . A way of testing bandedness in linear time in the number of edges of the incompatibility graph is then the following .
Proposition 2 . A matrix M is fully banded if and only if its incompatibility graph augmented with the set of Sperner conflicting pairs is bipartite .
We derive next a generalization from Proposition 2 . The advantage is that it will summarize the conflicting Sperner pairs directly into an augmentation of M .
Lemma 2 . Let ˆM be the binary matrix M augmented with a set of new rows Mij = Mj \Mi for every two rows Mi ⊂ Mj . Then we have that M is fully banded if and only if ˆM has the consecutive ones property .
Briefly , the proof goes as follows : if any two rows i and j of M st Mi ⊂ Mj satisfy Mi ⌢ Mj under a certain permutation π of the consecutive ones , then Mj \Mi will be consecutive ones for that permutation π as well . On the other direction : any permutation π of the consecutive ones on ˆM , preserves both the consecutive ones property of M and the Sperner family of intervals of their rows .
The maximum number of rows that can be potentially added to the original M is at most n × ( n − 1)/2 .
3 . PROBLEM DEFINITIONS
Real world matrices are not expected to be fully banded . Therefore we introduce a measure that computes how far a matrix is from being banded . We will do so by looking at the minimum number of 0s that need to be transformed into 1s ( and also bidirectional flips , from both 1s to 0s and 0s to 1s ) to make a matrix banded . We name this optimization problem as the Minimum Banded Augmentation problem .
Problem 1 . ( Minimum Banded Augmentation , Mba ) Given a 0 1 matrix M , find the minimum number of 0s that need to be modified into 1s so that M becomes fully banded .
We denote with β(M ) the optimal number of flips to make the matrix fully banded . Matrices that are fully banded satisfy β(M ) = 0 . A trivial observation following from the symmetry of our definition of fully banded matrices is that β(M ) = β(M T ) , where M T is the transpose of M .
For ecological and paleontological data we often have the situation where the 1s are reasonably certain , but the 0s can be missing values . Thus the Mba problem is quite natural . However , for other types of applications is useful to allow changes in both directions , from 1 to 0 and from 0 to 1 . We refer to the version of Mba that allows flips from both 1s to 0s and 0s to 1s as the Bidirectional Mba . We will denote with βB(M ) the optimal number of such bidirectional flips to obtain a fully banded matrix . Note that βB(M ) ≤ β(M ) .
A variation of the Bidirectional Mba is to consider its weighted version : suppose we have a cost associated to 0 to1 flips and a cost associated 1 to 0 flips ; the weighted problem becomes that of finding a transformation with the minimum cost . This weighted variation of the Bidirectional Mba can be especially useful in ecological applications .
The algorithmic complexity of the Mba problem is expected to be hard . The basis of this assumption arises from Lemma 2 and the known fact that the Consecutive ones Matrix Augmentation problem ( with flips from 0 to 1 ) is NP complete [ 17 ] . The transformation is done from the Optimal Linear Arrangement . Also symmetric banded matrices have an interpretation as proper interval graphs [ 18 ] , and general banded matrices as proper interval digraphs [ 20 ] . Both the edition and deletion of edges to transform a general graph into an interval graph is NP complete [ 8 ] .
A second problem we study here is the following .
Problem 2 . ( Maximum Banded Submatrix , Mbs ) Given a 0 1 matrix M and an integer k , find the maximum submatrix M ′ of M st it is banded after at most k flips .
The Mbs problem will be useful in datasets exhibiting several independent band structures , or also , when noise is too high to identify a clear band from the complete dataset . Since Mbs is only a generalization of the Mba and Bidirectional Mba problem , the algorithmic complexity is also expected to be hard .
4 . ALGORITHMS WITH FIXED COLUMN
PERMUTATION
Since the values of β(M ) and βB(M ) cannot be computed exactly for larger instances , we consider algorithms for their estimation in both the Mba and the Mbs problems . We denote those upper bounds with ˜β(M ) and ˜βB(M ) .
We investigate a special form of the problems where we assume that the column permutation that establishes the banded structure is already known . 4.1 Algorithms for Mba
By Lemma 1 , when having a fixed column permutation the Mba problem decomposes into solving the consecutive ones property for single rows , and after that , making some final flips to ensure that rows form a Sperner family of intervals . Algorithm 1 outlines this Fixed Permutation solution .
Assuming that the column permutation π is given and that Mba only allows flips from 0s to 1s , there is only one exact way of producing a consecutive ones relation : by flipping all possible 0s falling between 1s for each row of M π ( lines 4–6 ) . A second phase has to ensure that all row intervals will be pairwise overlapping , that is M π for all rows i 6= j ( lines 7–13 ) . Since only 0 to 1 flips are allowed , the solution is simply to extend the row intervals . An extension of Mi = [ a , b ] means to update the endpoints of the interval for a new [ a′ , b′ ] such that a′ ≤ a ≤ b ≤ b′ . i ⌢ M π j
At every step the algorithm takes a row M π i and calculates its optimal extension ( if this is needed ) . To do so it will select all the superintervals M π i and check all the potential extensions for M π i that would resolve the Sperner conflicts that the i th row has with those j th rows . j ≻ M π
An extension of M π i that will always resolve all Sperner conflicts for that row can either be a left hand side extension to the left most M π i ( line 10 ( a) ) ; a right hand j ≻ M π
Algorithm 1 The Fixed Permutation algorithm for Mba 1 : Input : A n × m 0–1 matrix M and a permutation π 2 : Output : A permutation κ of rows 3 : Fix the column permutation of M to be π 4 : for each row i in M π do 5 : 6 : end for 7 : for each row i in M π st M π j = [ aj , bj]|M π 8 : 9 :
Flip all those 0s falling between 1s i = [ x , y ] with the best from the following i = [ a , b ] do i ≺ M π j }
Let C = {M π Extend M π options :
10 : 11 : 12 :
( a ) x = min{aj |[aj , bj ] ∈ C} and y = b ( b ) x = a and y = max{bj |[aj , bj ] ∈ C} ( c ) x = aj and y = max{bk|[ak , bk ] ∈ C , ak < aj} , for every M π j = [ aj , bj ] ∈ C
13 : end for 14 : Sort the rows [ a , b ] of M π in ascending order of as , re solving ties with the ascending order of their bs . i j ≻ M π side extension to the right most M π ( line 11 ( b) ) ; or , finally , extending M π i to both left and right hand sides with a combination of two superintervals ( line 12 ( c) ) . This only requires checking the starting point of each M π j ≻ M π i and combining it with the right most ending point from all other superintervals M π i whose starting point comes before M π j . Eventually , for a row i the algorithm takes the extension that represents fewest transformations . k ≻ M π
Resolving the Sperner conflicts for a row i does not change the optimal extension of other rows j 6= i . In simple terms : there are no cascade effects . To see this suppose that i includes a new interval k after its extension , and let j be the interval that previously contained i and that originated the best optimal extension of i ( in lines 10–12 ) . This interval j contains k by transitivity , and indeed , it also contained k even before i was extended . This implies that when processing k , its optimal extension cannot be changed because of a previous extension of interval i .
That is , for a fixed permutation π of the columns , the Fixed Permutation algorithm computes exactly β(M π ) in polynomial time . This will be always an upper bound of ˜β(M ) . The number of comparisons between rows made by the algorithm will be at most n × ( n − 1)/2 . Since every comparison requires at most n comparisons ( line 12 ( c) ) , the final complexity of the algorithm is of the order O(n3 ) .
Proposition 3 . If a permutation π of the columns is fixed , Mba for M π is solvable in polynomial time .
4.2 Algorithms for bidirectional Mba
Next we study the properties of the algorithms for the Bidirectional Mba problem . Again we will use the same principle of assuming a fixed column permutation π . The idea here is also simple : first solving optimally the consecutiveones property for bidirectional flips on the M π and after that , resolving Sperner conflicts between rows . Still , the technical components of this bidirectional solution are totally different from above . Algorithm 2 gives the outline of the Bidirectional Fixed Permutation algorithm .
The first simple observation we use is the following .
Proposition 4 . If a permutation π of the columns is fixed , the minimum number of bidirectional flips that lead
Algorithm 2 The Bidirectional Fixed Permutation algorithm for Bidirectional Mba 1 : Input : A n × m 0–1 matrix M and a permutation π 2 : Output : A permutation κ of rows 3 : Fix the column permutation of M to be π 4 : for each row i in M π do 5 : 6 :
Let W π Let [ a , b ] be the solution to the maximum consecutive subarray on W π i i be the weight vector for row i of M i = [ a , b ] if M π i ⊂ M π
7 : Update M π 8 : end for 9 : for each pair of rows i , j in M π do 10 : 11 : 12 : 13 : j then j \M π i
Let A = M π Let WA be the weight vector for A Let [ a , b ] be the solution of the maximum consecutive subarray of WA Update M π i preserving M π
14 : 15 : end if 16 : end for 17 : Sort rows [ a , b ] of M π in an ascending order of as , while i = [ a , b ] j \M π deciding ties with the ascending order of their bs . to a consecutive ones relation on M π can be solved exactly in linear time .
To see this consider a n × m matrix of weights W where each non zero entry of M will be assigned a +1 in W , and each zero entry of M will be assigned a weight of −1 .
W j i =(+1 if M j
−1 if M j i = 1 i = 0
In this form , the problem of finding the optimal consecutive ones solution with bidirectional flips for M π i corresponds to solving the maximum subarray problem on W π i . The aim of the maximum subarray problem is , for a given array of numbers , to find a consecutive subarray such that the sum of the numbers in the subarray is maximum . This can be done in linear time in the size of the array by making use of a scan line algorithm [ 9 ] . In essence , for a solution [ a , b ] of the maximum subarray algorithm over W π i , we should update M π i with consecutive ones between the columns a and b , while setting to 0s the rest of its entries . This corresponds to lines 4–8 in Algorithm 2 . Note that weights of the matrix W can be tuned according to the apriori knowledge of the application . The weight matrix described above assumes equal cost between the two types of flips .
In the second phase ( lines 9–16 ) the algorithm proceeds by removing the Sperner conflicts between the rows of M π , which at this stage already exhibit a consecutive ones property . The useful technical observation comes from Lemma 2 : A matrix M will be fully banded as long as the augmented ˆM is in consecutive ones . Therefore , to eliminate all possible Sperner conflicts between the row intervals of M π , the algorithm simply has to go through all the extra rows described in ˆM and make them consecutive ones . When propagating the changes back to M π we would end up with a banded matrix . As above , we can make use of the maximum subarray problem on the extra rows of ˆM to solve the problem exactly for bidirectional flips . It only remains to update rows in M π so that they are kept consistent with the changes made over ˆM . The final obtained solution on M π will be always banded . Basically , this corresponds exactly to deciding the best number of bidirectional flips that will eliminate Sperner conflicts in a pair wise comparison of rows in M π . The final complexity of the algorithm is O(n3 ) .
Notice that from the Bidirectional Fixed Permutation algorithm we cannot conclude that the obtained solution will be optimal for the Bidirectional Mba problem on M π . The problem resides in the second phase when rows are compared fundamentally in a pair wise fashion , thus always deciding the best optimal flips for each couple of rows locally . This ignores the fact that some non optimal local updates might be better for an optimal global solution . In general , it seems that the Bidirectional Mba problem would be still hard for a fixed permutation of the columns .
As a final step in both Algorithm 1 and Algorithm 2 , it only remains to sort the rows with the preorder given by the row intervals to visually exhibit the banded structure .
A different type of approach for estimating the Mba and Bidirectional Mba problems is by means of the incompatibility graph introduced in Section 22 A simple greedy strategy would consist of eliminating odd cycles from the incompatibility graph by removing edges one at a time . The criteria for selecting which edges to eliminate such that the graph becomes bipartite can be very diverse and too far from the scope of this paper . For example , one could choose the edge that participates in the largest number of odd cycles , or simply the first edge that violates the bipartite condition . The advantage of this solution is that it does not depend on a permutation fixed beforehand , but it also has a strong dependency on which is the best elimination criteria for the edges in the incompatibility graph and a higher time complexity . We observed that the fixed permutation algorithms provide a better solution than the simplified odd cycle algorithms in most cases , so , due to space constraints we will focus here only on the fixed permutation algorithms .
5 . FINDING COLUMN PERMUTATIONS
An essential component of the algorithms described in Section 4 is to be able to identify a good column permutation that will be fixed since the beginning . Intuition says that a good permutation will tend to put similar columns close enough to each other in the order . If the matrix exhibits banded structure , an order based on the similarity between columns should also preserve the band . We define here several similarity measures to compare columns and use two different methods to find a proper order .
One very simple measure of similarity between two columns is the correlation similarity . Given two columns M a and M b the correlation similarity is defined as : CorrS(M a , M b ) = ( 1 + ρab)/2 , where ρab represent the Pearson coefficient between the columns a and b . The measure CorrS can take values between [ 0 , 1 ] , where 1 means that the two columns are identical , and 0 when they are anticorrelated .
As an alternative we will use the overlapping measure computed by the Jaccard coefficient : J(M a , M b ) = |M a∩M b| |M a∪M b| . This similarity measure captures the particularities of our problem where columns should be increasingly overlapping one with the other . It takes a highest value of 1 when columns M a and M b are exactly the same . The overlapping similarity for non intersecting columns is 0 . Other straightforward measures we will try to use are the dot product and the Hamming distance metric between columns .
In order to find a good permutation of the columns preserving the similarity or distance relationship , we consider the graph whose nodes are the columns of the input matrix M . There is an undirected edge between all pairs of nodes {a , b} , and the weight of the edge is defined by the similarity between a and b . This similarity can be defined by any of the measures mentioned above . We will use two methods to find a good order between columns : first one is spectral ordering [ 3 ] , and the second one consists of finding an approximation of the minimum Hamiltonian path between the columns ( by means of constructing the minimum spanning tree ) [ 9 ] . Note that similarity measures will be transformed into distances for the Hamiltonian path .
6 . ALGORITHMS FOR MBS
Next we turn to the banded submatrix problem Mbs . For a solution we can compute , for each row and column , the number of true positive ( TP ) entries as the number of 1s in the row ( or column ) that were not transformed into a 0 . That is , they correspond to relevant 1s contained in the row ( column ) for bandedness . Similarly , the false positive ( FP ) entries of a row ( or column ) correspond to original 0s that were transformed into 1s by the algorithm . Finally , false negatives ( FN ) are represented by those original 1s that were switched into 0 by the banded algorithm .
From here many different measures for evaluating the performance of the banded retrieval system can be computed . For example we can consider precision =TP/(FP+TP ) , recall=TP/(FP+FN ) or accuracy=(TP+ TN)/n of each one of the row and column vectors . The algorithm proposed is called Iterative row column elimination . As the name indicates , it will eliminate rows/columns one at a time , by selecting the one with worst performance so far . Pseudocode of the algorithm is shown in Algorithm 3 .
Algorithm 3 The Iterative row column elimination algorithm for Mbs 1 : Input : A n × m 0–1 matrix M and an integer k 2 : Output : A submatrix M ′ of M 3 : repeat 4 :
Compute ǫ , the number of flips estimated for Mba or Bidirectional Mba problem on M Rank columns/rows with a performance measure Select the column/row i with worst performance Remove i from M
5 : 6 : 7 : 8 : until ǫ ≤ k
7 . EXPERIMENTS
In this section we give experimental ground of the bandedness concept . We show that our algorithms perform efficiently in synthetic datasets and find banded structures in a variety of real datasets from life sciences . We will shorten the name of the algorithm Fixed Permutation to FP and Bidirectional Fixed Permutation to BFP . 7.1 Synthetic datasets
Briefly , we generated synthetic data as follows . For a given n and m and a width parameter 2w we generate a fully banded matrix by means of a random walk in the matrix grid . Starting at coordinate ( 0 , 0 ) of a n × m matrix initially set to all zeros , the random walk chooses to move either one
Synthetic data , unbalanced noise
Synthetic data , unbalanced noise
2000
1500 s p i l f l a t o T
1000
500
0
Fixed Permutation Bidirectional Fixed Permutation Standard deviation s p i l f l a t o T
800
700
600
500
400
300
200
R
C D S H J
O
C C D D S H S J H J
O
O
C
D S H J
O
C
D S H J
O
C
D S
H J
O
R
R
R
D D S S C C D S C S R D H H H J C J J O O O J H
R S D C J H
O
O
R C D S H J O
Random permutation Spectral−Correlation Spectral−Dot product Spectral−Jaccard Hamiltonian−Hamming Hamiltonian−Jaccard Original permutation
S D R C O H J
S D O R C H J
S D O C R H J
S D O C R H J
D S O C R H J
S D R C O H J
O R D S C H J
R S D O C H J
0.00 0.10 0.20 0.30 0.40 0.50 0.60 0.70 0.80 0.90
0.00 0.10 0.20 0.30 0.40 0.50 0.60 0.70 0.80 0.90 q ( with fixed p = 0.10 ) q ( with fixed p = 0.10 )
( a ) Comparison algorithms
( b ) Comparison permutations
Figure 4 : Synthetic data : parameter p ( noise outside the band ) is fixed to 0.1 ; in the x axis we vary parameter q ( noise inside the band ) , and the y axis counts the total number of flips needed to recover the full band . In ( a ) , comparative performance of the two algorithms FP and BFP when column order is fixed with Hamiltonian path of Hamming distance . In ( b ) , comparative effect of the different permutations chosen by BFP algorithm . ‘Original permutation’ fixes the identity permutation , while ‘random permutation’ fixes a random permutation . Dotted lines show standard deviation obtained in the 100 samples of each experiment . step down ( ie from ( i , j ) to ( i + 1 , j ) ) or one step to the right ( ie from ( i , j ) to ( i , j + 1 ) ) with equal probabilities . Whenever a step to the right is chosen , we will set to 1 all the w cells above the current position and all the w cells below the current position ( or less than w if there are not as many as w cells to fill ) . Once the path reaches ( n , m ) , each column contains at least w and at most 2w ones ( assuming w < n ) . The random walk is designed so that it always reaches position ( n , m ) . The resulting matrix has a clear solid band of given width 2w . Additionally we can introduce noise by flipping the original values according to given probabilities p ( noise probability of flipping 0 to 1 ) and q ( noise probability of flipping 1 to 0 ) . In all the synthetic experiments shown next we generate 100 samples for each one of our parameter settings . Each sample corresponds to a matrix of size 50×60 . The values in the figures of this section are then computed as the mean from the obtained values in those 100 samples . Figure 4a compares the total number of flips done by the two algorithms FP and BFP . As expected BFP outperforms in all cases , so we decide to use it for the rest of the experiments . Discarding FP is not a problem for real datasets : the weighted version of BFP can behave similarly to FP if our apriori knowledge indicates that only flips from 0 to 1 are appropriate for the data . Observe that as we increase the noise inside the band the total number of flips tends to decrease for both algorithms . This is just the effect of having an emptier band . Figure 4b compares the effects of fixing different permutations with the BFP algorithm . The effect of the permutation does not seem to be significant from the synthetic data , although Hamiltonian path with Jaccard behaves slightly better . For real datasets permutations will matter and some of them clearly perform better than others . The goodness of a permutation will be always measured wrt the final number of flips done by an algorithm that fixed such permutation .
7.2 Mammal dataset
The Mammal dataset consists of presence/absence records of European mammals : for 2179 cells of size 40 × 40 Km2 we have 0–1 information about 124 different species . The full version of the Mammal dataset is available for research purposes upon request from the Societas Europaea Mammacologica ( wwweuropean mammalsorg )
Figure 5a shows the band obtained by allowing bidirectional flips . The discovered structure of sites and mammals is interesting in itself : it shows a highly nested pattern from sites and species so far unknown in the dataset . The order of the sites where this nestedness occurs shows a high correlation with the temperature variable . As the temperature rises the number of species present in the band also increases . The band gets thinner when the temperature is lower , indicating that a few species live under extreme conditions . Nested patterns have been widely studied in ecological applications because they clearly reflect the distribution of species in the spatial grid of locations . In this band we did not observe any dependency between the order of the rows and their spatial location ; this indicates that we found a clear global structure in the data , not only an artifact of spatially correlated sites . Moreover , of the 54155 total ones in the dataset , there are a majority of 35564 ones accumulated within the borders of the band retrieved by our algorithm ( see Figure 5b ) . This means we found a heavy dense structure . A total of 27662 bidirectional flips were needed to find the structure .
7.3 Paleontological dataset
The Paleontological data contains information of fossils genera in Europe [ 11]1 . Columns correspond to genera and rows correspond to sites . There are 124 sites and 139 genera .
1From August 31 , 2007 , the version of the dataset selects all columns with at least 10 occurrences and all rows with at least 10 genera present .
( a ) Mammal data
( b ) Mammal data , within band
( c ) Paleontological data
Figure 5 : [ Mammal data](a,b ) : The almost nested structure exhibited by the original Mammal dataset when reordering rows and columns according to the results of BFP . The best band was found when fixing the permutation by Hamiltonian path with Hamming distance measure . The actual borders of the band are shown in ( b ) . [ Paleontological data](c ) : Band exhibited by the Paleontological dataset when applying weighted BFP with weights assuming noise p = 0.10 and q = 043 The best permutation for this dataset was found by spectral ordering with Jaccard similarity .
The banded structure found in the Paleontological dataset is shown in Figure 5c . The result is given by spectral ordering with Jaccard similarity .
We tested here the weighted BFP for different variations of weights . This is a clear dataset exhibiting a high noise concentration inside the band , which implies that we should give more priority to transformations from 0s to 1s . In general it is difficult to decide for a real life application which are the best weights . Here we tested with variations of this weight parameter as follows . Under all the possible assumptions of noise p and q , weights were set respecting the ratio log(p)/ log(q ) . The best retrieved matrix with such weights will be a measure to the underlying noise distribution . A good selection of parameters was set under assumption of noise p = 0.10 and q = 043
7.4 DNA amplification data
The DNA amplification data is available upon request from the authors in [ 16 ] . It contains information on the DNA copy number amplifications recorded in 4590 cases ( rows ) and 393 band specific chromosomal locations ( columns ) . A 0 denotes no DNA copy number amplification in the corresponding chromosomal location , and a 1 denotes a finding in the DNA copy number amplification in the location . More than this we also have available the neoplasm labels ( cancer label ) coupled to the cases of the matrix . The goal is to investigate DNA amplifications in different neoplasms types . This justifies a solution where different subsets of columns and rows can be evaluated separately , so we will run our Iterative row column elimination algorithm . We use the measures of accuracy and recall as a deletion criteria of rows and columns , while allowing a maximum of 100 flips in the retrieved submatrices .
Figure 6 shows the two retrieved submatrices ( from the original data ) found by accuracy 6a and recall 6b . For both submatrices we observe immediately that they exhibit a very clean banded structure ( almost zero noise outside the band ) .
They both preserve nicely the column permutation of the chromosomes , and moreover , each one of these submatrices identifies a different reduced collection of cancer types . An expert verification is still needed .
8 . RELATED WORK
The property of consecutive ones in binary matrices is particularly important in presence/absence data of paleontological applications [ 12 ] . The question of determining how far away a given matrix is from satisfying the consecutiveones property corresponds to counting Lazarus events . This is also known as the seriation problem . In [ 3 ] an important contribution showed an approximation given by the spectral ordering . Another important ecological concept related to the structure of 0–1 matrices is nestedness [ 14 ] . A dataset is nested if for all pairs of rows one row is either a superset or subset of the other . From this definition it is direct to see that all nested matrices are banded , although the reverse does not hold . Bandedness is therefore a generalization of these ecological concepts .
A fully banded binary matrix is also known in some contexts as the monotone consecutive arrangement of ones [ 20 ] . A connection is then established between this and zeropartitionable matrices [ 13 ] , which establishes the following hierarchy between classes of matrices , where B are the banded matrices , N are nested matrices , SC1P are simultaneously consecutive ones on row and columns , C1P are consecutiveones matrices on rows , and Z are zero partitionable matrices . Finally , we cannot ignore the relation of banded matrices with the field of numerical analysis [ 10 , 19 , 4 ] . The solutions there also find good permutations to confine non zero entries to the main diagonal band . However , those permutations approach a different nature of the bandwidth problem ( leaving empty corners ) and are not prepared for noisy real data ( corners with noise are not bad as long as 1s are highly concentrated in the diagonal ) .
( a ) DNA Amplification
( b ) DNA Amplification
Figure 6 : Two submatrices from the DNA data . On the left ( a ) , the submatrix with 1402 rows and 282 columns , using accuracy as the elimination criteria . On the right ( b ) , the submatrix of 291 rows and 244 columns , using recall as the elimination criteria . Permutations on the columns were fixed by the spectral ordering with dot product similarity . The number of flips to obtain a full band is at most 100 .
9 . CONCLUSIONS
We introduce the new concept of banded structures for 0–1 data and characterize exactly its combinatorial properties . We first establish how row and column permutations affect the structure of the band and derive a polynomial test for bandedness . We propose principled algorithms to approach two important combinatorial problems related to bands : minimum banded augmentation and maximum banded submatrix . Experiments show surprising results : bands potentially occur in many applications , and here we concentrate on datasets from life sciences . For two of the datasets , we discover new bands that have natural interpretations in the final order of rows and columns . Future work should explore algorithms that do not fix a permutation beforehand , noise probabilities for the weighted Mba , and the study of bandedness measures .
10 . REFERENCES [ 1 ] R . Agrawal , T . Imieli´nski , and ASwami Mining association rules between sets of items in large databases . In SIGMOD ’93 , pages 207–216 , 1993 .
NP completeness results for edge modification problems . Disc . Appl . Math . , 154(13):1824–1844 , 2006 .
[ 9 ] T . Cormen , C . Leiserson , and R . Rivest . Introduction to algorithms . MIT Press and McGraw Hill , 1990 .
[ 10 ] E . Cuthill and J . McKee . Reducing the bandwidth of sparse symmetric matrices . In Proceedings of the 1969 24th national conference , pages 157–172 , 1969 .
[ 11 ] M . Fortelius . Neogene of the old world database of fossil mammals ( NOW ) . http://wwwhelsinkifi/science/now/ , 2008 .
[ 12 ] K . K . Puolam¨aki , M . Fortelius , and H . Mannila .
Seriation in paleontological data using Markov chain Monte Carlo methods . PLoS Comput Biol , 2 , 2006 . [ 13 ] I J Lin and D . B . West . Interval digraphs that are indifference digraphs . In Graph theory , Combinatorics , and Algorithms , pages 751–765 , 1992 .
[ 14 ] H . Mannila and E . Terzi . Nestedness and segmented nestedness . In KDD ’07 , pages 480–489 , 2007 .
[ 15 ] R . M . McConnell . A certifying algorithm for the consecutive ones property . In SODA ’04 , pages 768–777 , 2004 .
[ 2 ] F . Alizadeh , R . M . Karp , L . A . Newberg , and D . K .
[ 16 ] S . Myllykangas , J . Himberg , T . B¨ohling , B . Nagy ,
Weisser . Physical mapping of chromosomes : A combinatorial problem in molecular biology . Algorithmica , 13(1/2):52–76 , 1995 .
J . Hollm´en , and S . Knuutila . Dna copy number amplification profiling of human neoplasms . Oncogene , 25:7324–7332 , 2006 .
[ 3 ] J . Atkins , E . Boman , and B . Hendrickson . A spectral
[ 17 ] C . H . Papadimitriou . The NP completeness of the algorithm for seriation and the consecutive ones problem . SIAM J . Comput . , 28(1):297–310 , 1999 .
[ 4 ] C . Aykanat , A . Pinar , and U . ¸Cataly¨urek . Permuting sparse rectangular matrices into block diagonal form . SIAM J . Sci . Comput . , 25(6):1860–1879 , 2004 .
[ 5 ] R . Baeza Yates and B . Ribeiro Neto . Modern Information Retrieval . Addison Wesley , 1999 .
[ 6 ] A . Banerjee , C . Krumpelman , J . Ghosh , S . Basu , and
R . Mooney . Model based overlapping clustering . In KDD ’05 , pages 532–537 , 2005 .
[ 7 ] K . S . Booth . PQ tree algorithms . PhD thesis , 1975 . [ 8 ] P . Burzyn , F . Bonomo , and G . Dur´an . bandwidth minimization problem . Computing , 16:263–270 , 1976 .
[ 18 ] F . S . Roberts . Indifference graphs . In Proof Techniques in Graph Theory , pages 139–146 , 1969 .
[ 19 ] R . Rosen . Matrix bandwidth minimization . In ACM national conference , pages 585–595 , 1968 .
[ 20 ] M . Sen and B . K . Sanyal . Indifference digraphs : A generalization of indifference graphs and semiorders . SIAM J . Discret . Math . , 7(2):157–165 , 1994 .
[ 21 ] A . Tucker . A structure theorem for the consecutive 1 ’s property . Journal of Combinatorial Theory , Series B , 12(2):153–162 , 1972 .
