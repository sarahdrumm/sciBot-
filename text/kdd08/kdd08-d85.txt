Partial Least Squares Regression for Graph Mining
Hiroto Saigo
Max Planck Institute for Biological Cybernetics
Spemannstr . 38
Tübingen , Germany hirotosaigo@tuebingenmpgde berlin.de
Nicole Krämer
TU Berlin
Franklinstr . 28/29 , 10587
Berlin , Germany nkraemer@cs.tu
Koji Tsuda
Max Planck Institute for Biological Cybernetics
Spemannstr . 38
Tübingen , Germany kojitsuda@tuebingenmpgde
ABSTRACT Attributed graphs are increasingly more common in many application domains such as chemistry , biology and text processing . A central issue in graph mining is how to collect informative subgraph patterns for a given learning task . We propose an iterative mining method based on partial least squares regression ( PLS ) . To apply PLS to graph data , a sparse version of PLS is developed first and then it is combined with a weighted pattern mining algorithm . The mining algorithm is iteratively called with different weight vectors , creating one latent component per one mining call . Our method , graph PLS , is efficient and easy to implement , because the weight vector is updated with elementary matrix calculations . In experiments , our graph PLS algorithm showed competitive prediction accuracies in many chemical datasets and its efficiency was significantly superior to graph boosting ( gBoost ) and the naive method based on frequent graph mining .
Categories and Subject Descriptors I52 [ Pattern Recognition ] : Design Methodology—Feature evaluation and selection ; H28 [ Database Management ] : Database Applications—Data mining
General Terms Algorithms , Experimentation , Performance
Keywords Partial least squares regression , graph mining , graph boosting , chemoinformatics
1 .
INTRODUCTION
As data mining and machine learning techniques continue to evolve and improve , the role of structure in the data becomes more and more important . Much of the real world data is represented not as vectors , but as graphs including sequences and trees , for example , biological sequences , semi structured texts such as HTML and XML , chemical compounds , RNA secondary structures , and so
A
B
A
A
B
( 1,, 1,1, 1,, 1,1, 1 , )
A
A
Patterns
B
A
A
Figure 1 : Feature space based on subgraph patterns . The feature vector consists of binary pattern indicators . forth . Like ordinary vectorial data , there are two kinds of learning tasks ; unsupervised [ 30 , 31 ] and supervised [ 22 ] . Among supervised learning tasks , graph regression and classification would be of wide interest . In graph regression , an attributed graph is given as an input , and a real valued output variable is predicted . In classification , the output variable is binary .
In learning from graph data , one can rely on the similarity measures derived from graph alignment [ 28 ] or graph kernels [ 10 , 23 , 6 , 16 ] . However , one drawback is that the features used in learning are implicitly defined , and derived clusters are hard to interpret . Another approach is based on graph mining , where a set of small graphs ( ie , patterns ) is used to represent a graph . Specifically , each graph is represented as a binary vector of pattern indicators ( Figure 1 ) . Graph mining is especially popular in chemoinformatics , where the task is to classify chemical compounds [ 11 , 7 ] . When all possible subgraphs are used , the dimensionality of the feature space is too large for usual statistical methods . Therefore , feature collection is a central issue in graph mining algorithms [ 30 , 1 , 35 ] . To summarize the feature collection methods proposed so far , let us classify them into two categories : mine at once and iterative mining . In the first category , the whole feature space is built by one mining run before the subsequent machine learning algorithm is started . A naive approach is to use a frequent substructure mining algorithm such as AGM [ 9 ] , gSpan [ 36 ] or Gaston [ 20 ] to collect frequently appearing patterns . This approach was employed by [ 7 ] and [ 11 ] , where a linear support vector machine is used for classification . A more advanced approach is to mine informative patterns with high correlation to the output variable [ 19 , 1 ] . However , salient patterns depend on the optimal parameters of the subsequent learning algorithm , and it is difficult to obtain a small number of features informative for any learning algorithm [ 12 ] .
Among iterative mining methods , substructure boosting methods [ 15 , 22 , 26 ] have been successfully applied to many different domains such as images [ 22 ] , videos [ 21 ] , chemical compounds [ 26 ] and biological mutation sets [ 27 ] . The boosting algorithm calls a pattern mining algorithm repeatedly to incrementally form a feature space . In the first iteration , the patterns with high correlation with the target variable are collected . In subsequent iterations , the algorithm updates the example weights such that more emphasis is put on mispredicted examples . It is reported that it creates less useless features compared to the mine at once methods [ 22 ] . In the very first paper by Kudo et al . [ 15 ] , AdaBoost was used for updating the example weights . However , AdaBoost is not efficient in graph mining , because it takes too many iterations to finish . Thus recent papers use mathematical programming based approaches such as linear programming boosting ( LPBoost ) [ 3 , 24 ] and quadratic programming boosting ( QPBoost ) [ 26 ] . Furthermore , to reduce the number of iterations , several patterns are collected at the same time in one iteration by multiple pricing [ 22 ] . Nevertheless , substructure boosting can still be improved in term of efficiency , because the computation time for mathematical programming is substantially large . In itemset boosting [ 27 ] , it is reported that the computational time for mathematical programming is much larger than that needed for mining . In particular , when solving a regression problem , one has to use a quadratic program that is computationally more demanding than a linear program .
We propose a new iterative mining method based on partial least squares regression ( PLS ) [ 33 , 25 , 34 ] . PLS is an iterative algorithm that extracts latent features iteratively from a high dimensional space . An attractive point of PLS is that it depends only on elementary matrix calculations ( ie , addition and multiplications ) . Therefore , it is more efficient than other methods depending on mathematical programming or eigen decomposition . In gBoost , the transition from vectorial to graph data is achieved by replacing the feature selection step by a pattern mining algorithm [ 22 ] . In PLS , it is not so simple , because conventional algorithms for PLS such as NIPALS [ 33 ] require the deflation of the whole feature matrix . The feature matrix consists of the feature vectors of all training examples , and NIPALS substracts a dense matrix from the feature matrix in each iteration . It is possible only if the whole feature matrix is loaded to memory , which is not practical in graph mining .
In this paper , we develop a sparse version of non deflation PLS such that each latent component depends on a limited number of subgraph patterns . Then , it is combined with a pattern mining algorithm to deal with graph data . We call our algorithm graph PLS or gPLS in short . gPLS collects informative patterns in a limited number of iterations , as it avoids the discovery of identical patterns by means of orthogonality constraints . Like gspan and gBoost , gPLS employs the DFS code tree [ 36 ] as the canonical search space of graph patterns . The criterion for pattern search is quite simple and it turns out that the pattern search algorithm in gBoost ( ie , weighted substructure mining ) can be reused in gPLS as well .
This paper is organized as follows . In Section 2 , we introduce the PLS regression and present its non deflation version . Section 3 explains how PLS is applied to graph data . In Section 4 , extensive experiments for various chemical datasets are presented . Section 5 discusses other possibilities in developing graph regression algorithms . Finally , we conclude the paper in Section 6 .
2 . PARTIAL LEAST SQUARES REGRESSION
This section reviews the partial least squares regression ( PLS ) algorithm for vectorial data . We first explain the conventional NIPALS algorithm and introduce a new non deflation algorithm . The transition from vectorial to graph data will be discussed in the next section .
Let us assume n training examples ( x1 , y1 ) , . . . , ( xn , yn ) where xi ∈ ℜd and yi ∈ ℜ . The output yi is assumed to be centralized Pi yi = 0 . Denote by X the design matrix , where each row correi . Also denote by y the vector of all training outputs . sponds to x ⊤
The regression function of PLS is linear , but the following special form , f ( x ) = m
Xi=1
αi w⊤ i x ,
( 1 ) where wi are weight vectors that reduce the dimensionality of x , satisfying the following orthogonality condition : w⊤ i X ⊤ X w j = fl 1 ( i = j )
0 ( i 6= j )
( 2 )
We need to determine two kind of parameters wi and αi . Basically , wi are learned first , and the coefficients αi are obtained by least squares regression without any regularization ,
α = argmin
α n
Xk=1
( yk − m
Xi=1
αi w⊤ i xk )2 .
( 3 )
Due to the orthogonality conditions , this problem is easily solved as
αi = n
Xk=1 yk w⊤ i xk .
( 4 )
The weight vectors are determined by the following greedy algorithm . The first vector is obtained by maximizing the covariance between the mapped feature X w1 and the output variable y , w1 = argmax w
( Pn k=1 yk w⊤xk )2 w⊤w
( 5 ) subject to w⊤ X ⊤ X w = 1 . This problem is solved analytically as
1 δ where δ is the normalization factor w1 =
X ⊤ y
δ = qy⊤ X X ⊤ X X ⊤ y . wi = argmax w
( Pn w⊤w
For the i th weight vector , the same optimization problem is solved with additional constraints to keep orthogonality , k=1 yk w⊤xk )2
( 6 ) subject to w⊤ X ⊤ X w = 1 , w⊤ X ⊤ X w j = 0 , j = 1 , . . . , i − 1 .
The optimal solution of this problem cannot be obtained analytically . Since the regression of α is done without any regularization , it is important to choose the number of weight vectors appropriately . Typically , it is chosen to optimize the cross validation error , or other model selection criteria such as AIC and BIC [ 25 ] . 2.1 NIPALS
Let us define the i th latent component as t i = X wi . The NIPALS algorithm [ 33 ] solves the optimization problem ( 6 ) in an indirect way , namely the optimal latent components t i are obtained first and the corresponding wi is obtained later . Let us define Ti−1 as the matrix of latent components obtained so far ,
Ti−1 = ( t1 , . . . , ti−1 ) and define a projection matrix as
Pi−1 = Ti−1(T ⊤ i−1 Ti−1)−1T ⊤ i−1 = Ti−1 T ⊤ i−1 .
( 7 )
The second equality is due to the orthogonal conditions ( 2 ) . Then , a deflated design matrix ˜X is defined as
˜Xi = X − Pi−1 X .
Now we solve the following problem based on the deflated matrix , vi = argmax v
( Pn k=1 yk v ⊤ ˜xik )2 v ⊤v where v ⊤ i
˜X ⊤ i
˜Xi vi = 1 . As in ( 5 ) , the optimal solution has the form vi =
1 η
˜X ⊤ i y .
( 8 )
˜Xi ˜X ⊤ where η = qy⊤ ˜Xi ˜X ⊤ In literature , we could not find appropriate terminology for vi , but here we call it the i th preweight vector , because it is used to create the “ real ” weight vector wi . Based on vi , the optimal latent component is obtained as i y . i ti = ˜Xi vi .
Finally , we have to recover the optimal weight vector wi based on the following equation [ 8 ] ,
X wi = t i = ˜Xi vi = X vi − Pi−1 X vi .
Assuming the linear independence of rows of X , the equation is solved as i−1 wi = vi −
( w⊤ j X ⊤ X vi )w j ,
Xj =1
( 9 ) which corresponds to the optimal solution of ( 6 ) .
The NIPALS algorithm consists of only elementary matrix computations and therefore is more efficient than solving ( 6 ) as an constrained quadratic program . The algorithm is summarized in Algorithm 1 . Due to the following relationship ,
˜Xi = ˜Xi−1 − t i−1t ⊤ i−1
˜Xi−1 , the deflated matrix is updated rather than recomputed in each iteration . However , for our purpose , the crucial drawback is that the sparseness of X is lost by deflation .
Algorithm 1 The NIPALS algorithm . 1 : Initial : ˜X1 = X 2 : for i = 1 , . . . , m do 3 : 4 : 5 : 6 : end for 7 : Conversion of vi to wi for all i as ( 9 ) vi = ˜X ⊤ t i = ˜Xi vi ˜Xi+1 = ˜Xi − ti t ⊤ i i y/η .
˜Xi
⊲ Pre weight vector ⊲ Latent components ⊲ Deflation
2.2 Non deflation sparse PLS
We now present an alternative derivation of PLS that avoids the deflation step and that is based on the connection of PLS the the Lanczos method and that uses recursive fitting of residuals [ 5 , 13 ] . Substituting the definition of the projection matrix to the pre weight vector ( 8 ) , we obtain v =
1 η
X ⊤(I − Ti−1T ⊤ i−1)y .
( 10 ) alternative way is to compute the residual vector r i = ( I − Ti−1T ⊤ i−1)y . and then multiply it with X ⊤ . Following this idea , the NIPALS algorithm can be modified to a non deflation version ( Algorithm 2 ) . In graph mining , it is useful to have sparse weight vectors wi such that only a limited number of patterns are used for prediction . To this aim , we modify the algorithm further by introducing sparseness to the pre weight vectors vi as follows : vi j = 0 , if |vi j | ≤ ǫ , j = 1 , . . . , d .
Due to the linear relationship between vi and wi , it is understood that wi becomes sparse as well . The sparse weight vectors satisfy the orthogonality conditions ( 2 ) . There are two alternative ways to determine the threshold ǫ : 1 ) Sort |vi j | in the descending order , take the top k elements , and set all the other elements to zero . 2 ) Set ǫ to a fixed threshold . In the latter case , the number of non zero elements in vi may vary . In the experiments presented in this paper , we took the former top k approach to avoid unbalanced weight vectors and to make efficiency comparisons easier .
It is worthwhile to notice that the residual of regression up to the i − 1 th features , rik = yk − i−1
Xj =1
α j w⊤ j xk
( 11 ) is equal to the k th element of r i . It can be verified by substituting the definition of α j ( 4 ) into ( 11 ) . So in the non deflation algorithm , the pre weight vector v is obtained as the direction that maximizes the covariance with residues . This observation highlights the resemblance of PLS and boosting algorithms [ 3 ] . In boosting , example weights are iteratively altered such that the examples with high residues are weighted more . In this formulation of PLS , it is clearer that the residue vector plays a role similar to that of boosting ’s example weights . The connection between PLS and boosting is discussed in [ 17 ] . i−1)y
Algorithm 2 Non deflation Sparse PLS algorithm . 1 : for i = 1 , . . . , m do 2 : 3 : 4 : 5 : 6 : 7 : end for r i = ( I − Ti−1 T ⊤ vi = X ⊤r i /η . vi j = 0 , if |vi j | ≤ ǫ , j = 1 , . . . , d j X ⊤ X vi )w j wi = vi −Pi−1 j =1(w⊤ ti = X wi
⊲ Residue ⊲ Pre weight vector ⊲ Sparsify ⊲ Weight vector ⊲ Latent components
3 . GRAPH PLS ( GPLS )
In this section , we discuss how to apply the non deflation PLS algorithm to graph data . Here we deal with undirected , labeled and connected graphs . To be more precise , we define the graph and its subgraph as follows :
Definition 1
( Labeled connected graph ) . A labeled graph is represented in a 4 tuple G = ( V , E , L , l ) , where V is a set of vertices , E ⊆ V × V is a set of edges , L is a set of labels , and l V ∪ E → L is a mapping that assigns labels to the vertices and edges . A labeled connected graph is a labeled graph such that there is a path between any pair of vertices .
The NIPALS algorithm first computes the deflated matrix X ⊤(I − Ti−1 T ⊤ i−1 ) and then multiplies it with y . However , an obvious
Definition 2
( Subgraph ) . Let G′ = ( V ′ , E ′ , L′ , l ′ ) and G = ( V , E , L , l ) be labeled connected graphs . G′ is a subgraph of G
Tree of Substructures
A
B
A
B
C
D
A
B
A
B
C
Figure 2 : Schematic figure of the tree shaped search space of graph patterns ( ie , the DFS code tree ) . To find the optimal pattern efficiently , the tree is systematically expanded by rightmost extensions .
( G′ ⊆ G ) if the following conditions are satisfied : ( 1 ) V ′ ⊆ V , ( 2 ) E ′ ⊆ E , ( 3 ) L′ ⊆ L , ( 4 ) ∀v ′ ⊆ V ′ , l(v ′ ) = l ′(v ′ ) and ( 5 ) ∀e′ ⊆ E ′ , l(e′ ) = l ′(e′ ) . If G′ is a subgraph of G , then G is a supergraph of G′ .
Our training set is represented as ( G1 , y1 ) , . . . , ( Gn , yn ) where Gi is a graph and yi ∈ ℜ is a target value . Let p be a subgraph pattern in a graph , and P be the set of all patterns , ie , the set of all subgraphs included in at least one graph . Then , the whole feature vector of each graph Gi is encoded as a |P| dimensional vector xi , xip = fl 1 if p ⊆ Gi , −1 otherwise
This feature space has already been illustrated in Figure 1 . Since |P| is a huge number , we cannot keep the whole design matrix . So we need to set X as the empty matrix first , and grow the matrix as the iterations proceed . In each iteration , we obtain the set of patterns p whose pre weight |vip | is above the threshold , which can be written as n
Xj =1
Pi = {p | fifififififi ri j x j pfifififififi
≥ ǫ} .
( 12 )
Then , the design matrix is expanded to include newly introduced patterns . The pseudocode of gPLS is described in Algorithm 3 . Most numerical computations are carried over from Algorithm 2 except that the residue vector is updated .
The pattern search problem ( 12 ) is exactly the same as the one solved in gBoost [ 22 ] . So we can reuse the same method to enumerate Pi . More specifically , it can be done by gspan function in the gBoost MATLAB toolbox1 . However , we explain the pattern search algorithm briefly for the completeness of this paper .
Our search strategy is a branch and bound algorithm that requires a canonical search space in which a whole set of patterns are enumerated without duplication . As the search space , we adopt the DFS code tree [ 36 ] . The basic idea of the DFS code tree is to organize patterns as a tree , where a child node has a supergraph of the pattern in its parent node . ( Figure 2 ) . A pattern is represented as a text string called the DFS ( depth first search ) code . The patterns are enumerated by generating the tree from the root to leaves using a recursive algorithm . To avoid duplications , node generation is systematically done by rightmost extensions . Algorithm 4 shows the pseudo code for the recursive algorithm .
For efficient search , it is important to minimize the size of the search space . To this aim , tree pruning is crucially important [ 18 , 1http://wwwkybmpgde/bs/people/nowozin/gboost/ j =1 ri j x j pfififi
X Pi : design matrix restricted to Pi X ← X ∪ X Pi vi = X ⊤r i /η
Algorithm 3 gPLS 1 : r 1 = y , X = ∅ 2 : for i = 1 , . . . , m do 3 : 4 : 5 : 6 : 7 : 8 : 9 : 10 : end for
Pi = {p | fififiPn wi = vi −Pi−1 ti = X wi r i+1 = r i − ( y⊤ti )ti j =1(w⊤ j X ⊤ X vi )w j
≥ ǫ}
⊲ Pattern search
⊲ Pre weight vector ⊲ Weight vector ⊲ Latent component ⊲ Update residues if p is not a minimum DFS code then
P ← ∅ for p ∈ DFS codes with single nodes do project( p ) end for return P
Algorithm 4 Pattern search algorithm 1 : procedure Pattern Search 2 : 3 : 4 : 5 : 6 : 7 : end procedure 8 : function project( p ) 9 : 10 : 11 : 12 : 13 : 14 : 15 : 16 : 17 : 18 : 19 : 20 : 21 : end function
P ← P ∪ {p} project( p′ ) end for return return end if if pruning condition ( 13 ) holds then end if if p satisfies the condition ( 12 ) then end if for p′ ∈ rightmost extensions of p do
15 ] . Let us define the gain function as s( p ) = fififiPn
. Suppose the search tree is generated up to the pattern p . If it is guaranteed that the gain of any supergraph p′ is not larger than ǫ , we can avoid the generation of downstream nodes without losing the optimal pattern . Our pruning condition is described as follows . j =1 ri j x j pfififi
Theorem 1 . Define ˜yi = sgn(ri ) . For any pattern p′ such that p ⊆ p′ , s( p′ ) < ǫ , if max{s+( p ) , s−( p)} < ǫ ,
( 13 ) where s+( p ) = 2 X{i| ˜yi =+1,xi , j =1} s−( p ) = 2 X{i| ˜yi =−1,xi , j =1}
|ri | −
|ri | + n
Xi=1 n
Xi=1 ri ri .
Other conditions such as the maximum size of pattern ( maxpat ) and the minimum support ( minsup ) can be used in combination with the pruning condition ( 13 ) .
2 Q
0.8
0.6
0.4
0.2
0
−0.2
−0.4
−0.6
−0.8
1
2
3
4
EDKB
) c e s ( e m i t
102
101
100
10−1
10−2
10−3 gPLS gBoost
EDKB gPLS NT gPLS MT gBoost NT gBoost MT changed as m = {10 , 20 , 30 , 40 , 50} , k = {10 , 20 , 30 , 40 , 50} to cope with large scale data . In gBoost , the regularization parameter was varied as ν = {0.1 , 0.2 , . . . , 0.9} for classification , and C = {10 , 50 , 100 , 150 , 200 , 1000} for regression . The number of patterns to add per iteration is set to 50 for CAS and AIDS , and 10 for the other datasets . The accuracy is measured by Q2 for regression and by the area under the ROC curve ( AUC ) for classification . The Q2 score is defined as
Q2 = 1 − Pn i=1 yi − 1 Pn i=1 ( yi − f ( xi ))2 i=1 yi2 n Pn which is close to 1 when the regression function fits good , and is close to 0 when it does not . The interpretation is similar to that for the Pearson correlation coefficient .
The results of gPLS and gBoost are compared in Table 2 . For EDKB and CPDB datasets , we performed more detailed experiments with different settings of maximum pattern size ( Figure 3 and 4 ) . In terms of accuracy , it is difficult to decide which method is better . GPLS was better in EDKB , CPDB and AIDS1 but gBoost was better in CAS . However , in terms of computational time , gPLS is clearly superior . In the table , we distinguish the computational time for pattern search ( mining time , MT ) and the numerical computations ( numerical time , NT ) . The numerical time of gBoost was significantly larger than that of gPLS in all datasets , showing that gPLS ’s computational simplicity contributes to reduce the actual computational load . For large datasets ( AIDS2 and AIDS3 ) , gBoost did not finish in a reasonable amount of time .
Figure 5 shows the patterns selected by gPLS from the EDKB dataset . It is often observed that similar patterns are extracted together in the same component . This property makes PLS stable , because the regression function is less affected by small changes in graph data . 4.2 Efficiency gain by iterative mining
The main idea of iterative mining is to gain efficiency by means of adaptive example weights . We evaluated how large the efficiency gain is by comparing gPLS and a naive method that enumerates all patterns first and apply PLS afterwards . Table 3 summarizes the results for different maximum pattern sizes ( maxpat ) . In the naive method , the number of patterns grow exponentially , hence the computational time for PLS grows rapidly as well . GPLS successfully keeps computational time small in all occasions .
5 . DISCUSSION
So far , we have mainly focused on gPLS and gBoost . They are similar in that graph patterns are iteratively collected based on the weighted mining criterion . Obviously , they are not the only ones belonging to this family of algorithms . Other boosting methods and PLS like methods could be applied to graph data in the same fashion .
However , it is important to recognize that there are two distinct classes in boosting algorithms , sequential update and totally corrective update . Both classes are based on linear classification function , f ( x ) = Xi=1 wi xi .
In sequential update algorithms including AdaBoost and its variants ( GradientBoost , MadaBoost etc. ) , a new feature xi+1 is added in one iteration and the corresponding weight wi+1 is determined . However , previously fixed weights are never updated again . In these methods , numerical computation per iteration is very simple , but it
7
8
9
10
10−4
1
2
3
4
5
6 maxpat
5
6 maxpat
7
8
9
10
Figure 3 : Regression accuracy ( left ) and computational time ( right ) against maximum pattern size ( maxpat ) in the EDKB dataset .
0.95
0.9
0.85
0.8
0.75
0.7
0.65
0.6
C U A
0.55
1
2
3
4
CPDB
5
6 maxpat
) c e s ( e m i t gPLS gBoost
7
8
9
10
103
102
101
100
10−1
10−2
10−3
1
2
3
4
CPDB gPLS NT gPLS MT gBoost NT gBoost MT
7
8
9
10
5
6 maxpat
Figure 4 : Classification accuracy ( left ) and computational time ( right ) against maximum pattern size ( maxpat ) in the CPDB dataset .
4 . EXPERIMENTS
In this section , we evaluate our method using four publicly available chemical datasets : EDKB2 , CPDB3 , CAS4 and AIDS5 . Links to these datasets can be found in ChemDB [ 2 ] . Table 1 shows the summary of the datasets . Among them , the AIDS dataset [ 14 , 4 ] is by far the largest both in the number of examples and the graph size . EDKB is a regression dataset , but the others are classification datasets . In gPLS , we solved classification problems by regressing the target values +1 , −1 . In gBoost , we employed the gBoost MATLAB toolbox for classification datasets so that the experimental results are easily reproducible . Since the toolbox does not offer regression solvers , we implemented a graph boosting regression algorithm based on quadratic programming . See Appendix for details . We set minimum support parameter ( minsup ) to 2 for relatively small datasets ( EDKB , CPDB and AIDS1 ) , and to 10 % of the number of positives for large datasets ( CAS , AIDS2 and AIDS3 ) . Throughout the experiments maximum pattern size ( maxpat ) is set to 10 . We used AMD Opteron 2.2GHz system with at most 8GB memory for all experiments . 4.1 gPLS vs gBoost
GPLS is compared with gBoost in five fold cross validation experiments . In gPLS , there are two parameters to tune , namely the number of iterations m and the number of obtained patterns per search k . For each dataset , we exhaustively tried all combinations from m = {5 , 10 , 15 , 20 , 25 , 30 , 35} and k = {5 , 10 , 15 , 20 , 25 , 30 , 35} . In the following , we always report the best test accuracy among all settings . Notice that , for AIDS datasets , the parameter values are 2http://edkbfdagof/databasedoorhtml 3http://potencyberkeleyedu/cpdbhtml 4http://wwwchemoinformaticsorg/datasets/bursi/ 5http://dtpncinihgov/indexhtml
Figure 5 : Patterns obtained by gPLS from the EDKB datasets . Each column corresponds to the patterns of a PLS component .
Table 1 : Summary of datasets .
EDKB CPDB CAS
AIDS1 ( CA vs CM )
AIDS2 ( CA CM vs CI )
AIDS3 ( CA vs CI ) label type real binary binary binary binary binary
# data
59 684 4337 1324 40939 39965
# positives
# negatives avg . atoms avg . bonds
342 2401 350 1324 350
343 1936 974 39615 39615
18.5 14.1 29.9 48.8 42.7 42.7
20.1 14.6 30.9 51.0 44.6 44.5
Table 2 : Results of gPLS and gBoost in various datasets . Values in the parentheses are optimal parameters achieving the best test accuracy . P : the average number of obtained patterns , MT : mining time , NT : numerical time , ITR : the number of iterations required until convergence . gPLS
( m , r)* EDKB ( 10 , 30 ) CPDB ( 20 , 15 ) ( 30 , 10 ) CAS AIDS1 ( 10 , 10 ) ( 40 , 10 ) AIDS2 AIDS3 ( 50 , 20 )
P 296 258 294 99 396 946
MT 16.0 26.8 3570 290 50300 57100
NT
0.0025 0.474 14.1 0.0652
167 509
AUC/Q2†
0.647† ± 0.129 0.862 ± 0.0214 0.870 ± 0.0098 0.773 ± 0.0538 0.747 ± 0.0266 0.883 ± 0.0541
( ν/C†)* ( 100† ) ( 0.4 ) ( 0.4 ) ( 0.4 )
P 216 260 503 186
MT 15.6 22.8 8630 783 gBoost NT 83.3 344 391 299 over 24h over 24h
AUC/Q2†
0.639† ± 0.164 0.862 ± 0.0316 0.867 ± 0.000251
0.752 ± 0.138
ITR 9.2 18.6 13.4 19.6 takes many iterations to converge . In graph mining , each iteration involves pattern search , so sequential update algorithms are not efficient after all . On the other hand , totally corrective methods , such as gPLS , gBoost and TotalBoost [ 32 ] , update all weights whenever new features are introduced . It requires more complicated numerical computation but the number of iterations can be by far smaller . Also it is possible to collect several patterns in each iteration , which substantially helps to reduce the number of iterations further . Graph LARS [ 29 ] could be considered as a totally corrective method as it updates all weights . However , since it is based on regularization path tracking , it is not clear how to collect more than one pattern by a mining call .
6 . CONCLUSION
We presented a novel graph regression method based on partial least squares regression . Experiments showed that gPLS has better efficiency than gBoost . However , gPLS cannot completely replace gBoost , because gBoost has an advantage in its flexibility . With a little modification in mathematical programming formulation , gBoost can solve various machine learning problems , such as one class SVM , ranking and the positive/negative unbalanced classification problem . In this paper , we used graph data only , but gPLS can be applied to subclasses of graphs such as trees , sequences and itemsets , simply by replacing graph mining with an appropriate mining algorithm .
Acknowledgements The authors would like to thank Pierre Mahé for data preparation , Ichigaku Takigawa for figure preparation , and Sebastian Nowozin for preparation of MATLAB toolbox and proof reading .
7 . REFERENCES [ 1 ] B . Bringmann , A . Zimmermann , L . D . Raedt , and S . Nijssen .
Don’t be afraid of simpler patterns . In 10th European Conference on Principles and Practice of Knowledge Discovery in Databases ( PKDD ) , pages 55–66 . Sprinter , 2006 .
[ 2 ] J . Chen , S . J . Swamidass , Y . Dou , J . Bruand , and P . Baldi . Chemdb : A public database of small molecules and related chemoinformatics resources . Bioinformatics , 21(22):4133–4139 , 2005 .
[ 3 ] A . Demiriz , K . Bennet , and J . Shawe Taylor . Linear programming boosting via column generation . Machine Learning , 46(1 3):225–254 , 2002 .
[ 4 ] M . Deshpande , M . Kuramochi , N . Wale , and G . Karypis . Frequent sub structure based approaches for classifying chemical compounds . IEEE Trans . Knowl . Data Eng . , 17(8):1036–1050 , 2005 .
[ 5 ] L . Eldén . Partial least squares vs . lanczos bidiagonalization i :
Analysis of a projection method for multiple regression . Computational Statistics and Data Analysis , 46(1):11–31 , 2004 .
[ 6 ] H . Fröhrich , J . Wegner , F . Sieker , and Z . Zell . Kernel functions for attributed molecular graphs a new similarity based approach to ADME prediction in classification and regression . QSAR & Combinatorial Science , 25(4):317–326 , 2006 .
[ 7 ] C . Helma , T . Cramer , S . Kramer , and L . Raedt . Data mining and machine learning techniques for the identification of mutagenicity inducing substructures and structure activity relationships of noncongeneric compounds . J . Chem . Inf . Comput . Sci . , 44:1402–1411 , 2004 .
[ 8 ] A . Höskuldsson . PLS Regression Methods . Journal of
Chemometrics , 2:211–228 , 1988 .
[ 9 ] A . Inokuchi . Mining generalized substructures from a set of labeled graphs . In Proceedings of the 4th IEEE Internatinal Conference on Data Mining , pages 415–418 . IEEE Computer Society , 2005 .
[ 10 ] H . Kashima , K . Tsuda , and A . Inokuchi . Marginalized kernels between labeled graphs . In Proceedings of the 21st International Conference on Machine Learning , pages 321–328 . AAAI Press , 2003 .
Table 3 : Frequent mining + PLS vs gPLS in the CPDB dataset frequent mining + PLS gPLS maxpat
# patterns mining time numerical time AUC # patterns mining time
1 2 3 4 5 6 7 8 9 10 11 12 13 ∞
17 61 182 515 1387 3500 8215 18107 37719 74857 143006
0.0927 0.148 0.212 0.282 0.602 2.55 4.38 7.6 17.9 40.3 70.3
0.038 0.0164 0.0335 0.0923 0.221 0.525 1.60 5.32 7.42 51.2 92.8
0.696 0.770 0.812 0.842 0.846 0.852 0.848 0.840 0.840 0.842 0.835 out of memory out of memory out of memory
15.2 45.8 73.8 82.6 93.4 85.6 65.4 172 209 244 244 244 244 244
0.308 1.20 1.09 2.06 1.97 2.67 3.19 13.1 12.7 26.8 35.4 46.3 52.4 66.3 numerical time AUC 0.700 0.782 0.833 0.857 0.844 0.833 0.837 0.857 0.859 0.862 0.862 0.862 0.861 0.861
0.038 0.1169 0.0573 0.0488 0.0296 0.0222 0.0146 0.247 0.282 0.474 0.375 0.367 0.549 0.586
[ 11 ] J . Kazius , S . Nijssen , J . Kok , and T . B . A . Ijzerman .
[ 22 ] S . Nowozin , K . Tsuda , T . Uno , T . Kudo , and G . Bakir .
Substructure mining using elaborate chemical representation . J . Chem . Inf . Model . , 46:597–605 , 2006 .
[ 12 ] R . Kohavi and G . H . John . Wrappers for feature subset selection . Artificial Intelligence , 1 2:273–324 , 1997 .
[ 13 ] N . Krämer and M . Braun . Kernelizing partial least squares , degrees of freedom , and efficient model selection . In Proceedings of the 24th International Conference on Machine Learning , pages 441 – 448 . AAAI Press , 2007 .
[ 14 ] S . Kramer , L . Raedt , and C . Helma . Molecular feature mining in HIV data . In Proceedings of the 7th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining . ACM Press , 2001 .
[ 15 ] T . Kudo , E . Maeda , and Y . Matsumoto . An application of boosting to graph classification . In Advances in Neural Information Processing Systems 17 , pages 729–736 . MIT Press , 2005 .
Weighted substructure mining for image analysis . In IEEE Computer Society Conference on Computer Vision and Pattern Recognition ( CVPR ) , IEEE Computer Society , 2007 .
[ 23 ] L . Ralaivola , S . Swamidass , H . Saigo , and P . Baldi . Graph kernels for chemical informatics . Neural Netw . , 18(8):1093–1110 , 2005 .
[ 24 ] G . Rätsch , A . Demiriz , and K . Bennett . Sparse regression ensembles in infinite and finite hypothesis spaces . Machine Learning , 48(1 3):189–218 , 2002 .
[ 25 ] R . Rosipal and N . Krämer . Overview and recent advances in partial least squares . In Subspace , Latent Structure and Feature Selection Techniques , pages 34–51 . Springer , 2006 . [ 26 ] H . Saigo , T . Kadowaki , and K . Tsuda . A linear programming approach for molecular QSAR analysis . In International Workshop on Mining and Learning with Graphs ( MLG ) , pages 85–96 , 2006 .
[ 16 ] P . Mahé , L . Ralaivola , V . Stoven , and J P Vert . The
[ 27 ] H . Saigo , T . Uno , and K . Tsuda . Mining complex genotypic pharmacophore kernel for virtual screening with support vector machines . J . Chem . Inf . Model . , 46(5):2003–2014 , 2006 .
[ 17 ] M . Momma and K . Bennett . Constructing orthogonal latent features for arbitrary loss . Feature Extraction , Foundations and Applications . Springer , 2006 .
[ 18 ] S . Morishita . Computing optimal hypotheses efficiently for boosting . In Discovery Science , pages 471–481 . Springer , 2001 .
[ 19 ] S . Morishita and J . Sese . Traversing itemset lattices with statistical metric learning . In Proceedings of ACM SIGACT SIGMOD SIGART Symposium on Database Systems ( PODS ) , pages 226–236 . ACM Press , 2000 .
[ 20 ] S . Nijssen and J . Kok . A quickstart in frequent structure mining can make a difference . In Proceedings of the 10th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining , pages 647–652 . ACM Press , 2004 .
[ 21 ] S . Nowozin , G . Bakir , and K . Tsuda . Discriminative subsequence mining for action classification . In Proceedings of the 11th IEEE International Conference on Computer Vision ( ICCV 2007 ) , pages 1919–1923 . IEEE Computer Society , 2007 . features for predicting HIV 1 drug resistance . Bioinformatics , 23(18):2455–2462 , 2007 .
[ 28 ] A . Sanfeliu and K . Fu . A distance measure between attributed relational graphs for pattern recognition . IEEE Trans . Syst . Man Cybern . , 13:353–362 , 1983 .
[ 29 ] K . Tsuda . Entire regularization paths for graph data . In
Proceedings of the 24th International Conference on Machine Learning , pages 919–926 , 2007 .
[ 30 ] K . Tsuda and T . Kudo . Clustering graphs by weighted substructure mining . In Proceedings of the 23rd International Conference on Machine Learning , pages 953–960 . ACM Press , 2006 .
[ 31 ] K . Tsuda and K . Kurihara . Graph mining with variational dirichlet process mixture models . In SIAM Conference on Data Mining ( SDM ) , 2008 .
[ 32 ] M . Warmuth , J . Liao , and G . Rätsch . Totally corrective boosting algorithms that maximize the margin . In Proceedings of the 23rd International Conference on Machine Learning , pages 1001–1008 , 2006 .
[ 33 ] H . Wold . Path models with latent variables : The NIPALS approach . In Quantitative Sociology : International Perspectives on Mathematical and Statistical Model Building , pages 307–357 . Academic Press , 1975 . dual problem . Though the dual problem has too many constraints , it can be efficiently solved by an iterative procedure called the column generation algorithm [ 3 ] . First of all , an initial solution of λ is obtained from the problem with no constraints ( 19 ) . In each iteration , one finds the most violated constraint based on the current value of λ , and add the found constraint to the quadratic program . In our case , a constraint corresponds to a subgraph pattern , so we need to solve the following search problem , argmax p∈P n
Xi=1 fifififififi
,
λi xipfifififififi where λ = λ+ − λ− . This search problem coincides with that of gPLS ( 12 ) , and can be solved using the same algorithm ( Algorithm 4 ) . In each iteration of the algorithm , a dual quadratic program with a limited number of constraints is solved and the obtained solution will be used in the next search . The iteration will be continued until the dual parameter λ converges .
[ 34 ] S . Wold , M . Sjöstöm , and L . Erikkson . PLS regression : a basic tool of chemometrics . Chemometrics and intelligent laboratory systems , 58:109–130 , 2001 .
[ 35 ] X . Yan , H . Cheng , J . Han , and P . S . Yu . Mining significant graph patterns by leap search . In Proceedings of the ACM SIGMOD International Conference on Management of Data , pages 433–444 , 2008 .
[ 36 ] X . Yan and J . Han . gSpan : graph based substructure pattern mining . In Proceedings of the 2002 IEEE International Conference on Data Mining , pages 721–724 . IEEE Computer Society , 2002 .
APPENDIX Here we briefly describe the gBoost regression algorithm . Boosting methods construct a linear combination of weak hypotheses to come up with a better prediction . In our case , a weak hypothesis corresponding to each subgraph pattern p is described as xip = fl 1 if p ⊆ Gi , −1 otherwise .
The regression function is formulated as f ( x ) = n
Xi=1
α pxip + b , where α , b are weight parameters to be learned . The learning problem is written as argmin
α,b Xp∈P
|α p| +
C 2 n
Xi=1 , Xp∈P
α p xip + b − yi 2
, where C is the regularization parameter to be adjusted . Using the L1 norm regularizer ( the first term ) , sparsity is enforced to the parameters .
The problem is rewritten as the following quadratic program . n
C 2
ξ 2 i
( α+ p ) + p + α−
Xi=1 α p xip + b − yi ≤ ξi ,
( 14 ) i = 1 , . . . , n
( 15 ) min
α,ξ,b Xp∈P st Xp∈P yi − Xp∈P
α p xip − b ≤ ξi , i = 1 , . . . , n
( 16 )
α+ , α− ≥ 0 ,
ξ ≥ 0 , where ξi is a slack variable , α p = α+ p . The above quadratic program has |P| variables and 2n constraints . Directly solving this primal problem is hard due to the large number of variables in α . Thus , we consider the dual problem : p − α−
( 17 ) i + λ− i )2 − n
Xi=1 yi ( λ+ i − λ− i )
( 18 )
−1 ≤
( λ+ i − λ− i )xip ≤ 1 , ∀ p ∈ P
( 19 ) min λ st
1 2C n n n
( λ+
Xi=1 Xi=1 i − λ− λ+ i = 0 , λ+ , λ− ≥ 0 ,
Xi=1 where λ+ i are Lagrange multipliers for the constraints ( 15 ) and ( 16 ) , respectively . Once the dual problem is solved , the primal solution α and b are recovered from the Lagrange multipliers of the i and λ−
( 20 )
