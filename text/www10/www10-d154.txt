An Efficient Random Access Inverted Index for
Information Retrieval
Xiaozhu Liu
State Key Lab of Software Engineering
Wuhan University
Wuhan 430072 , China lxz_h@163.com
Zhiyong Peng School of Computer Wuhan University
Wuhan 430072 , China peng@whueducn
ABSTRACT To improve query performance and space efficiency , an efficient random access blocked inverted index ( RABI ) is proposed . RABI divides an inverted list into blocks and compresses different part of each block with the corresponding encoding method to decrease space consumption . RABI can provide fast addressing and random access functions on the compressed blocked inverted index with the novel hybrid compression method , which can provide both block level and inner block level skipping function and further enhance both space and time efficiencies without inserting any additional auxiliary information . Experimental results show that RABI achieves both high space efficiency and search efficiency , and outperforms the existing approach significantly . Categories and Subject Descriptors H31 [ Information Storage and Retrieval ] : Content Analysis and Indexing Indexing methods . General Terms Algorithms , Measurement , Performance . Keywords Information Retrieval , Inverted Index , Random Access .
1 . INTRODUCTION
The inverted index technique has been comprehensively studied in recent years [ 1 , 2 ] . An inverted index consists of an index file ( vocabulary ) and a postings file ( a set of inverted lists ) . Compressing inverted lists is the most popular technique used to increase query throughput [ 1 , 3 , 4 ] . Although the disk access time can be reduced greatly , the compressed index for each query term must be completely decompressed , which will degrade query performance to some extent , especially for a huge amount of text [ 5 , 6 , 7 ] .
Some works [ 2 , 4 , 7 ] show that the blocked inverted index with skipping mechanism is a promising way to improve query performance on the compressed inverted index , which can provide fast addressing function with inserting some additional auxiliary information . However those blocked index mechanisms can incur high storage overheads with auxiliary information , and the increase in disk I/O time outweighs the reduction in decompression time for a huge amount of data . Hence how to design a good index to balance the tradeoff between time and space performance is an important and challenge task for large scale information retrieval systems .
Copyright is held by the author/owner(s ) . WWW 2010 , April 26 30 , 2010 , Raleigh , North Carolina , USA . ACM 978 1 60558 799 8/10/04 .
In this paper , a novel random access blocked inverted index ( RABI ) is proposed following our previous work on compressed inverted index [ 7 ] . Compared with the existed schemes , RABI can achieve both block level and inner block level fast addressing and random access functions on the compressed index without inserting any additional auxiliary information , which can decrease both space and time consumption . 2 . RANDOM ACCESS INVERTED INDEX 2.1 Index Structure and Compression Method iw , containing n postings For a given inverted list d , ( , j fq is the frequency of term jd . In order to guarantee that the frequency is in the ascending order without changing the fq is replaced with original order of frequency , the frequency the cumulative frequency jd is the document ID , iL of term
, where iw in
[ 1 , fq
1 ]
1 ,
∈
<
− d d n
) j
+ j j j j j f j
= fq j , i
∈ n [ 1 , ] .
( 1 ) jf : j ∑ i
1 = jf
Thus the cumulative frequency has the same ascending jd , which conduces to select appropriate order with document ID compression method to support fast addressing and random access functions . The structure of the proposed index RABI is shown in ip is the address of the blocked inverted list Figure 1 , where L ,i block
.
1
1 w s p 1 w s p
, ,
, ,
2
2
2 w s ,
N
N
, p
N
L 1,block L 2,block
L ,N block
1Loc
1LD
1LF
2Loc
2LD
2LF mLoc mI
Figure 1 : Structure of the random access inverted index rI .
L ,i block
In RABI , each blocked inverted list blocks . Every block rLoc and information section the information sections , except the mI the residual postings , other information section list document IDs , and frequency . To decrease space cost of section of consists of m rSB includes two sections : locating section . For ) i mSB is rI is made up of rLD is the ascending list of rLF is the ascending list of cumulative as possible , each is compressed with the corresponding encoding d f , i in the last block rLoc is a posting ( rLD and list rLF , where
L ,i block
L ,i block
WWW 2010 • PosterApril 26 30 • Raleigh • NC • USA1153 rLoc and the method as shown in Figure 1 . For locating section mSB , RABI firstly compresses them with d gap scheme . last block Considering that there is only one posting in the locating section rLoc , we choose the good compression ratio Golomb coding ( actual any other good encoding scheme can use ) to compress rLoc and mSB .
In order to implement fast locating and random access of the compressed index without inserting any additional auxiliary information , the key to the success of this mechanism is to find efficient encoding methods with accurate addressing and random access functions for compressing the document IDs and the cumulative frequencies in the information section within a block . The compression method should meet two conditions : the first condition is that it can achieve block level skipping without inserting any auxiliary information , and the second is that it can support inner block skipping , namely directly random access any element in a block with only decompressing the element . Since the binary interpolative coding ( BIC ) [ 3 ] method can efficiently compress the ascending order integer set , and BIC is also easy to calculate the space cost of any element in the compressed set if the first and last integers are known . If we know the postings of rLoc and 1rLoc + , the BIC method will meet the two necessary conditions mentioned above . Hence we adopt BIC to compress rLD and 2.2 Decoding and Random Access rLF of
For the convenience of decoding , we need to know the locating rI ,
1rLoc + to calculate the space cost ( bits ) of sections so we slightly adjust the physical storage order of rLoc and rI . as :
L ,i block
,
, 1
, 1
Loc Loc I Loc I , 3 2
Loc I , = m m denote the address of
, , L
2
( 2 ) I− , . m 1 1Loc . Then we can get the
L i block , P Loc ( ) 1 1Loc , addresses of
Let rLF in any block :
(
Loc r ) ,
1
=
2 ,
B Golomb k , r 1 − ∑
B Golomb k , j
1 =
+ rLD and p r , 1 , = ⎧ i ⎪ P Loc ( ) ⎪ 1 ⎪⎪= ⎨ ⎪ ⎪ ⎪ ⎪⎩
P Loc ( 1
∑ [
+
+
)
−
2 r
P Loc ( r
)
(
Loc
) j
( 3 )
B BIC k ,
(
LD j
)
+
B BIC k ,
(
LF j
) ] , r
∈
[ 3 , m ] j 1 = P Loc ( ) ⎧⎪ r 1 + =⎨ P I ) ( + ⎪⎩ m 1 − +
B BIC k ,
(
) r r r r
)
( r
)
=
] ,
∈
= m
P I ( ) r
P LD ( r
Loc r ) +
B , ( BIC k rLoc , m [ 1 , ∈ LF ( m 1 −
1 ] , − r m ) , , =
( 4 )
+ B BIC k , LD r ) ,
B Golomb k , LD ( m 1 − [ 1 ,
P LF ) ( r Loc B , ( Golomb k
P I ( is the space cost ( bits ) of rLD ,
) , 1 + B BIC k , ( 5 ) = where LD B , ( ) ) BIC k r rLF , k is the space cost of LD is the space cost of is the number of postings per block . According to the principle of BIC , we have : B BIC k , B BIC k ,
B ( BIC k , B ( = BIC k , if 0 , k ( ⎪ ⎩ ip and k , we can obtain the address of Hence , with the known any element in the compressed list by the expressions mentioned above . Then RABI can provide both block level and inner block level fast addressing and random access on the compressed index without inserting any additional auxiliary information . d f − k r k r 1 ( 1 ) 1 ⋅ + − + D k 1 , = − log , ⎤ ⎢ ⎥
( 6 ) ( 7 )
⎧⎪= ⎨ − ⋅ ⎡
( 8 )
D otherwise .
LD ) r LF ) r k 1 1 ) − ⋅ + −
1 ) , − 1 ) ,
L ,i block
B BIC k , d f
( (
1 ) r k 1 ⋅ +
D
−
)
(
( r
2
3 . EXPERIMETAL RESULTS inverted
To evaluate the efficiency of various file organizations , the skipped inverted file ( SIF ) [ 1 , 2 ] and RABI were implemented with C++ . All experiments were run on an Intel P4 3.0GHz PC with 1GB DDR memory system . We crawled a huge amount of real data from the Internet , and there were approximate 1,000,000 documents . We gave the actual space cost and conjunctive Boolean query processing time with varying number k of postings per block in Figure 2 .
RABI , k=129 RABI , k=1025 SIF , k=129 SIF , k=1025
)
B G
( e z i s x e d n I
30 29 28 27 26 25 24 23 22 21 20
RABIF SIF
5 9
7 1
3 3
5 6
9 2 1
7 5 2
3 1 5
5 2 0 1
) s ( e m T i
1 0.9 0.8 0.7 0.6 0.5 0.4 0.3 0.2 0.1 0
2
4
Number of postings per block ( a ) Space cost ( b ) Query time performance
10 12 14 16 18
8
6 Number of query terms
Figure 2 : Performance of two schemes
4 . CONCLUSIONS
In this paper , we have studied compression and query processing of an inverted index to improve time and space performance for information retrieval systems . Our proposed RABI divides the inverted list into blocks and employs a novel hybrid compression method to support fast addressing and random access functions . Compared with the existed mechanisms , RABI can support both block and inner block levels skipping function with less storage overhead . Experimental results show that , compared with SIF , our proposed RABI averagely reduces space cost by 5.3 % , conjunctive Boolean query time by 258 % This provides a very simple and attractive way to build a fast and space economical information retrieval system . 5 . ACKNOWLEDGMENTS
This work is supported by the National Natural Science Foundation of China under Grant No.90718027 , and the National Key Basic Research and Development ( 973 ) Plan of China under Grant No . 2007CB310806 . 6 . REFERENCES [ 1 ]
J . Zobel , A . Moffat . Inverted Files for Text Search Engines . ACM Computing Surveys , 38(2 ) : 1 56 , 2006 .
[ 2 ] A . Moffat , J . Zobel . Self Indexing Inverted Files for Fast Text Retrieval .
ACM Transactions on Information Systems , 14(4 ) : 349 379 , 1996 . [ 3 ] A . Moffat , L . Stuiver . Binary interpolative coding for effective index compression . Information Retrieval , 3(1 ) : 25 47 , 2000 .
[ 4 ] D . K . Blandford , G . E . Blelloch . Compact representations of ordered sets .
In Proc . of the 15th annual ACM SIAM Symposium on Discrete Algorithms ( SODA ) , pages 11 19 , 2004 .
[ 6 ]
[ 5 ] S . Buttcher , Charles L . Clarke . A . Index compression is good , especially for random access . In Proc . of the 16th ACM CIKM , pages 761 770 , 2007 . J . Zhang , X . Long , T . Suel . Performance of compressed inverted list caching in search engines . In Proc . of the 17th International Conference on World Wide Web , pages 387 396 , 2008 . Techniques . Journal of Software , 20(7 ) : 1768 1784 , 2009 .
[ 7 ] X . Liu , Z . Peng . Time and Space Efficiencies Analysis of Full Text Index
WWW 2010 • PosterApril 26 30 • Raleigh • NC • USA1154
