Adaptive Query Processing for Time Series Data
Yun Wu Huang
IBM TJ Watson Research Center
30 Saw Mill River Road Hawthorne , NY 10532 ywh @ usibmcom
ABSTRACT
Traditional query process for time series data transforms data from the time domain into the frequency domain . It is less controllable by the end users , therefore isn’t well suited for queries that find patterns with many dynamically specified user constraints . For these queries we present a method to search timeseries data which first transforms time sequences into symbol strings using change ratio between contiguous data points in time series . Next , a suffix tree is built to index all suffixes of the symbol strings . The focus of this paper is to demonstrate how this method can adapt to the processing of the dynamically constrained time series queries . Keywords Time series Query Processing , Data Mining , Pattern Matching .
[ 2 ] . The is highly desirable the prices of mutual
1 . INTRODUCTION Many real life database applications manage temporal data that are physically stored in time sequence . The examples of timeseries data include funds and stocks , the production outputs , weekly sale totals , and the daily temperatures . In many of these applications , to tind patterns in their respective time series data set . The result may help to improve the processes such as analyses , predictions , and data mining followings are examples of time series pattern matching queries : Ql : Find all stocks that behave “ similarly ” Q2 : Find all factories defect rates of their perspective upward trend . Q3 : Find all head and shoulder patterns sale totals based on 3 day moving averages . The example query Ql is a similarity query for time series data [ l , 3 , 7 , 151 . It can be used to help the prediction of future stock or mutual fund performance . The query Q2 can be used as a warning system to detect a potential production problem . The query Q3 provides a useful marketing tool in analyzing the sale patterns among different is based on the moving average [ 6 ] to generalize trends . in which the factories show a consecutive in any n day time periods in all regions’ weekly to a certain pattern . it regions .
It li)r profit or commercial advantage and that
282
Philip S . Yu
IBM TJ Watson Research Center
30 Saw Mill River Road Hawthorne , NY 10532 psyu @ usibmcom the into time domain
[ l , 3 , 7 , 151 which
Many traditional approaches in time series query processing are from based on transforming data the frequency domain to optimize the indexes so that more efficient search and retrieval can be achieved [ l , 3 , 7 , 15 , 161 . As a result , these approaches are well suited for searching patterns , such as the similarity based queries ( eg , example query Ql ) . We in this paper explore solutions when no known patterns exist . For example , the upward trend constraint in Q2 is very general and includes shapes of various degrees . Therefore , methods for similarity based pattern matching focus on matching a specific shape may not be suitable for processing Q2 . The example query Q3 is based on weekly totals and pre built indexes based on daily totals may not be effective in processing this query . Other examples include matching based on different moving average window sizes , matching combinatorial patterns ( eg , patterns represented by regular expressions ) , matching patterns with different degrees of accur+cy specified for different sub patterns , etc . In general , we focus time series query processing with various dynamically specified constraints and present a new method ( the Interactive Matching of Patterns with called Advanced Constraints is divided into two stages , the off line preprocess stage and the online query stage ( Figure 1 ) . in Time Series databases ) . IMPACTS
IMPACTS i
The Preprocess Stage
Time Series
The Transform Phase
Figure 1 . The Different Stages of IMPACTS .
The pre process stage of IMPACTS has two phases : the transfom ? phase and the index phase ( Figure 1 ) . In the transform phase , each sequence of real numbers in the time series data is transformed into a string of symbols . This is achieved by first segmenting the time entire range of change ratios between any two consecutive points smaller ranges ( segments ) . Next , a unique symbol is used to represent each segment , thereby transforming a time sequence into a symbol string . into a finite number of non overlapping
In this paper , we present the different stages of IMPACTS as well as algorithms ( based on the suffix tree structure ) to compute timeseries pattern matching queries with the abilities to dynamically process constraints such as the multiple degrees of accuracy , different moving average window sizes . We also describe how IMPACTS can be used to resolve advanced constraints such as a dynamically aggregate period and combinatorial patterns . Lastly , we present a performance evaluation to show that our method can be much faster than the naive approach . The rest of this paper is organized as follows : We first discuss related work in Section 2 . Next , we present the pre process stage in Section 3 and the query stage in Section 4 respectively . We present our performance evaluation in Section 5 and conclude the paper in Section 6 . specified in their respective original
[ l ] , to index is typically time domain . The through a multi dimensional
2 . RELATED WORK We categorize recent work in time series pattern matching into two general approaches . The first approach maps time sequences into frequency domain ; the second processes the time sequences directly frequency domain approach , pioneered by in general computes a Discrete Fourier [ 10 , 141 for each sequence and selects the first few Transform coefficients sequences . Sequences with matching coefficients are considered similar . The indexing mechanism index structure such as R tree [ 9 ] or R* tree [ S ] . While in [ l ] , the focus is on whole sequence matching , the work in [ 7 ] generalizes the process to allow subsequence matching . In [ 151 , moving average , time warping , and reversing are formulated and the indexing methods are further examined for approximate subsequence matching . The recent work in time domain [ 3 , 161 focus on segmenting long sequences into smaller subsequences for approximation . A multiindex structure , such as R tree [ 9 ] or R* tree [ 5 ] , is dimensional the small segments . In [ 3 ] , an innovated then used to index approach introduced based on atomic segments , called is which can be normalized with similar windows windows , respectively stitched to form pairs of large similar subsequences . In [ 161 , based on the divide and conquer approach , subsequences are real valued functions . The IMPACTS system also operates in time domain . But it differs from all the above approaches ( both frequency and time domains ) [ 1 , 3 , 7 , 15 , 161 in one significant way . The IMPACTS can the shapes of the preserve , to a very high degree of details , original sequences in its index structure ( the suffix tree ) . A major advantage of detail preservation to dynamically process a diverse class of different time series matching queries such as those based on different degrees of accuracy , moving window sizes , aggregate periods , and vague trends ( see Section 4 ) . For example , time series matching queries with different moving window sizes , aggregate periods , or vague trends cannot be processed by the aforementioned approaches [ 1 , 3 , 7 , 15 , 161 without index structures . Therefore , to dynamically process a diverse class of different matching queries makes IMPACT more suitable as an interactive time series pattern matching approach . In language called SDL was proposed for time series shape matching . An index structure was identified and approximated by
[ 4 ] , a shape describing query the restructure of is the flexibility families of the ability their respective proposed but no performance data was given . The SDL model can to formulate some of its query classes . be adopted by IMPACTS The focus of this paper however is on the system aspect of IMPACTS , not on query language . The suffix tree index deployed by the stringmatching problem [ ll , 12 , 13 , 171 . system is used extensively the IMPACTS in
3 . THE PRE PROCESS STAGE The first stage of IMPACTS transform phase transforms strings and the index phase build suffix these strings . is the preprocess stage in which the the time series data into symbol tree indexes based on
3.1 The Transform Phase Transforming a time series into a symbol string can be achieved with various ways . In this paper , we present one method that is based on computing the change ratio from one time point to the next time point and dividing the variances of all change ratios into discrete segments such that change ratios into one segment are represented by a unique symbol . We use an example ( Figures 2 ) to illustrate three parameters below : . this process . First , we define is the lower bound of all change ratios time points among all time
The parameter min between any two consecutive series in the database . that fall
.
.
The parameter max between any two consecutive series in the database . is the upper bound all change ratios time points among all time represents
The parameter numsegmenf the number of segments selected to divide the range between min and max . While all segments together till the entire range between the min and max parameters , no two distinct segments overlap . In the transformation process , a unique symbol is mapped to each segment
In Figure 2 , min and max are set to 47 % and 63 % while the numsegment parameter is set to 11 . We equally divide the entire range between min and max by numseg ment with each unit range set to 20 % . In this example , II unique symbols are used to model the segments respectively and any change ratio will fall into one of the segments , therefore will be represented by one symbol . The larger numsegment the transformation process captures the shape of a time series . However , a large number of unique symbols may more space to model each symbol , resulting in a larger and less space efficient suffix tree . is , the more accurately max
. : * b : : b E !
63 % 53 % 43 % 33 % 23 % 13 % 3 % 7 % .17 % 27 % 31 % .47 % min
Figure 2 . A Transformation Example .
283 tree [ 11 , 12 , 131 is a trie like data structure
3.2 The Index Phase that A suffix is compactly stores all suffixes of a string such that each suftix represented by a path from the root node to a certain node at a lower level . The compactness is achieved by suffixes having the same prefix share a node such that the path from the root node to this node represents the shared prefix . Because all suffixes of a string are each represented by a unique path in the suffix tree , finding a pattern in a string corresponds to traversing the suffix tree downwards along the path that matches the target pattern . Such a structure in matching string patterns , therefore the suffix tree is widely used in the problem of string matching [ 11 , 12 , 131 . insures high efficiency
ROO b
/ ababc
Root
Root
/"\ ababc a O\ babe babe
A abc
C
Step 1 : Insert ababc
Step 2 : Insert babe
Step 3 : Insert abc
C abc
Step 4 : Insert bc abc
Step 5 : insert c
Figure 3 : Constructing A SufEx Tree with ababc . tree is constructed
In the index phase , a generalized suffix to index the suffixes of all the transformed symbol strings for fast pattern matching . In Figure 3 , we show the construction of a suffix tree based on the string ababc . The live steps in Figure 3 represent the shape of the tree after inserting the suffixes ababc , babe , abc , bc , and c respectively . Note that node splitting occurs in steps 3 and 4 because of the sharing of prefixes ab and b respectively . Inserting suffixes from multiple strings into a suffix tree creates a side effect that makes its structure more complex . The string along the path to a node can represent a suffix of an input string or a prefix of a suffix of an input string . For example in Figure 4 , the path from root to the node ab in the middle branch represents the string bab . However , bab is a suffix of String 2 as well as a prefix of the suffix babe of String 1 . To preserve the knowledge that the middle ab node is an end node of a path representing a suffix of an input string , we associate this node with a list of string IDS that have a suffix represented by this node .
! i . . . . . . . . . i
, ; i:" . . . . i i . . . . . . . . . i . . . . . . ! lil ;
. . . . . . . . .
I ” “ “ “ ‘:’
; li3i f . . . . . . . . . :i ! 3ilij
: i
:ab i / :_____ : ; 2;0$
' ,! / i
Figure 4 : A Suffix Tree with ababc , chub , cbc .
; 3;oi i
. i . . . . . . . . . i i
.
. i . . . . . . . . . i i
. i
.
. i/
284 in the starting position
In our implementation , along with each string ID in the list , we also maintain the corresponding suffix . For example , the list associated with the middle ab node has a 2 tuple entry ( Figure 4 ) . The attributes 2 and 1 in this entry indicates that the suffix represented by the path from root to this node ( ie , bnb ) starts at position 1 in String 2.The incorporation of the ID list helps to improve the efficiency in retrieving the matching suffixes . this string of
4 . THE QUERY STAGE IMPACTS exploits the suffix tree structure and provides methods to process pattern matching queries on time series with dynamic user constraints such as the degree of accuracy and the average moving window size . In this section , we first describe how simple and dynamically constrained pattern matching queries are computed based on the suffix tree structure . Next , we discuss how IMPACTS can be used as an interactive pattern matching tool to process a diverse class of advanced time series pattern matching queries . the system the suffixes of the symbol strings . During
4.1 Simple String Matching Queries To match a time series pattern , first IMPACTS transforms the target time series into a symbol string using the same transformation process discussed in Section 31 Note that it is possible that a change in the target sequence is beyond the min and max boundaries defined for the data set . In this case , we can use two additional symbols to respectively represent these two out of bound cases . traverses , in a downward fashion , the suffix tree Next , IMPACTS the containing all traversal , with each encountered tree node , the IMPACTS tries to match the prefix of the target string with the string associated with this node . If a match is found , the IMPACTS continues to traverse the children nodes of this node with a new target string created by removing the matching prefix from the original target string . If the string associated with the encountered node does not match any prefix of the target string , this search thread is discarded . A string that matches the original target is found when a search thread reaches a node whose associated string matches with the entire updated target string . Note that without specifying a dynamic constraint such as the degree of accuracy or an average moving window size , the pattern is exactly the same as string matching on matching of IMPACTS specified query a suffix constraints , becomes more complex . tree [ 11 , 12 , 131 . With dynamically IMPACTS the search process of
4.2 Degree of Accuracy Constraint In our transformation model , the two pre set parameters min and max define the entire range any movement from one number to the next in the sequence must fall into ( see Section 31 ) The segmentation process divides this range into equal but nonoverlapping segments with each segment represented by a unique ( see Figure 2 ) . The min , max , and numsegment symbol together determine the lower and upper bounds represented by each symbol . In the case of simple string matching , the accuracy of the result is determined by the range that each symbol models . High accuracy is achieved by very small segment range with the numsegment parameter set to a large value . In this model , two symbols are
( eg , the last day of the week ) , 1MPACTS matches the aggregated upper bounds and lower bounds with the corresponding symbol in the target string . If a match is found , IMPACTS traverses the children nodes of the encountered node and starts aggregating again , and so on .
4.5 Biased Similarity Constraint Finding similar pattern based on biased criteria can be a very useful function . For example , a query finding a group of stocks or mutual funds that behave similarly to a certain pattern , but are in general more skewed upwards ( or downwards ) is one such query . IMPACTS can process this type of queries by setting up biased matching criteria . FOT example , when IMPACTS determines a for a wider degree of match for a target symbol , accuracy that are more upward skewed than the ones representing movements that are less upward skewed . In other words , IMPACTS uses two degrees of accuracy , one for upward symbols and one for downward ones . representing movements for symbols it can allow
4.6 Vague Trend Constraint Searching a vague pattern such as the example query Q2 in Section 1 may generate results of many different shapes . The state of the art similarity based time series matching approaches focus on matching more precise shapes , [ 1 , 3 , 7 , 1.51 typically therefore are less suited than IMPACTS for processing this class of queries . For example , to search a continuous downward trend , the IMPACTS the symbols representing downward movements . traverses the suffix tree and only follows
4.7 Mismatch Toleraiice Constraint IMPACTS can incorporate a.‘constraint that allows for a certain number of mismatches . For example , a pattern matching query can be constrained to find all similar patterns allowing at most k mismatches . To process this kind of queries , IMPACTS searches the suffix tree and keeps a mismatch counter for each search thread . When a mismatch counter increases beyond the allowable value , its corresponding search thread is discarded .
Inconsistent Accuracy Constraints
4.8 This class of queries means that different sections along the target string have a different accuracy constraint . While no current systems can efficiently process queries of this class , IMPACTS can dynamically process them in the same way as it computes the queries with consistent accuracy constraints , with only a minor extension . The extension is that during tree traversal , IMPACTS keeps track of what section of the target string that it is currently matching and uses the corresponding degree of accuracy for matching as specified by the query constraints . can be adapted
4.9 Combinatorial Constraint IMPACTS to search a combinatorial pattern similar to one modeled by a regular expression . FOT example , the query manager , in matching a combinatorial pattern , can starts a multi thread search over the suffix tree while keeping track of the current state for each search thread ( much like the state of the finite state machine represented by an regular expression ) . A search is discard if , at any node , it violates the pattern specified by the target or when it reaches the bottom of the tree without having completely traversed the target pattern . considered a match if and only if they are the same identical symbol . To process dynamic query constraints with different degrees of accuracy , IMPACTS relaxes this rule and allows for fuzzy matching in which a match for a target symbol can be a set of symbols , including the target symbol itself . More precisely , specified degree of accuracy , the match of a symbol s are any symbols representing segments that are within 1 r from the segment represented by s . For example , in Figure 2 , let the dynamically specified degree of accuracy be 15 % . The match for the symbol a5 are symbols a3 , u4 , a, , a6 and a , . This is because there exists a point in the segment associated with any of these symbols that is with 25 % away from a point within the segment associated with the target symbol us . let r be the dynamically into first transforms the target pattern
4.3 Average Moving Window Size Constraint The average moving approach is a popular method in financial and stock analysis [ 6 ] to generalize trends . The result of applying an average moving window to a time series is a smoother curve with the smoothness enhanced by a wider moving window To process a time series query with a moving average constraint , IMPACTS the moving average representation based on the user specified constraint ( eg , the window size ) . Next , IMPACTS traverses the suffix tree in a depth first order . During tree traversal , IMPACTS computes the moving average for the strings along the search threads on the fly and then matches the dynamically computed moving average with the moving average represented by the target sequence . Initially , each search thread may have traversed strings which have less symbols than the dynamically specified moving average window size , say k . At this initial stage , IMPACTS queues up ( queue size = k ) these traversed prefixes along all search threads . When a search thread has traversed a string of k symbols on the suffix tree , it computes the average of the upper bounds and the average of the lower bounds associated with these k symbols . IMPACTS then checks to see if the first number in the moving average representation of the target sequence is within these upper and lower bound averages . If it is , IMPACTS declares it a match and goes on to traverse the next symbol on the tree for this thread . At this point , IMPACTS drops the first symbol in the queue and puts the next traversed symbol in the queue . New upper and lower bound averages are computed and matched with the next number in the moving average representation of the target sequence , and so on . If at any time during the matching process a mismatch happens , IMPACTS discards this search thread . If during traversal , all the moving average representation of the target numbers sequence falls within the upper and lower bound averages , then the string of this search path matches the target sequence . in
4.4 Aggregation Constraint A time series can be based on a fine grained time unit such as day whereas a pattern matching query can be specified with a dynamic constraint that is based on weekly totals . While to our knowledge no current systems can efficiently processing this kind of queries , IMPACTS can compute this query class in a dynamic fashion . For example , to search aggregate pattern based on weekly totals on the suffix tree with daily totals , IMPACTS traverses downwards each search threads while at the same time aggregates the lower and upper bounds respectively of the traversed symbols . When it encounters a symbols representing the proper ending time point
285 h
IMPACTS
SCAN our performance studies which shows that IMPACTS much more efficient constraints than the sequential scanning method . can be in processing queries with dynamic
A+@ & &P
,cP &
Number of Sequences
Figure 4 . Search Time vs . Number of Sequences .
EVALUATION
5 . PERFORMANCE We compare pattern matching efficiency between IMPACTS and the sequential scanning method based on synthetic sequence data . Because of space limitation , we only show a small set of our results . We first randomly generated sequences with a length of 500 and varied the number of sequences from 100 to 1000 . For the second set of experiments , we the number of sequences to 500 and varied the sequence length from 100 to 1000 . For both sets of experiments , we set the moving average window size to 5 and the allowable error ration to 03 % Next , we process pattern matching with randomly selected target sequences and collected the averaged results . Both sets of results show that pattern matching by IMPACTS is much more efficient than by the sequential scanning method . limited
IMPACTS
SCAN
7 . [ II
PI
[ 31 r41
El
[ 71
VI r91 search in
IEEE Trans . On Knowledge
REFERENCES Agrawal , R . , Faloutsos , C . , and Swami , A . Efficient similarity search in sequence databases . In Proc . of 4th Intl . Conf . On Foundation of Data Organization and Algorithms , 1993 . Agrawal , R . and Imielinski , T . Data mining : a performance perspective . and Data Engineering , ( 6):914 925 , 1993 . Agrawal , R . , Lin , KI , Sawhney , HS , and Shim , K . Fast similarity the presence of noise , scaling , and translation in time series databases . In Proc . of 21st VLDB , 490 501 , 1995 . Agrawal , R . , Psaila , G . , Wimmers , EL , and Zait , M . Querying shapes of histories . In Proc . Of 21st VLDB , 502514,1995 . Bechmann , N . , Kriegel , H . , Schneider , R . , and Seeger , B . The R* tree : an efficient and robust access method for points and rectangles . In Proc . ACM SIGMOD , 322 332 , 1990 . Edwards , RD and Magee , J . Technical Analysis of Stock Trends . John Magee , 1969 . Faloutsos , C . , Ranganathan , M . , and Manolopoulos , Y . Fast subsequence matching time series databases . In Proc . ACM SIGMOD , 419 429 , 1994 . The Green Line Mutual Funds . htto://wwwtdbankca , 1998 . Guttman , A . R tree : a dynamic index structure for spatial searching . In Proc . ACM SIGMOD , 45 57 , 1984 . in
[ lo ] Hamming , RW Digital Filters . Prentice Hall , 1977 . [ l l ] Hui , LCK Color set size problem with applications to Pattern Matching , string matching . Lectures Notes in Computer Science , 230 243 , SpringerVerlag , 1992 .
In Combinatorial
[ 12 ] Landau , GM and Vishkin , U . Fast parallel and serial approximate string matching . Journal of Algorithms , ( 2 ) : 157169,1989 . [ 131 McCreight , space economical suffix tree
EM
A
Sequence
Length construction algorithm . JACM , 262 272 , 1976 .
[ 14 ] Oppenheim , AV and Schafer , RW Digital
Signal
Processing . Prentice Hall , 1975 .
[ 15 ] Ratiei , D . and Mendelson , A . Similarity based queries for time series data . In Proc . ACM SIGMOD , 13 23 , 1997 .
[ 16 ] Shatkay , H . and Zdonik , SB Approximate queries and for large data sequences . In Proc . 12’h Intl . reprresentations Conf . On Data Engineering , 536 545 , 1996 .
[ 17 ] Wang , JTL , Chim , GW , Marr , TG , and Shapiro , B . for scientific data : some results . In Proc . ACM SJGMOD , 115 125 , 1994 .
Combinatorial preliminary pattern discovery
Figure 5 . Search Time vs . Sequence Length .
6 . CONCLUSIONS We consider the problem of query processing for time series data with various dynamically specified constraints . We present the IMPACTS system that maps atomic movements in a time series into a finite set of symbols to transform time series into symbol strings . Next , IMPACTS uses a suftix tree to index prefixes of these symbol strings . In this paper , we show that IMPACTS can be used to process queries with dynamically specified constraints such as moving average window sizes , aggregate time units , vague trends , and combinatorial patterns . We also present a portion of
286
