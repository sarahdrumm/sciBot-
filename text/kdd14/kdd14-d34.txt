Differentially Private Network Data Release via Structural Inference
Qian Xiao
NGS
National University of Singapore , Singapore xiaoqian@nusedusg
Rui Chen
Dept . of Computer Science Hong Kong Baptist University ,
Hong Kong
Kian Lee Tan
NGS and School of Computing
National University of Singapore , Singapore ruichen@hkbueduhk tankl@compnusedusg
ABSTRACT Information networks , such as social media and email networks , often contain sensitive information . Releasing such network data could seriously jeopardize individual privacy . Therefore , we need to sanitize network data before the release . In this paper , we present a novel data sanitization solution that infers a network ’s structure in a differentially private manner . We observe that , by estimating the connection probabilities between vertices instead of considering the observed edges directly , the noise scale enforced by differential privacy can be greatly reduced . Our proposed method infers the network structure by using a statistical hierarchical random graph ( HRG ) model . The guarantee of differential privacy is achieved by sampling possible HRG structures in the model space via Markov chain Monte Carlo ( MCMC ) . We theoretically prove that the sensitivity of such inference is only O(log n ) , where n is the number of vertices in a network . This bound implies less noise to be injected than those of existing works . We experimentally evaluate our approach on four real life network datasets and show that our solution effectively preserves essential network structural properties like degree distribution , shortest path length distribution and influential nodes .
Categories and Subject Descriptors K65 [ Management of Computing and Information Systems ] : Security and Protection
Keywords Network data ; differential privacy ; structural inference
1 .
INTRODUCTION
Information networks are invaluable assets for exploratory data analysis in a wide range of real life applications . For instance , online social networks ( eg , Facebook and Twitter ) are studied by sociologists to understand human social relationships ; co author networks are explored to analyze the Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page . Copyrights for components of this work owned by others than the author(s ) must be honored . Abstracting with credit is permitted . To copy otherwise , or republish , to post on servers or to redistribute to lists , requires prior specific permission and/or a fee . Request permissions from permissions@acmorg KDD’14 , August 24–27 , 2014 , New York , NY , USA . Copyright is held by the owner/author(s ) . Publication rights licensed to ACM . ACM 978 1 4503 2956 9/14/08 $1500 http://dxdoiorg/101145/26233302623642 degree and patterns of collaboration between researchers ; voting and election networks are used to expose different views in the community ; trust networks like Epinions are great resources for personalized recommendations . However , many of such networks contain highly sensitive personal information , such as social contacts , personal opinions and private communication records . To respect the privacy of individual participants in the networks , network data cannot be released for public access and scientific studies without proper “ sanitization ” .
Previously , a great deal of work has investigated anonymization techniques [ 27 , 16 , 8 , 13 , 28 , 5 ] to ensure network data privacy . However , it has been shown that anonymization is susceptible to several newly discovered privacy attacks and might lead to further privacy breaches . Recently , differential privacy [ 9 ] has been proposed to solve such vulnerability . In this paper , we study the problem of releasing network data under this emerging privacy standard . Given a network dataset , our goal is to release its sanitized differentially private version to hide each participant ’s connections to others while preserving essential structural information to support data analysis .
To ensure differential privacy , the standard technique is to add Laplace noise to query answers . However , network data can be very sensitive to relatively small changes in the network structure . Direct perturbation in the data domain ( eg , adding noise to a subgraph counting query in order to obscure the presence or absence of an edge ) normally incurs excessive noise , which makes it impossible to conduct any effective data mining on the sanitized data . An alternative solution is to first project the data to other domains ( eg , the graph spectral domain [ 25 ] , which is analogous to the classical frequency domain , or some parametric model space that describes the observed network , such as dK 2 series [ 21 , 24] ) . While this idea is appealing , the resultant data utility of the existing works in this line is still undesirable for many graph mining algorithms . For example , Wang et al . [ 25 ] propose to perturb the eigenvalues and eigenvectors of the √ corresponding adjacency matrix . This approach requires to n ) , where n impose noise of magnitude proportional to O( is the number of vertices in the input network , and therefore massive noise has to be injected in large real life network datasets . As another example , the works [ 21 , 24 ] consider to approximate the original network by the dK series . To achieve differential privacy , the global sensitivity of this scheme is O(n ) even for dK 2 series , which also demands excessive noise to be added .
In this paper , we advocate a different approach that can offer better data utility . Broadly , we propose to encode a network ’s structural information in terms of connection probabilities between vertices , rather than the presence or absence of the observed edges . The fundamental advantage of adopting such a perspective is that we can capture the generally understandable and statistically meaningful properties of the network while “ diluting ” the impact of a single edge . In the context of differential privacy , this means that we can significantly lower the magnitude of noise added to mask the change of a single edge .
In essence , connection probabilities can be estimated by a set of edge counting queries ( ie , a query that counts the number of edges between two given sets of vertices ) . Therefore , our problem can be converted to find a strategy that identifies a good set of edge counting queries in order to truthfully represent a network ’s structure . This can be done in many possible ways . In particular , in this paper , we use a statistical hierarchical random graph ( HRG ) model [ 7 ] for this purpose . This HRG model carefully maps all participants of a network into a hierarchical structure ( called a dendrogram ) and records connection probabilities between any pair of vertices in the network . This allows us to draw a sample model from the model ’s space , which essentially consists of a set of good edge counting queries . Moreover , the model itself is paired with a likelihood score , which makes it possible to observe the quality of released data .
Technically , we make the following contributions . Unlike existing studies , we propose to infer a network ’s structure via connection probabilities . We further identify that the HRG model can be used to encode a network in terms of a set of such connection probabilities . Generating a good HRG under differential privacy requires careful design . We do not directly perturb the best fitting HRG of the input network ( ie , the HRG generated by the non private algorithm ) , but rather , we infer the HRG by learning in the entire HRG model space and sampling an HRG by a Markov chain Monte Carlo ( MCMC ) method while satisfying differential privacy . Given a sampled HRG , we propose a carefully designed thresholding strategy coupled with the Erd˝osR´enyi model to calculate the noisy connection probabilities . We adopt such a methodology for two reasons . First , relying on the best fitting HRG itself will incur a high sensitivity . Changing even one edge in the network may result in a great number of changes in both the dendrogram ’s structure and the set of its associated connection probabilities . This is undesirable since it may alter many of the HRG ’s parameters in the worst case . In contrast , we design an MCMC method to iteratively learn a reasonably good HRG from the entire HRG space . By construction , with a single edge difference , only one probability in the HRG would be influenced . Second , it is non trivial to sample a good HRG in our setting because it is computationally challenging to compute the scores of all possible HRGs even for a small network . It can be seen 2(2n)n−1e−n possible dendrograms for a network with n vertices . Hence , it is computationally infeasible to directly apply the exponential mechanism . We side step this problem by using an MCMC method , which is in a similar spirit to the idea in [ 23 ] . However , our problem and challenges are quite different from those in [ 23 ] . Our goal is to publish the entire graph , not frequent subgraphs . A direct consequence is that we have that there are a total of ( 2n − 3)!! ≈ √ to harness the large sensitivity in our problem , while it is always 1 in [ 23 ] .
From the perspective of utility , we rigorously prove that the sensitivity of our proposed approach is O(log n ) for fitting the dendrogram structure , which reaps the benefit of preserving good data utility in theory . We conduct extensive experiments on four real life datasets to evaluate the effectiveness of our solution . We demonstrate that our approach significantly outperforms the state of the art competitors [ 24 , 25 ] .
2 . PRELIMINARIES
In this section , we briefly introduce the hierarchical ran dom graph ( HRG ) model and differential privacy . 2.1 Hierarchical Random Graph
In this study , we follow the convention to model an input network dataset as a simple undirected graph G = ( V , E ) , where V is the set of vertices and E ⊆ V × V is the set of edges . Let A ∈ {0 , 1}n×n be the adjacency matrix that represents a graph G , where Ai,j = 1 if there is an edge between vertices i and j in G and Ai,j = 0 , otherwise .
The HRG model is based on the intuition that the connection probability between two vertices depends on their degree of relatedness , which can be modelled mathematically via statistical inference . Specifically , the HRG model represents a graph G in terms of its hierarchical structure and a set of connection probabilities [ 6 , 7 ] . The hierarchical structure of G in an HRG is captured by a dendrogram T , which is a rooted binary tree with n leaf nodes corresponding to the n vertices of G . Each internal node r of T is associated with a probability pr . For any two vertices i , j of G , their probability of being connected pi,j = pr , where r is their lowest common ancestor in T . Formally , an HRG is defined by a pair ( T,{pr} ) .
Let Lr and Rr be the left and right subtrees of r respectively , and nLr and nRr be the numbers of leaves in Lr and Rr respectively . Let er be the number of edges in G whose endpoints are leaves of each of the two subtrees of r in T . The likelihood of an HRG for a given graph G measures how plausible this HRG is to represent G , which can be calculated , by Bayes’ theorem , as follows :
L(T,{pr} ) = r ( 1 − pr)nLr nRr−er per
( 1 ) r∈T er
For a fixed dendrogram T , the maximum likelihood esti , which is the fraction of potential mator of pr = edges between the leaves of Lr and Rr that actually exist in G . In our scheme , we work with the logarithm of the likelihood ( referred to as log likelihood in the sequel ) : nLr·nRr log L(T,{pr} ) = − r∈T nLrnRrh(pr )
( 2 ) where h(pr ) = −pr log pr − ( 1− pr ) log(1− pr ) is the GibbsShannon entropy function . Essentially , a dendrogram paired with a higher likelihood is a better representation of the network ’s structure than those with lower likelihoods . We denote log L(T,{pr} ) by log L(T ) from now on when no confusion arises .
Example 1 . Figure 1(b ) and ( c ) give an example of two possible dendrograms , T1 and T2 , for an original graph in Figure 1(a ) . We first calculate the set of {pr} for each
( a ) Origin graph
( b ) Dendrogram T1
( c ) Dendrogram T2
Figure 1 : An example of the HRG model in [ 7 ] dendrogram . For example , to compute pr2 associated with the root r2 of T2 , we first obtain the two groups of leaf nodes in r2 ’s left and right subtrees , that is , {a , b , c} and {d , e , f} . Since there is only one edge between these two sets of leaf nodes ( ie , the edge {c , d} ) , we have er2 = 1 and pr2 = 1/(3 ∗ 3 ) = 1/9 . Similarly , we can calculate all {pr} and compute the likelihoods of the dendrogram T1 and T2 . Specifically , L(T1 ) = ( 1/3)(2/3)2(1/4)2(3/4)6 ≈ 0.00165 , and L(T2 ) = ( 1/9)(8/9)8 ≈ 00433 Since L(T2 ) is much larger than L(T1 ) , T2 is a more plausible hierarchy to describe the original graph .
2.2 Differential Privacy
Differential privacy [ 9 ] has emerged as a prevalent privacy model to quantify the notion of “ indistinguishability ” of neighboring databases . The privacy guarantee of differential privacy in the context of network data depends on the interpretation of neighboring graphs . In this paper , we define two graphs G1 = ( V1 , E1 ) and G2 = ( V2 , E2 ) to be neighbors if V1 = V2 , E1 ⊂ E2 and |E1|+1 = |E2| . Formally , differential privacy for network data is defined below .
Definition 1
( Differential privacy ) . A randomized algorithm A is differentially private if for any two neighboring graphs G1 and G2 , and for any output O ∈ Range(A ) ,
Pr[A(G1 ) ∈ O ] ≤ e × Pr[A(G2 ) ∈ O ]
Our definition of differential privacy is also known as edge differential privacy [ 12 ] . Intuitively , it hides the existence of any single edge from an adversary . The smaller is , the better the privacy protection is . Normally , is a small value ( eg , ≤ 1 ) .
Differential privacy can be achieved by two standard mechanisms , the Laplace mechanism [ 9 ] and the exponential mechanism [ 18 ] . Both mechanisms are based on the concept of global sensitivity of a function f . For any two neighboring graphs G1 and G2 , the global sensitivity of a function f : G → Rd is defined as ∆f = maxG1,G2 f ( G1 ) − f ( G2)1 . The Laplace mechanism is mainly used for queries which return real values . It adds properly calibrated noise to the true answer to a query . More precisely , given a function f and the privacy parameter , the noise is drawn from a
Laplace distribution with the probability density function p(x|λ ) = 1
2λ e−|x|/λ , where λ = ∆f / .
Theorem 1
( Laplace mechanism [ 9] ) . For any func tion f : G → Rd , the mechanism A ∆f
A(G ) = f ( G ) + Lap1(
) , . . . , Lapd(
)
∆f gives differential privacy , where Lapi( ∆f variables with scale parameter ∆f .
) are iid Laplace
The exponential mechanism is mainly used for functions Its general idea is whose outputs are not real numbers . to sample an output O from the output space O according to a utility function u . It assigns exponentially greater probabilities of being selected to outputs of higher scores so that the final output would be close to the optimum with respect to u . Let the global sensitivity of u be ∆u = maxO,G1,G2 |u(G1 , O ) − u(G2 , O)| .
Theorem 2
( Exponential mechanism [ 18] ) . Given a utility function u : ( G × O ) → R for a graph G , the mechanism A that samples an output O with probability proportional to exp( ·u(G,O )
) satisfies differential privacy .
2∆u
3 . STRUCTURAL INFERENCE UNDER
DIFFERENTIAL PRIVACY
3.1 Overview
Before presenting the details , we first give an overview of our method . Our goal is to release a sanitized network G dom graph ( HRG ) that best fits G and then generate G from that matches the structural properties of the original network G as closely as possible while satisfying differential privacy . Our general idea is to identify the hierarchical ran the identified HRG . Recall that an HRG consists of a dendrogram T and a set of associated probabilities {pr} . This means that we need to not only identify a good fitting dendrogram but also calculate its associated probabilities . In this process , we face several major technical challenges : ( 1 ) How to find a good dendrogram from a factorial number of candidates while satisfying differential privacy , and ( 2 ) how to calculate the probabilities that might be dominated by injected noise . We address the first challenge by designing a Markov chain Monte Carlo ( MCMC ) procedure , which samples a good dendrogram according to its likelihood . We cope with the second challenge by developing an effective thresholding strategy that is backed up by the Erd˝os R´enyi model . After placing edges according to {pr} . 3.2 Algorithms generating a representative HRG for G , we generate G by
We now formally describe our solution ( referred to as HRG in the sequel ) . Our solution is composed of three steps : ( 1 ) differentially privately sample a good dendrogram Tsample from the entire dendrogram space ( Algorithm 1 ) ; ( 2 ) given the sampled dendrogram Tsample , compute the probabilities {pr} associated with Tsample ( Algorithm 2 ) ; ( 3 ) generate the sanitized graph according to the identified HRG ( Algorithm 3 ) . We divide the total privacy parameter into 2 portions , 1 and 2 , each being used in one of the first two abcefd1/4ab111/3cdef1ab11c111def11/9 Algorithm 1 : Differentially Private Dendrogram Fitting Input : Input graph G , privacy parameter 1 Output : Sampled dendrogram Tsample
1 Initialize the Markov chain by choosing a random starting dendrogram T0 ;
2 for each step i of the Markov chain do 3
Randomly pick an internal node r in Ti−1 ; Pick a neighboring dendrogram T of Ti−1 by randomly drawing a configuration of r ’s subtrees ; Accept the transition and set Ti = T with probability min(1 ,
2∆u ·log L(T ) ) 2∆u ·log L(Ti−1 ) ) 1 exp( exp(
) ;
1
4
5
6 end
7 //when equilibrium is reached
8 return the sampled dendrogram Tsample = Ti ; steps . Note that the third step does not require any privacy parameter .
Differentially Private Dendrogram Fitting . Since , for an input graph G with n vertices , each of its dendrograms T is associated with a log likelihood log L(T ) , which measures its goodness of representing G , a straightforward attempt to achieve differential privacy is to employ the exponential mechanism . Let the utility function be u(T ) = log L(T ) . The exponential mechanism samples T with probability pro , where T is the entire output portional to exp(
2∆u ·u(T ) ) 1 2∆u ·u(T ) ) 1 exp(
T ∈T space ( ie , the set of all possible dendrograms of G ) . Unfortunately , this simple idea is computationally infeasible because it requires to enumerate a total of |T | = ( 2n − 3)!! ≈ √ 2(2n)n−1e−n possible dendrograms . In our solution , we overcome the issue by designing an MCMC process , which simulates the exponential mechanism by a sequence of local transitions in T . Our differentially private dendrogram fitting algorithm is summarized in Algorithm 1 . Algorithm 1 is based on the Metropolis algorithm [ 2 ] . It starts by choosing an arbitrary dendrogram T0 ∈ T as the initial state of the Markov chain ( Line 1 ) . It then iteratively performs the following procedure ( Lines 2 6 ) : randomly propose a neighboring dendrogram T of the dendrogram Ti−1 in the previous iteration and update the current state in the following way : fl T
Ti =
Ti−1 with probability α with probability 1 − α
)
1 exp( exp( where the acceptance ratio α = min(1 ,
2∆u ·log L(T ) ) 2∆u ·log L(Ti−1 ) ) 1 and ∆u is the global sensitivity of the utility function u . We show how to calculate ∆u in Section 42 To draw a neighbor T of Ti−1 uniformly at random , we first randomly choose an internal node r in Ti−1 ( other than the root ) and then permute the three subtrees associated with r to generate two alternative configurations of r ’s subtrees , as illustrated in Figure 2 . One of these two configurations is chosen to be the neighboring candidate T . Let the state space of this Markov chain be T . It is easy to verify that the transitions based on this permutation scheme are both reversible and ergodic ( ie , any pair of dendrograms
Figure 2 : Three configurations of r ’s subtrees can be connected by a finite sequence of such transitions ) . Hence , such an MCMC procedure has a unique stationary distribution after it converges to equilibrium . We run the above Markov chain until equilibrium is reached , which indicates that the desired distribution has already been reached . Therefore , the sampled dendrogram Tsample is indeed drawn from the stationary distribution ( Line 8 ) .
In practice , there are many approaches to diagnose MCMC convergence . Here we follow the method used in [ 6 , 7 ] . Specifically , we use the heuristic of the average log likelihood to judge whether the Markov chain has converged to the stationary distribution . We will elaborate more details of MCMC convergence time in Section 52 Additional discussion about the convergence and its mixing time can be found in [ 6 , 7 ] . er nLr·nRr
( see Section 21 )
Noisy Probability Calculation . In the second step , we calculate the noisy probabilities associated with Tsample ’s internal nodes . Recall that , for an internal node r , its asIt is sociated probability pr = easy to observe that the probabilities of the internal nodes rooted in smaller subtrees ( ie , in lower levels of Tsample ) are generally more sensitive to Laplace noise injected . Indeed , according to our experiments , the direct application of the Laplace mechanism to these nodes’ probabilities results in poor utility . To relieve such negative effects , we propose a carefully designed thresholding strategy coupled with the Erd˝os R´enyi model , which is presented in Algorithm 2 .
1 er
( cid:102)pr∗ .
The general idea is that if a probability pr cannot be “ reliably ” estimated by applying the Laplace mechanism to , we employ the Erd˝os R´enyi model to approximate nLr·nRr the probability . To measure the reliability of a noisy probability , we set up the sentinel λb . For an internal node r∗ in Tsample , λb is set to 2·(nLr∗·nRr∗ ) ( Line 1 ) , which measures the noise scale of the potential noisy probability If λb is relatively large with respect to a threshold value τ1 ( that is , the probability cannot be reliably calculated by the Laplace mechanism ) , we model the subgraph induced by all leaf nodes of the subtree rooted at r∗ as an Erd˝os R´enyi random graph . With this model , the connection probability of any pair of vertices in this subgraph ( nLr∗ +nRr∗ )(nLr∗ +nRr∗−1)/2 , which is later perturbed by is the Laplace mechanism ( Line 5 ) . Otherwise , we can expect that still gives a good estimation after adding noise . Hence we directly generate the noisy probability as min{1 , cedure on r∗ ’s children ( Lines 11 14 ) . nLr·nRr er∗ +Lap( 1 nLr∗·nRr∗ } ( Line 10 ) and perform the similar pro2 ec(r∗ ) er
)
In Algorithm 2 , we calculate the noisy probabilities in a top down manner over Tsample . During this process , the approximated probabilities based on the Erd˝os R´enyi model also become less accurate due to added Laplace noise . Here , we would also like to guarantee the accuracy of the perturbed approximated probabilities . For this reason , we in rstutussut Algorithm 2 : CalculateNoisyProb(G , Tsample , r∗ , 2 ) Input : Input graph G , sampled dendrogram Tsample ,
Output : A vector of noisy probabilities {pr} , where privacy parameter 2 , internal node r∗ r ∈ {r∗ , all internal nodes below r∗}
1
1 λb =
2·(nLr∗·nRr∗ ) ; 2·((nLr∗ +nRr∗ )(nLr∗ +nRr∗−1)/2 ) ;
2 λc = 3 if λb ≥ τ1 and λc ≥ τ2 then
1 ec(r∗ ) ← number of edges in the subgraph induced by all leaf nodes of the subtree rooted at r∗ ; ec(r∗)+Lap( 1 2
( nLr∗ +nRr∗ )(nLr∗ +nRr∗−1)/2} ;
) for each r in {r∗ , all internal nodes below r∗} do p = min{1 , pr =p ; pr∗ = min{1 , end
8 9 else
4
5
6
7
10
11
12
13 er∗ +Lap( 1 nLr∗·nRr∗ } ; 2
) rL ← r∗ ’s left child ; rR ← r∗ ’s right child ; CalculateNoisyProb(G , Tsample , rL , 2 ) ;
CalculateNoisyProb(G , Tsample , rR , 2 ) ;
14 15 end
) troduce another sentinel λc ( Line 2 ) , which is compared with a threshold value τ2 to indicate whether the noise scale of the approximated probabilities is acceptable . In summary , we employ the Erd˝os R´enyi model when ( 1 ) the probability can not be accurately estimated by er∗ +Lap( 1 2 nLr∗·nRr∗ ( guarded by λb ) , ec(r∗ ) ( nLr∗ +nRr∗ )(nLr∗ +nRr∗−1)/2 would and ( 2 ) injecting noise to not seriously affect its accuracy ( guarded by λc ) . This explains our condition in Line 3 . In this case , the probabilities of r∗ and all internal nodes below r∗ will be approximated by the Erd˝os R´enyi model ( Lines 6 8 ) . In our experiments , we observe that setting τ1 = 0.05 and τ2 = 0.01 gives good results over different real life datasets . Note that the choices of these thresholds are data independent : the tuning of τ1 and τ2 only relies on 2 .
Sanitized Graph Generation . With the sampled den drogram Tsample and the set of noisy probabilities {pr} , we tween them in G with probability pr ( Line 5 ) . generate the sanitized graph as follows ( Algorithm 3 ) . For each pair of vertices i , j ∈ V , we find their lowest common ancestor r in Tsample ( Line 4 ) , and then place an edge be
4 . PRIVACY ANALYSIS
In this section , we formally analyze the privacy guarantee of our algorithm HRG . 4.1 Privacy via Markov Chain Monte Carlo
We first show that the MCMC based Algorithm 1 can satisfy differential privacy . Recall that the main purpose of applying the MCMC method is to draw a random sample from the desired distribution . Essentially , the standard exponential mechanism for achieving differential privacy is
Input : Input graph G , sampled dendrogram Tsample ,
Algorithm 3 : Generate Sanitized Graph G Output : Sanitized graph G privacy parameter 2
1 rroot ← root node of Tsample ; 2 CalculateNoisyProb(G , Tsample , rroot , 2 ) ; 3 for each pair of vertices i , j ∈ V do
4
5
Find the lowest common ancestor r of i and j in Tsample ;
Place an edge in G between i and j with independent probability pr ;
6 end
7 return sanitized graph G ; also a method to sample an output x ∈ X in the target distribution with probability proportional to exp( u(x)/2∆u ) , where u(x ) is the utility function and ∆u is its sensitivity . Hence we see that , by matching the stationary distribution of MCMC with the target distribution required by the exponential mechanism , MCMC can be used to realize the exponential mechanism . In our setting , we set the utility function u(T ) of a dendrogram T to be log L(T ) , the log likelihood of T , and the 2∆u ·log L(T ) ) ) . acceptance ratio of MCMC to be min(1 , 2∆u ·log L(Ti−1 ) ) 1
Therefore , when the Markov chain converges to the stationary distribution π , we indeed draw a sample T from π with the probability mass function : exp( exp(
1
P r(T ) =
T ∈T exp( 1
2∆u · log L(T ) ) 2∆u · log L(T ) ) exp( 1
.
This is equivalent to the exponential mechanism which out2∆u · log L(T ) ) . puts T with probability proportional to exp( 1 Therefore , we can conclude that Algorithm 1 satisfies 1differential privacy .
We refer interested readers to [ 23 ] in which the idea of applying MCMC to achieve the exponential mechanism was first proposed for more discussion about how MCMC ’s stationary distribution perfectly matches the required distribution under the exponential mechanism . 4.2 Sensitivity Analysis
We now formally analyze the global sensitivity ∆u . In this section , we will first derive how the utility function u ( ie , log L(T ) ) varies in neighboring databases . After that , we will formulate ∆u and show that ∆u monotonically increases as n grows . Lastly , we prove that ∆u is O(log n ) . In this work , we consider each possible output to be a dendrogram T in the output space T . From the definition of global sensitivity , we have the following .
Definition 2
( Global sensitivity ∆u ) .
∆u = max
T∈T ,G,G| log L(T , G
) − log L(T , G)| where G and G are neighboring graphs .
Intuitively , ∆u is the maximum change in the log likelihood of any dendrogram in the output space if one edge is missing . It is easy to observe that missing one edge will influence exactly one internal node ’s probability pr in a dendrogram . Thus , we have :
Lemma 1 . ∆u = max r∈T |(−nLrnRrh(pr))−(−nLrnRrh(p r))| , where pr = er nLr nRr and pr
= er−1 nLr nRr
.
We now analyze how ∆u varies as parameters change . Let N = nLr · nRr . It is easy to see that there are two independent variables in ∆u , the number of all possible connections N and the number of the observed edges er .
Theorem 3 . ∆u monotonically increases as n → +∞ , and
∆u = log Nmax + log(1 +
1
Nmax − 1
)Nmax−1 , where Nmax = n2 is odd .
4 when n is even and Nmax = n2−1
4 when n
Proof . To analyze ∆u , we first fix N . Let f ( e ) = h(p)− h(p ) and ∆u = max|f ( e)| . Figure 3(a ) plots the entropy value h(p ) as p varies . Since f ( e ) has the format of discrete derivative of h(p ) , we can analyze the monotonicity of f ( e ) by computing the second order derivative of h(p ) . We have h
( p ) = − 1
1 − p
− 1 p
It can be observed that h(p ) < 0 for all p . Hence h(p ) is a concave function and h(p ) ( or the acceleration ) monotonically decreases . Therefore , f ( e ) monotonically decreases . Since ∆u = max|f ( e)| , we just need to derive the extreme values of f ( e ) . Note that f ( e ) > 0 when p is in [ 0,0.5 ] and f ( e ) < 0 when p is in ( 05,1 ] Hence , ∆u = max(− min(N · f ( e) ) , max(N · f ( e)) ) . Due to the symmetric property of h(p ) , we can get max(f ( e ) ) = − min(f ( e) ) . With the monotonic property of f ( e ) , we can derive the value of ∆u when e = 1 or e = Nmax . Next we fix e = 1 and vary N . Let ∆u = max
|f ( N )| , where f ( N ) = 1 · log
N∈[1,Nmax ] + ( N − 1 ) · log(1 − 1 N = − log N + ( N − 1 ) · log(1 − 1 N
1 N
)
) − 0
The first order derivative of f ( N ) , f(N ) = log(1 − 1 N ) < 0 . Hence f ( N ) is a decreasing function . Since f ( N ) ≤ 0 for N in [ 1 , +∞ ] , we conclude that ∆u = − min(f ( N ) ) = −f ( Nmax ) . Hence ,
∆u = log Nmax − ( Nmax − 1 ) · log
Nmax − 1 Nmax 1 Nmax − 1 )Nmax−1
( a )
( b )
Figure 3 : Gibbs Shannon entropy and plot of ∆u
1 x )x . We have x
1 +
1 x
= 1 + x 1 n
1 x k=2
+
1 k!
1 x 3
1 x2 + x3 + ··· + x 2 x(x − 1)··· ( x − ( k − 1 ) ) xk x x
1 xx
= 1 + 1 + x(x − 1)··· ( x − ( k − 1 ) )
Since , for each k ∈ {2 , 3 , , x} , increases with x . As x → ∞ , we have limx→∞,1 + 1 which increases with x , we learn that y = ( 1 + 1
1 − j x k−1
1 k! xk j=1
=
Therefore we have :
x = e . x )x also x
∆u = log Nmax + log(1 +
1
Nmax − 1
)Nmax−1
< log Nmax + log e ≤ log n2 4
+ 1
= O(log n )
This completes the proof .
Figure 3(b ) plots the value of ∆u as n increases . We see that ∆u increases slowly when n becomes larger . Thus we expect that applying the exponential mechanism in terms of MCMC in this setting would guarantee good data utility even for large scale networks . 4.3 Privacy via Structural Inference
Finally , we prove that our solution HRG is differentially private based on the sequential composition property .
Theorem 5
( Sequential Composition [ 17] ) . Let each Ai provide i differential privacy . A sequence of Ai(D ) over the database D provides i differential privacy .
= log Nmax + ( Nmax − 1 ) log(1 +
)
Taken with the above theorem , we can derive that our scheme ensures differential privacy .
= log Nmax + log(1 +
This completes the proof .
1
Nmax − 1
Next we show that ∆u is O(log n ) , where n is the number of vertices in the input network .
Theorem 4 . The global sensitivity of a dendrogram ’s log likelihood , ∆u , is O(log n ) .
Proof . Based on Theorem 3 , we first analyze the second Nmax−1 )Nmax−1 . Let y = ( 1 + term of ∆u , that is , log(1 +
1
Theorem 6 . HRG satisfies differential privacy . Proof . We use 1 in Algorithm 1 for sampling the dendrogram and 2 in Algorithm 2 for calculating the probabilities associated with the sampled dendrogram . From the analysis in above sections , we learn that Algorithm 1 is 1 differentially private . In Algorithm 2 , we employ the Laplace mechanism to obtain the noisy answers to a set of counting queries . Since , by construction of a dendrogram , a single edge change will affect only one counting query by 1 , Algorithm 2 is 2 differentially private . Since Algorithm 3 is based on the differentially private HRG generated by
00020406000025050075100ph(p)051015200250005000075000100000n∆u Table 1 : Network dataset statistics
Dataset polblogs wiki Vote ca HepPh ca AstroPh
#Nodes #Edges Max Degree Pair
1,224 7,115 12,008 18,772
16,715 100,762 118,489 198,050
( 351 , 277 ) ( 1065 , 773 ) ( 491 , 486 ) ( 504 , 420 )
Algorithm 1 and Algorithm 2 , it does not consume any privacy budget . Hence , based on Theorem 5 , we can conclude that our solution satisfies differential privacy , where = 1 + 2 .
5 . EXPERIMENTAL EVALUATION
In this section , we experimentally study the equilibrium of our MCMC method and evaluate the utility of HRG over four real life datasets , namely polblogs , wiki Vote , ca HepPh and ca AstroPh 1 . polblogs is a network of hyperlinks between weblogs on US politics recorded in 2005 . wiki Vote is a social network containing Wikipedia voting information for adminship elections . An edge is created between two participants if one voted on or was voted by the other . ca HepPh and ca AstroPh are collaboration networks which cover scientific collaborations between authors submitted to High Energy Physics and Astro Physics categories , respectively . An edge is created if two authors co authored a paper . The statistics of these datasets are given in Table 1 . All datasets are pre processed to be undirected without self loops . All experiments were done on Intel Xeon E5607 servers with 2.27G CPU and 32GB RAM . 5.1 Experimental Settings In our first set of experiments , we fix = 10 Specifically , we assign ( 1 , 2 ) = {(0.1 , 0.9 ) , ( 0.5 , 0.5 ) , ( 0.9 , 0.1)} for sampling the dendrogram and computing noisy connection probabilities , respectively ( see Figures 5 8 ) . In the second set of experiments , we study the influence of different privacy parameters on data utility . Due to space constraint , we only report the results on wiki Vote ( Figures 9 and 10 ) . We do observe similar trends on other datasets . In the figures , we denote our solution HRG with the legend hrg 1 e 2 .
For comparison purposes , we implemented two state ofthe art competitors , spectral [ 25 ] and dk2 [ 24 ] . Since no systematic approach of choosing parameter values is provided in [ 25 ] , we tune the parameters in spectral and report the best performance we obtain . More specifically , let k be the number of eigenvalues chosen in the scheme , 1 be the privacy budget for computing noisy eigenvalues and 2 for computing noisy eigenvectors . The literature [ 26 ] referred by Wang et al . in [ 25 ] suggests that k is usually in [ 2 , 9 ] . Hence we vary k from 2 to 9 and report the best case . In the figures , spectral is denoted by the legend spec k 1 2 .
Due to the poor performance of dk2 under differential privacy , we compare with the scheme under a more relaxed privacy notion , that is , ( , δ) differential privacy . We follow the parameter settings in [ 24 ] and set δ = 001 Unfortunately , even under ( , δ) differential privacy , we still need to use relatively large values ( eg , 200 ) to obtain comparable results . Moreover , the sensitivity in this case is data
1polblogs is available at http://www personalumichedu/ ~mejn/netdata/ ; wiki Vote , ca HepPh and ca AstroPh are available at http://snapstanfordedu/data/indexhtml dependent . It depends on the maximum degree pair in the networks ( see Table 1 ) . So we choose values proportional to the maximum degree pair in each network . The choice of parameters for dk2 is denoted by the legend dk2 δ .
From a privacy ’s perspective , spectral requires the number of edges in the input network to be known , whereas our scheme HRG and dk2 do not require so . In addition , dk2 is not able to remap the nodes to the observed network , so the experiments on influential node analysis is not applicable to dk2 . 5.2 Log likelihood and MCMC Equilibrium In practice , we diagnose MCMC ’s convergence by tracing the log likelihood , log L(T ) , of the sampled dendrograms . The diagnostic takes down consecutive non overlapping windows of the Markov chain ( each window consists of 65536 MCMC steps in our experiments ) and compares the means of log L(T ) within these windows . We use the difference of the means to judge whether the means of log L(T ) within the windows have stabilized . In our experiments , we continuously examine whether the difference falls into the range [ −0.05n , 0.05n ] to check the equilibrium state , where n is the number of nodes in the network . In Figure 4 , we plot the trace of log L(T ) as a function of the number of MCMC steps , normalized by n . We observe that the Markov chains mix well over all datasets ( ie , log L(T ) becomes stable soon after the initial state ) , indicating the convergence to the stationary distributions . Even though the mixing time can be exponential in the worst case [ 19 ] , we observe that , in practice , the Markov chain in HRG usually can converge within 1000n steps on networks of around ten thousand nodes . Figure 4 also shows that the integration of differential privacy actually speeds up the movement of the Markov chains and makes them mix even faster . Roughly , the running time of n MCMC steps in our experiments is 0.18s for polblogs , 4.1s for wiki Vote , 9.5s for ca HepPh and 22.9s for ca AstroPh . More details about the mixing time can be found in [ 6 ] . Figure 4 also shows the comparison of the sampled dendrograms’ log L(T ) in different parameter settings , including that of the dendrogram sampled in the non private manner . We can observe that , for networks with around ten thousand vertices , log L(T ) of the dendrogram sampled under a relatively small privacy parameter ( eg , 1 = 0.5 ) is still comparable with that under a relatively large privacy parameter ( eg , 1 = 09 ) Hence , we expect that even assigning a relatively small 1 for sampling the dendrogram will not significantly harm the data utility of the released network . To validate this , we further conduct experiments with smaller 1 , such as 0.2 and 04 The performance shown in Figures 9 and 10 confirm that our scheme preserves reasonably good data utility even under a stringent privacy parameter ( see Section 5.3 for the explanation of the utility metrics in Figures 9 and 10 ) . 5.3 Utility Analysis
To show the utility of the released networks , we compare their degree distributions , shortest path length distributions and influential node ranking with those of the original networks . Due to the randomness of our algorithm , we examine the variance of its performance by running the algorithm ten times on each network for each parameter setting . We observe that the variance in all cases is small .
( a ) polblogs
( b ) wiki Vote
( c ) ca HepPh
( d ) ca AstroPh
Figure 4 : Trace of log likelihood as a function of the number of MCMC steps , normalized by n
( a ) polblogs
( b ) wiki Vote
( c ) ca HepPh
( d ) ca AstroPh
Figure 5 : Degree distribution
( a ) polblogs
( b ) wiki Vote Figure 6 : Shortest path length distribution
( c ) ca HepPh
( d ) ca AstroPh
Degree Distribution . Figure 5 shows the degree distributions of the released data under different sanitization schemes , with y axis in log scale . It can be seen that , in all cases , HRG preserves well the right skewness of the original networks , meaning that it preserves good distance scale between “ hubs ” ( ie , nodes having high degrees ) and the majority of low degree nodes . Shortest Path Length Distribution . Figure 6 depicts the shortest path length distribution of each network . We observe that , in general , the released networks preserve the shapes of the distributions with respect to those of the original networks . However , we also observe the increase of paths of small lengths ( eg , 1 3 ) . We believe this is due to the extra edges added to the low levels of the sampled dendrogram , which corresponds to the local structures in a network . But this does not have a big influence on the network ’s global structure . Influential Node Analysis . Identifying the most influential nodes in social networks is a key problem in social network analysis . In our experiments , we consider the eigenvector centrality ( EVC ) score as the measure to rank the nodes in networks . EVC scores correspond to the values of the first leading eigenvector of the graph ’s adjacency matrix ( the one with the greatest eigenvalue ) . Intuitively , EVC measures the nodes’ influence by virture of their positions in a network , that is , the sum of the geodesic distances from each node to all others . The eigenvector approach attempts to find the most central nodes ( ie , those with the smallest geodesic distance to others ) in terms of the “ global ” or “ overall ” structure of the network . The first eigenvector usually captures the “ global ” aspects of distances among nodes , while the second and subsequent ones capture more specific and local structures .
In our experiments , we first test the percentage of common nodes in top k most influential nodes of the original graphs and those of the sanitized graphs . We examine top 10 , 20 , 50 influential nodes as well as top 1 % and 5 % nodes in the networks . The results are presented in Figure 7 . We see that HRG guarantees a consistent 25% 75 % overlap of common nodes in all the cases . k i=1 fifiEV C(vi
We then calculate the mean absolute error of the top k most influential nodes’ EVC scores . Let the set of topk nodes in the original graph be α and that of the sanitized graph be β . To show that nodes in β have similar centralities to those in α , we use the mean absolute error ( MAE ) to compare the EVC scores in β with those in α . Formally , the MAE value is formulated by : M AE(α , β ) = 1 β are the k top i nodes in α and β , respectively . In Figure 8 , we observe that the MAE of HRG with 1 = 0.5 and 0.9 is reasonably low ( eg , less than 25 % in most cases ) . The overlaps in topk nodes and the low MAE together indicate that HRG well preserves the hub nodes , which represent the global structure of the sanitized graph .
β)fifi , where vi
α ) − EV C(vi
α and vi
−80000−75000−70000−650000100020003000step/nlogLoriginhrg−01hrg−05hrg−09−660000−630000−600000−570000−5400000100020003000step/nlogLoriginhrg−01hrg−05hrg−09−880000−840000−800000−7600000100020003000step/nlogLoriginhrg−01hrg−05hrg−09−1500000−1450000−14000000100020003000step/nlogLoriginhrg−01hrg−05hrg−091e+011e+030100200300degreecountoriginhrg−01−e−09hrg−05−e−05hrg−09−e−01spec−9−02−08dk2−200−0011e+011e+0305001000degreecountoriginhrg−01−e−09hrg−05−e−05hrg−09−e−01spec−9−02−08dk2−500−0011e+011e+03050010001500degreecountoriginhrg−01−e−09hrg−05−e−05hrg−09−e−01spec−9−02−08dk2−200−0011e+011e+03025050075010001250degreecountoriginhrg−01−e−09hrg−05−e−05hrg−09−e−01spec−9−05−05dk2−200−0010e+002e+054e+056e+052468path lengthcountoriginhrg−01−e−09hrg−05−e−05hrg−09−e−01spec−9−02−08dk2−200−00100e+0050e+0610e+0715e+0720e+07246path lengthcountoriginhrg−01−e−09hrg−05−e−05hrg−09−e−01spec−9−02−08dk2−500−0010e+002e+074e+076e+07510path lengthcountoriginhrg−01−e−09hrg−05−e−05hrg−09−e−01spec−9−02−08dk2−200−001000e+00250e+07500e+07750e+07100e+08125e+08510path lengthcountoriginhrg−01−e−09hrg−05−e−05hrg−09−e−01spec−9−05−05dk2−200−001 ( a ) polblogs
( b ) wiki Vote
( c ) ca HepPh
( d ) ca AstroPh
Figure 7 : Overlaps of top k vertices
( a ) polblogs
( b ) wiki Vote
( c ) ca HepPh
( d ) ca AstroPh
Figure 8 : Mean absolute error of top k vertices
6 . RELATED WORK
Early works on privacy preserving network data publishing [ 16 , 27 , 28 , 5 ] mainly focus on developing anonymization techniques for specific types of privacy attacks . Most of them employ privacy models derived from k anonymity [ 22 ] by assuming different types of adversarial knowledge . Unfortunately , all these anonymization techniques are vulnerable to attackers with stronger background knowledge than assumed , which has stimulated the use of differential privacy for more rigorous privacy guarantees .
The recent research on applying differential privacy to network data roughly falls into two directions . The first direction aims to release certain differentially private data mining results , such as degree distributions , subgraph counts and frequent graph patterns [ 12 , 14 , 11 , 23 ] . However , our problem is substantially more challenging than publishing certain network statistics or data mining results . Our goal is to publish the entire graph , which incurs a much larger global sensitivity . Note that the sensitivity in the problem setting of [ 23 ] is only 1 . In contrast , our key technical contri√ bution is to achieve a smaller sensitivity in releasing a graph n ) of our state(ie , O(log n ) as opposed to O(n ) and O( of the art competitors [ 21 , 24 , 25] ) . In addition , some latest studies [ 4 , 1 , 15 ] attempt to answer graph queries under a more stringent instantiation of differential privacy known as node differential privacy [ 12 ] . In spite of the significant progress , it is still difficult to develop practical solutions under node differential privacy in our problem setting .
The second direction aims to publish a sanitized graph , which is also the objective of this paper . Most research in this direction [ 21 , 20 , 24 ] projects an input graph to dKseries and ensures differential privacy on dK series statistics . These private statistics are then either fed into graph generators or used by MCMC to generate a fitting synthetic graph . While the general idea is appealing , the current techniques are still inadequate to provide desirable data utility for many graph mining tasks unless the privacy parameter is unreasonably large ( eg , ≥ 100 ) , as demonstrated in Section 5 . Wang et al . [ 25 ] propose to project a graph to the spectral domain and inject noise to the eigenvalues and √ eigenvectors . This approach successfully reduces the sensin ) , which , unfortunately , is still not able to tivity to O( achieve good data utility . Comparing with all these studies based on the idea of projection , our approach takes an important step to achieve desirable data utility on real life datasets in many practical settings . Gupta et al . [ 10 ] give an iterative database construction algorithm to generate synthetic graphs for answering cut queries . However , it requires an input graph to be dense , which is unlikely to be satisfiable on real life network data and leaves finding an efficient algorithm as an open problem . Very recently , Chen et al . [ 3 ] propose a data dependent solution by identifying and reconstructing the dense regions of a graph ’s adjacency matrix . Though it achieves reasonable utility on some datasets , its performance heavily relies on the fundamental assumption that most edge information must be captured by the dense regions of the adjacency matrix . In addition , this solution involves multiple ad hoc parameters , which are difficult for a data publisher to tune .
7 . CONCLUSION
In this paper , we address the privacy concerns in network data release by proposing a novel data sanitization method under differential privacy . Our solution is based on structural inference over the hierarchical random graph ( HRG ) model . Compared with the existing works , we theoretically prove that the sensitivity of our solution is much smaller , only logarithmic in the order of the network size(ie , the number of vertices ) , implying a significant utility improvement . Extensive experiments on four real life datasets confirm that our solution outperforms the state of the art competitors .
8 . REFERENCES [ 1 ] J . Blocki , A . Blum , A . Datta , and O . Sheffet .
Differentially private data analysis of social networks via restricted sensitivity . In ITCS , 2013 .
0%25%50%75%100%Top 10Top 20Top 50Top 1%Top 5%overlap percentagehrg−01−e−09hrg−05−e−05hrg−09−e−01spec−9−02−080%25%50%75%100%Top 10Top 20Top 50Top 1%Top 5%overlap percentagehrg−01−e−09hrg−05−e−05hrg−09−e−01spec−9−02−080%25%50%75%100%Top 10Top 20Top 50Top 1%Top 5%overlap percentagehrg−01−e−09hrg−05−e−05hrg−09−e−01spec−9−02−080%25%50%75%100%Top 10Top 20Top 50Top 1%Top 5%overlap percentagehrg−01−e−09hrg−05−e−05hrg−09−e−01spec−9−05−05000025050075100Top 10Top 20Top 50Top 1%Top 5%MAEhrg−01−e−09hrg−05−e−05hrg−09−e−01spec−9−02−08000025050075100Top 10Top 20Top 50Top 1%Top 5%MAEhrg−01−e−09hrg−05−e−05hrg−09−e−01spec−9−02−08000025050075100Top 10Top 20Top 50Top 1%Top 5%MAEhrg−01−e−09hrg−05−e−05hrg−09−e−01spec−9−02−08000025050075100Top 10Top 20Top 50Top 1%Top 5%MAEhrg−01−e−09hrg−05−e−05hrg−09−e−01spec−9−05−05 ( a ) Degree distribution
( b ) Shortest path length
( c ) Overlaps of top k vertices
( d ) Mean absolute error
Figure 9 : wiki Vote with hrg 0.2
( a ) Degree distribution
( b ) Shortest path length
( c ) Overlaps of top k vertices
( d ) Mean absolute error
Figure 10 : wiki Vote with hrg 0.4
[ 2 ] S . Brooks , A . Gelman , G . L . Jones , and X L Meng .
[ 15 ] S . P . Kasiviswanathan , K . Nissim , S . Raskhodnikova ,
Handbook of Markov Chain Monte Carlo . Chapman & Hall/CRC , 2011 . and A . Smith . Analyzing graphs with node differential privacy . In TCC , 2013 .
[ 3 ] R . Chen , B . C . M . Fung , P . S . Yu , and B . C . Desai . Correlated network data publication via differential privacy . VLDBJ , in press .
[ 4 ] S . Chen and S . Zhou . Recursive mechanism : towards node differential privacy and unrestricted joins . In SIGMOD , 2013 .
[ 16 ] K . Liu and E . Terzi . Towards identity anonymization on graphs . In SIGMOD , 2008 .
[ 17 ] F . McSherry . Privacy integrated queries : an extensible platform for privacy preserving data analysis . Commun . ACM , 53(9 ) , 2010 .
[ 18 ] F . McSherry and K . Talwar . Mechanism design via
[ 5 ] J . Cheng , A . W . C . Fu , and J . Liu . K isomorphism : differential privacy . In FOCS , 2007 . privacy preserving network publication against structural attacks . In SIGMOD , 2010 .
[ 6 ] A . Clauset , C . Moore , and M . E . J . Newman .
Structural inference of hierarchies in networks . In ICML on Statistical Network Analysis , 2007 . [ 7 ] A . Clauset , C . Moore , and M . E . J . Newman .
Hierarchical structure and the prediction of missing links in networks . Nature , 453:98–101 , 2008 .
[ 8 ] G . Cormode , D . Srivastava , T . Yu , and Q . Zhang .
Anonymizing bipartite graph data using safe groupings . PVLDB , 1(1):833–844 , 2008 .
[ 9 ] C . Dwork , F . McSherry , K . Nissim , and A . Smith .
Calibrating noise to sensitivity in private data analysis . In TCC , 2006 .
[ 10 ] A . Gupta , A . Roth , and J . Ullman . Iterative constructions and private data release . In TCC , 2012 . [ 11 ] M . Hardt and A . Roth . Beating randomized response on incoherent matrices . In STOC , 2012 .
[ 19 ] E . Mossel and E . Vigoda . Phylogenetic MCMC algorithms are misleading on mixtures of trees . Science , 309(5744):2207–2209 , 2005 .
[ 20 ] D . Proserpio , S . Goldberg , and F . McSherry . A workflow for differentially private graph synthesis . In WOSN , 2012 .
[ 21 ] A . Sala , X . Zhao , C . Wilson , H . Zheng , and B . Y .
Zhao . Sharing graphs using differentially private graph models . In IMC , 2011 .
[ 22 ] P . Samarati . Protecting respondents’ identities in microdata release . TKDE , 13(6):1010–1027 , 2001 .
[ 23 ] E . Shen and T . Yu . Mining frequent graph patterns with differential privacy . In SIGKDD , 2013 .
[ 24 ] Y . Wang and X . Wu . Preserving differential privacy in degree correlation based graph generation . TDP , 6(2 ) , 2013 .
[ 25 ] Y . Wang , X . Wu , and L . Wu . Differential privacy preserving spectral graph analysis . In PAKDD , 2013 .
[ 12 ] M . Hay , C . Li , G . Miklau , and D . Jensen . Accurate
[ 26 ] L . Wu , X . Ying , X . Wu , and Z H Zhou . Line estimation of the degree distribution of private networks . In ICDM , 2009 .
[ 13 ] M . Hay , G . Miklau , D . Jensen , D . F . Towsley , and
P . Weis . Resisting structural re identification in anonymized social networks . PVLDB , 1(1):102–114 , 2008 .
[ 14 ] V . Karwa , S . Raskhodnikova , A . Smith , and
G . Yaroslavtsev . Private analysis of graph structure . PVLDB , 4(11):1146–1157 , 2011 . orthogonality in adjacency eigenspace with application to community partition . In IJCAI , 2011 .
[ 27 ] B . Zhou and J . Pei . Preserving privacy in social networks against neighborhood attacks . In ICDE , 2008 .
[ 28 ] L . Zou , L . Chen , and M . T . Ozsu . K automorphism : a general framework for privacy preserving network publication . PVLDB , 2(1):946–957 , 2009 .
1e+011e+03050010001500degreecountoriginhrg−02−e−0005hrg−02−e−001hrg−02−e−01hrg−02−e−05hrg−02−e−0900e+0050e+0610e+0715e+0720e+07246path lengthcountoriginhrg−02−e−0005hrg−02−e−001hrg−02−e−01hrg−02−e−05hrg−02−e−090%25%50%75%100%Top 10Top 20Top 50Top 1%Top 5%overlap percentagehrg−02−e−0005hrg−02−e−001hrg−02−e−01hrg−02−e−05hrg−02−e−09spec−9−02−08000025050075100Top 10Top 20Top 50Top 1%Top 5%MAEhrg−02−e−0005hrg−02−e−001hrg−02−e−01hrg−02−e−05hrg−02−e−09spec−9−02−081e+011e+03025050075010001250degreecountoriginhrg−04−e−0005hrg−04−e−001hrg−04−e−01hrg−04−e−05hrg−04−e−0900e+0050e+0610e+0715e+0720e+07246path lengthcountoriginhrg−04−e−0005hrg−04−e−001hrg−04−e−01hrg−04−e−05hrg−04−e−090%25%50%75%100%Top 10Top 20Top 50Top 1%Top 5%overlap percentagehrg−04−e−0005hrg−04−e−001hrg−04−e−01hrg−04−e−05hrg−04−e−09spec−9−02−08000025050075100Top 10Top 20Top 50Top 1%Top 5%MAEhrg−04−e−0005hrg−04−e−001hrg−04−e−01hrg−04−e−05hrg−04−e−09spec−9−02−08
