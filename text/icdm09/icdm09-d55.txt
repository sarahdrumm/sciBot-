2009 Ninth IEEE International Conference on Data Mining
Discovering Organizational Structure in Dynamic Social Network
Jiangtao Qiu
School of Information Southwestern University of Finance and Economics
Chengdu , China
Zhangxi Lin
The Rawls College of Business Administration
Texas Tech University
Changjie Tang
School of Computer Sichuan University Chengdu , China
Shaojie Qiao
School of Information Science and Technology Southwest Jiaotong Univ
Lubbock , TX chjtang@vipsinacom
Chengdu , China
Jiangtaoqiu@google.com zhangxilin@ttuedu qiaoshaojie@gmail.com
Abstract—Applying the concept of organizational structure to social network analysis may well represent the power of members and the scope of their power in a social network . In this paper , we propose a data structure , called Community Tree , to represent the organizational structure in the social network . We combine the PageRank algorithm and random walks on graph to derive the community tree from the social network . In the real world , a social network is constantly changing . Hence , the organizational structure in the social network is also constantly changing . In order to present the organizational structure in a dynamic social network , we propose a tree learning algorithm to derive an evolving community tree . The evolving community tree enables a smooth transition between the two community trees and well represents the evolution of organizational structure in the dynamic social network . Experiments conducted on real data show our methods are effective at discovering the organizational structure and representing the evolution of organizational structure in a dynamic social network .
Keywords Organizational structure ; Dynamical social net work ;
I . INTRODUCTION
Community discovery is a classical problem in social network analysis , where the goal is to discover related groups of members such that intra community associations are denser than the associations between communities . Generally , a community is a sub graph or a collection of members in a social network . It often reveals interesting properties shared by the members , such as common hobbies , social functions , etc . But Community discovery cannot reveal the power of members and the scope of their power in a social network . We find that organizational structure , a graph for illustrating the power of members and the scope of their power , is a versatile approach to solving the problem , for example , finding a leader from a terrorist network , exploring the spread of influence through a social network on viral marketing , and so on . However , to our best knowledge , none of existing works has ever addressed the organizational structure in the social network context . In this paper , we are to focus on how to represent and derive the organizational structure in a social network .
Social networks are constantly changing in the real world : New members may join the network , old members may quit from the network , and associations between members also tend to change . Many works examined the change of communities in a dynamic social network , called dynamic community discovery . However , they could not answer the questions related to the organizational structure , such as who is becoming more powerful , what the change of members’ power scope is , and so on . We believe that discovering the organizational structure from a dynamic social network is interesting and important . It may help , for instance , observing power change of members , and analyzing the transition of the relations among members . In this paper , we address the second issue on how to discover organizational structure in dynamic social networks .
The main contributions of this paper include : ( 1 ) Proposing the community tree approach to the representation of organizational structure in a social network , which becomes solvable by combining the PageRank algorithm and random walks on graph .
( 2 ) Conceiving a tree learning algorithm by employing the tree edit distance as a score function to generate the evolving community tree , which can well represent a smooth transition of organizational structure in a dynamic social network .
II . RELATED WORKS
Methods on static community discovery mainly include hierarchical clustering [ 1,2,3 ] , graph partitioning [ 4,5,6,7 ] and others [ 8,9 ] . Hierarchical clustering methods are aimed at finding natural divisions of a social network into groups , based on various metrics of similarity or strength of connection between vertices .
Many works exploited graph partitioning to find communities from a social network . In the simplest MINcut [ 4 ] algorithm , a connected graph ( network ) is partitioned into two sub graphs , ie discovered communities , with the cut size minimized . However , MINcut often results in a very small sub graph cut away . Various improved algorithm are proposed , such as normalized cut [ 5 ] , ratio cut [ 6 ] , min max cut [ 7 ] , etc . These methods only cut a graph into two parts . Typically a top down technique is employed to recursively cut a graph to k sub graphs .
1550 4786/09 $26.00 © 2009 IEEE DOI 101109/ICDM200986
932
Zhou et al [ 8 ] proposed two generative Bayesian models , combining probabilistic modeling with community detection , for semantic community discovery in a social network . Newman & Girvan [ 9 ] conceived an algorithm for discovering community structure from the networks with only a single type of vertexes and a single type of undirected and unweighted edges .
In analyzing a dynamic social network , most of studies [ 10,11,12 ] tried to obtain a snapshot of a single point in time in a dynamic social network or aggregate changes of a dynamic social network over a time windows , then find static communities from the snapshot or the aggregation . However , both approaches may miss some important tendencies of dynamic networks .
Li et al [ 13 ] developed a hierarchical community model and Aaron et al [ 16 ] presented a general technique for inferring the hierarchical structure from a network . Different from the organizational structure proposed in this paper , hierarchical community model and hierarchical structure cannot reveal important information about organization in a network , for example , which immediate leader of a member is , or who supervises whom .
III . DISCOVERING THE ORGANIZATIONAL
STRUCTURE IN THE STATIC SOCIAL NETWORK Before analyzing the organizational structure of a social network , we loosely define a number of basic concepts . Organizational structure represents the power of each member and the scope of his power in a social network . If we can find the immediate leader of each member in a network and draw the leadership into a graph , the graph is then referred to as an organizational structure . We firstly provide a score , called m Score , for each member , to represent the importance of the member in a social network . The higher the score is , the more important the member is . A data structure , namely community tree , is used to represent the organizational structure in a social network . Definition 1 ( Community Tree ) : Let P ={p1 , , pk}be a collection of members , NULL denote the root of a tree , and each member in P be referred to as a node in the tree . For any member pi in P , it has a unique parent node pj where m − Score(pj ) ≥ m − Score(pi ) . If the parent node of pi is the root node NULL , pi is called a core of the tree . A core and its descendents compose a community .
After derived the community tree from a social network , we can both discover communities and obtain organizational structure in the social network . An example of community tree is illustrated in Figure 1 where node 1 and node 5 are cores of community 1 and community 2 respectively , and node 1 is immediate leader of node 2 .
PageRank may produce a global ” importance ” ranking for each web page by analyzing links between web pages . In this paper , we employ PageRank to evaluate ” importance ” of each member in a social network , which calculate m Score
933
Community 1
NULL
1
5
Communty 2
2
6
7
3
4
8
9
Figure 1 . An example of community tree for every node . In a network , random walks implicitly perform a soft clustering of nodes [ 14 ] . Therefore , we exploit random walks to find an immediate leader for each member . Associating random walks with m Score of every node , a community tree can be derived from the social network .
A . Calculating m Score
An improved PageRank algorithm for calculating the m Score of members in a social network is described in Algorithm 1 .
For each node pi Rk+1[i ] = 1−d
Algorithm 1 calculating m Score for members : calcScore Input : social network G Output : vector of m Score for all members R Steps : 1 . R0 ← S + d · . 2 . Loop : 3 . −fifiRk+1 e ←fifiRk fifi 4 . End 5 . δ ←fifiRk+1 − Rk fifi 6 . Rk+1 ← Rk+1 + e · S 7 . 8 . Rk+1 ← Rk 9 . 10 . While(ε > δ ) 11 . N ormalize(Rk+1 ) 12 . Return(Rk+1 ) pj∈M(pi ) W(pij ) · Rk[j ] fifi
L(pj )
1
1
N
1 fifiRk fifiRk
In calcScore , S is a start vector . Vector Rk stores m Score of each member calculated in the kth iteration . Rk[i ] is the m Score of member pi , d denotes damping factor , and N denotes the number of members . M ( pi ) denotes the collection where members are associated with pi . L(pj ) fifi denotes the sum of weights for all edges associated with fifi pj . W ( pij ) is the weight of the edge link pi and pj . Let 1 be the L1 norm of R , we can calculate the error of 1 and 1 , denoted as e , and then calculate Rk+1 again using e . The iteration terminates when the L1 norm of Rk+1 − Rk is less than a preset threshold ε . After Rk+1 is normalized , the value of each element in vector Rk+1 indicates the final m Score of every member in the social network . fifiRk+1 fifi
B . Deriving Community Tree t step random walks on graph sum the probabilities of all paths of length t between two nodes . It gives a measure of the volume of paths between the two nodes . The more paths between the two nodes are , the higher the transition probability will be . Random walks fall into two parts : forward random walks and backward random walks . The forward random walks find the probability of ending at node j when a t step random walks starts at node k , denoted as Pt|0(k|j ) . The backward random walks find the probability of starting at node k when a t step walk ended at node j , denoted as P0|t(k|j ) . There exists a rule where P0|t(k|j ) ∝ Pt|0(j|k ) · P0(k ) . P0(k ) is the probability of choosing k as the starting node .
Combined with the m Score of each member , we employ random walks on graph to derive the community tree from a social network . In experiments , we found that forward random walks perform better than backward random walks . Thus , the forward random walks is employed in our algorithm to derive the community tree .
Algorithm 2 Deriving Community Tree : CT Deriving Input : social network G Output : Community Tree CT Steps : 1 . CT ← [ null,··· , null ] 2 . A ← getOneStepT ransM atrix(G ) 3 . Z ← a diagonal matrix satisfied Zjj = 4 . M t ← At · Z 5 . R ← calcScore(G ) 6 . For each pi in R k ← argmax 7 . if R[k ] > R[i ] CT [ i ] ← k
M t[i][j ]
.
−1
[ At]ij i j
8 . 9 . 10 . End 11 . Return CT
'
. ( 1 − s ) · Cjk/ s ,
Function getOneStepT ransM atrix(G ) in step 2 calculates the one step transition probability for each pair of nodes in a social network , and then organizes the onestep transition probabilities as a matrix A , which is a row j Aij = 1 . A[j , k ] is the onestochastic matrix satisfying step transition probability from node j to k . Pt+1|t(k|j ) = where s denotes the self transition probability , and Cji denotes weight of edge between node j and i . We derive a t step transition probabilities matrix M t = A(A··· ( A) ) , and normalize M t according to M t = At · −1 , where Z is a diagonal matrix . With M t , we can find the Z most possible ending node j when starting a t steps forward random walks at node i . If m Score of node j is much greater
. i Cji , ∀k = j k = j than that of node i , we regard j as the parent node of node i . After all operations end , we will obtain a community tree CT represented in an array where CT [ i ] indicates the parent node of node i . If the value in CT [ i ] is null , it means that we cannot find the immediate leader of node i . Hence node i is the core of community .
Node i and its descendents compose a community . The m Score of each member shows its importance in the community . And descendents of a node present its power scope . Parent node of each node is its immediate leader .
IV . ANALYZING EVOLUTION OF THE
ORGANIZATIONAL STRUCTURE
In Section III , we proposed CT Deriving algorithms to derive a community tree from a static social network , called static community tree . However , the static community tree can not well present the evolution of organizational structure in dynamic social networks .
To present evolution of organizational structure in a dynamic social network , we will aggregate the change of a social network in one time period , and then derive an evolving community tree from the community tree in the previous period and the one in current period . This enables a smooth change between the two community trees . Hence , the evolving community trees may well present evolution of organizational structure over time .
A . Scoring Function
To learn an evolving community tree , a scoring function is needed to evaluate the evolving community tree . Let D(CTi , CTj ) denote distance between two community trees i and j . We use an error function ES in ( 1 ) , as a scoring function to measure the distance errors among three types of community trees : CTe , CTp , and CTc , representing respectively the evolving one , the one in the previous period , and the one in current period . An optimal evolving community tree minimizes the value of ES . ff
ES =
D(CTc , CTe)2 + D(CTp , CTe)2
( 1 )
The tree edit distance [ 15 ] provides a measure of distance ( similarity ) between two trees , defined as the least cost of edit operation to change a tree to another tree . It can be employed to calculate D(CTi , CTj ) .
B . Tree Learning Algorithm
In this paper , we propose a tree learning algorithm to find an evolving community tree from two static community trees , which is a process that reconstructed a community tree according to scoring function ES . It is uncertain that such an evolving community tree obtained from this process is a globally optimal solution . However , in each step of the reconstruction , we can derive a locally optimal one in the context . The reconstructing process is as follows .
934
2.Compute the m Score for each member pi
1 . Obtain a collection of members in the evolving community tree Pce = Ppre∪Pcs where Ppre and Pcs are collections of members in the static community tree of previous and current time periods respectively . in the evolving community tree , m Score(pi ) = ( 1 − α ) · m Score(pi|pre ) + α · m Score(pi|cs ) , where α is smoothing factor . For those members that appear in the evolving community tree but not in current community tree , if their mScore is less than a threshold ε , we regard them as retired members and remove them from the evolving community tree .
3 . On reconstructing the evolving community tree , we firstly generate a root node NULL for the tree . According to the definition of community tree , the m Score of one node should not be larger than the m Score of its parent node . Therefore , we pick up members in m Score descent order . In each iteration , we put one member under each node in current evolving community tree respectively . Such a method can obtain a collection of candidate evolving community trees . We choose the minimum ES score candidate as a solution in each iteration . After all members are examined , an evolving community tree can be generated . evolving community tree : m Score(pi ) ← ( 1 − α ) · m Score(pi|pre ) + α ·
Algorithm 3 Learning ECT Learning Input : Community Tree CTpre , CTcs Output : Evolving community tree CTe Steps : 1 . Pce ← Ppre ∪ Pcs 2 . For each pi in Pce 3 . m Score(pi|cs ) 4 . End 5 . Pce ← Pce − {Pi ∈ Pce − Pcs|m Score(Pi ) < ε} 6 . CTe ← build a community tree with only a root node 7 . For each pi ∈ Pce in m Score descent order 8 . CS ← put pi under each node in CTe to generate a candidates collection 9 . CTt ← argmin CTi∈CS 10 . 11 . End 12 . Return CTe if ES(CTt ) < ES(CTe ) CTe ← CTt
ES(CTi )
After derive a series of evolving community trees , we can present the evolution of the organizational structure in a dynamic social network .
V . EXPERIMENTS
In this section , we evaluate the capability of the proposed approach on discovering organizational structure and to exploring evolution of organizational structure in a dynamic social network . The approach is implemented in Java . The
935 experiments were conducted on a 1.8GHz PC with DualCore Pentium 4 processor with 1GB RAM .
A . Dateset
We evaluate the proposed approach on two datasets : karate club dataset [ 17 ] and the known Enron email corpus . The karate dataset represents a relationship network at a university karat club which consisted of 34 members . We use the karate dataset to evaluate the performance of the proposed approach on finding organizational structure in static social networks . Enron email corpus may be converted into a social network in which a vertex denotes a user , an edge denotes communications between two users , and a weight on the edge denotes the number of communications . We preprocess the Enron dataset in following ways : mapping email addresses into users , and deleting duplicate emails . The original Enron data set contains 517,432 emails documents collected from 150 senior executives in Enron . After preprocessing , 148 unique users are identified . When only picking up email documents communicated among the 148 users , we collected 58,875 email records . In this paper , we use the preprocessed Enron dataset to evaluate the performance of the proposed approach on exploring evolution of organizational structure .
B . Experiments for finding organizational structure
We employ the karate dataset , shown in Figure 2(a ) , to evaluate CT Deriving . The parameters for testing the algorithm include the steps of random walks steps=50 , and self transition probabilities p = {0.85 , 0.87 , 092} The organizational structure obtained from the karate dataset is illustrated in Figure 2(b ) , ( c ) , and ( d ) , where parameter p is set 0.85 , 0.87 and 0.92 respectively . We can find that only one community is found when p is 0.85 where node 1 is the immediate leader of other fifteen nodes , but it is under the leadership of node 34 . When p is increased to 0.87 , we obtain two communities that are the same as the results in [ 9 ] . The organizational structure of communities is formed in a flat structure where node 1 and node 34 are leaders respectively . When p is increased to 0.92 , the two communities are further expanded toward a hierarchical structure where node 25 and 26 are under the leadership of node 32 , and node 7 supervises node 17 . The experiment shows that increasing the self transition probability tends to explore the organizational structure from a flat structure toward a hierarchical structure .
C . The experiment for exploring the evolution of organizational structure in Enron dataset
This experiment applies the proposed approach on the Enron dataset to explore the evolution of organizational structure in the dataset . We firstly identify the associations between communities in different time periods . After threading these communities , we analyze how organizational structures evolve over time . Associations among communities are
( a )
( b )
34
( c )
34
( d )
9
10
15
16
9
10
15
16
34
19
21
23
24
19
21
23
24
1
25
26
27
28
32
30
27
28
9
10
15
16
29
30
31
32
33
25
26
31
29
33
2
3
4
5
6
19
21
23
24
1
1
7
8
11
12
13
25
26
27
28
14
17
18
20
22
29
30
31
32
33
2
3
4
5
6
2
3
4
5
6
7
8
11
12
13
7
8
11
12
13
14
17
18
20
22
17
14
18
20
22
Figure 2 .
Illustrated Karate dataset(a ) and organizational structure in Karate when p = 0.85(b ) , p = 0.87(c ) , p = 0.92(d )
13
20
37
55
65
99
13
20
37
55
86
13
20
37
54
55
131
86
131
7
20
63
113
124
144
20
63
114
20
68
114
144
20
59
138
144
8
47
138
144
8
132
144
3
41
46
47
144
61
138
114
7
20
41
59
138
144
2001
Jan
Feb
Mar
Apr
May
Jun
Jul
Aug
Sep
Oct
Nov
Dec
Figure 3 . Evolution of communities in Enron dataset categorized as splitting , merging , evolving , and emerging . The splitting indicates that cores of communities ct and ct2 in period t are also members of community ct3 in t − 1 period . We say that ct3 is split into ct1 and ct2 . The merging indicates that the cores of community ct1 and ct2 in period t − 1 are also members of community ct3 in period t . The evolving indicates that the core of community ct1 in period t− 1 is the core of community ct2 in period t . The emerging indicates that the core of community ct1 in period t did not appear in any community in t − 1 period .
We derive twelve social networks from the Enron dataset by aggregating communications among users in every month in 2001 , and then obtain twelve static community trees . We employ ECT Learning to generate eleven evolving community trees with the smoothing parameter α = 0.5 and the threshold parameter ε = 001
The graph in Figure 3 presents the evolution of communities in the Enron dataset where each user is assigned an ID number . A node in the graph denotes a community and the ID number of each node represents the core of the community . We briefly treat the ID number of a core as the community . The graph show that community 20 split into three communities in February , and then merged with community 63 in June . Community 20 further split in July and August , and disappeared in September .
We count the numbers of communities found from the social network in each time period , and then present them in Figure 4 . Curve static and dynamic show the numbers of both static and evolving communities respectively . We compute the standard error for two curves , and obtain value 2.84 for static curve and value 1.42 for dynamic curve . Obviously , the stander error of dynamic is less than that of static . It clearly indicates that our proposed approach smoothed the change of communities .
By analyzing the evolution of organizational structure , we can observe the changes of importance of the members in communities over time . We use the number of its decedents to evaluate the importance of a node . Figure 5 shows the change of the importances of four users in Enron dataset , dasovich j , watson k , jones t and williams w3 ( their ID numbers are 20 , 138 , 55 , and 144 respectively ) .
By examining Figure 5 , it can be seen that dasovich j had a greater importance than that of other three users , but more fluctuating . The importance of dasovich j reduced gradually since July . The importance of jones t decreased since April and reached nearly to zero in May . The importance of williams w3 and watson k increased gradually since April and July respectively , and then both remained basically stable .
Combined with Figure 3 , it can be seen that dasovich j ( ID number 20 ) was the core of community from January to August . But its importance began to reduce when dasovich j was no longer the core in September .
936
[ 3 ] Andrew Y . Wu , et al . , Mining scale free networks using geodesic clustering , In Proc . KDD’04 , pages 719 724 , 2004
[ 4 ] C . Chekuri , A . Goldberg , D . Karger , M . Levin and C . Stein . Experimental study of minimum cut algorithms . In Proc . 8th SAIM Syposium on Discreet Algorithm , P324 333 , 1997 .
[ 5 ] J . Shi and J . Malik . Normalized cuts and image segmentation . IEEE Transactions on Pattern Analysis and Machine Intelligence , Vol 22 , No . 8 , pages 888 905 , 2000 .
[ 6 ] L . Hagen and AB Kahng . New spectral methods for ratio cut partitioning and clustering . IEEE . Trans . on Computed Aided Design , vol 11 , No . 9 , pages 1074 1085 , 1992
[ 7 ] C . Ding , X . He , H . Zha , M . Gu , and H . Simon . A min max cut algorithm for graph partitioning and data clustering . In Proc . of ICDM’01 , pages 107 114 , 2001 .
[ 8 ] Ding Zhou , Eren Manavoglu1 , Jia Li , C . Lee Giles , Hongyuan Zha . Probabilistic Models for Discovering E Communities . In the Proc . of WWW’06 , pages 173 182 , 2006 .
[ 9 ] M . E . J . Newman and M . Girvan . Finding and evaluating community structure in networks , Phys . Rev . E 69 , 026113 . 2004 .
[ 10 ] C . Tantipathananandh , Tanya Berger Wolf , David Kempe . A Framework For Community Identi?cation in Dynamic Social Networks . In Proc . of KDD’07 , pages 717 726 , 2007 .
[ 11 ] Ding Zhou , Isaac Councill , Hongyuan Zha , C . Lee Giles . Discovering Temporal Communities from Social Network Documents . In Proc . of ICDM’07 , pages 745 750 , 2007 .
[ 12 ] Lei Tang , Huan Liu , Jianping Zhang , Zohreh Nazeri . Community Evolution in Dynamic Multi Mode Networks . In Proc . of KDD’08 , pages 677 685 , 2008 .
[ 13 ] Huajing Li , Zaiqing Nie , Wang Chien Lee , C . Lee Giles , JiRong Wen . Scalable Community Discovery on Textual Data with Relations . In Proc of CIKM’08 , pages 1203 1212 , 2008 .
[ 14 ] Nick Craswell and Martin Szummer . Random Walks on the
Click Graph . In Proc . of SIGIR’07 , pages 239 246 , 2007 .
[ 15 ] P . Bille . A Survey on Tree Edit Distance and Related Problems . Theoretical Computer Science , 337(1 3):217 239 , 2003 .
[ 16 ] Aaron Clauset , Cristopher Moore , and M . E . J . Newman . Hierarchical structure and the prediction of missing links in networks . Nature 453 , pages 98 101 . 2008 .
[ 17 ] W . W . Zachary , An information flow model for conflict and fission in small groups . Journal of Anthropological Research 33 , 452 473 ( 1977 ) . static dynamic
14
12
10
8
6
4
2
0 r e b m u N
1
2
3
4
5
6
7
8
9
10
11
12
Month
Figure 4 . Comparison of the number of communities in static communitytrees and evolving community trees watson k dasovich j jones t williams w3
80
70
60
50
40
30
20
10
0 r e b m u N
1
2
3
4
5
6
7
8
9
10
11
12
Month
Figure 5 . Power change of Enron members over time
VI . CONCLUSION
In this paper , we introduce the concept of organizational structure to represent the power of members and the scope of their power in a social network . We proposed a community tree to represent organizational structure in the social network and conceived an approach , which combines the PageRank algorithm and random walks on graph , to derive the community tree . In order to investigate the change of organizational structure in dynamic social network , we also propose a tree learning algorithm to derive evolving community trees , which smoothes the transition between community trees over time . Experiments conducted on real datasets demonstrate the feasibility and applicability of the proposed approach .
In learning evolving community tree , we employ tree edit distance as the scoring function . However , the high complexity of the tree edit distance algorithm results in a great time overhead in exploring the evolution of organizational structure . In the future , we plan on improving efficiency of our approach .
REFERENCES
[ 1 ] J . P . Scott . Social Network Analysis : A Handbook . SAGE
Publications , January 2000 .
[ 2 ] M E J . Newman , Fast Algorithm for Detecting Community
Structure in Networks , Phys Rev E , vol.69 , no.6 , 2004 .
937
