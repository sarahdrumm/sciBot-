Fast Maximum Clique Algorithms for Large Graphs
Ryan A . Rossi Purdue University rrossi@purdue.edu
David F . Gleich Purdue University dgleich@purdue.edu
Assefaw H . Gebremedhin
Purdue University agebreme@purdue.edu
Md . Mostofa Ali Patwary
Northwestern University mpatwary@eecsnorthwesternedu
ABSTRACT We propose a fast , parallel maximum clique algorithm for large sparse graphs that is designed to exploit characteristics of social and information networks . Despite clique ’s status as an NP hard problem with poor approximation guarantees , our method exhibits nearly linear runtime scaling over realworld networks ranging from 1000 to 100 million nodes . In a test on a social network with 1.8 billion edges , the algorithm finds the largest clique in about 20 minutes . Key to the efficiency of our algorithm are an initial heuristic procedure that finds a large clique quickly and a parallelized branch and bound strategy with aggressive pruning and ordering techniques . We use the algorithm to compute the largest temporal strong components of temporal contact networks .
Categories and Subject Descriptors G22 [ Graph theory ] : Graph algorithms ; H28 [ Database Applications ] : Data Mining
1 . ALGORITHMS AND APPLICATIONS
We propose a fast , parallel maximum clique finder wellsuited for applications involving large sparse graphs . Our algorithm is a branch and bound method with novel and aggressive pruning strategies . Branch and bound type algorithms for maximum clique explore all maximal cliques that cannot be pruned via search tree optimizations [ 3 , 7 , 5 , 8 ] . They differ chiefly in the way the pruning is done . Our algorithm is distinguished by several features . First , it begins by finding a large clique using a near linear time heuristic ; the obtained solution is checked for optimality before the algorithm proceeds any further , and the algorithm is terminated if the solution is found to be optimal . Second , we use this heuristic clique , in combination with ( tight ) upper bounds on the largest clique , to aggressively prune . The upper bounds are computed at the level of the input graph or individual neighborhoods . Third , we use implicit graph edits and periodic full graph updates in order to keep our
Copyright is held by the author/owner(s ) . WWW’14 Companion , April 7–11 , 2014 , Seoul , Korea . ACM 978 1 4503 2745 9/14/04 . http://dxdoiorg/101145/25679482577283
Figure 1 : Results of our heuristic on over 74 networks originating from 8 types of data . We find that our heuristic ( ˜ω ) finds the largest clique ( ω ) in biological , collaboration , and web networks in all but one case . implementation efficient . Additional features the algorithm incorporates are discussed in the full version of this paper [ 6 ] . Heuristic step . Our heuristic , outlined in Algorithm 1 , builds a clique by searching around each vertex in the graph and greedily adding vertices from the neighborhood as long as they form a clique . The order of vertices is the degeneracy order . This heuristic step finds the largest clique in the graph in over half of the social networks we consider ( see Figure 1 ) . It can therefore be used as a stand alone procedure .
Bounds . Our branch and bound procedure , Algorithm 2 , heavily uses several bounds to prune the search space . Let the core number of vertex v be denoted by K(v ) . If K(G ) is the largest core number of any vertex in G , then K(G ) + 1 is an upper bound on the clique size . Well known relationships between core numbers , degeneracy order , and coloring allow us to further tighten this bound . Let L(G ) be the number of colors used by a greedy coloring algorithm in degeneracy order . Then L(G ) ≤ K(G ) + 1 and we get a potentially tighter bound on the size of the largest clique :
Fact 11 ω(G ) ≤ L(G ) ≤ K(G ) + 1
We can further improve the bounds in Fact 1.1 by exploiting the fact that the largest clique must also be in a vertex neighborhood . Let NR(v ) , the reduced neighborhood graph of v , be the vertex induced subgraph of G corresponding to v and all neighbors of v that have not been pruned from the graph yet . All the bounds in Fact 1.1 apply to finding the largest clique in each of these neighborhood subgraphs :
Fact 12 ω(G ) ≤ maxv L(NR(v ) ) ≤ maxv K(NR(v ) ) + 1 Our algorithm uses the bounds in Fact 1.2 in its search procedure .
123456780020406081˜ω/ω 1 . bio2 . collab3 . inter4 . retweet5 . tech6 . web7 . facebook8 . social Algorithm 1 Our greedy heuristic to find a large clique . The input array K holds core numbers of vertices . if v ’s core number is ≥ max then
Set H = {} , Set max = 0 for each v ∈ V in decreasing core number order do
1 procedure HeuristicClique(G = ( V , E ) , K ) 2 3 4 5 6 7 8
Let S be the neighs . of v with core numbers ≥ max Set C = {} for each vertex u ∈ S by decreasing core num . do if |C| > max then Set H = C , Set max = |H| if C ∪ {u} is a clique then Add u to C
9
10 return H , a large clique in G
Figure 2 : The empirical runtime of our exact clique finder in social and information networks scales almost linearly with the network dimension .
Runtime . We plot the runtime of the algorithm pictorially in Figure 2 for a representative subset of 32 of the 74 networks . The figure demonstrates linear scaling between 1000 vertices and 100M vertices . The runtime for the friendster graph with 1.8 billion edges ( from the SNAP collection ) is 20 minutes . The algorithm is parallelized in a shared memory setting using a worker task queue and a global broadcast [ 6 ] . Our source code and additional data on an extensive collections of networks is available in an online appendix.1
Application . As a demonstrative application , we use our maximum clique finder to identify temporal strong components ( tSCC ) , a recently introduced notion [ 1 , 2 ] . A temporal network is defined by a set of vertices V and a temporal set of edges ET ⊆ V × V × R+ between the vertices . Specifically , each edge ( u , v , t ) in a temporal network has a unique time t ∈ R+ . In such a network , a path represents a sequence of edges that must be traversed in increasing order of edge times . If each edge represents a contact between two entities , for example , then a path is a feasible route for information . Two vertices ( u , w ) are strongly connected if there exists a temporal path P from u to w and from w to u . And a tSCC is a maximal set of vertices C ⊆ V such that any pair of vertices in C are strongly connected [ 1 , 2 ] . Checking if a graph has a k node tSCC is NP complete . Nonetheless , we can compute the largest tSCC by finding a maximum clique in a derived graph called a strong reachability graph [ 2 ] . A strong reachability graph is obtained by inserting an edge between every pair of vertices in the temporal graph whenever there is a temporal path between them [ 4 ] . A maximum clique in the reachability graph , after non reciprocated edges have been removed , is then the largest temporal strong component [ 2 ] . When we apply our maximum clique finder to compute tSCC in reachability graphs with millions of edges , it takes less than a second .
Acknowledgements . This work is supported in part by
NSF grants CCF 1149756 and CCF 1218916 .
2 . REFERENCES
[ 1 ] S . Bhadra and A . Ferreira . Complexity of connected components in evolving graphs and the computation of multicast trees in dynamic networks . ADHOC NOW , pages 259–270 , 2003 .
[ 2 ] V . Nicosia , J . Tang , M . Musolesi , G . Russo , C . Mascolo , and
V . Latora . Components in time varying graphs . Chaos , 22(2):023101 , 2012 .
1
The appendix is at https://wwwcspurdueedu/homes/dgleich/ codes/maxcliques/ and the code is at http://ryanrossicom/pmc
Algorithm 2 Our exact maximum clique algorithm .
Set K = CoreNumbers(G ) K is a vertex indexed array Set H = HeuristicClique(G , K ) Remove ( explicitly ) vertices with K(v ) < |H| while |G| > 0 do
1 procedure MaxClique(G = ( V , E ) ) 2 3 4 5 6 7 8 9
Let u be the vertex with smallest reduced degree InitialBranch(u ) Remove u from G Periodically , explicitly remove vertices from G the routine grows H
10
Return H , the largest clique in G
14 15 16
11 procedure InitialBranch(u ) Set P = NR(u ) 12 if |P| ≤ |H| then return 13 Set KN = CoreNumbers(P ) Set K(P ) = maxv∈P KN ( v ) if K(P ) + 1 < |H| then return Remove any vertex with KN ( v ) < |H| from P Set L = Color(P , KN ) in degen . order L is nr of colors if L ≤ |H| then return Branch({} , P )
17 18 19
20 while |P| > 0 and |P| + |C| > |H| do
21 procedure Branch(C , P ) 22 23 24 25 26 27 28
Select a vertex u from P and remove u from P Set C = C ∪ {u} Set P = P ∩ {NR(u)} |P | > 0 then if Set L = Color(P ) in natural ( any ) order |C| + L > |H| then Branch(C , P ) if C is maximal Set H = C new max clique Remove any v with K(v ) < |H| from G implicitly else if |C| > |H| then
29 30 31
[ 3 ] P . R . J . ¨Osterg˚ard . A fast algorithm for the maximum clique problem . Disc . Appl . Math . , 120:197–207 , 2002 .
[ 4 ] R . K . Pan and J . Saram¨aki . Path lengths , correlations , and centrality in temporal networks . arXiv , page 1101.5913v2 , 2011 .
[ 5 ] B . Pattabiraman , M . M . A . Patwary , A . H . Gebremedhin ,
W . Liao , and A . Choudhary . Fast algorithms for the maximum clique problem on massive sparse graphs . In WAW , 2013 .
[ 6 ] R . Rossi , D . Gleich , A . Gebremedhin , M . Patwary , and M . Ali .
Parallel maximum clique algorithms with applications to network analysis and storage . arXiv preprint arXiv:1302.6256 , pages 1–10 , 2013 .
[ 7 ] E . Tomita and T . Kameda . An efficient branch and bound algorithm for finding a maximum clique with computational experiments . J . of Global Optimization , 37(1):95–111 , 2007 .
[ 8 ] J . Xiang , C . Guo , and A . Aboulnaga . Scalable maximum clique computation using mapreduce . In Conference on Data Engineering ( ICDE ) , pages 74–85 . IEEE , 2013 .
3456789−3−2−1012log |V| + |E|log Runtime3456789−3−2−1012log |V| + |E|log Runtime
