Understanding Propagation Error and Its Effect on Collective Classification
Department of Computer Science
Departments of Computer Science and Statistics
Rongjing Xiang
Purdue University
West Lafayette , IN , USA rxiang@cspurdueedu
Jennifer Neville
Purdue University
West Lafayette , IN , USA neville@cspurdueedu
Abstract—Recent empirical evaluation has shown that the performance of collective classification models can vary based on the amount of class label information available for use during inference . In this paper , we further demonstrate that the relative performance of statistical relational models learned with different estimation methods changes as the availability of test set labels increases . We reason about the cause of this phenomenon from an information theoretic perspective and this points to a previously unidentified consideration in the development of relational learning algorithms . In particular , we characterize the high propagation error of collective inference models that are estimated with maximum pseudolikelihood estimation ( MPLE ) , and show how this affects performance across the spectrum of label availability when compared to MLE , which has low propagation error . Our formal study leads to a quantitative characterization that can be used to predict the confidence of local propagation for MPLE models . We use this to propose a mixture model that can learn the best trade off between high and low propagation models . Empirical evaluation on synthetic and real world data show that our proposed method achieves comparable , or superior , results to both MPLE and low propagation models across the full spectrum of label availability .
Keywords statistical relational learning ; collective classifica tion ; probabilistic relational models .
I . INTRODUCTION
Collective classification with probabilistic relational models has received much attention lately , due to the abundance of relational and network domains that exhibit correlation among the class labels of related instances ( eg , friends in a social network are like to have similar political views ) . In statistical relational learning , recent work has focused on learning the joint distribution of relational dependencies in a labeled training graph ( eg , social network ) and then applying the learned model to collectively infer the unknown class labels in another , disjoint ( test ) graph [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] . While probabilistic relational models are able to represent complex dependencies in the data , they are also difficult to estimate efficiently , thus much research has focused on developing efficient approximations to maximum likelihood estimation ( MLE ) . A number of learning algorithms have been developed for probabilistic relational models ( see eg [ 4 ] , [ 5 ] , [ 6 ] , [ 7] ) , among which the two most representative approaches are MLE and maximum pseudolikelihood estimation ( MPLE ) . In domains where data instances are independent and identically distributed ( iid ) , MPLE can be viewed as an efficient approximation of MLE since it converges to MLE as the number of training instances increase . However , this view is no longer appropriate for relational domains where the training or test data is a single network of interdependent instances . Likewise , the classic statistical optimality of MLE no longer applies for these single networks . For this reason , a more careful examination of MPLE and MLE type estimation is warranted for relational settings . We compare these two types of learning algorithms in collective classification scenarios where the amount of class label information varies .
Many recent empirical results show that relational model performance can vary based on the amount of class label information that is available for use during inference ( see eg , [ 8] ) . This is because relational models utilize the class label dependencies among neighboring nodes in the graph and this information is propagated during the collective inference process . When there are few labeled instance in the test graph , there is less information to “ seed ” the inference process and thus classification performance decreases . Although the impact of label availability has received attention , the issue of how to tailor learning algorithms to different label availability scenarios has only been explored by [ 9 ] . MPLE and MLE type algorithms can be distinguished by their propagation effects when applied on test networks with a collective inference procedure . Models estimated by MPLE tends to result in higher global dependencies between distant labels in the network , and we thus call them high propagation models . On the other hand , MLE type algorithms estimate dependencies more conservatively , and we call them low propagation models . We find that low propagation models and high propagation models achieve superior performance in different regimes of the label availability spectrum . We provide an explanation of this phenomenon from a learning theoretic perspective . Our observation and analysis therefore add a new dimension to the comparison between different learning approaches beyond the traditional tradeoff between accuracy and efficiency . We further investigate the error propagation mechanism of collective inference based on MPLE and develop a quantitative method to characterize this propagation . This characterization is facilitated by the application of the microscopic dependency method ( see eg , [ 10] ) , which provides a generic way to decompose complex relational dependencies and approximate long range dependencies when a learned model is applied to a particular network ( with specific labeled nodes ) .
Finally , we use the key insight that the performance of low and high propagation models depends on label availability to develop a mixture model that can automatically choose between a low and high propagation model locally and dynamically during collective inference . The success of this new approach lies in the effectiveness of the predictor that we use to determine the activation probability of the high propagation model . This predictor is exactly the quantitative characterization of propagation effect in the high propagation model obtained from our analysis . Empirical evaluation on synthetic and real world dataset demonstrate that the mixture approach can achieve comparable , or superior , results to both MPLE and low propagation models across the whole spectrum of test set label availability .
The rest of this paper is organized as follows . Section II covers background on collective classification models , error measurement , and parameter estimation techniques . Section III experimentally compares collective classification performance of different methods as test set label availability varies and we provide a theoretical perspective on the empirical findings . Section IV includes a more detailed error analysis focusing on MPLE , which includes a quantitative bound . In Section V , we propose a mixture model to combine high and low propagation models based on our analysis . Section VI evaluates the performance of the proposed model . Section VII reviews related work and Section VIII concludes .
II . BACKGROUND
A . Collective Classification with Probabilistic Models
Collective classification techniques for network data attempt to exploit autocorrelation among linked instances to improve accuracy [ 11 ] . Autocorrelation is a statistical dependency between the same variable on related entities and almost ubiquitously exists in relational and network domains [ 12 ] . For example , friends on Facebook are more likely to have similar political views than random pairs of people . In order to leverage network autocorrelation , collective classification methods infer the labels of related instances jointly to improve prediction .
Due to their ability to model complex relationships , probabilistic graphical models are a popular approach for learning collective classification models . To frame our analysis and algorithm development , we outline a general probabilistic modeling formulation for relational classification problems . Similar to classification in iid settings , each data instance i has an attribute vector xi 2 X and a label yi 2 Y . In relational settings , we further assume the existence of a relational structure over the data instances . To encode this , we pre specify a set T of clique templates , which represent relationships of a particular type ( eg , friendship relations ) . Within each template type T 2 T there is a set C(T ) of cliques , where each clique C 2 C(T ) is an observed relation among a set of instances C = {i1 , i2 , . . . , i|C|} . By making a Markov assumption , the joint probability distribution of labels given the attributes in the network G can be written as the following exponential family form .
1
 T ( xC , yC ; ✓T ) ( 1 )
Z(✓ , xG ) YT2T YC2C(T ( G ) )
P ( yG|xG ) = where Z is the normalization factor , and we use xC to denote ) ( and similar for yC ) . Furthermore , in ( xi1 , xi2 , . . . , xi|C| this template formulation the parameter ✓ of cliques within the same template is homogeneous , which makes learning and generalization possible . Therefore , a single potential function  T is used for each template T . Each potential is further formulated as a log linear function of a set of features  T . The feature function  T is predefined and are computed from the vector of attributes and labels within the corresponding clique C .
 T = exp{h✓T ,  T ( xC , yC)i}
( 2 ) This general formulation encompasses a rich class of probabilistic relational models in the literature , including Relational Markov Networks [ 2 ] , Markov Logic Networks [ 3 ] , and Relational Dependency Networks [ 4 ] .
In most network datasets , exact inference is intractable for these models , thus many approximate methods of collective classification have been considered in the literature , eg , loopy belief propagation , mean field relaxation , and Gibbs sampling . To make the discussion concrete in this paper , we focus on Gibbs sampling since it is theoretically guaranteed to recover the exact probability distribution ( as defined by the model ) in the limit of infinite number of iterations . A Gibbs sampler for collective classification takes a partially labeled test network G ( with L denoting the labeled set and G \ L denoting the unlabeled set ) , the set of observed attributes xG , the set of observed labels y⇤L , and the learned parameters ✓ as input . It outputs samples from the joint distribution P ( yG\L|y⇤L ) . We can then obtain the approximate marginal distributions P ( yi|y⇤L)1 from these samples . The error of the collective classification model is simply computed as the per instance error rate :
Error(y⇤G , P✓ ) =
P ( yi 6= y⇤i |y⇤L )
1
|G \ L| Xi2G\L |G \ L| Xi2G\L
1
=1  
P ( y⇤i |y⇤L )
( 3 )
1Alternatively , one may
P ( ˆyG\L|y⇤L ) for prediction . However , we adopt using
MAP the is widely applied in relational consider argmaxˆyG\L marginal classification on single networks . likelihood in this paper as it the
✓MPLE = argmax log P ( yi|xi , x@i , y@i )
✓ Xi2G ✓ Xi2G 'i   log Xyi,y@i exp('i)!
= argmax
( 5 )
B . Parameter Estimation in Probabilistic Relational Models The maximum likelihood estimation ( MLE ) for model ( 1 ) can be written as the following optimization problem . ✓MLE = argmax log P ( yG|xG )
✓
= argmax
✓ XT2T XC2C(T ( G ) ) h✓T ,  T ( xC , yC)i log Z(✓ , xG ) ( 4 ) The MLE is generally intractable for large networks due to the normalization factor Z .
Another straightforward method for parameter estimation is the maximum pseudolikelihood estimation ( MPLE ) . Due to its efficiency , MPLE is widely applied to relational data in practice [ 4 ] . Let @i denote the Markov blanket of i , ie , the set of instances that share a clique C with i . The MPLE optimizes the product of local conditional probability distributions ( CPDs ) P ( yi|xi , x@i , y@i ) : normalization logPyi,y@i where 'i denotes the local potentials of instance i , ie , the summation of the potentials of all cliques that involve i . Since the global normalization in ( 4 ) is replaced by the local exp('i ) , exact optimization of ( 5 ) is usually tractable . To facilitate the analysis in this paper , we further decompose the local potentials into self potentials i , which are only a function of yi and attributes xG , and 'S interaction potentials 'I i , which also depend on neighboring labels yj : j 2 @i . Thus 'i = 'S i . i + 'I
III . A COMPARISON OF DIFFERENT PARAMETER
ESTIMATION METHODS
Although the availability of test set labels ( ie , |L| ) has been regarded as an important factor in determining collective classification performance , there has been little work investigating the impact of different labeling scenarios on learning , with the exception of [ 7 ] , [ 9 ] . Although not explicitly motivated by this goal , the stacked modeling approach to relational learning [ 7 ] is often credited for adjusting for the mismatch in label availability between training data and test data that occurs in MPLE type approaches [ 16 ] . In this section , we seek to understand the reasons for performance differences among the various parameter estimation methods , when the amount of observed test set labels is varied . In Figure 1 , we plot the classification error of MPLE , MLE , independent learning , and stacking on synthetic network datasets , for varying amounts of labeled test instances . All methods have the same form of local potentials , except for the independent model , which is equivalent to a logistic regression model that applies the same form of self potentials 'S as in the relational models , but does not contain the interaction potentials 'I .
Figure 1 . Classification error on test networks . We generate training and test networks of size 200 ( for which MLE can be obtained ) using a latent group model [ 17 ] , which emulates the properties of autocorrelation and community structure observed in real networks . In each simulation we train the models on one synthetic network and test them on another . We repeat the simulation 20 times to obtain the error bars on classification error .
A . Why does MPLE outperform MLE in the region of large labeled proportions ?
We observe that MPLE outperforms all other methods when there is a moderate amount of observed labels in the test network . In particular , MPLE outperforms MLE , even though MLE is assumed to be the preferred choice of parameter estimation , when computational resources allow . The superior performance of MPLE is a consequence of learning the parameters from a single network and then applying them for prediction in a test network with partially observed labels . Let ⇡ denote the underlying true generative distribution of the training network G , ie , the observed training network is a single sample from ⇡(xG , yG ) . This should be distinguished from classical learning settings . In the classical setting , during training there are many samples from ⇡(xG , yG ) and hence the empirical data distribution ˆ⇡(xG , yG ) represents the underlying data generative distribution well . In this scenario , since the MLE minimizes D(ˆ⇡(yG|xG)kP✓(yG|xG ) ) ( the Kullback Leibler ( KL ) divergence between ˆ⇡(yG|xG ) and P✓ ) , at the same time it approximately minimizes the KL divergence between ⇡(yG|xG ) and P✓ since D(⇡(yG|xG)kP✓(yG|xG ) ) can be bounded by D(ˆ⇡(yG|xG)kP✓(yG|xG ) ) + ✏(n ) with high probability , where ✏ typically decreases exponentially or faster in the sample size ( see eg , [ 18] ) . However , is still an open issue whether , under which assumptions , D(⇡(yG|xG)kP✓(yG|xG ) ) can be effectively bounded based on D(ˆ⇡(yG|xG)kP✓(yG|xG ) ) when the sample size is 1 ( ie , a single network ) . Therefore , there is no theoretical guarantee in general situations that minimizing the divergence between the single network sample and the model distribution would lead to good generalization performance on another network sample from the underlying ⇡ . Furthermore , even if a bound on D(⇡(yG|xG)kP✓(yG|xG ) ) in the label can be obtained under certain assumptions , learning with one network , in relational it abundant region the more suitable objective should be D(ˆ⇡(yi|xi , x@i , y@i)kP✓(yi|xi , x@i , y@i) ) . This mismatch is another potential factor that leads to the inferior performance of MLE . Section III C further elaborates this point . the data distribution ,
On the other hand , MPLE directly minimizes the KL divergence between the local CPD of the model distribution and that of ie , D(ˆ⇡(yi|xi , x@i , y@i)kP✓(yi|xi , x@i , y@i) ) . We should note that although there are n local CPDs in a network of n instances , the effective sample size is much smaller than n due to the dependence between the CPDs . Nevertheless , under weak dependence assumptions such as exponential correlation decay with network distance , which typically can be satisfied in real networks , the effective sample size ˜n increases with n . Combining this observation with a stationarity assumption that postulates P ( xi , yi , x@i , y@i ) to be homogenous for any i , the expected local divergence on unseen data , D(⇡(yi|xi , x@i , y@i)kP✓(yi|xi , x@i , y@i ) ) can be effectively bounded based on the local divergence between training data and the model , or explicitly , by D(ˆ⇡(yi|xi , x@i , y@i)kP✓(yi|xi , x@i , y@i ) ) + ✏(˜n ) ( see , eg . [ 19] ) . Therefore , a training algorithm like MPLE , which minimize the local divergence on the training network , also approximately minimizes the local divergence on the test network . In the scenario when there is a large amount of observed test set labels , the predictive probability P ( yi|x , y⇤L ) is close to P ( yi|x , y@i ) . Since by the above reasoning , MPLE chooses the model parameters ✓ so that P✓ approximately minimizes the divergence between the true distribution CPD ⇡(yi|x , y@i ) and the model CPD P ( yi|x , y@i ) on the test network , this explains the reason for the superior performance of MPLE in scenarios with abundant labels . B . Why does MPLE perform poorly in the region of small labeled proportions ?
At the other end of the spectrum , however , MPLE performs rather poorly , even worse than the independent learning approach . This is due to the fact that MPLE estimates the parameters by separating the local CPDs . It ignores the global coupling among CPDs and attributes all the dependency in the network to local dependencies . Therefore , the local interaction potential 'I i accounts for all the dependencies between instance i and the rest of the network . This works well when we run inference using these CPDs separately on each instance , as in the case when each instance ’s neighbors are fully labeled . However , problems arise when we apply these CPDs collectively for inference , eg , in Gibbs sampling the propagation of local dependencies throughout the network results in excessive dependencies . We will analyze this over propagation effect of collective inference with MPLE in more detail in Section IV by formalizing the notion of propagation error .
When the over propagation effect exceeds the benefit the MPLE fails to of using the relational information , outperform the independent model which does not propagate during inference . The MLE is a global learning approach and thus does not result in over propagation when used for collective classification . The stacking approach compensates for the over propagation of MPLE by learning from the predicted neighbor labels ( rather than the true labels ) in an iterative approach to training , yielding a performance curve closer to MLE than independent learning without incurring an overly high computational cost . We refer to MLE and stacking as low propagation models . C . Why the discrepancy between these two cases ?
L
Given that the different models obtained by different parameter estimation techniques come from the same model family , one may speculate that there should an ” optimal ” model from the family , which in expectation best predicts the labels in the test network across all scenarios , ie , that there should exist an optimal parameter ˆ✓ so that the inferential distribution Pˆ✓(yG\L|y⇤L , x ) is the best match for the true distribution for any labeled set L . This is true in the case of well specified model families—indeed , it has been shown that MLE and MPLE will converge to the same true parameter when the true data distribution ⇡ belongs to the model family ( 1 ) with predefined potential functions ( see [ 20] ) . Unfortunately , in practice though , the model family is unlikely to be well specified . In these scenarios , the optimal L which makes the model P✓(yG\L|y⇤L , x ) closparameter ˆ✓ est to the true distribution ⇡✓(yG\L|y⇤L , x ) for a labeled set L ( ie , ˆ✓ = argmin✓ D(P✓(yG\L|y⇤L , x)k⇡(yG\L|y⇤L , x) ) ) varies with L . For example , when L contains 1 % of the instances in the test network , the MLE tends to be a better L , while when L contains 90 % of the approximation of ˆ✓ instances , the MPLE tends to be a better approximation of L . Therefore , we see again that this discrepancy is unique ˆ✓ to relational classification in single network domains with partially observed labels .
Although most recent research has focused on efficient approximations to MLE , these methods tend to result in low propagation models that improve over MPLE in the small labeled proportion regions , but are inferior to MPLE in the large labeled proportion regions . Our analysis provides a balanced view of different learning methods when they are applied to collective classification on network data with partially observed labels . We emphasize that by understanding the pathology of MPLE in the small labeled proportion region , there is an opportunity of taking full advantage of both MPLE and low propagation models in collective classification tasks . The rest of this paper provides an initial exploration in this direction .
IV . ERROR ANALYSIS OF COLLECTIVE INFERENCE
USING MPLE
To gain further understanding into collective classification error using MPLE , following the error rate defined by ( 3 ) , consider the following error decomposition2 for each instance:3
✏i = 1   P ( y⇤i |y⇤L )
= base error = ( 1   P ( y⇤i |y⇤@i ) ) + ( P ( y⇤i |y⇤@i )   P ( y⇤i |y⇤L ) )
+ propagation error
The base error is the classification error of a node ’s label in the scenario that all labels in the rest of the network are observed . Since MPLE optimizes for this scenario , the propagation error term is positive with high probability for any labeling situation . It thus makes sense to use this decomposition . While the base error is decided by the quality of the specification of model family and the feature selection process , the propagation error is the error caused by the collective inference mechanism based on partially observed labels in the rest of the network .
To analyze the propagation error , we first introduce distance measures for probability distributions , which will be used to evaluate microscopic dependencies . The following definition of total variation distance ⌫ between two probability distributions ⇡1 and ⇡2 is standard .
⌫(⇡1 , ⇡2 ) =
|⇡1(y )   ⇡2(y)|
( 6 )
1
2Xy2Y
 ij = max yj ,y0j ,yG\{i,j}
The microscopic dependency  ij is defined to be the variation of the conditional probability P ( Yi|yG\i ) , when only yj is varied . Formally , ⌫ P ( yi|yj , yG\{i,j} ) , P ( yi|y0j , yG\{i,j}) 
While the total variation distance aggregates the difference between two distributions over all states , it will also be convenient for our purpose to consider the maximum difference of two distributions over single states . Hence we define another measure of microscopic dependency , denoted by  ij : yi2Y,yj ,y0j ,yG\{i,j}
P ( yi|yj , yG\{i,j} )   P ( yi|y0j , yG\{i,j} )
For binary classification ,  ij =  ij ; otherwise  ij   ij . The microscopic dependencies measure the oscillation of node i ’s label yi caused only by the change of node j ’s label yj , while the rest of the network yG\{i,j} is unchanged . Analytical methods based on microscopic dependencies are proposed by Dobrushin in his celebrated work [ 10 ] , where  ij is used to prove sufficient conditions for the uniqueness of Gibbs measures on lattice data [ 22 ] . Our development of error analysis for collective classification that follows , is inspired by Dobrushin ’s method .
 ij = max
2This is not to be confused with the collective classification error decomposition in previous work [ 21 ] , [ 16 ] that uses squared loss to facilitate bias/variance analysis .
3Throughout this section , since the model is always conditioned on the attributes , we drop the x on the right of the conditioning sign | for simplification .
)  ) 
1
) j ti 1
1
1 j ti 1 j ti 1
1
1
1
1
, y⇤ jti k
P ( yjti
1
P ( yjti
1
, y⇤ jti k+1
)i )   P ( y⇤i |yjk
Let ✏ = [ ✏1 , ✏2 , . . . , ✏n]T denote the classification error of instances ,   denote the base error , and   denote the propagation error , ie , ✏i =  i +  i . Furthermore , let {j1 , j2 , . . . , jti} index the unlabeled nodes within i ’s Markov blanket , ie , jk 2 @i \ G\L . Finally , let jq p denote the sequence {jp , jp+1 , . . . , jq} . To gain insights into the propagation error of collective classification , we apply the following expansion :  i = P ( y⇤i |y⇤G\i )   P ( y⇤i |y⇤ L ) )hP ( y⇤i |y⇤ =Xy )   P ( y⇤i |yjti jti 1 tiXk=1P ( y⇤i |yjk 1 =Xy )P ( y⇤i |yjk 1 tiXk=1Xy tiXk=1 Xyjk6=y⇤jk P ( yjk ) Xy P ( y⇤i |yjk 1 )   P ( y⇤i |yjk tiXk=1 1   P ( y⇤jk )  Xy P ( y⇤i |yjk 1 ✏jk  ijk  tiXk=1
 where in the last step , we define ✏@i,max := maxk=1,,ti ✏jk to gauge the inference error of neighboring labels .
)   P ( y⇤i |yjk  ijk! ✏@i,max
)   P ( y⇤i |yjk k+1|yjk ) k+1|yjk ) tiXk=1
, y⇤ jti k+1
, y⇤ jti k+1
, y⇤ jti k+1
P ( yjk 1
P ( yjk 1 max y ti 1 j
)
P ( yjti
1
, y⇤ jti k jk 1 1
,y j ti k+1
, y⇤ jti k jk 1 1
,y j ti k+1
, y⇤ jti k
) 
, yjti
1
=
=
, yjti
In this way , we have decomposed the propagation error along the edges . By iteratively applying Equation ( 7 ) , we can see that the inference error of each node is propagated throughout the whole network . Therefore , the prediction error depends on two factors : the base error and the propagation in the network . Since the base error is typically unknown , we focus on the propagation effect . If the microscopic dependencies  ijk are small , the propagation effect decays rapidly with respect to graph distance . If the microscopic dependencies  ijk for unlabeled nodes i , j are large however , long range error propagation is likely to happen , which results in high propagation error . More specifically , we define the propagation coefficient i to evaluate the local propagation effect . i upper bounds the proportion of error on neighboring nodes that is propagated to node i :
1
1
( 7 )

1
i :=
 ijk
( 8 ) tiXk=1
If i < 1 for every instance i , the influence from far away nodes is guaranteed to decay exponentially with respect to graph distance . A . Propagation upper bound w(y ) ,  2
A direct computation of  would involve evaluating the microscopic dependencies  ijk by enumeration of neighboring labels . This can be computationally intensive when the network is densely connected . Therefore , we further upper bound  ijk based on the oscillation of potential functions of the model so that  can be efficiently approximated . Lemma 1 will serve for this purpose . Let  1 w(y ) be two sets of potential functions , each indexed by some vector variable w 2 W . Each instantiation of w defines the two exponential family distributions ⇡i(y)(i = 1 , 2 ) over w(y ) ) the label space Y : ⇡i(y ) = w(y) ) . We define the oscillation of potential : w(y ) w(y ) 2 = max Lemma 1 : For any w 2 W , the total variation distance w(Y )   1 4 . w(Y ) , ⇡2 define = min 1 w(y)| where q 2 [ 0 , 1 ] .
Py exp( i w max w(y ) min y 1 y 1 w(y ) 2 w is bounded : ⌫ ⇡1 w(y)  + q| 1  0q(y ) ⌘ w and ⇡2 Proof : Given
 q(y ) = | 1 w(y )    2 w(y )    2 between ⇡1 any w , w(y ) ,  2 w(y)|
Then :
 q(y ) exp( i d dq
( 9 )
By Equation ( 6 ) and the exchangeability of summation and integration , where we find d
0
1
1 d d
= dq
 e q(y ) w(Y ) , ⇡2
Py e q(y)! dq   dq e q(y )
2Xy   Z 1 w(Y )  = ⌫ ⇡1 Py e q(y)!   0 Xy   dq e q(y ) 2Z 1 Py e q(y)!     dq e q(y ) Py e q(y )    0q(y )  Xy Py e q(y )  0q(y )   E 0q(y ) Xy   Py e q(y)!   dq e q(y ) ⇣E⇥ 0q(y )   E 0q(y)⇤2⌘ 1  E 0q(y )  
Py e q(y )   = E  0q(y )   E 0q(y )  2! 1 maxy  0q(y ) + miny  0q(y ) e q(y) 0q(y ) e q(y )
= d
2
2
2
And thus by Cauchy ’s inequality ,
( 10 )
Plugging this back into Equation ( 10 ) , and by ( 9 ) we obtain

 0q(y)◆ y y
1
2✓max ⌫ ⇡1 2Z 1 4✓max
 0q(y )   min w(Y )  2✓max  0q(y )   min w(Y ) , ⇡2 1

=
1
1 y y
0
 0q(y)◆ dq
1 4 y
 0q(y )   min  0q(y)◆ = y
1 \jk jk , y2 jk , yjti
To apply Lemma 1 , we first define the oscillation function of interaction potentials , denoted by  jk ( 'I i ) . Let ) denote the difference of unlabeled djk ( yi , y1 node i ’s interaction potential 'I under two configurations which only differ at one neighboring label yjk : djk(yi , y1
) 1 \jk i ) to be the maximum oscillation of djk jk yjti 1 \jk We define  jk ( 'I as the other unobserved neighboring labels yjti jk , y2
) 'I(yi , y2
1 \jk jk , yjti
)='I(yi , y1 djk ( yi , y1
 jk ( 'I jk , yjti jk , yjti jk , y2 vary : i ) =
1 \jk
)
1 \jk jk  max max ,y1 jk djk ( yi , y1
,y2 yi y j ti 1 \jk
  min yi
= y j max ,y1 jk
,y2 jk
,yi ti 1 \jk jk , y2 jk , yjti 2djk ( yi , y1
1 \jk jk , y2
)  jk , yjti
1 \jk
)
Proposition 1 : The propagation coefficient i of each instance i is upper bounded by ˆi :
ˆi =
1 8 tiXk=1
 jk ( 'I i )
( 11 ) jk 2 Y , let  1
Proof : For k = 1 , 2 , . . . , ti , we use Lemma 1 to bound . Let w = yjti w(yi ) = ) . ,x(yi , y1 jk , yjti
. For any y1 ) ,  2 w(Y ) = ˜P ( Yi|x , y1 jk , yjti
 ijk 1 \jk 'I y⇤ 1 \jk L Then ⇡1 w(Y ) = ˜P ( Yi|x , y2 ⇡2  ij   ij = max ,y2 ,y jk jk , y2 w(yi ) = 'I y⇤ L L ) and , y⇤ jk , yjti 1 \jk L ) . Hence , y⇤ w(Y )  w(Y ) , ⇡2
⌫ ⇡1
,x(yi , y2 jk , yjti
1 \jk
2 \jk ti 1 \jk y1 jk j djk ( yi , y1 jk , y2 jk , yjti
) =
1 \jk
1 8
 jk ( 'I i ) y max ,y1 jk
 Therefore , we obtain ti 1 \jk
,y2 jk
,yi j
i =
 ijk 
1 8 tiXk=1
 jk('I i ) = ˆi
Combine this upper bound with inequality ( 7 ) , we see that ˆi✏@i,max provides an upper bound of the propagation error at i . From the definition , it is obvious that the propagation estimate ˆi decreases monotonically as more and more labels are acquired in the test network .
V . ALGORITHM
Based on the above analysis , we propose a new approach to learning collective classification models . The purpose of this approach is to combine the strength of MPLE with any low propagation model , so that the resulting algorithm achieves consistently low error across the full range of label availability in the test network .
We directly model the CPDs used in Gibbs sampling by a local mixture model µ(yi ) . Given an MPLE estimate ✓ and any low propagation model ˜P , the model µ(yi ) is a mixture of P✓(yi|xi , x@i , y@i ) and ˜P ( yi|xG , yG\i ) : µ(yi ) = iP✓(yi|xi , yi , x@i , y@i )
+ ( 1    i ) ˜P ( yi|xG , yG\i )
( 12 ) where the mixture coefficient  i is a latent variable which represents the confidence of propagation by MPLE in predicting yi . With probability  i , the MPLE model P✓ is activated . When the test network is fully labeled , there is no propagation error and  i should be 1 . When the network is partially labeled , however , the propagation error is unknown and thus the confidence variable  i is latent . By the analysis in Section IV , it is reasonable to assume that  i is negatively correlated with the propagation upper bound i . Thus , we use the following simple model for  i :
 i = exp{ ⌧ max(ˆi   0 , 0)}
( 13 ) When ˆi is below the threshold 0 , the MPLE model is always activated ; otherwise , the MPLE model is activated with probability decaying exponentially with the propagation upper bound .
Instead of the propagation upper bound ˆ , one may propose to directly use the labeled proportion as the predictor of confidence . However , we argue that the propagation effect is the underlying factor that ˆ rightly captures . The labeled proportion , on the other hand , may not directly reflect the propagation error since different labeling schemes with the same labeled proportion may result in very different propagation strengths in the network . For example , propagation effects from a randomly distributed set of labels will be quite different from the propagation effects when the labels are in a contiguous subgraph ( eg , from snowball sampling ) . We also note that some active inference methods that query nodes to label ( eg , AIGA method in [ 23 ] ) can be viewed as reducing the propagation error in the network to the greatest extent within a certain labeling budget .
The mixture model is learned on the training network . Since the mixing coefficients  i are latent variables that are coupled with the propagation effect in partially labeled settings , estimating the meta parameters ⌧ and 0 is not a trivial task . Fortunately , this is only a two dimensional problem . We thus develop a simulation method with simple grid search to experimentally validate the model , while leaving the investigation of more sophisticated methods as
Algorithm 1 Parameter estimation for the mixture model
Input : Training network G , attributes xG and labels yG . Output : The mixture model µ ( the MPLE model P✓ , the low propagation model ˜P , and meta parameters ( ˆ⌧ , ˆ0) ) . Learn the MPLE model P✓ . Learn a low propagation model ˜P ( eg , stacking ) . for labeledP roportion = 0.0 , 0.1 , . . . , 0.9 do independent , labeledP roportion of training a ) Randomly select instances as labeled set L . b ) Compute the propagation upper bound ˆi for all instances i by Equation ( 11 ) . for labeledP roportion = 0.0 , 0.1 , . . . , 0.9 do end for Sort the list of all ˆi ’s obtained from the above step . Initialize lowestError = 1 . for ⌧ 2 {0.01 , 0.1 , 0.5 , 1.0} , 0 2 [ values ranked at {10 % , 30 % , 50 % , 70 % , 90%} of the sorted ˆi list ] do a ) Randomly select labeledP roportion of training instances as labeled set L . b ) Compute the propagation upper bound ˆi for all instances i by Equation ( 11 ) . c ) Initialize error = 0 . d ) Run collective inference by Alg . 2 to obtain the marginal predictive probabilities P ( yi|xG , y⇤L ) , i 2 G\L from the mixture model . c ) Evaluate inf erenceError from the marginals , and let error = error + inf erenceError . end for if error < lowestError then
Set lowestError = error , ˆ⌧ = ⌧ , and ˆ0 = 0 . end if end for
Algorithm 2 Collective inference using the mixture model Input : Test network G , attributes xG , set of observed labels y⇤L , and the local mixture model µ . Output : Predictive marginal probabilities P ( yi|xG , y⇤L ) . for i 2 G \ L do a ) Compute the latent confidence  i by Equation ( 13 ) . b ) Compute the CPD µ(yi ) for every yi 2 Y by Equation ( 12 ) . end for Use the Gibbs sampler with the CPDs µ(yi ) for i 2 G \ L to generate samples , and compute marginals P ( yi|xG , y⇤L ) , i 2 G\L from the samples . future work . Our method samples ( multiple times ) subsets of available labels on the training set to simulate different label availability and hence different propagation strengths during inference . The grid search on ⌧ and 0 samples ⌧ from the interval [ 0.01 , 1.0 ] , and enumerates the threshold
0 from the quantiles of the empirical propagation upper bounds . More details are described in Algorithms 1 and 2 . The advantage of this mixture model is that it allows us to dynamically adjust the level of label propagation during the collective inference process . Furthermore , since the mixture model is defined on a local level , it allows us to model the heterogeneity of instances due to the difference in network local structures and the difference in label availability at different locations in the network .
VI . EXPERIMENTS
We evaluate the strength of the mixture model and verify our understanding of propagation error by comparing the performance of the mixture model with high and low propagation models . We compared to MPLE ( high propagation ) and two low propagation models : the independent model and the stacking method . We first experiment with synthetic data , which allow us to generate multiple identically distributed network samples for training and testing , so we can obtain the standard errors for the various methods . We then compare the approaches on three real network datasets . In all real data experiments , we perform training and testing in a cross (sub)network validation manner . For each fold of the cross validation we train on three subnetworks and test on one subnetwork . For each test subnetwork , we randomly sample different sets of labeled nodes 10 times , and report the average performance ( over the 4 folds and 10 random labeling schemes ) .
In all experiments , we learn a relational Markov network from the data . Two clique templates are specified . First , a singleton clique is defined on each instance and the potential is a linear combination of the attributes with the weights depending on different values of the label yi . More specifically , the clique potentials are of the form  y=k = h✓k , xii for k 2 Y . Second , an edgewise clique is defined for each edge , and the potential is a weighted indicator function of whether the two related instances have the same label or not , ie , the clique on edge ( i , j ) has a potential function  yi=yj = ✓0 . The parameters ✓ are estimated by the learning method corresponding to each mixture component , eg , MPLE or stacking . For independent models , ✓0 is fixed to be 0 so there is no interaction potential . A . Synthetic data
Our synthetic data experiments are based on a latent group model [ 17 ] , which simulates the autocorrelation and community structure observed in real networks . The experimental setting is similar to that in Figure 1 , except that we vary the linkage in the data . Figures 2(a ) and 2(b ) show performance in relatively low link density networks , using independent learning and stacking , respectively , as the low propagation component model . Figures 2(a ) and 2(b ) depict the same results but in networks with high link density . We observe that in all cases the error rate of the low propoagation model is lower at the beginning , but it decreases very little compared to the collective approach , or even remains constant ( in the independent model ) . Clearly , as the amount of labeled instances grows from small to large , the propagation among unlabeled instances becomes weaker and the relative performance of MPLE and the low propagation models invert . However , the mixture model is able to consistently achieve the lowest error rate due to its ability to identify the critical points of propagation error by estimating the latent confidence of propagation . In addition , we note the difference between MPLE and low propagation models is more significant when link density is higher .
Figure 2 . Synthetic data , low linkage . Average over 20 training/test pairs .
Figure 3 . Synthetic data , high linkage . Average over 20 training/test pairs .
B . Real data
We now evaluate the methods on three real datasets . We find that the performance is quite consistent with our understanding about propagation error and our observations from the synthetic data .
The first dataset was collected by the WebKB Project [ 24 ] . The data consist of a set of 3,877 web pages from four computer science departments , labeled with the categories : course , faculty , staff , student , research project , or other . We considered the unipartite co citation web graph which include all the categories except for “ other ” . We test the various methods for multiclass classification on page category . The results are shown in Figure 4 . Due to the strong dependencies caused by the high linkage of these co citation graphs , when the labeled proportion is small , the MPLE model tends to assign the observed class labels to all unlabeled instances with high probability—which leads to severely poor performance . On the other hand , it also improves over the low propagation methods by a large margin when the proportion of labeled instances is more than 30 % . By identifying and correcting for the excessive propagation of MPLE , the mixture model achieves the lowest error across the whole spectrum . averaged over multiple subnetwork splits and random label selections . The mixture model eliminates the occasional pathological performance of MPLE and thus improves it on average . Second , the mixture is defined for the CPDs , so the overall model benefits from targeted adjustments of local propagations .
Figure 6 . Classification error on the IMDB network .
VII . RELATED WORK
A great deal of research focus in the statistical relational learning community has centered on collective classification . Probabilistic models for relational networks have been proposed and widely used for collective classification tasks [ 1 ] , [ 2 ] , [ 3 ] , [ 4 ] . Their empirical performance has been studied in a broad set of domains ( see eg , [ 8 ] ) and a number of recent works have demonstrated the impact of observed test set labels on the performance of collective classification . McDowell et al . [ 9 ] investigated how to tailor learning and inference methods to the level of label availability—to be more cautious when labels are scarce . Bilgic and Getoor [ 23 ] studied several active label acquisition techniques to improve collective inference in probabilistic relational models . Macskassy [ 25 ] also investigated active labeling in Gaussian field models for network data .
Many parameter estimation techniques that take global propagation into account during learning have been proposed , and can be categorized as low propagation models in our context . Examples of this type that have been applied to relational learning/collective classification tasks before include stacking [ 7 ] , the scaled conjugate gradient algorithm [ 5 ] , and virtual evidence boosting [ 6 ] . It would be interesting to examine the performance of using the latter models as the low propagation component in our mixture model .
There also exists other work which formally analyzes the inference error in collective classification [ 21 ] , [ 16 ] . However , these papers attempt to characterize the performance of relational models from a bias/variance analysis perspective , while our work addresses inference error in the context of varying amounts of observed test set labels , and suggests ways to improve performance of relational methods . VIII . CONCLUSIONS AND FUTURE WORK
In this work , we study collective inference error of relational models resulting from different parameter estimation
Figure 4 . Classification error on the WebKB network .
Figure 5 . Classification error on the Facebook network .
The second dataset is drawn from Facebook . It includes user profile attributes ( eg , political , religious views ) , as well as friendship links and transactions ( eg , wall posting , picture tagging ) among users . Our sample network consists of 7,315 users , which comprise a set of students and alumni with public profiles from the Purdue Facebook network . We further divide the network into 8 articulated subnetworks of comparable sizes for training and testing ( eg , “ Class of 2008 ” ) and construct relational graphs based on the friendship , wall posting , picture tagging , and common group links . We perform a binary classification task : predicting whether a user ’s political view is “ conservative ” or not . We train Markov networks on the relational graph , using gender , relationship status , and religious view as attributes . Figure 5 shows that on this dataset , the MPLE approach performs worse than the low propagation approach when the amount of labeled data is small to moderate . Again the mixture approach improves over both approaches .
Finally , the third dataset is drawn from the Internet Movie Database ( wwwimdbcom)We used a sample of 1,382 movies released in the US between 1996 and 2001 . The binary classification task is to predict movie opening weekend returns ( > $2 million ) . We considered a unipartite graph of movies , where links indicate that the movies share a common actor , producer , director , studio or editor . We build the Markov network based on this graph and two movie genre attributes . Figure 6 shows that the low propagation approaches is worse than MPLE across the whole spectrum , indicating that the impact of over propagation does not offset the advantage of the accurate local relational model . However , the mixture approach is still able to improve over MPLE in the regime of small to moderate amount of observed labels . This is due to two facts : First , the curves are techniques , in the context of varying availability of test set labels . We observe that the relative performance of different learning approaches is inconsistent across the spectrum of label availability . Specifically , we found that the MPLE performs remarkably well when there are abundant observed test set labels , but rather poorly when the known labels are sparse . We reason about the cause of this phenomenon and point to a previously unidentified trade off between different parameter estimation methods—based on the test set label availability . We formalize this trade off through an analysis of MPLE propagation error , and discuss the difference between models with high propagation error ( MPLE ) and low propagation error ( eg , MLE ) . Our formal study leads to a quantitative characterization that can be used to predict the confidence of local propagation for MPLE models . Based on this , we propose a mixture modeling approach to learn a good , local combination of high propagation and low propagation models . Our experimental results on both synthetic and real data confirm our understanding and demonstrate the mixture model ’s consistently superior performance across the full spectrum of label availability .
There are a number of future directions to explore with this work . First , while we have developed a mixture model in view of the fact that MPLE better approximates the optimal prediction in the label abundant case while low propagation models better match the label scarce case , is there a direct model that serves for the same purpose and can be efficiently learned from the training network ? Second , we would like to gain further understanding into the inference error by incorporating the analysis of base error . This may help us tighten the upper bounds or develop average case bounds on error , and provide novel ways to apply probabilistic relational models for collective classification .
ACKNOWLEDGEMENT
This research is supported by NSF under contract numbers SES0823313 , IIS 1017898 , CCF 0939370 . The US Government is authorized to reproduce and distribute reprints for governmental purposes notwithstanding any copyright notation hereon . The views and conclusions contained herein are those of the authors and should not be interpreted as necessarily representing the official policies or endorsements either expressed or implied , of NSF or the US Government .
REFERENCES
[ 1 ] N . Friedman , L . Getoor , D . Koller , and A . Pfeffer , “ Learning probabilistic relational models , ” in IJCAI , 1999 .
[ 2 ] B . Taskar , P . Abbeel , and D . Koller , “ Discriminative proba bilistic models for relational data , ” in UAI , 2002 .
[ 3 ] M . Richardson and P . Domingos , “ Markov logic networks , ”
Mach . Learn . , vol . 62 , no . 1 2 , pp . 107–136 , 2006 .
[ 4 ] J . Neville and D . Jensen , “ Relational dependency networks , ”
J . Mach . Learn . Res . , vol . 8 , pp . 653–692 , 2007 .
[ 5 ] D . Lowd and P . Domingos , “ Efficient weight learning for markov logic networks , ” in PKDD , 2007 , pp . 200–211 .
[ 6 ] L . Liao , T . Choudhury , D . Fox , and H . Kautz , “ Training conditional random fields using virtual evidence boosting , ” in IJCAI , 2007 .
[ 7 ] Z . Kou , “ Stacked graphical models for efficient inference in markov random fields , ” in Proceedings of the 2007 SIAM International Conference on Data Mining , 2007 .
[ 8 ] S . Macskassy and F . Provost , “ Classification in networked data : A toolkit and a univariate case study , ” Journal of Machine Learning Research , vol . 8 , no . May , pp . 935–983 , 2007 .
[ 9 ] L . McDowell , K . Gupta , and D . Aha , “ Cautious collective classification , ” Journal of Machine Learning Research , vol . 10 , pp . 2777–2836 , 2009 .
[ 10 ] P . L . Dobrushin , “ The description of a random field by means of conditional probabilities and conditions of its regularity , ” Theory Probab . Appl . , vol . 13 , pp . 197–224 , 1968 .
[ 11 ] P . Sen , G . Namata , M . Bilgic , L . Getoor , B . Galligher , and T . Eliassi Rad , “ Collective classification in network data , ” Ai Magazine , vol . 29 , no . 3 , 2008 .
[ 12 ] D . Jensen and J . Neville , “ Linkage and autocorrelation cause feature selection bias in relational learning , ” in ICML , 2002 .
[ 13 ] A . Fast and D . Jensen , “ Why stacked models perform effec tive collective classification , ” in ICDM , 2008 .
[ 14 ] J . Neville and D . Jensen , “ Leveraging relational autocorrela tion with latent group models , ” in ICDM , 2005 .
[ 15 ] O . Bousquet , S . Boucheron , and G . Lugosi , “ Introduction to statistical learning theory , ” in In , O . Bousquet , Uv Luxburg , and G . Rsch ( Editors ) . Springer , 2004 , pp . 169–207 .
[ 16 ] B . Yu , “ Rates of convergence for empirical processes of stationary mixing sequences , ” Ann . Probab . , vol . 22 , no . 1 , 1994 .
[ 17 ] R . Xiang and J . Neville , “ Relational learning with one net work : An asymptotic analysis , ” in AISTATS , 2011 .
[ 18 ] J . Neville and D . Jensen , “ A bias/variance decomposition for models using collective inference , ” Machine Learning , vol . 73 , pp . 87–106 , 2008 .
[ 19 ] H O Georgii , Gibbs measures and phase transitions . Walter de Gruyter , 1988 .
[ 20 ] M . Bilgic and L . Getoor , “ Effective label acquisition for collective classification , ” in KDD , 2008 .
[ 21 ] M . Craven , D . DiPasquo , D . Freitag , A . McCallum , T . Mitchell , K . Nigam , and S . Slattery , “ Learning to extract symbolic knowledge from the World Wide Web , ” in AAAI , 1998 .
[ 22 ] S . A . Macskassy , “ Using graph based metrics with empirical risk minimization to speed up active learning on networked data , ” in KDD , 2009 .
