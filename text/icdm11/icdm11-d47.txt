2011 11th IEEE International Conference on Data Mining
Finding Communities in Dynamic Social Networks
Chayant Tantipathananandh and Tanya Y . Berger Wolf
Department of Computer Science University of Illinois at Chicago
851 S Morgan St Chicago , IL 60607
Email : {ctanr ti2 , tanyabvv}@uic.edu
Abstract—Communities are natural structures observed in social networks and are usually characterized as “ relatively dense ” subsets of nodes . Social networks change over time and so do the underlying community structures . Thus , to truly uncover this structure we must take the temporal aspect of networks into consideration . Previously , we have represented framework for finding dynamic communities using the social cost model and formulated the corresponding optimization problem [ 33 ] , assuming that partitions of individuals into groups are given in each time step . We have also presented heuristics and approximation algorithms for the problem , with the same assumption [ 32 ] . In general , however , dynamic social networks are represented as a sequence of graphs of snapshots of the social network and the assumption that we have partitions of individuals into groups does not hold . In this paper , we extend the social cost model and formulate an optimization problem of finding community structure from the sequence of arbitrary graphs . We propose a semidefinite programming formulation and a heuristic rounding scheme . We show , using synthetic data sets , that this method is quite accurate on synthetic data sets and present its results on a real social network .
Keywords community structure ; dynamic social networks ; semidefinite programming
I . INTRODUCTION
Many systems in nature can be modeled as networks . Examples include smartphone communications , online social networking sites , animal sightings , and molecular interactions . One phenomenon that has been frequently observed across different kinds of networks is the presence of latent community structures . Nodes can be grouped in such a way that interactions among group members are apparent while interactions between different groups are less common . Such groups are customarily termed “ communities ” , “ modules ” , or “ clusters ” because they represent a notion of cohesiveness or homogeneity among the members [ 22 , 35 ] . The problem of finding such latent community structure is non trivial and is compounded when the interactions in the system depend on time . As a result , communities may persist just over a period of time , follow a periodic pattern , change member composition gradually or abruptly , and demonstrate many other dynamic behaviors . Thus , it is important to consider the temporal aspect of the system of interactions . We call such a system of interactions a “ dynamic network ” as opposed to a “ static network . ”
Recently , researchers have proposed many methods for identifying dynamic communities [ 5 ] . All such methods rely on the notion of gradual change of community membership and some notion of persistence [ 2 ] . This line of research began with several methods that track , rather than infer , communities over time [ 1 , 4 , 29 ] . Palla et al . [ 23 ] use a very local and restrictive approach of finding overlapping cliques of predefined size in consecutive time steps . Falkowski et al . [ 9 , 10 ] find static communities in each snapshot using Girvan Newman algorithm [ 16 ] and then contract those into a community graph and apply Girvan Newman algorithm once more to find dynamic communities . Together with Kempe , we represented dynamic communities using a social cost model , based on which we formulated a optimization problem [ 33 ] , assuming that partitions1 of individuals into groups are given in all time steps , and presented heuristics and approximation algorithms [ 32 ] . This approach is similar to that of Falkowski et al . in the sense that we apply any algorithm for inferring static communities to obtain partitions in groups . Then , apply our algorithms to obtain dynamic communities . We call this the two step approach . In this paper , we extend our previous model [ 5 , 33 ] to arbitrary dynamic networks , getting rid of the assumption that the partitions in all time steps are given . Then , we formulate an optimization problem by generalizing the CORRELATION CLUSTERING [ 3 ] problem to incorporate the temporal dimension . We then apprixmately optimize this using semidefinite programming relaxation and a rounding heursitic . We show that , while the two step approach is computationally faster , the direct optimization method is more accurate .
A . Other Related Work
All of the above mentioned methods for inferring dynamic communities use graph clustering as an underlying concept . The appealing aspect of our social costs model is its roots
Work supported in part by NSF grants IIS 0705822 and CAREER IIS
0747369
1A partition of a set U is a collection of pairwise disjoint subsets of U whose union is U .
1550 4786/11 $26.00 © 2011 IEEE DOI 101109/ICDM201167
1236 in the social sciences view of group dynamics [ 5 , 24 ] . There are , however , several additional methods for inferring dynamic communities that we have not mentioned . They take very different approaches , for example , maximizing compression [ 30 ] and fitting a statistical communities model [ 15 , 21 , 27 , 34 , 36 ] . See [ 5 ] for survey on this topic .
Traditionally , social network analysis stemmed from graph theory . So the representation of a social network is simply an undirected graph G = ( V , E ) . We call them static networks to emphasize the fact that they do not have the time dimension . For example , this includes a snapshot of dynamic network and multiple snapshots aggregated over some period of time . There exists a lot of work on finding communities in static network . Several recent surveys describe the multitude of algorithms for such problem [ 8 , 11–13 , 25 ] .
Graph clustering and partitioning are related problems and are well studied areas in terms of approximation algorithms . Our optimization problem is similar to the MAX k CUT problem [ 14 ] and minimizing disagreements in CORRELATION CLUSTERING [ 3 ] . For the latter , Charikar et al . [ 7 ] gave an O(log n) approximation algorithm and showed that minimizing disagreements is APX hard ( a PTAS is unlikely ) .
II . PROBLEM FORMULATION
A . Preliminaries
We consider a dynamic social network to be a time series of discrete graphs . We assume discrete time steps t = 1 , . . . , T and represent a dynamic social network as a sequence G = .G1 , . . . , GTfi of undirected graphs where all Gt = ( V , Et ) share the same vertex set V . We use N = |V | to denote the number of individuals . For simplicity , we write uv for an ( unordered ) pair {u , v} . So the edges of the graph Gt are the pairs uv ∈ ET . We call pairs uv /∈ Et non edges . We use u and v to denote individuals and t and t . to denote time steps . We use individual time pair ( u , t ) when we need to refer to individual u at time step t . We define a community interpretation as a coloring χ of individuals over time : χ : V ×{1 , . . . , T} → N . Each color in Range(χ ) represents a community . The affiliation of a node u at time t is given by the color χ(u , t ) . That is , ( u , t ) is in the same community as ( v , t . ) . With respect to a community interpretation χ , we say that an edge uv ∈ Et is a true positive if χ(u , t ) = χ(v , t ) , otherwise uv is a false positive . Similarly , we say that a non edge uv ∈ Et is a true negative if χ(u , t ) = χ(v , t ) , otherwise uv is a false negative . In CORRELATION CLUSTERING terminology , the true positives and true negatives are called agreements and the false positives and false negatives are called disagreements .
) if they have the same color : χ(u , t ) = χ(v , t .
B . Community Model
We assume the following behavioral model [ 5 ] :
Gradual changes : Individuals change community affiliation infrequently over time .
Reliable true positive : Members of the same community mostly interact with each other . Negligible false positive : Members of different communities rarely interact with each other .
We translate these assumptions into social costs :
Switching cost : each individual u incurs Csw when changing community affiliation : χ(u , t ) = χ(u , t + 1 ) . False negative cost : two individuals incurs Cfn when they belong to the same community but do not interact : χ(u , t ) = χ(v , t ) and uv ∈ Et . False positive cost : two individuals incurs Cfp when they belong to different communities but do interact : χ(u , t ) = χ(v , t ) and uv ∈ Et .
We define the NETWORK COMMUNITY INTERPRETATION optimization problem as finding a coloring χ that minimizes the total cost of switching , false negative , and false positive :
|{u ∈ V : χ(u , t ) = χ(u , t + 1)}|
T−1 . t=1 cost(χ ) = Csw T .
+Cfn
|{uv ∈ Et : χ(u , t ) = χ(v , t)}| t=1
T . t=1
+Cfp
|{uv ∈ Et : χ(u , t ) = χ(v , t)}| .
This problem is NP hard by a straightforward reduction from the unweighted CORRELATION CLUSTERING problem .
III . ALGORITHM
Our algorithm follows a standard approach introduced by Goemans and Williamson [ 17 ] who used semidefinite programming ( SDP ) to derive an approximation algorithm for MAX CUT . Our SDP formulation is similar to Swamy ’s formulation of CORRELATION CLUSTERING [ 31 ] . We first formulate a vector program and then relax it an SDP . We solve the SDP using CSDP [ 6 ] , an implementation of the primal dual interior point method . The resulting solution is fractional and needs to be rounded to an integral solution . A . Vector Program Formulation
We have a vector xu,t representing the community membership of u at time t . Let e1 , . . . , eN T be the standard basis N T . That is , ei has 1 on the ith coordinate and 0 for R elsewhere . So ei·ej = 1 if and only if i = j . We reformulate NETWORK COMMUNITY INTERPRETATION as
T−1 .
. t=1 u∈V
T .
( 1 − xu,t · xu,t+1 ) . xu,t · xv,t t=1
T . uv'∈Et . t=1 uv∈Et
( 1 − xu,t · xv,t ) minimize :
Csw
+ Cfn
+ Cfp
1237 subject to : xu,t ∈ {e1 , . . . , eN T}
∀u , t
The constraints xu,t ∈ {e1 , . . . , eN T} ensure that we can interpret the solution vectors xu,t as an equivalence relation : ( u , t ) and ( v , t . ) belong to the same community if and only if xu,t · xv,t . = 1 . Since CSDP takes a maximization problem , we rewrite the objective function as follows , dropping constant terms . subject to :
− Cfn
T .
. t=1
T . uv'∈Et . y(u,t),(v,t ) t=1 uv∈Et y(u,t),(v,t )
+ Cfp y(u,t),(u,t ) = 1 ∀u , t y(u,t),(v,t . ) ≥ 0 ∀u , t , v , tst u = v or t = t . [ y(u,t),(v,t. ) ] ) 0
T−1 . maximize :
Csw
. xu,t · xu,t+1 . xu,t · xv,t t=1 u∈V
T .
− Cfn t=1
T . uv'∈Et . xu,t · xv,t
+ Cfp xu,t ∈ {e1 , . . . , eN T} uv∈Et t=1
∀u , t subject to :
Then , we relax the constraints xu,t ∈ {e1 , . . . , eN T} by replacing them with : • xu,t · xu,t = 1 for all u , t . • xu,t· xv,t . ≥ 0 for all u , t , v , t . such that u = v or t = t Note that , because of the symmetry , we actually need only half of the non negative constraints . We keep the redundant constraints for brevity and clarity . As a consequence , all dot products take values between 0 and 1 . This results in the following vector program , maximize : subject to :
( same as above ) xu,t · xu,t = 1 ∀u , t xu,t · xv,t . ≥ 0 ∀u , t , v , tst u = v or t = t . xu,t ∈ R
∀u , t
N T
All feasible solutions to the integral program are still feasible solutions to the relaxed program . So the optimal value of the relaxed program is at least that of the integral program . This fractional optimal value will allow us to compute an upper bound on the original objective function in the minimization problem .
In this relaxed vector program , the vector variables appear only in the form of dot products . Thus , the program has an equivalent formulation as a positive semidefinite program . We replace each dot product xu,t · xv,t . with a new variable y(u,t),(v,t ) We put the new variables in a matrix Y = [ y(u,t),(v,t. ) ] whose rows are indexed by ( u , t ) and whose columns are indexed by ( v , t . ) . The matrix Y is positive semidefinite ( denoted Y ) 0 ) because Y = W T W where W is the matrix whose columns are xu,t . So we have the following semidefinite program , maximize :
Csw
T−1 .
. t=1 u∈V y(u,t),(v,t+1 )
This program can be numerically solved to any arbitrary precision by the interior point method [ 18 ] in time polynomial in the size of the program and the required precision . This SDP is still impractical to solve for large networks , one reason being that there are many inequality constraints : y(u,t),(v,t . ) ≥ 0 . Each inequality constrain introduces a slack variable , resulting in a huge symmetric matrix Y of dimension N T + . To reduce the size of the vector program , we relax this SDP further by eliminating the constraints y(u,t),(v,t . ) ≥ 0 for those terms y(u,t),(v,t . ) which do not appear in the objective function . The result is still a relaxation of the maximization vector program . Thus , the optimal value of this final SDP is still an upper bound on the optimal value of the maximization vector program .
N T 2 fi
'
B . Rounding Heuristic
Once we found an optimal solution [ y(u,t),(v,t. ) ] to the SDP relaxation , we perform single linkage clustering [ 19 ] which is essentially Kruskal ’s algorithm for finding a minimum spanning tree . For the similarity function we use those variables y(u,t),(v,t . ) that appear in the objective function , ignoring the rest . Initially , each ( u , t ) is in its own cluster . Then , we consider ( u , t , v , t . ) in non decreasing order of y(u,t),(v,t. ) , breaking ties arbitrarily . In this order , we replace the clusters of ( u , t ) and ( v , t . ) with their union , maintaining the clusters using the Union Find algorithm . At each iteration , we compute the cost of the community interpretation , keeping as a solution the one with the smallest cost , breaking ties by taking a community interpretation with fewer communities ( more parsimonious ) .
Once we produce a community interpretation χ , we upper bound its approximation ratio as follows . Suppose OPTSDP is the optimal value of the SDP relaxation and OPT is the cost of an optimal community interpretation . As argued earlier , OPTSDP is an upper bound on the optimal solution to ( maximixation ) integral vector program and gives a lower bound L on OPT : L := Csw(T − 1)N + Cfp t=1 |Et| − OPTSDP . This in turn gives an upper bound on the approximation ratio : cost(χ ) OPT
≤ cost(χ ) IV . EXPERIMENTAL RESULTS ffT
L
.
We now present the results of our algorithm on several synthetic and real datasets . First , we generate synthetic datasets with known community structures to test the accuracy of our method and to compare it to alternative
1238 approaches . We then apply the algorithms to real dynamic networks . Although our algorithm take three parameters Csw , Cfn , Cfp , it is the ratios between them that affect the optimal community structure since scaling the parameters by any positive constant does not change the optimal solution .
A . Generating Synthetic Test Data
Due to space limitation , we briefly describe our synthetic data generator . As a hidden Markov model , it first randomly assigns each individual at time t = 1 to one of the k communities . For each time step t ≥ 1 , it generates an observed network Gt based on the probability pfn of false negatives and the probability pfp of false positives . Then , it reassigns community affiliation for the next time step t + 1 based on the probability psw of switching .
B . SDP Results
The first question is : If we know the true community structure , how close to the truth is the community structure produced by the SDP method ? To answer this , we generate dynamic networks using different psw , pfn , pfp , and run the SDP method using different Csw , Cfn , Cfp . Since the results are similar , show only one representative case psw = 03 In Figure 1 , the left column shows the distance ( Rand index [ 26 ] ) to the ground truth . In the top row , the SDP method can find the true structure ( distance=0 ) , given the right parameter setting . In the other rows , it finds solutions close to the truth , but not identical . This is because of the high perturbation . However , the relationship between ratios Cfn/Cfp and pfn/pfp is clear . We observe how the probability ratio pfn/pfp ( which varies from the top to the bottom rows ) affects the cost ratio Cfn/Cfp at which the SDP method achieves the minimum distance to the ground truth . This conforms with the intuition that when Cfn < Cfp , the algorithm trades false positives for false negatives ( since pfn > pfn ) . The right column of Figure 1 shows the upper bound on the approximation ratio of the SDP algorithm to the optimal solution ( as discussed in Section III B ) . Note that in some cases , this upper bound is exactly 1 , indicating that the SDP method has found an optimal solution . However , the distance to the ground truth ( in the corresponding plots in the left column ) is greater than 0 , indicating that the optimal structures found under those parameter settings do not match the ground truth .
C . Comparison with other methods
We compared our SDP algorithm with other competitive methods for detecting dynamic communities using the twostep approach . First , we ran methods for detecting static communities on each snapshot graph to find a group structure . We use Girvan Newman ( GN ) and Clauset NewmanMoore ( CNM ) , the implementations from SNAP [ 20 ] . Once we discovered the group structure in each time step , we ran our branch and bound algorithm [ 33 ] in particular ,
1
0.8
0.6
0.4
0.2
0
1
0.8
0.6
0.4
0.2
0
1
0.8
0.6
0.4
0.2
0
Pfn=0.01 Pfp=0.01
Pfn=0.01 Pfp=0.01
Cfn=101 Cfn=102 Cfn=103 Cfn=104 Cfn=105 Cfn=106
10 4
10 2
100
102
104
Cfn/Cfp
2.4
2.2
2
1.8
1.6
1.4
1.2
1
Cfn=101 Cfn=102 Cfn=103 Cfn=104 Cfn=105 Cfn=106
10 4
10 2
100
102
104
Cfn/Cfp
Pfn=0.01 Pfp=0.30
Pfn=0.01 Pfp=0.30
Cfn=101 Cfn=102 Cfn=103 Cfn=104 Cfn=105 Cfn=106
10 4
10 2
100
102
104
Cfn/Cfp
2.4
2.2
2
1.8
1.6
1.4
1.2
1
Cfn=101 Cfn=102 Cfn=103 Cfn=104 Cfn=105 Cfn=106
10 4
10 2
100
102
104
Cfn/Cfp
Pfn=0.20 Pfp=0.10
Pfn=0.20 Pfp=0.10
Cfn=101 Cfn=102 Cfn=103 Cfn=104 Cfn=105 Cfn=106
10 4
10 2
100
102
104
Cfn/Cfp
2.4
2.2
2
1.8
1.6
1.4
1.2
1
Cfn=101 Cfn=102 Cfn=103 Cfn=104 Cfn=105 Cfn=106
10 4
10 2
100
102
104
Cfn/Cfp
Figure 1 . Rand index distance to ground truth ( left column ) and the upper bound on the approximation ratio ( right column ) of the SDP algorithm for psw = 0.30 , N = 15 , T = 10 , k = 3 . to find an optimal community interpretation.2 We vary the parameter settings within a certain range . Although this performs an exhaustive search , our test data sets are sufficiently small and the branch and bound algorithm can find the optimal solution within one minute in most cases with only few cases that take longer .
We generated 10 dynamic networks for each generator parameter values psw , pfn , pfp . For each trial , we ran each method over different parameter settings and take the one that is closest to the ground truth . Figure 2 shows this result . Overall , SDP method outperforms the two other methods .
D . Experiments on Real Data Set
We have done experiments on two Bluetooth traces from the Haggle project . The results on both traces are similar so we present only one of them [ 28 ] . We consider only the
2This is available at http://compbiocsuicedu/∼chayant/commdy/
1239 e c n a t s d i
4
.
0
2 0
.
0 0
.
CNM GN
SDP
Figure 2 . The distance to the ground truth of three algorithms with the best parameter settings , over 10 trials of synthetic data sets with N = 10 , T = 10 , k = 2 . t = 29 with few nodes changing affiliation . As can be seen in the first column at t = 33 , the big cluster still exists even when most of its connections are gone . The expensive Csw cost slows down the rate of affiliation changes .
Bluetooth devices in the project and ignore the other devices since we do not have their complete traces . For each one hour interval , we create an undirected edge ( u , v ) at the corresponding time step if u has seen v in this interval . This result in a dynamic network with one has 9 nodes , 467 edges , 84 time steps . The number of time steps is still too large for the SDP method to analyze in its entirety , so we split the timeline into four smaller chunks , each is ≈ 20 time steps . Figure 3 shows the network at time step 0 with nodes color coded by community affiliation detected by the SDP method . Black solid lines are true positives . Red solid lines are false positives . Red dotted lines are false negatives . As can be seen in the figure , the higher the ratio Cfn/Cfp is , the fewer the false negatives and the more the false positives there are . The fewer the false negatives decreases there are , the smaller and denser the clusters become .
1
8
9
4
5
2
6
7
3
2
6
1
5
8
4
3
7
9
8
1
4
5
2
6
9
7
3
4
5
2
7
8
3
1
9
6
( 5 , 1 , 5 )
( 5 , 5 , 1 )
( 5 , 5 , 5 )
( 5 , 10 , 1 )
Figure 3 . Community structures in the Haggle at time step 0 detected under various ( Csw , Cfn , Cfp ) .
Next we show the community structure in the first few time steps detected with ( Csw , Cfn , Cfp ) = ( 5 , 5 , 5 ) , which seems to be a good setting . Figure 4 shows that there is cluster {1 , 2 , 4–8} which is quite stable over time steps 4–6 .
4
8
1
2
7
3 t = 4
5
6
9
4
5
1
7
2
6
8
9
3 t = 5
5
6
1
9
4
8
7
2
3 t = 6
5
9
7
3
4
6
1
2
8 t = 7
Figure 4 . Community structures in the Haggle data set with parameters ( Csw , Cfn , Cfp ) = ( 5 , 5 , 5 ) . Next , we vary Csw ∈ {1 , 5} and fix Cfn = 1 and Cfp = 5 . Figure 5 illustrates that that , when switching is cheap ( Csw = 1 vs Csw = 5 ) , clusters are more stable over time
6
2
7
4
1
3
4
3
4
3
7
1
7
1
2
4
1
2
4
3
3
9
6
6
7
6
7
6
2
9
2
9
9
9 t = 30 t = 31 t = 32
7
6
2
1
9
2
1
6
2
9
4
3
7
4
1
3
7
6
7
6
9
9
4
3
3
2
4
1
4
1
6
2
7
3
9 t = 33
1
Figure 5 . Community structures in Haggle data set at time steps 29–33 . The first column is detected with ( Csw , Cfn , Cfp ) = ( 5 , 1 , 5 ) and the second column is detected with ( Csw , Cfn , Cfp ) = ( 1 , 1 , 5 ) .
V . CONCLUSION
We extend our previous work on finding communities in dynamic social networks [ 5 ] to arbitrary networks , getting rid of the assumption that the individuals in each time step are partitioned into groups . To the best of our knowledge , our method is the first that is based on social theory . We formulate the NETWORK COMMUNITY INTERPRETATION problem and devise an approximation algorithm via SDP relaxation and a heuristic rounding scheme . The algorithm produces a community interpretation with an approximation guarantee . We show empirically that the method produces solutions which are near optimal and close to the ground truth of the synthetic data . Our method outperforms the twostep approach . We also show how the SDP method can be used to find dynamic communities in a real dataset . A natural question one may have is : How good is the theoretical approximation guarantee ? Another future direction is the available SDP solvers are not scalable and speeding up SDP solvers is an active area of research . Thus , speeding up our algorithm will need a new angle .
1240
REFERENCES
[ 1 ] C . C . Aggarwal and P . S . Yu . Online analysis of community evolution in data streams . In SIAM ICDM , 2005 .
[ 2 ] L . Backstrom , D . Huttenlocher , J . Kleinberg , and X . Lan . Group formation in large social networks : Membership , growth , and evolution . In ACM KDD , 2006 .
[ 3 ] N . Bansal , A . Blum , and S . Chawla . Correlation clustering .
Machine Learning , 56 , 2004 .
[ 4 ] T . Y . Berger Wolf and J . Saia . A framework for analysis of dynamic social networks . In ACM KDD , 2006 .
[ 5 ] T . Y . Berger Wolf , C . Tantipathananandh , and D . Kempe . In Community identification in dynamic social networks . C . F . Philip S . Yu , Jiawei Han , editor , Link Mining : Models , Algorithms and Applications , chapter 8 . Springer , 2010 .
[ 6 ] B . Borchers and J . Young . Implementation of a primal–dual method for sdp on a shared memory parallel architecture . Computational Optimization and Applications , 37 , 2007 .
[ 7 ] M . Charikar , V . Guruswami , and A . Wirth . Clustering with qualitative information . In IEEE FOCS , 2003 .
[ 8 ] L . Danon , A . D´ıaz Guilera , J . Duch , and A . Arenas . Comparing community structure identification . J . of Statistical Mechanics : Theory and Experiment , 9008 , 2005 .
[ 9 ] T . Falkowski . Community Analysis in Dynamic Social Net works . Dissertation , University Magdeburg , 2009 .
[ 10 ] T . Falkowski , J . Bartelheimer , and M . Spiliopoulou . Mining and visualizing the evolution of subgroups in social networks . Web Intelligence , 2006 .
[ 11 ] S . Fortunato . Community detection in graphs . Physics
Reports , 486 , February 2010 .
[ 12 ] S . Fortunato and C . Castellano . Community structure in graphs . eprint arXiv , 2007 .
[ 13 ] L . Freeman .
Finding social groups : A meta analysis of the southern women data . In R . Breiger , K . Carley , and P . Pattison , editors , Dynamic Social Network Modeling and Analysis . The National Academies Press , 2003 .
[ 14 ] A . M . Frieze and M . Jerrum .
Improved approximation algorithms for max k cut and max bisection . In IPCO , 1995 .
[ 15 ] W . Fu , L . Song , and E . P . Xing . Dynamic mixed membership blockmodel for evolving networks . In ICML , 2009 .
[ 16 ] M . Girvan and M . E . J . Newman . Community structure in social and biological networks . PNAS , 99 , 2002 .
[ 17 ] M . X . Goemans and D . P . Williamson . Improved approximation algorithms for maximum cut and satisfiability problems using semidefinite programming . J . ACM , 42 , Nov 1995 .
[ 18 ] C . Helmberg , F . Rendl , R . J . Vanderbei , and H . Wolkowicz . An interior point method for semidefinite programming . SIAM J . on Optimization , 6(2 ) , 1996 .
[ 19 ] A . K . Jain and R . C . Dubes . Algorithms For Clustering Data .
Prentice Hall , 1988 .
[ 20 ] J . Leskovec . Stanford network analysis platform ( SNAP ) , Oct
2010 . http://snapstanfordedu/
[ 21 ] Y R Lin , Y . Chi , S . Zhu , H . Sundaram , and B . L . Tseng . Facetnet : a framework for analyzing communities and their evolutions in dynamic networks . In WWW , 2008 .
[ 22 ] M . Newman and M . Girvan . Finding and evaluating commu nity structure in networks . Phys . Rev . E , 69 , 2004 .
[ 23 ] G . Palla , I . Dernyi , I . Farkas , and T . Vicsek . Uncovering the overlapping community structure of complex networks in nature and society . Nature , 435 , 9 June 2005 .
[ 24 ] M . Pearson and P . West . Drifting smoke rings : Social network analysis and markov processes in a longitudinal study of friendship groups and risk taking . Connections , 25(2 ) , 2003 .
[ 25 ] M . A . Porter , J P Onnela , and P . J . Mucha . Communities in networks . arXiv preprint , Feb 2009 .
[ 26 ] W . M . Rand . Objective Criteria for the Evaluation of
Clustering Methods . J . Am Stat . Assoc . , 66(336 ) , 1971 .
[ 27 ] P . Sarkar and A . Moore . Dynamic social network analysis ACM SIGKDD Explorations using latent space models . Newsletter , 7(2 ) , December 2005 .
[ 28 ] J . Scott , R . Gass , J . Crowcroft , P . Hui , C . Diot , and A . Chain treau . CRAWDAD haggle/imote/intel ( 2006 01 31 ) .
[ 29 ] M . Spiliopoulou , I . Ntoutsi , Y . Theodoridis , and R . Schult . In
MONIC : modeling and monitoring cluster transitions . ACM KDD , 2006 .
[ 30 ] J . Sun , C . Faloutsos , S . Papadimitriou , and P . S . Yu . Graphscope : parameter free mining of large time evolving graphs . In ACM KDD , 2007 .
[ 31 ] C . Swamy . Correlation clustering : maximizing agreements via semidefinite programming . In ACM SIAM SODA , 2004 .
[ 32 ] C . Tantipathananandh and T . Berger Wolf . Constant factor approximation algorithms for identifying dynamic communities . In ACM KDD , 2009 .
[ 33 ] C . Tantipathananandh , T . Berger Wolf , and D . Kempe . A framework for community identification in dynamic social networks . In ACM KDD , 2007 .
[ 34 ] H . Tong , S . Papadimitriou , J . Sun , P . S . Yu , and C . Faloutsos . Colibri : fast mining of large static and dynamic graphs . In ACM KDD , 2008 .
[ 35 ] S . Wasserman and F . K . Social Network Analysis . Cambridge
University Press , 1994 .
[ 36 ] T . Yang , Y . Chi , S . Zhu , Y . Gong , and R . Jin . A bayesian approach toward finding communities and their evolutions in dynamic social networks . In SIAM ICDM , February 2009 .
1241
