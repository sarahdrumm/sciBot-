Boolean Tensor Factorizations
Pauli Miettinen
Max Planck Institute for Informatics
Saarbr¨ucken , Germany paulimiettinen@mpi infmpgde
Abstract—Tensors are multi way generalizations of matrices , and similarly to matrices , they can also be factorized , that is , represented ( approximately ) as a product of factors . These factors are typicaly either all matrices or a mixture of matrices and tensors . With the widespread adoption of matrix factorization techniques in data mining , also tensor factroziations have started to gain attention .
In this paper we study the Boolean tensor factorizations . We assume that the data is binary multi way data , and we want to factorize it to binary factors using Boolean arithmetic ( ie defining that 1+1 = 1 ) . Boolean tensor factorizations are , therefore , natural generalization of the Boolean matrix factorizations . We will study the theory of Boolean tensor factorizations and show that at least some of the benefits Boolean matrix factorizations have over normal matrix factorizations carry over to the tensor data . We will also present algorithms for Boolean variations of CP and Tucker decompositions , the two most common types of tensor factorizations . With experimentation done with synthetic and real world data , we show that Boolean tensor factorizations are a viable alternative when the data is naturally binary .
Keywords Tensor factorization ; CP factorization ; Tucker factorization ; Boolean tensor factorization ; Boolean matrix factorization
I . INTRODUCTION
With the matrix factorizations ( or decompositions , the two terms are used interchangeably here ) becoming widespread techniques in data mining , many researchers have started to focus on their multi way generalizations – tensor factorizations . Tensor factorizations have proven to be powerful . Yet , they are also much more complex , both from the computational complexity ’s and interpretability ’s point of view . Independently , the Boolean matrix factorizations have attained growing research interest in data mining . They are shown to have such desirable properties as interpretability [ 1 ] and sparsity [ 2 ] , although with cost of increased computational complexity . It is therefore natural to ask could Boolean tensor factorization , the generalization of Boolean matrix factorization in multi way data , sustain the interpretability and sparsity of Boolean matrix factorizations and still be practical to compute . This papers aims to provide answers to that question .
When the data is binary , multiway data , Boolean tensor decompositions are intuitively appealing approach . An example of such data are subject–relation–object tuples , such as ( ‘BarackObama’ ‘isA’ ‘PresidentOfTheUSA’ ) . Expressing this data as a matrix would lose some level of dependencies : either that subject–object pairs can hold for different relations , that subject–relation pair can hold for different subjects , or that relation–object pair can hold for different subjects . Only three way tensor can capture all these dependencies simultaneously . Using the Boolean decompositions , on the other hand , should help on interpreting the results ( as they can be considered as sets of subjects , objects , and relations , instead of arbitrary vectors ) and provide sparser results , among other things .
This paper will start by giving the definitions of Boolean tensor rank and CP and Tucker decomposition , after which we will we provide theoretical study of some aspects of Boolean tensor rank and CP decompositions . These results provide insights on the similarities and dissimilarities between , on one hand , Boolean and normal tensor factorizations , and on the other hand , Boolean tensor and Boolean matrix factorizations . For example , we generalize the sparsity result of Boolean matrix factorizations to Boolean tensor factorizations , showing that sparse binary tensors always have sparse Boolean factorizations .
We also propose two algorithms , one for Boolean CP decomposition and one for Boolean Tucker decomposition . We evaluate these algorithms with synthetic and real world data , comparing them to state of the art real valued decomposition algorithms .
For the sake of clarity , most of this paper concentrates on 3 way tensors . The results are , however , straightforward to generalize to N way tensors .
II . BACKGROUND AND BASIC DEFINITIONS
We start by giving the basic notation used with tensors . With that notation we can define the normal tensor rank and normal CP and Tucker decompositions and summarize some of the important properties of them . We then define the Boolean tensor rank and CP and Tucker decomposition . Proving any properties of them is postponed to the next section . The section ends with a short review on how Boolean tensor factorizations relate to other data mining techniques .
A . Notation
Throughout this paper vectors are indicated as bold face lower case letters ( v ) , matices as bold face upper case letters ( M ) , and tensors as bold face upper case calligraphic letters ( T ) . We present the notation for 3 way tensors , but it can be extended to N way tensors in a straight forward way . Element ( i , j , k ) of a 3 way tensor X is denoted either as xijk or as ( X )ijk . A colon in a subscript denotes taking that mode entirely ; for example , if X is a matrix , xi : denotes the ith row of X ( for a shorthand , we use xj to denote the jth column of X ) . For a 3 way tensor X , x:jk is the ( j , k ) mode 1 ( column ) fiber , xi:k the ( i , k ) mode 2 ( row ) fiber , and xij : the ( i , j ) mode 3 ( tube ) fiber . Furthermore , X ::k is the kth frontal slice of X . We use X k as a shorthand for the kth frontal slice . i,j,k x2
A tensor can be unfold into a matrix by arranging its fibers as columns of a matrix . If mode n fibers are used as the columns , the process is called mode n matricization . The mode n matricization of a tensor X is denoted as X ( n ) . For a tensor X , the number of non zero elements in it is denoted by |X| . This and other tensor notation presented below is extended to matrices and vectors in a natural way . The Frobenius norm of a 3 way tensor X , X , is defined ijk . If X is binary , ie takes values only from as {0 , 1} , |X| = X2 . We use . to denote vector outer product in N modes . That is , if a , b , and c are vectors of length n , m , and l , respectively , X = a . b . c is a n by m by l tensor with xijk = aibjck . The tensor sum of two n by m by l tensors X and Y is just the element wise sum , ( X + Y)ijk = xijk + yijk . The Boolean tensor sum of binary tensors X and Y is defined as ( X ∨ Y)ijk = xijk ∨ yijk .
( cid:87)r
If matrices X and Y are binary and X has r columns and Y has r rows ( ie r is their inner dimension ) , their Boolean matrix product , X ◦ Y , is defined as ( X ◦ Y )ij = k=1 xikykj . The Boolean matrix rank of a binary matrix A is the least r such that there exists a pair of binary matrices ( X , Y ) of inner dimension r with A = X ◦ Y . Let X be n1 by m1 and Y be n2 by m2 matrix ( binary or otherwise ) . Their Kronecker ( matrix ) product , X ⊗ Y , is the n1n2 by m1m2 matrix defined by ··· ··· xn11Y xn12Y ··· x12Y x22Y x11Y x21Y
 .
X ⊗ Y = x1m1Y x2m1Y
 xn1m1Y
The Khatri–Rao ( matrix ) product of X and Y is defined as ‘column wise Kronecker’ . That is , X and Y must have same number of columns ( m1 = m2 = m ) , and their Khatri–Rao product X fi Y is the n1n2 by m matrix defined as Y δ1(X ) Y δ2(X ) x1mym x2mym x11y1 x21y1
 =

X fi Y =
 ,
 xn11y1 xn1mym
Y δn1 ( X ) where δi(X ) is a diagonal matrix with the ith row of X
··· ··· ··· in its diagonal . Notice that if X and Y are binary , so are X ⊗ Y and X fi Y . B . Ranks and Factorizations
Tensor Rank and CP Decomposition : Just as we can define the matrix rank as the least number of rank 1 matrices needed to be summed together to obtain the original matrix , we can define the tensor rank as the least number of rank 1 tensors whose sum equals the original tensor . A rank 1 tensor is , still analogously to the matrix case , a tensor that is an outer product of vectors ( N way tensor requires N vectors ) . Thus we have Definition 1 ( Tensor rank ) . The rank of a 3 way tensor X , rank(X ) , is the least integer r such that there exist r rank 1 tensors whose sum is X , ie
X = ai . bi . ci .
( 1 ) r i=1
The definition of tensor rank gives rise to the first tensor factorization , the CP factorization1 for rank r approximation : Definition 2 ( The CP tensor decomposition ) . Given an tensor X and an integer r , find matrices n by m by l A ( n by r ) , B ( m by r ) , and C ( l by r ) such that they minimize flflflflflX − r i=1 flflflflfl . ai . bi . ci
Importantly , we can write the CP decomposition in the terms of matrices using unfolding ( see eg [ 5] ) :
( 2 )
( 3 )
X ( 1 ) = A(C fi B)T X ( 2 ) = B(C fi A)T X ( 3 ) = C(B fi A)T .
Tensor rank has some properties that differ from the matrix rank ( for more detailed discussion , see eg [ 5] ) . For example , a real valued tensor can have different rank over the real numbers and over the complex numbers – this can never happen with matrices . More importantly to the data mining applications , the maximum tensor rank of n by m by l tensor X can be much more than min{n , m , l} , which would be analogous to the matrix case , and there exists tensors with rank greater than max{n , m , l} ( see [ 5] ) . Indeed , the best known upper bound is [ 5 ] rank(X ) ≤ min{nm , nl , ml} .
( 4 ) Tensors can also be degenerate meaning that they can be approximated arbitrarily well by tensors of lower rank . Consequently , the factors of the best rank (k − 1 ) approximation are not necessarily the factors of the best rank k approximation . This is again in contrast with matrices , where the Eckart–Young theorem shows both cases impossible .
Finally , computing the tensor rank is NP hard [ 6 ] .
1The name is short for two names given to the same decomposition :
CANDECOMP [ 3 ] and PARAFAC [ 4 ] . product ( recall that the Khatri–Rao product is closed under the Boolean algebra and thus does not need to be changed ) :
X ( 1 ) = A ◦ ( C fi B)T X ( 2 ) = B ◦ ( C fi A)T X ( 3 ) = C ◦ ( B fi A)T .
And finally , the Boolean Tucker decomposition is defined as follows . Definition 6 ( The Boolean Tucker tensor decomposition ) . Given an n by m by l binary tensor X and three integers r1 , r2 , and r3 , find binary r1 by r2 by r3 core tensor G and binary factor matrices A ( n by r1 ) , B ( m by r2 ) , and C ( l by r3 ) such that they minimize fifififififiX − r1(cid:95 ) r2(cid:95 ) r3(cid:95 )
α=1
β=1
γ=1 gαβγ aα . bβ . cγ fifififififi .
( 9 )
( 10 )
( 11 )
The Tucker Decomposition : The CP decomposition is a natural generalization of the matrix decompositions , but by no means the only one . Another common tensor decomposition is the Tucker decomposition [ 7 ] that generalizes the CP decomposition by allowing each mode have a different rank and using a core tensor to combine the factor matrices into one tensor . The Tucker decomposition is defined as follows . Definition 3 ( The Tucker tensor decomposition ) . Given an n by m by l tensor X and three integers r1 , r2 , and r3 , find r1 by r2 by r3 core tensor G and factor matrices A ( n by r1 ) , B ( m by r2 ) , and C ( l by r3 ) such that they minimizeflflflflflflX − r1
α=1 r2 r3
β=1
γ=1 gαβγ aα . bβ . cγ
( 5 ) flflflflflfl .
Notice that we obtain the CP decomposition by requiring that r1 = r2 = r3 = r and that G has 1s at its hyper diagonal and 0s elsewhere . As with the CP decomposition , we can express Tucker decomposition with matrices using mode n matricization [ 5 ] :
X ( 1 ) = AG(1)(C ⊗ B)T X ( 2 ) = BG(2)(C ⊗ A)T X ( 3 ) = CG(3)(B ⊗ A)T .
The Boolean Tensor Rank and Decompositions : We can now turn to the actual topic of this paper : the Boolean tensor decompositions . The Boolean versions of tensor rank and CP and Tucker decompositions are rather straight forward to define given their normal counterparts . One only needs to change the summation to 1 + 1 = 1 . Notice that this does not change the definition of a rank 1 tensor ( or vector outer product ) . Thence , 3 way Boolean rank 1 tensor is a tensor that is an outer product of three binary vectors . Definition 4 ( Boolean tensor rank ) . The Boolean rank of a 3 way binary tensor X , rankB(X ) , is the least integer r such that there exist r rank 1 binary tensors with
X = ai . bi . ci .
( 7 ) r(cid:95 ) i=1
The Boolean CP decomposition follows analogously , but notice the change of error measure from the Frobenius to the sum of differences . Definition 5 ( The Boolean CP tensor decomposition ) . Given an n by m by l binary tensor X and an integer r , find binary matrices A ( n by r ) , B ( m by r ) , and C ( l by r ) such that they minimize fififififiX − r(cid:95 ) i=1 fififififi . ai . bi . ci
( 8 )
The unfolded versions also look similar to ( 3 ) , though the matrix product have to be changed to the Boolean matrix
The unfolded versions are :
X ( 1 ) = A ◦ G(1 ) ◦ ( C ⊗ B)T X ( 2 ) = B ◦ G(2 ) ◦ ( C ⊗ A)T X ( 3 ) = C ◦ G(3 ) ◦ ( B ⊗ A)T . C . Relations to Other Data Mining Methods
( 6 )
The approach taken is this paper is to consider the Boolean tensor factorizations as a variation of normal tensor factorizations . While this approach has its obvious benefits , it should be noted that it is by no means the only possible approach . Tiling a database [ 8 ] refers to the task of covering all 1s of a binary matrix using few2 frequent itemsets . The Boolean matrix factorization can be seen as a generalization of this task , each rank 1 binary matrix defining a ‘tile’ . The difference is that tiling does not allow any 0s to be presented as 1s , whereas the Boolean matrix factorization allows this type of errors .
Analogously , we can consider Boolean CP tensor decomposition as an N way lossy tiling , generalizing the N way tiling [ 9 ] . Again , finding the least number of tiles needed to express the data set exactly is equivalent to finding the Boolean tensor rank , and minimizing the number of uncovered 1s in N way tiling is related to minimizing the error in Boolean CP tensor decomposition ( with the latter allowing the covering of 0s with 1s ) .
III . THEORY
The definitions of Boolean tensor decompositions and rank are akin to their normal counterparts . But do they behave similarly ? Or do they behave similarly to their Boolean matrix counterparts ? In this section we will study some of the more important properties of Boolean tensor rank and CP and
2When the goal is to cover all 1s and minimize the number of tiles , it is equivalent to computing the Boolean rank [ 2 ] ; when the number of tiles is given and the goal is to minimize the number of uncovered 1s , the problem is more akin to standard Boolean matrix factorization .
Tucker decompositions and try to answer those questions from the theory ’s point of view .
A . Boolean Tensor Rank
Recall from the previous section that the ( normal ) tensor rank behaved very differently to the matrix rank . One major difference is that the rank can be much bigger than the dimensions of the tensor . Here , the Boolean tensor rank behaves analogously . In fact , we can prove bounds to the Boolean tensor rank analogous to those known for the normal tensor rank . First is the lower bound for maximum rank . Proposition 1 . There exists binary n by m by l tensors that have Boolean rank higher than max{n , m , l} .
Proof : Let n = m = l . There are 2n3 different binary n by n by n tensors , but only 23n2 triples of binary n by n factor matrices . Therefore , there has to be a tensor that does not have a rank n factorization . rankB(X ) ≤ min{nm , nl , ml} .
Proving the upper bound , however , is much more complex . It will follow the proof of the similar claim for real valued tensors , and therefore we present only a sketch of it . Theorem 2 . For any n by m by l binary tensor X we have ( 12 ) Proof sketch : Let ml = min{nm , nl , ml} ( other cases are analogous ) . We show how to make a rank ml exact Boolean CP factorization of X thereby proving the claim . Specifically , we construct n by ml binary matrix A , m by ml binary matrix B , and l by ml binary matrix C such that the three unfolded equations of ( 9 ) hold .
The factor matrices are
A = X ( 1 ) B = [ I m I m ··· I m ] l times
J 1×m
C =

0
0 0
··· J 1×m ··· ··· J 1×m
0
0
0
 l rows , where I m is the m by m identity matrix and J 1×m is mdimensional row vector full of 1s . To show that the first equation of ( 9 ) holds , we need to show that C fi B = I ml . This is easy to see by remembering that

 .
Bδ1(C ) Bδ2(C )
C fi B =
Bδl(C )
That the other two equations of ( 9 ) also hold can be checked similarly . While the proofs are conceptually rather straight forward , they require very clumsy notation , and are therefore omitted .
The real valued tensor can be degenerate , but this is not an issue with Boolean tensor rank : arbitrarily close approximation is impossible with discrete errors . On the other hand , similarly to normal CP decomposition , there is no ( known ) reason why the factors of the least error Boolean rank (r − 1 ) decomposition should be the factors of the least error rank r decomposition .
One of the highlight features of Boolean matrix rank is that it can be considerably smaller than the normal matrix rank ( in fact , a logarithm of the normal rank [ 10] ) . Establishing such results ( or proving that they do not hold ) with the tensor ranks is an important topic for future research .
B . Sparsity of Decompositions
In many applications of matrix decompositions , sparsity of the factor matrices is of importance . Recently , Miettinen [ 2 ] proved that Boolean matrix factorizations behave very well in this respect : any Boolean rank k binary matrix has rank k decomposition where the factor matrices have at most twice the number of 1s compared to the 1s in the original matrix . No such result is known for non Boolean matrix or tensor factorizations , but for Boolean CP decomposition we can prove a generalized version of the result in [ 2 ] . tensor X with Theorem 3 . Every N way binary rankB(X ) = r has a rank r Boolean CP decomposition with factor matrices A(1 ) , A(2 ) , . . . , A(N ) such that
N i=1 fififiA(i)fififi ≤ N |X| . fifia(i)fifi ≥ N−1N
Proof : The proof , which follows that of [ 2 ] , is by induction on the tensor rank of X . In the base case , rankB(X ) = 1 . In this case X = a(1 ) . a(2 ) . ··· . a(N ) , and hence |X| = N fifia(i)fifi = 0 or else X is empty ) . fifia(i)fifi ( no
Assume then that the claim holds for tensors of rank r − 1 i=1 i=1 and let rankB(X ) = r . Let j j j
. a(2 )
Y ( j ) = a(1 )
. ··· . a(N ) j=1 Y ( j ) such that X = Y ( \r)∨Y ( r ) . As Y ( \r ) is of rank (r− 1 ) , by induction assumption we have that for all j = 1 , . . . , r and let Y ( \r ) = ( cid:87)r−1 fififi . fififia(i ) fififiY ( \r)fififi ≥ N r−1
( 14 )
N j i=1 j=1
Now , consider a vector a(1 ) r . Let k be such that a(1 ) kr = 1 . If for every i2 , i3 , . . . , iN such that y(r ) = 1 it also ki1i2i3iN holds that y(\r ) = 1 , we can set a(1 ) kr ( and consequently ) to 0 without changing Y ( \r ) ∨ Y ( r ) . The same y(r ) ki1i2i3iN holds for a(2 ) r , . . . , a(N ) . It follows that each 1 in any of r must contribute at least one new 1 to X compared to a(i ) ki1i2i3iN r
( 13 )
Y ( \r ) ( though different vectors a(i ) same 1 ) . Therefore we have r can contribute to the fififi ≤ |X| .
Combining the results above , we get
N i=1 r i=1,,N fififia(i ) fififiY ( \r)fififi + max fififi fififiA(i)fififi = fififia(i ) N r fififiY ( r)fififi fififiY ( \r)fififi + fififia(i ) fififiY ( \r)fififi + N fififiY ( \r)fififi + max
≤ N
= N j=1 i=1 i=1 r j
≤ N ≤ N |X| , fififi i=1,,N
( 15 )
( 16 ) fififia(i ) r fififi where the first inequality follows from ( 14 ) and the last from ( 15 ) . This result is tight : consider an N way tensor X with |X| = 1 . None of the factor matrices A(i ) can be empty , or else their outer product is empty . Therefore any exact factorization of X requires at least N 1s in the factor matrices . The result is stated for exact decompositions , but there is an easy corollary to bound the density of the factor matrices in terms of the original matrix and the induced error . Corollary 4 . Let X be a binary N way tensor with rankB(X ) = r and let ( A(1 ) , A(2 ) , . . . , A(N ) ) be a rank p approximate CP decomposition of X . Let ⊕ be the element wise exclusive or and E = X ⊕
( cid:87)p the error tensor . Then i=1 a(1 ) i i i
. a(2 )
. ··· . a(N )
N fififiA(i)fififi ≤ N ( |X| + |E| ) . Proof : By definition(cid:87)p fififiA(i)fififi ≤ N |X ⊕ E| ≤ N ( |X| + |E| ) . i=1 a(1 )
. a(2 ) i=1
N i = X ⊕ E , which then must be rank p tensor , and therefore i i
. ··· . a(N ) i=1 Notice that these are strictly existential results : they do not tell us how to find such sparse decompositions , just that they exist .
( 17 )
C . Computational Complexity
As mentioned in Section II B , finding the tensor rank is NP hard . Similar results hold for Boolean tensor rank , as well as computing the optimal Boolean CP and Tucker decompositions for given ranks . Unlike with normal decompositions , however , here the results follow trivially from the fact that the corresponding matrix decompositions are NP hard . Proposition 5 . Given a binary tensor X , ( 1 ) finding the least error Boolean CP decomposition of the given rank r is NP hard , ( 2 ) deciding the rankB(X ) is NP hard , and
( 3 ) finding the least error Boolean Tucker decomposition for given parameters ( r1 , r2 , . . . , rN ) is NP hard .
Proof : For ( 1 ) and ( 2 ) , we notice that finding the leasterror Boolean matrix factorization and deciding the Boolean rank of a binary matrices are specializations of their tensor counterparts . As these matrix problems are already NPhard , their tensor generalizations are too . For the Tucker decomposition , we have the following result . Let X be 2way , ie matrix X , and let r1 = r2 = r . Now the Tucker decomposition returns three binary matrices , G , A , and B . If this is the least error Boolean Tucker decomposition of X , then ( A◦ G , B ) is the least error rank r Boolean matrix factorization of X .
These reductions also show that the inapproximability results for Boolean matrix decompositions [ 1 ] carry over to the tensor cases at least to some extent .
IV . ALGORITHMS
The definitions of Boolean tensor decompositions are of little use in data mining unless we have algorithms for finding those decompositions . The results from the previous section show that we cannot hope to find polynomialtime optimal algorithms , and even algorithms with provable approximation guarantees are unlikely . We therefore utilize heuristic methods . A . The BCP_ALS Algorithm
The alternating least squares projection heuristic is the workhorse of algorithms for normal CP decomposition [ 5 ] . We utilize similar technique with the Boolean CP decomposition , although with few changes .
Our first ‘workhorse’ is the Asso algorithm for Boolean matrix decompositions by Miettinen et al . [ 11 ] ( notice , though , that the Asso algorithm is not required by the algorithm – any other method for solving the Boolean matrix decomposition would do ) . It is used to initialize the three factor matrices A , B , and C ( again , we give the algorithms for 3 way tensors , but they can be easily generalized to N way tensors ) . This is done instead of the more common random initialization as the Boolean iterative update ( described below ) typically converges very quickly to local optimum , and is thus unable to escape bad initial solutions . Naturally , as this initialization is deterministic , if it yields bad initial solution that the iterative update is unable to escape , the algorithm will return bad solution and cannot use randomness to avoid it . To use the Asso algorithm , we give the mode n matricizations of X as an input to it . The three left hand side factor matrices ( from the three different matricizations ) constitute the initial solution . We then move to the iterative update phase . For this we use the unfolded format ( 9 ) , fixing two factor matrices while updating the third . There is a problem , however : given binary matrices X ( 1 ) and Y = ( C fi B)T , finding the binary matrix A such that fifiX ( 1 ) − A ◦ Yfifi is
Algorithm 1 An algorithm for the Boolean CP decomposition Input : A 3 way binary tensor X , rank r . Output : Binary factor matrices A , B , and C . 1 : function BCP_ALS(X , r ) A ← Asso(X ( 1 ) , r ) 2 : B ← Asso(X ( 2 ) , r ) 3 : C ← Asso(X ( 3 ) , r ) 4 : repeat 5 : 6 : 7 : 8 : 9 : 10 : 11 : end function
A ← UpdateFactor(X ( 1 ) , A , ( C fi B)T ) B ← UpdateFactor(X ( 2 ) , B , ( C fi A)T ) C ← UpdateFactor(X ( 3 ) , C , ( B fi A)T ) until converged return A , B , and C minimized is known as the Basis Usage problem , and is NP hard to even approximate well [ 1 ] . We therefore have to update the factors using a greedy heuristic . We apply the following technique from [ 11 ] : consider each row of X ( 1 ) separately , and let c be a function such that c(i ) = 0 if ( a◦ Y )i = 1 , where a is the corresponding row of A before updates . Now define function cover as
,c(i)[xi = 1 ] − c(i)[xi = 0] [zi = 1 ] . cover(x , z , c ) = i
( 18 ) We can now update the values of a such that cover(x , a ◦ Y , c ) is maximized in polynomial time . Doing this for every row of A we obtain the updated factor matrix ( with B and C fixed , we can update each row of A independently ) . This procedure is called UpdateFactor . The complete algorithm , called BCP_ALS , is presented as Algorithm 1 .
With n by m by l input tensor , the BCP_ALS algorithm converges to local optimum in at most nml steps , as each step is guaranteed to reduce error by at least 1 .
B . The BTucker_ALS Algorithm
Solving the Boolean Tucker decomposition is more involved because of the core tensor G . Every element of G can potentially effect every element of the approximate representation , as the ( i , j , k ) element of the representation is r1(cid:95 ) r2(cid:95 ) r3(cid:95 ) gαβγaiαbjβckγ .
α=1
β=1
γ=1
Therefore , a change in a single element of G can change the product completely . This , however , is a very hypothetical situation . First , if aiαbjβckγ = 0 , the value of gαβγ is irrelevant – the product will be zero in any case . Second , if there is ( α , β , γ ) for which gαβγaiαbjβckγ = 1 , the other values of G do not have any effect – the element ( i , j , k ) will be 1 . These two observations help us to compute the gain we can obtain by flipping an element of G . The whole procedure is given in Algorithm 2 , where [ x ] = {1 , 2 , . . . , x} . The UpdateG algorithm is used to initialize G ( after factor matrices are initialized , and setting initial G to all
( cid:87)r2
X ←(cid:87)r1
Boolean Tucker decomposition ( G , A , B , C ) of X .
( cid:87)r3 γ=1 gαβγ aα . bβ . cγ
Algorithm 2 An algorithm for updating the core tensor Input : A 3 way n by m by l binary tensor X , ( r1 , r2 , r3 ) Output : Updated binary core tensor G 1 : function UpdateG(X ,G , A , B , C ) ) 2 : for ( α , β , γ ) ∈ [ r1 ] × [ r2 ] × [ r3 ] do 3 : 4 : 5 : 6 : 7 : 8 : 9 : gain ← gain + xijk else if gαβγ = 1 and ˜xijk = 1 then if not exists ( α , β , γ ) such that gain ← 0 for all ( i , j , k ) such that aiαbjβckγ = 1 do if gαβγ = 0 and ˜xijk = 0 then
α=1
β=1 gαβγ aiα bjβ ckγ = 1 then gain ← gain + ( 1 − xijk ) end if end if end for if gain > 0 then gαβγ ← 1 − gαβγ
10 : 11 : 12 : 13 : 14 : 15 : end if 16 : end for 17 : return G 18 : 19 : end function
A ← Asso(X ( 1 ) , r ) B ← Asso(X ( 2 ) , r ) C ← Asso(X ( 3 ) , r ) G ← UpdateG(X , 0 , A , B , C ) repeat
Algorithm 3 An algorithm for the Boolean Tucker decomposition Input : A 3 way binary tensor X , ranks ( r1 , r2 , r3 ) . Output : Boolean Tucker decomposition ( G , A , B , C ) 1 : function BTucker_ALS(X , r1 , r2 , r3 ) 2 : 3 : 4 : 5 : 6 : 7 : 8 : 9 : 10 : 11 : 12 : 13 : end function
A ← UpdateFactor(X ( 1 ) , A , G(1 ) ◦ ( C ⊗ B)T ) B ← UpdateFactor(X ( 2 ) , B , G(1 ) ◦ ( C ⊗ A)T ) C ← UpdateFactor(X ( 3 ) , C , G(1 ) ◦ ( B ⊗ A)T ) G ← UpdateG(X ,G , A , B , C ) until converged return A , B , and C zero ) and later to update it in the iterative update process . The full BTucker_ALS algorithm is presented in Algorithm 3 . Also BTucker_ALS is guaranteed to converge in nml steps for n by ml input tensor as each step will reduce the error at least by 1 .
V . EXPERIMENTAL EVALUATION it is important
As the algorithms presented in the previous section are based on heuristics , to study their behaviour with extensive experimentation . For this , we use both synthetic and real world data focus being in the former , as synthetic data offers better control over the data characteristics and thus allows more systematic study of the algorithms’ properties .
We compare the proposed algorithms to three algorithms for normal CP and Tucker decompositions . Two of them , the CP_ALS and Tucker_ALS algorithms are standard alternating least squares based algorithms ( see [ 5] ) , while the third , CP_OPT by Acar et al . [ 12 ] , is based on optimization approach .
Comparing real valued and Boolean methods is not straight forward . Finding the optimum Boolean CP decomposition is not the same thing as finding the optimum normal CP decomposition . Care must be taken to not make too farreaching assumptions from these results , as there are two types of results : the results the algorithms report , and the optimum results for the algorithms’ tasks . The former we know , the latter we do not . Therefore , if one algorithm performs badly compared to others with particular data , it might not necessarily mean that the algorithm itself has problems – it may well be that the algorithm returned the optimum for the task it tried to optimize .
Nevertheless , comparing real valued and Boolean algorithms can provide some insights to the algorithms’ behaviour . When synthetic data is made so that it is decomposable via Boolean methods , we should assume the Boolean methods to be comparable ( or even better , as the case might be ) to the real valued ones . To facilitate the comparisons , we report two kinds of errors from the real valued methods . First is the squared Frobenius . This is the error measure the algorithms aim to minimize , but it is somewhat unfair to the Boolean methods as squaring the element wise error shrinks the cost of small errors , typically yielding dense real valued decompositions that make little error in each element . The other error we report is the sum of absolute differences ( or L1 error ) . This error penalizes more equally for all kinds of errors , but as the real valued methods do not try to optimize it , it is unfair to them . The subscripted F in algorithm ’s name denotes squared Frobenius while subscripted B denotes L1 error .
The algorithms were implemented in Matlab and C using Matlab Tensor Toolbox [ 13 ] . The three algorithms for the normal CP and Tucker decompositions were from the Tensor Toolbox .
A . Synthetic Data
The purpose of the synthetic data experiments was to study algorithms’ properties when used with data that has different characteristics . The three data characteristics studied were ( 1 ) the rank of the tensor ( in case of Tucker , the size of the core tensor ) ; ( 2 ) the density of the factor matrices ( and core tensor ) ; and ( 3 ) the noise level . For all experiments , we created 10 random data sets with identical properties and the reported results are averages over those data sets . In all figures , the width of the error bars is twice the standard deviation .
1 ) CP Decomposition : The synthetic CP data was made by first making random binary factor matrices of predefined density and size . These factor matrices were multiplied together to obtain binary tensors , after which noise was applied . All resulting tensors were of size 50 by 70 by 100 . The results for the CP decomposition experiments are in Figure 1 .
Tensor Rank : The rank of the tensor varied between 4 and 64 with factor matrix density being 0.5 and noise level being 0.1 ( of 1s in the data ) . The results are seen in Figure 1 . The first noticeable result is that with smaller values of r , BCP_ALS is the best of all methods , being better than even the real valued methods with squared Frobenius error . With r = 32 , 64 , the real valued methods become slightly better . The error of BCP_ALS mostly increases with the rank . This is probably due to the increased complexity of the data , making it harder for the iterative updates to find the optimal results .
Factor Matrix Density : The factor matrix density varied between 0.3 and 0.7 with rank being 16 and noise level 01 Results are in Figure 1(b ) . Here , CP_ALSF seems to be the best method , though with density 0.5 BCP_ALS is the best ( corresponding to Figure 1(a) ) . Why real valued methods peak at density 0.5 is unclear ( recall that this is not the density of the resulting data , but the factor matrix density ) . BCP_ALS , however , seems to behave as expected : denser data again has more complexity , making it harder for the algorithm . Noise Level : The noise level varied between 0.05 and 0.4 ( meaning that between 0.05|X| and 0.4|X| of elements of X were flipped ) . Rank was 16 and density 05 The results are in Figure 1(c ) . With smaller values of noise BCP_ALS is again the best method , but as the noise level increased , its error increased faster than that of CP_ALSF or CP_OPTF . Here the ability of making many small errors seems to benefit the latter two algorithms .
2 ) Tucker Decomposition : The synthetic Tucker data was made similarly to the synthetic CP data . The size of the resulting tensors were again 50 by 70 by 100 , and unless otherwise mentioned , the core tensor was of size 8 by 8 by 8 , density was 0.2 , and noise level was 01 The results are in Figure 2 .
In all experiments , BTucker_ALS is worse than Tucker_ALSF , and often also worse than Tucker_ALSB . This seems to suggest that either the created data has lower error real valued Tucker decomposition or that the complexity and the ‘everything affects everything’ nature of the Tucker decomposition makes it very hard for the iterative algorithm to find good solutions . Either way , notice that the BTucker_ALS algorithm has a peak at the error exactly at the default core tensor size ( 8 by 8 by 8 ) and default density ( 02 ) It is possible that different default values had yield better results for BTucker_ALS .
B . Real World Data
For the real world data we used entity–relation–entity tuples from the TextRunner open information extrac
( a )
( b )
( c )
Figure 1 . Results for synthetic CP decomposition data of different parameters : ( a ) Tensor rank . ( b ) Factor matrix density . ( c ) Noise level .
( a )
( b )
( c )
Figure 2 . Results for synthetic Tucker decomposition data of different parameters : ( a ) Core tensor size . ( b ) Factor matrix density . ( c ) Noise level .
[ 14 ] . The data itself tion algorithm3 is huge , so we made three subsets of it , called ResolverS , ResolverM , and ResolverL . ResolverS is 132 by 107 by 20 ( entity by entity by relation ) , ResolverM is 151 by 191 by 70 , and ResolverL is 343 by 360 by 200 . All three data sets are extremely sparse .
1 ) The CP Decomposition : The reconstruction errors for the CP decomposition with different ranks are in Figure 3 . For some reason , with ResolverS , BCP_ALS is unable to find good decomposition . We assume that this is due to the fact that the fibers of ResolverS are very sparse , typically having just one or two 1s . This means that there is almost no ( Boolean ) structure which BCP_ALS could find .
With the two larger data sets , however , the BCP_ALS algorithm performs relatively well , being constantly better than CP_ALSB and CP_OPTB , and in case of ResolverL , better than CP_OPTF . While the real valued methods returned dense factor matrices ( as was expected ) , BCP_ALS returned very sparse ones ( results omitted ) .
2 ) The Tucker Decomposition : The reconstruction errors for the Tucker decomposition with different core tensor sizes
3http://wwwcistempleedu/∼yates/papers/jair resolverhtml are in Figure 4 . These results somewhat mirror those with CP decompositions : with ResolverS , BTucker_ALS is the worst , but with the two other data sets , BTucker_ALS resides between F and B variation of Tucker_ALS . Notice , though , that BTucker_ALS is almost constantly very close to Tucker_ALSF , the only exception being the bump in Figure 4(b ) .
C . Discussion
The experiments , both with synthetic and real world data , show that the BCP_ALS algorithm performs very well , being comparable to ( or better than ) real valued methods with squared Frobenius error . It achieves this while delivering much sparser factors . The results were also interpretable in the sense that the factor matrices defined sets of entities and relations that naturally belong together , such as geographic locations ( {‘Germany’ , ‘India’ , ‘Paris’ , ‘Soviet Union’} was an example of one factor with ResolverL ) . The nature of the data , being very noisy and only a random subset of the full data made further analysis on the interpretability of the result hard .
The BTucker_ALS algorithm ’s performance was more mixed . With synthetic data it did not perform as well as
48163264024681012x 104 rReconstruction error BCP_ALSCP_ALSBCP_ALSFCP_OPTBCP_OPTF03050724681012x 104Factor matrix densityReconstruction error BCP_ALSCP_ALSBCP_ALSFCP_OPTBCP_OPTF005010204024681012141618x 104Noise levelReconstruction error BCP_ALSCP_ALSBCP_ALSFCP_OPTBCP_OPTF(4 , 4 , 4)(8 , 4 , 4)(8 , 8 , 8)(16 , 8 , 4)0123456789x 104RanksReconstruction error BTucker_ALSTucker_ALSBTucker_ALSF0102030123456789x 104Factor densityReconstruction error BTucker_ALSTucker_ALSBTucker_ALSF005010204024681012x 104Noise levelReconstruction error BTucker_ALSTucker_ALSBTucker_ALSF ( a )
( b )
( c )
Figure 3 . Results for CP decompositions at real world data : ( a ) ResolverS . ( b ) ResolverM . ( c ) ResolverL .
( a )
( b )
( c )
Figure 4 . Results for Tucker decompositions at real world data : ( a ) ResolverS . ( b ) ResolverM . ( c ) ResolverL . expected , but with real world data its performance was good . Which one of these reflects the typical scenario is an open question .
VI . RELATED WORK
Boolean matrix factorizations have gained interest in data mining community during the past few years . The use of Boolean matrix factorizations in data mining was proposed in [ 11 ] , although related concepts , such as tiles and formal concepts , were studied much earlier . Before that , Boolean tensor factorizations were mostly studied by combinatorics ; see [ 10 ] and references therein . For some applications and variations of Boolean matrix factorizations , see [ 1 ] .
Tensor factorizations are also well studied , dating back to late Twenties . The two popular decomposition methods , Tucker and CP , were proposed in Sixties [ 7 ] and Seventies [ 3 ] , [ 4 ] , respectively . The topic has nevertheless attained growing interest in recent years , both in numerical linear algebra and computer science communities . For a comprehensive study of recent work , see [ 5 ] .
One field of computer science that has adopted tensor decompositions is computer vision and machine learning . The interest to non negative tensor factorizations stems from these fields [ 15 ] , [ 16 ] .
Many algorithms have been proposed to finding closed itemsets in N way data [ 9 ] , [ 17]–[22 ] . The output of these algorithms can then be used to find an N way tiling of the binary tensor [ 9 ] . The concept of 3 way itemsets was generalized into dense triclusters that , unlike itemsets , can have 1s where the original data has 0s , by Ignatov et al . [ 23 ] . The use of triclusters in lossy 3 way tiling has not been studied , however .
VII . CONCLUSIONS
We have presented the Boolean CP and Tucker tensor decompositions . The theoretical analysis of these topics shows that Boolean tensor decompositions have some useful features ( such as the sparsity ) , and that moving from matrices to tensors have ‘leveled the playing field’ with real valued decompositions : problems that were hard with Boolean matrices but easy with real valued matrices ( such as the matrix rank ) are now hard with both and the idiosyncrasies tensors bring to the Boolean case ( such as high maximum rank ) are also found in real valued case . If fact , some of the problems with the real valued tensor rank ( such as degenerate tensors ) do not manifest themselves with Boolean tensor rank . Nevertheless , there are still many open problems in the relation between Boolean and real tensor rank , most notably , what are the extremal differences between these two ranks
51015303540455055606570 rReconstruction error BCP_ALSCP_ALSBCP_ALSFCP_OPTBCP_OPTF510154005006007008009001000110012001300 rReconstruction error BCP_ALSCP_ALSBCP_ALSFCP_OPTBCP_OPTF51015301200140016001800200022002400 rReconstruction error BCP_ALSCP_ALSBCP_ALSFCP_OPTBCP_OPTF(5 , 5 , 5)(10 , 10 , 10)(15 , 15 , 15)(30 , 30 , 15)10203040506070RanksReconstruction error BTucker_ALSTucker_ALSBTucker_ALSF(5 , 5 , 5)(10 , 10 , 10)(15 , 15 , 15)(30 , 30 , 15)20040060080010001200RanksReconstruction error BTucker_ALSTucker_ALSBTucker_ALSF(5 , 5 , 5)(10 , 10 , 10)(15 , 15 , 15)(30 , 30 , 15)1000120014001600180020002200240026002800RanksReconstruction error BTucker_ALSTucker_ALSBTucker_ALSF [ 13 ] B . W . Bader and T . G . Kolda , “ MATLAB Tensor Toolbox version 2.4 , ” 2010 , http://csmrcasandiagov/tgkolda/ TensorToolbox/ .
[ 14 ] A . Yates and O . Etzioni , “ Unsupervised methods for determining object and relation synonyms on the web , ” J . Artif . Intell . Res . , vol . 34 , pp . 255–296 , 2009 .
[ 15 ] A . Shashua and T . Hazan , “ Non negative tensor factorization with applications to statistics and computer vision , ” in ICML ’05 , 2005 .
[ 16 ] Y D Kim and S . Choi , “ Nonnegative Tucker Decomposition , ” in CVPR ’07 , 2007 , pp . 1–8 .
[ 17 ] R . V . Nataraj and S . Selvan , “ Closed Pattern Mining from n ary Relations , ” Int . J . Comput . Appl . , vol . 1 , no . 9 , pp . 9–13 , 2010 .
[ 18 ] R . Missaoui and L . Kwuida , “ Mining Triadic Association Rules from Ternary Relations , ” in ICFCA ’11 , 2011 , pp . 204– 218 .
[ 19 ] S . Selvan and R . V . Nataraj , “ Efficient Mining of Large Maximal Bicliques from 3D Symmetric Adjacency Matrix , ” IEEE Trans . Knowl . Data Eng . , vol . 22 , no . 12 , pp . 1797–1802 , 2010 .
[ 20 ] R . Jaschke , A . Hotho , C . Schmitz , B . Ganter , and G . Stumme , “ TRIAS — An Algorithm for Mining Iceberg Tri Lattices , ” in ICDM ’06 , 2006 , pp . 907–911 .
[ 21 ] L . Ji , K L Tan , and A . K . H . Tung , “ Mining frequent closed cubes in 3D datasets , ” in VLDB ’06 . VLDB Endowment , 2006 , pp . 811–822 .
[ 22 ] R . Bˇelohl´avek and V . Vychodil , “ Factorizing Three Way Binary Data with Triadic Formal Concepts , ” in KES ’10 , 2010 , pp . 471–480 .
[ 23 ] D . I . Ignatov , S . O . Kuznetsov , R . A . Magizov , and L . E . Zhukov , “ From Triconcepts to Triclusters , ” in RSFDGrC ’11 , 2011 , pp . 257–264 . on a binary tensor ( ie what is the lower bound of Boolean rank in terms of real rank and vice versa ) .
The algorithms we proposed were based on rather straight forward alternating optimization heuristics . Despite ( or because of ) this , they worked generally very well , being often almost as good , or even better , as real valued ones . This happens very rarely with matrices : usually , SVD is the best , even if Boolean methods would have the theoretical possibilities to be better . Nevertheless , finding better algorithms , both in terms of accuracy and in terms of memory and time efficiency , is important . Of particular interest are algorithms that can handle large but extremely sparse tensors , perhaps in distributed manner for better scalability .
We have shown that Boolean tensor factorizations are viable data mining method , and expect them provide many interesting research questions in the upcoming years .
REFERENCES
[ 1 ] P . Miettinen , “ Matrix decomposition methods for data mining : Computational complexity and algorithms , ” PhD dissertation , University of Helsinki , 2009 .
[ 2 ] —— , “ Sparse Boolean Matrix Factorizations , ” in ICDM ’10 ,
2010 , pp . 935–940 .
[ 3 ] J . D . Carroll and J J Chang , “ Analysis of individual differences in multidimensional scaling via an N way generalization of “ Eckart Young ” decomposition , ” Psychometrika , vol . 35 , no . 3 , pp . 283–319 , 1970 .
[ 4 ] R . A . Harshman , “ Foundations of the PARAFAC procedure : Models and conditions for an ” explanatory ” multimodal factor analysis , ” UCLA Working Papers in Phonetics , Tech . Rep . , 1970 .
[ 5 ] T . G . Kolda and B . W . Bader , “ Tensor decompositions and applications , ” SIAM Review , vol . 51 , no . 3 , pp . 455–500 , 2009 .
[ 6 ] J . H˚astad , “ Tensor rank is NP complete , ” J . Algorithms , vol . 11 , no . 4 , pp . 644–654 , Dec . 1990 .
[ 7 ] L . R . Tucker , “ Some mathematical notes on three mode factor analysis , ” Psychometrika , vol . 31 , no . 3 , pp . 279–311 , 1966 .
[ 8 ] F . Geerts , B . Goethals , and T . Mielik¨ainen , “ Tiling databases , ” in DS ’04 , 2004 , pp . 77–122 .
[ 9 ] L . Cerf , J . Besson , C . Robardet , and J F Boulicaut , “ Closed patterns meet n ary relations , ” ACM Trans . Knowl . Discov . Data , vol . 3 , no . 1 , 2009 .
[ 10 ] S . D . Monson , N . J . Pullman , and R . Rees , “ A Survey of Clique and Biclique Coverings and Factorizations of $(0,1)$Matrices , ” Bull . ICA , vol . 14 , pp . 17–86 , 1995 .
[ 11 ] P . Miettinen , T . Mielik¨ainen , A . Gionis , G . Das , and H . Mannila , “ The Discrete Basis Problem , ” IEEE Trans . Knowl . Data Eng . , vol . 20 , no . 10 , pp . 1348–1362 , Oct . 2008 .
[ 12 ] E . Acar , T . G . Kolda , and D . M . Dunlavy , “ An optimization approach for fitting canonical tensor decompositions , ” Sandia National Laboratories , Tech . Rep . SAND2009 0857 , 2009 .
