Network Clustering via Maximizing Modularity : Approximation Algorithms and Theoretical Limits
1
Thang N . Dinh∗‡ , Xiang Li† , and My T . Thai† ,
∗Department of Computer Science , Virginia Commonwealth University , Richmond , VA 23284 USA ,
†Dept . of Comp . & Info . Sci . & Eng . , University of Florida , Gainesville , FL 32611 USA
‡Corresponding author : Thang N . Dinh , email : tndinh@vcu.edu
6 1 0 2 b e F 2
] I S . s c [
1 v 6 1 0 1 0
.
2 0 6 1 : v i X r a
Abstract—Many social networks and complex systems are found to be naturally divided into clusters of densely connected nodes , known as community structure ( CS ) . Finding CS is one of fundamental yet challenging topics in network science . One of the most popular classes of methods for this problem is to maximize Newman ’s modularity . However , there is a little understood on how well we can approximate the maximum modularity as well as the implications of finding community structure with provable guarantees . In this paper , we settle definitely the approximability of modularity clustering , proving that approximating the problem within any ( multiplicative ) positive factor is intractable , unless P = NP . Yet we propose the first additive approximation algorithm for modularity clustering with a constant factor . Moreover , we provide a rigorous proof that a CS with modularity arbitrary close to maximum modularity QOP T might bear no similarity to the optimal CS of maximum modularity . Thus even when CS with near optimal modularity are found , other verification methods are needed to confirm the significance of the structure .
I .
INTRODUCTION
Many complex systems of interest such as the Internet , social , and biological relations , can be represented as networks consisting a set of nodes which are connected by edges between them . Research in a number of academic fields has uncovered unexpected structural properties of complex networks including small world phenomenon [ 1 ] , power law degree distribution , and the existence of community structure ( CS ) [ 2 ] where nodes are naturally clustered into tightly connected modules , also known as communities , with only sparser connections between them . Finding this community structure is a fundamental but challenging problem in the study of network systems and has not been yet satisfactorily solved , despite the huge effort of a large interdisciplinary community of scientists working on it over the past years [ 3 ] .
Newman Girvan ’s modularity that measures the “ strength ” of partition of a network into modules ( also called communities or clusters ) [ 2 ] has rapidly become an essential element of many community detection methods . Despite of the known drawbacks [ 4 ] , [ 5 ] , modularity is by far the most used and best known quality function , particularly because of its successes in many social and biological networks [ 2 ] and the ability to auto detect the optimal number of clusters [ 6 ] , [ 7 ] . One can search for community structure by looking for the divisions of a network that have positive , and preferably large , values of the modularity . This is the underlying “ assumption ” for numerous optimization methods that find communities in the network via maximizing modularity ( aka modularity clustering ) as surveyed in [ 3 ] . However , there is a little understood on the complexity and approximability of modularity clustering besides its NP completeness [ 8 ] , [ 9 ] and APX hardness [ 10 ] . The approximability of modularity clustering in general graphs remains an open question . This paper focuses on understanding theoretical aspects of CSs with near optimal modularity . Let C∗ be a CS with maximum modularity value and let QOP T be the modularity value of C∗ . Given 0 < ρ < 1 , polynomial time algorithms that can find CSs with modularity at least ρQOP T are called ( multiplicative ) approximation algorithms ; and ρ is called ( multiplicative ) approximation factor . Given the NPcompleteness of modularity clustering , we are left with two choices : designing heuristics which provides no performance guarantee ( like the vast major modularity clustering works ) or designing approximation algorithms which can guarantee near optimal modularity .
We seek the answers to the following questions : how well we can approximate the maximum modularity , ie , for what values of ρ there exist ρ approximation algorithms for modularity clustering ? Moreover , do CSs with near optimal modularity bear similarity to C∗ , the ultimate target of all modularity clustering algorithms ? Our contributions ( answers to the above questions ) are as follows . • We prove that there is no approximation algorithm with any factor ρ > 0 for modularity clustering , unless P = NP , therefore definitively settling the approximation complexity of the problem . We prove this intractability results for both weighted networks and unweighted networks ( with the allowance of multiple edges . ) • On the bright side , we propose the first additive approximation algorithm that find a community structure with modularity at least QOP T − 2(1− κ ) for κ = 0766 The proposed algorithm also provides better quality solutions comparing to the state of the art modularity clustering methods . • We provide rigorous proof that CSs with near optimal modularity might be completely different from C∗ , the CS with maximum modularity QOP T . This holds no matter how close the modularity value to QOP T is . Thus adopters of modularity clustering should carefully employ other verification methods even when they found CSs with modularity values that are extremely close to the optimal ones .
Related work . A vast amount of methods to find community structure is surveyed in [ 3 ] . Brandes et al . proves the NPcompleteness for modularity clustering , the first hardness result for this problem . The problem stands NP hard even for trees [ 9 ] . DasGupta et al . show that modularity clustering is APXhard , there is no ( multiplicative ) c approximation for modularity clustering unless P=NP [ 10 ] . In this paper , we show a much stronger result that the inapproximability holds for all c > 1 . there exists a constant c > 1 so that ie ,
Modularity has several known drawbacks . Fortunato and Barthelemy [ 4 ] has shown the resolution limit , ie , modularity clustering methods fail to detect communities smaller than a scale , the resolution limit only appears when the network is substantially large [ 11 ] . Another drawback is modularity ’s highly degenerate energy landscape [ 5 ] , which may lead to very different partitions with equally high modularity . However , for small and medium networks of several thousand nodes , the Louvain method [ 12 ] to optimize modularity is among the best algorithms according to the LFR benchmark [ 11 ] . The method is also adopted in products such as LinkedIn InMap or Gephi .
While approximation algorithms for modularity clustering in special classes of graphs are proposed for scale free networks[13 ] , [ 14 ] and d regular graphs [ 10 ] , no such algorithms for general graphs are known .
Organization . We present terminologies in Section II . The inapproximability of modularity clustering in weighted and unweighted networks is presented in Section III . We present the first additive approximation algorithm for modularity clustering in Section IV . Section V illustrates that the optimality of modularity does not correlate to the similarity between the detected CS and the maximum modularity CS . Section VI presents computational results and we conclude in Section VII .
II . PRELIMINARIES
We consider a network represented as an undirected graph G = ( V , E ) consisting of n = |V | vertices and m = |E| edges . The adjacency matrix of G is denoted by A = ( Aij ) , where Aij is the weight of edge ( i , j ) and Aij = 0 if ( i , j ) /∈ E . We also denote the ( weighted ) degree of vertex i , the total weights of edges incident at i , by deg(i ) or , in short , di . Community structure ( CS ) is a division of the vertices in V into a collection of disjoint subsets of vertices C = {C1 , C2 , . . . , Cl} that the union gives back V . Especially , the number of communities l is not known as a prior . Each subset Ci ⊆ V is called a community ( or module ) and we wish to have more edges connecting vertices in the same communities than edges that connect vertices in different communities . In this paper , we shall use the terms community structure and clustering interchangeably .
The modularity [ 15 ] of C is defined as i,j∈V
Q(C ) =
1 2M
Aij − didj 2M
δij
( 1 ) where di and dj are degree of nodes i and j , respectively ; M is the total edge weights ; and the element δij of the membership l
E(Ct )
M t=1
− vol(Ct)2 4M 2
,
( 2 ) matrix δ is defined as if i and j are in the same community
δij =
1 , 0 , otherwise .
2
. is believed that
The modularity values can be either positive or negative and it the higher ( positive ) modularity values indicate stronger community structure . The modularity clustering problem asks to find a division which maximizes the modularity value .
Let B be the modularity matrix [ 15 ] with entries Bij = Aij − didj 2M
. We have Q(C ) =
1 2M
Bijδij . i,j
Alternatively the modularity can also be defined as
Q(C ) = vol(Ct ) = where E(Ct ) is the total weight of the edges inside Ct and v∈Ct dv is the volume of Ct .
III . MULTIPLICATIVE APPROX . ALGORITHM
A major thrust in optimization is to develop approximation algorithms of which one can theoretically prove the performance bound . Designing approximation algorithms is , however , very challenging . Thus , it is desirable to know for what values of ρ , there exist ρ approximation algorithms . This section gives a negative answer to the existence of approximation algorithms for modularity clustering with any ( multiplicative ) factor ρ > 0 , unless P = NP .
We show the inapproximability result for weighted networks via a gap producing redution from the PARTITION problem in subsection III A . Ignoring the weights doesn’t make the problem any easier to approximate , as we shall show in subsection III B that the same inapproximability hold for unweighted networks .
Our proofs for both cases use the fact that we can approximate modularity clustering if and only if we can approximate the problem of partitioning the network into two communities to maximize modularity . Then we show that the later problem cannot be approximated within any finite factor .
A .
Inapproximability in Weighted Graphs
Theorem 1 : For any ρ > 0 , there is no polynomial time algorithm to find a community structure with a modularity value at least ρQOP T , unless P=NP . Here QOP T denotes the maximum modularity value among all possible divisions of the network into communities .
Proof : We present a gap producing reduction [ 16 ] that maps an instance Φ of the following problem
PARTITION : Given integers x1 , x2 , . . . , xn , can we divide the integers into two halves with equal sum ? to a graph ˜G = ( ˜V , ˜E ) such that •
If Φ is an YES instance , ie , we can divide xi into two halves with equal sum , then QOP T ( ˜G ) > 0 .
3
ˆC1 and ˆC2 . Let δ( ˆC1 ) be the total weights of edges crossing between ˆC1 and ˆC2 . We have
Q2 =
˜M − δ( ˆC1 )
˜M
4 ˜M 2
− vol( ˆC1)2 + vol( ˆC2)2
.
Substitute 2 ˜M = vol( ˆC1 ) + vol( ˆC2 ) and simplify 2vol( ˆC1)vol( ˆC2 ) − 4 ˜M δ( ˆC1 )
Q2 =
1
4 ˜M 2 vol( ˆC1)vol( ˆC2 )
=
2 ˜M 2
1 − δ( ˆC1 ) vol( ˆC1 )
+
δ( ˆC1 ) vol( ˆC2 )
Since Q2 > 0 , we have
δ( ˆC1 ) vol( ˆC1 )
+
δ( ˆC1 ) vol( ˆC2 )
< 1 .
( 3 )
( 4 )
We show that s and t cannot be in the same community . Otherwise , assume s and t belong to ˆC1 , then ˆC2 contains only nodes from {u1 , u2 , . . . , un} . Thus vol( ˆC2 ) = δ( ˆC1 ) = 2 xj . uj∈ ˆC2
= 1 , which contradicts ( 4 ) .
δ( ˆC1 ) vol( ˆC2 )
Since s and t are in different communities , whether we assign ui into ˆC1 or ˆC2 , it always contributes to δ( ˆC1 ) an amount xi . Therefore
Fig 1 . Gap producing reduction from PARTITION to modularity clustering . There exists a community structure of positive modularity if and only if we can divide the integers x1 , . . . , xn into two halves with equal sum .
If Φ is a NO instance , then QOP T ( ˜G ) = 0 .
• Reduction : The graph ˜G is shown in Fig 1 . ˜G consists of two special nodes s and t and n middle nodes u1 , u2 , . . . , un . Each ui is connected to both s and t with edges of weights xi . Let K = 1 t=1 xt . Both s and t have self loops of weights 2 a = 1
8K+2 . The total weights of edges in ˜G is n n t=1
˜M = 2 xt + 2a = 4K + 2a .
It follows that
This reduction establishes the NP hardness of distinguish graphs having a community structure of positive modularity from those having none . An approximation algorithm with a guarantee ρ > 0 or better , will find a community structure of modularity at least ρQOP T ( ˜G ) > 0 , when given a graph from the first class . Thus , it can distinguish the two classes of graphs , leading to a contradiction to the NP hardness of PARTITION [ 17 ] . ( → ) If Φ is an YES instance , there exists a partition of {1 , 2 , . . . , n} into disjoint subsets S1 and S2 such that i∈S1 j∈S2 xi = xt = K , xj =
1 2 n t=1
Consider a CS ˜C in ˜G that consists of two communities C1 = {s} ∪ {ui|i ∈ S1} and C2 = {t} ∪ {uj|j ∈ S2} . We have vol(C1 ) = vol(C2 ) = ˜M . From ( 2 ) , the modularity value of ˜C is
=
δ( ˆC1 ) = xt = 2K = n t=1
 ui∈C1 vol( ˆC1 ) − vol( ˆC2 ) = 2
Moreover , a = 1
. Thus we have
8K+2 < 1 2 ˆM δ( ˆC1 ) vol( ˆC2 )
+
δ( ˆC1 ) vol( ˆC1 ) ( 1 2
˜M − a)2 ˜M ˜M 2 − 1
≥ δ( ˆC1 ) ˜M 2 − 2 1 2 ˜M ˜M 2 − 1
>
˜M − a .
1 2 xj
 ≥ 2 .
1
+
˜M + 1 xi − 1 uj∈C2
˜M − 1 ˜M
= 1 ,
Since Φ is a NO instance , the integrality of xi leads to
Q( ˜C ) =
2K + 2a
− 2 ˜M 2 4 ˜M 2
=
> 0 a ˜M
˜M Thus QOP T ≥ Q ˜C > 0 . ( ← ) If Φ is a NO instance , we prove by contradiction that QOP T = 0 . Assume otherwise QOP T > 0 . Let Q2 denote the maximum modularity value among all partitions of ˜G into ( at most ) two communities . It is known from [ 13 ] that
Q2 ≥ 1 2
QOP T .
Thus there exists a community ˆC of modularity value Q2 ≥ 2 QOP T > 0 such that ˆC has exactly two communities , say
1 which contradicts ( 4 ) .
Hence if Φ is a NO instance , then QOP T = 0 .
B .
Inapproximability in Unweighted Graphs
This section shows that it is NP hard to decide whether one can divide an unweighted graph into communities with ( strictly ) positive modularity score . Thus approximating modularity clustering is NP hard for any positive approximation factor . Our proof reduces from the unweighted Max Cut problem , which is NP hard even for 3 regular graphs [ 18 ] . Our reduction is explicit and can be used to generate hard instances for modularity clustering problem , as shown in Section VI .
Remark that one can replace weighted edges with multiple parallel edges in the reduction in Theorem 1 to get a reduction for unweighted graphs . However , such an approach does not yield a polynomial time reduction , since instances of PARTITION can have items with exponentially large weights . Theorem 2 : Approximating modularity clustering within any positive factor in unweighted graphs ( with the allowance of multiple edges ) is NP hard .
Proof : We reduce from an instance Ψ of the MaxCut problem “ whether an undirected unweighted graph G = ( V , E ) has a subset S ⊆ V of the vertices such that the size of the cut δ(S ) = {(u , v ) ∈ E | u ∈ S , v /∈ S} is at least k ? ” to a graph G = ( V , E ) such that
If the answer to Ψ is YES , ie , there exists a cut S with δ(S ) ≥ k , then QOP T ( G ) > 0 . If the answer to Ψ is NO , QOP T ( G ) = 0 .
• •
Fig 2 . Reduction for a sample network with an edge connecting two nodes . The multiplicity of edges in the right network is T = n4 unless otherwise noted .
Using the same arguments in the proof of Theorem 1 , the above reduction leads to the NP hardness of approximating modularity clustering within any positive finite factor in unweighted graphs . Our reduction is similar to the reduction from Max Cut in [ 18 ] . An example is given in Fig 2 . For each vertex v ∈ V , we add two vertices v+ and v− into V . Also we add two special vertices z+ and z− into V . Thus V = {v+ , v− | v ∈ V } ∪ {z+ , z−} . Next choose a large integer constant T = n4 , where n = |V | . We connect vertices in G in the following orders : • For each edge ( u , v ) ∈ E , connect u+ to v+ and u− to v− , each using T − 1 parallel edges . • There are no edges between u+ and u− for all u ∈ V . Connect z+ to z− using c parallel edges , where c = 4k − 2m − 1 ( and m = |E| ) . • Connect the remaining pairs of vertices , each using T parallel edges .
Feasibility of Reduction . Obviously , the reduction has a polynomial size . Denote by n and m the number of vertices and edges in G , respectively . We have n = 2n + 2 and m = 2n(n + 1)T − 2m + c .
We also need to verify that c ≥ 0 . By [ 19 ] , we can always 2 + 2 , thus we can distinguish find in G a cut of size at least m
4 trivial instances of Max Cut with k ≤ m 2 + 2 from the rest in a polynomial time . For non trivial instances of Max Cut , ie , 2 + 2 we have 4k − 2m − 1 > 4( m 2 + 2 ) − 2m − 1 > 0 . k > m ( → ) If Ψ is an YES instance , there exists a cut ( S ⊆ V , ¯S = V \ S ) satisfying δG(S ) ≥ k . Let S+ = {v+| v ∈ S} , ¯S+ = {v+| v /∈ S} , S− = {v−| v ∈ S} , and ¯S− = {v−| v /∈ S} . Construct a CS C = {C1 , C2} of G in which
C1 = S+ ∪ ¯S− ∪ {z+} , C2 = S− ∪ ¯S+ ∪ {z−} .
We will prove that Q(C ) > 0 . By Eq ( 3 ) ,
1
Q(C ) =
4m2 ( 2vol(C1)vol(C2 ) − 4mδG(C1 ) )
( 5 ) Observe that dv+ = dv− = 2nT − dv,∀v ∈ V and both communities C1 and C2 either contains v+ or v− but not both . The same observation holds for the vertices z+ and z− that have degrees 2nT + c . Thus vol(C1 ) = vol(C2 ) = m .
( 6 ) To compute δG(C1 ) , we recall that the nodes in C1 connect to those in C2 , each with T parallel edges with the exceptions of the following pairs : 2δG(S ) pairs of nodes between ( S+ , ¯S+ ) and ( S− , ¯S− ) , each connected with T − 1 parallel edges z+ connects to z− with only c parallel edges .
• •
Hence , we have
δG(C1 ) = n(n + 1)T − 2δG(S ) + c
≤ n(n + 1)T − 2k + c . Substitute Eqs . ( 6 ) and ( 7 ) into ( 5 ) , we have
1
Q(C ) = 4m2 ( 2m2 − 4mδG(C1 ) ) = ≥ 1 2n(n + 1)T − 2m + c 2m − 2n(n + 1)T + 4k − 2c
=
1 2m > 0 .
( 7 ) m − 2δG(C1 )
2m
Thus QOP T ≥ QC > 0 . ( ← ) If Ψ is a NO instance , we prove by contradiction that QOP T = 0 . Assume otherwise QOP T > 0 . Let Q2 denote the maximum modularity value among all partitions of G into ( at most ) two communities and C = {C1 , C2} be a community structure of G with the modularity value Q2 ≥ 1 2 QOP T > 0 [ 13 ] . We will show that Q2 ≤ 0 , hence , a contradiction . Assume that y = |C1| ≤ |C2| , consider the following two cases : Case y < n + 1 : Since dv+ = dv− = 2nT − dv,∀v ∈ V and dz+ = dz− = 2nT + c , we have vol(C1 ) ≤ 2nT y + 2c
Since vol(C1 ) + vol(C2 ) = 2m , it follows that vol(C1)vol(C2 ) ≤ ( 2nT y + 2c)(2m − ( 2nT y + 2c) ) .
Moreover , using the same arguments that leads to Eq 7 , we have
δG(C1 ) ≥ y(2n + 2 − y)T − yT = yT ( 2n + 1 − y ) .
𝑢+𝑣+𝑧+𝑢−𝑣−𝑧−𝑇−1𝑇−1𝑐𝑢𝑣
Here the factor yT arises from the fact that there are at most y pairs of ( v+ , v− ) that across C1 and C2 .
Thus we obtain from ( 5 ) the following inequality
Q(C ) = ≤ 1 2m2
1
4m2 ( 2vol(C1)vol(C2 ) − 4mδG(C1 ) ) ( 2nT y + 2c)(2m − ( 2nT y + 2c ) ) − 2myT ( 2n + 1 − y )
.
After some algebra and applying the inequalities y ≤ n and c ≤ 2n2 , we obtain
Q(C ) ≤ 2T 2ny m2
−(n + 1 − y ) +
O(n3 )
T
< 0 . considering two sub cases :
Case y = |C1| = |C2| = n + 1 : We bound δG(C1 ) by If there is some v ∈ V such that v+ , v− ∈ C1 or • z+ , z− ∈ C1 , then δG(C1 ) ≥ ( n + 1)(n + 1)T − nT − ( n + 1)(n + 1 ) • Otherwise , all pairs v+ and v− ( as well as z+ and z− ) are in different sides of the cut C1 . Thus C1 induces in G a cut S ⊆ V . Then δG(C1 ) ≥ n(n+1)T−2δG(S)+c ≥ n(n + 1)T − 2(k − 1 ) + c , as δ(S ) < k . As n(n + 1)T + T − ( n + 1)2 ≥ n(n + 1)T − 2(k − 1 ) + c , it holds for the both cases that
δG(C1 ) ≥ n(n + 1)T − 2(k − 1 ) + c .
Since vol(C1)vol(C2 ) ≤ m2 ,
,2m2 − 4m ( n(n + 1)T − 2(k − 1 ) + c ) using Eq ( 5 ) , we obtain Q(C ) ≤ 1 4m2 ≤ 1 2n(n + 1)T − 2m + c 2m − 2n(n + 1)T + 4k − 4 − 2c
−3 2m < 0 .
=
Thus if Ψ is a NO instance , then QOP T = 0 .
IV . ADDITIVE APPROX . ALGORITHM
We propose the first additive approximation algorithm that find a community structure C satisfying the following performance guarantee
Q(C ) ≥ QOP T − 2(1 − κ ) ,
( 8 ) where κ = 0766 The algorithm is based on rounding a semidefinite programm , similar to that in [ 20 ] for the MaxAgree problem . First , we formulate modularity clustering as a vector programming . Let ej ∈ Rn be the unit vector with 1 in the ith coordinate and 0s everywhere else . Let xi ∈ {e1 , e2 , . . . , en} be the variable that indicates the community of vertex i , ie , if xi = ej then vertex i belongs to community j . The vector programming is as follows . max
Bij xi · xj
1 2M xi ∈ {e1 , e2 , . . . , en} ∀i , i,j
5
( 9 )
( 10 ) where ( · ) denotes the inner product ( or dot product ) .
We relax the constraint xi ∈ {e1 , e2 , . . . , en} to get a semidefinite program ( SDP ) with new constraints xi · xi = 1 ∀i xi · xj ≥ 0 ∀i = j xi ∈ Rn ∀i .
( 11 ) ( 12 ) ( 13 )
One of the reason that modularity clustering resists approximation approaches such as semidefinite rounding is that the matrix B contains both negative and nonnegative entries . Indeed , all entries in B sum up to zero [ 15 ] . To overcome this , we add a fixed amount W
2M to the objective of SDP , where
Bij = |
Bij| with
( i,j)∈B+
W = B+ = {(i , j ) | Bij ≥ 0} and B− = {(i , j ) | Bij < 0} . The new objective is then
( i,j)∈B− i,j
Bijxi · xj −
Bijxi · xj +
( i,j)∈B+
Bijxi · xj +
(
( i,j)∈B−
Bij
( i,j)∈B−
( i,j)∈B−
( i,j)∈B+
1 2M
1 2M
1 2M
=
=
Bij(xi · xj − 1 )
−Bij(1 − xi · xj) ) .
Note that all of coefficients in the new objective are nonnegative . Thus we transform the modularity clustering problem to an SDP of the Max Agree problem [ 20 ] which can be solved using the rounding procedure in [ 20 ] . Our additive approximation algorithm can be summarized as follows .
Algorithm 1 SDP to Maximize Modularity ( SDPM ) 1 : Solve the SDP relaxation in ( 9 ) and ( 11) (13 ) 2 : Choose k random hyperplanes , and use projection to 3 : Return the better clustering C of k = 2 and k = 3 . divide the set of vertices into 2k clusters .
Since all coefficients in the new objective are positive and 2M does not affect the solution of SDP . We the fixed factor W can apply Theorem 3 in [ 20 ] to obtain
QG(C ) +
W 2M
≥ κ
QOP T +
W 2M
,
( 14 ) where κ = 0.766 is the approximation factor for the generalized Max Agree problem [ 20 ] .
Since W
2M < 1 and QOP T < 1 , we can simplify ( 14 ) to yield the following theorem .
Theorem 3 : Given graph G , there is a polynomial time algorithm that finds a community structure C of G satisfying and
QG(C ) > κQOP T − ( 1 − κ ) ,
QG(C ) > QOP T − 2(1 − κ ) . where κ = 0766
Apparently , the higher κ the better the performance guarantee . Any improvement on the approximation factor for the generalized Max Agree problem will immediately lead to the improvement in the approximation factor for modularity clustering .
V . DO SMALL GAPS GUARANTEE SIMILARITY ?
Given 0 < a < b < 1 and an arbitrary graph G , we show how to construct a “ structurally equivalent ” graph G of G in which community structures have modularity values between a and b . Multiple implications of this finding include : • There are graphs of any size that have clustering with extremely small modularity ( eg by choosing a and b close to zero . ) This gives additional light into why it is hard to distinguish between graphs having no community structure with positive modularity and the others ( Section III A . ) • There are graphs of any size that all “ reasonable ” clustering of the network yields modularity values in range ( a(1 − ) , a ) for arbitrary small > 0 and any 0 < a < 1− . Thus even we find a CS with modularity at least ( 1 − )QOP T or QOP T − , the obtained CS can be completely different from C∗ , the maximum modularity CS .
Therefore , the presence of high modularity clusters neither indicates the presence of community structure nor how easy it is to detect such a structure if it exists .
We present our construction which consists of two transformations , namely α transformation and ( τ , k) transformation . α transformation : An α transformation with 0 < α ≤ 1 maps each graph G = ( V , E ) with an “ equivalent ” graph G = Tα(G ) and maps ( one to one correspondence ) each CS C of G to a CS C of G that satisfies
QG(C ) = αQG(C ) , where QG(C ) and QG(C ) denote the modularity of C in G and C in G , respectively . Construction : G also has V as the set of vertices . The weighted adjacency matrix A of G is defined as
A ij = Aij +
1 − α α didj 2M
.
( 15 )
We show in the following lemma that the same community induced by C in G has modularity scaled down by a fraction α . Lemma 1 : Given a community structure C of G , the CS C induced by C in G = Tα(G ) satisfies
QG(C ) = αQG(C ) .
6
Proof : Let δij = 1 if i and j are in the same community in C and δij = 0 otherwise . By definition
QG(C ) =
1 2M id ij − d A 2M j
δij , i,j where M , d degree of i , and weighted degree of j in G , respectively . j are the total edge weights , weighted i , and d
We have j∈V j∈V d i =
= j∈V 1 − α α
Aij + di
A ij =
Aij +
1 − α α didj 2M
Moreover ,
M = dj/(2M ) =
1 α di . i∈V di =
1 α
M . j∈V
1 2α d i =
( 16 )
( 17 )
δij
From ( 15 ) , ( 16 ) , and ( 17 ) , we have
QG(C ) =
=
α 2M
α 2M
Aij +
1 − α α Aij − didj 2M
− didj 2M α didj 2M δij = αQG(C ) .
1 2 i∈V i,j i,j
( τ , k) transformation : A ( τ , k) transformation with 0 < τ < 1 and k ∈ Z+ maps a graph G = ( V , E ) with a graph G = Tτ,k(G ) and maps each community structure C in G to a community structure C in G that satisfies
QG(C ) = τ + ( 1 − τ − )QG(C ) , k
.
τ )2 where = ( 1−√ Construction : The set of vertices V is obtained by adding τ −1 , to V k isolated vertices n+1 , n+2 , . . . , n+k . Let β = 1√ ie , τ = 1/(1+β)2 . We attach loops of weight β 2 di to vertices 1 ≤ i ≤ n and loops of weight β(β+1 ) k M to n + 1 , . . . , n + k . Thus the weighted adjacency matrix A of G is as follows .
A ij =
1 ≤ i = j ≤ n 1 ≤ i = j ≤ n
Aij β 2 di 1 k β(β + 1)M i = j > n 0 otherwise .
( 18 )

CS C of G is obtained from C by adding k singleton communities that contains only one node from {n + 1 , . . . , n + k} . Lemma 2 : Given a community structure C of G , the community structure C induced by C in G = Tτ,k(G ) satisfies
QG(C ) = τ + ( 1 − τ − )QG(C ) , where = ( 1−√
τ )2
. k
TABLE I .
ORDER AND SIZE OF NETWORK INSTANCES
7
ID
1 2 3 4 5 6
Name
Zachary ’s karate club
Dolphin ’s social network
Les Miserables
Books about US politics American College Football Electronic Circuit ( s838 ) n
34 62 77 105 115 512 m
78 159 254 441 613 819
TABLE II .
COMPARING MODULARITY OBTAINED BY
DIFFERENT METHODS CNM ( FAST GREEDY ) [ 24 ] , EIG [ 15 ] , LOUVAIN [ 12 ] , SDPM , THE SEMIDEFINITE ROUNDING IN THIS PAPER , AND THE OPTIMAL MODULARITY VALUES OPT [ 22 ] .
ID
1 2 3 4 5 6
CNM
0.235 0.402 0.453 0.452 0.491 0.803
EIG
0.393 0.491 0.532 0.467 0.488 0.736
Louvain 0.420 0.529 0.560 0.527 0.605 0.796
SDPM
0.419 0.526 0.560 0.527 0.605
OPT
0.420 0.529 0.560 0.527 0.605 0.819
A . Real world networks
We perform the experiments on the standard datasets for community structure identification [ 21 ] , [ 22 ] , consisting of real world networks . The datasets’ names together with their sizes are listed in Table I .
The results are reported in Table II . The SDP method finds community structures with maximum modularity ( optimal ) values . Our SDPM method has high running time and spacecomplexity . It ran out of memory for the largest test case of 512 nodes and 819 edges . However , it not only approximates the maximum modularity much better than the ( worst case ) theoretical performance guarantee , Theorem 3 , but also is among the highest quality modularity clustering methods .
Proof : Since a loop contribute twice to the degree , we have and j=i d i =
Aij + 2
β 2 di = ( 1 + β)di , d n+l =
2 k
β(β + 1)M , l = 1k i∈V
( 19 )
( 20 )
( 21 )
Therefore
M =
1 2 i∈V
We have d i =
1 2 d i + k
2 k
β(β + 1)M
= ( 1 + β)M + β(β + 1)M = ( β + 1)2M . j
δij
δn+l,n+l .
QG(C ) = k l=1
+ n+l i,j∈V kM
1 2M id ij − d A
β(β + 1)M 2M − d2 4M2
β − ( β + 1)2 −
2M ( β + 1)2 i∈V M
β + 1 i,j∈V
β 2 di
+
1
1
+
=
1
( β + 1)2 QG(C ) + 1 −
QG(C ) =
δij
Aij − didj 2M
β2 k(1 + β)2
β2 k(β + 1)2 = τ QG(C ) + ( 1 − τ − ) .
Substitute ( 19 ) , ( 20 ) , and ( 21 ) into the above equation
This yields the proof .
Now we can combine the two transformations to “ engineer ” the modularity values into any desirable range ( a , b ) .
Theorem 4 : Given a graph G , applying an α transformation on G , followed by a ( τ , k) transformation yields a graph ˜G and a mapping from each community structure C of G to a community structure ˜C of ˜G that satisfies
Q ˜G( ˜C ) = τ αQG(C ) + ( 1 − τ − ) ,
τ )2 where = ( 1−√ Since −1/2 < QG(C ) < 1 [ 13 ] , setting τ = 1 − ( 2
3 a + 1 3 b ) 3 ( b − a ) ensures that a < Q ˜G( ˜C ) < b for any
. k and α = 2 0 < a < b < 1 .
VI . COMPUTATIONAL RESULTS
We compare the modularity values of the most popular algorithms in the literature [ 2 ] , [ 15 ] , [ 21 ] to that of the SDP rounding in Alg . 1 ( SDPM ) . Also , we include the state of the art , the Louvain ( aka Blondel ’s ) method , [ 12 ] . Since Blondel is a stochastic algorithm , we repeat the algorithm 20 times and report the best modularity value found . The optimal modularity values are reported in [ 22 ] . For solving SDP , we use SDTP3 solver [ 23 ] and repeat the rounding process 1000 times and pick the best result . All algorithms are run on a PC with a Core i7 3770 processor and 16GB RAM .
Fig 3 . Success rate of finding CSs with positive modularity values in the hard instances .
B . Hard Instances via Max Cut reduction
To validate the effectiveness of modularity clustering methods , we generate hard instances of modularity clustering via the reduction from Max Cut problem in the proof of Theorem 2 . The advantages of this type of test includes : 1 ) Generated networks are small but yet challenging to solve and 2 ) Optimal
05010010305070SUCCESS RATE ( %)NETWORK SIZECNMEIGLouvainSDPM solutions and objective ( modularity ) are known . This contrasts other test generators such as LFR [ 11 ] that often come with planted community structure but not ( guaranteed ) optimal solutions .
Biq Mac solver [ 25 ] .
We generate the tests following the below steps : • Generate a random ( Erd˝os R´eyni ) network G . • Find the exact size k of the Max Cut in G using the • Construct a network G from the instance G , k of Max• Run modularity maximization methods on G . A method passes a test if it can find a community structure with a strictly positive modularity value .
Cut using the reduction in Theorem 2 .
We vary network sizes between 10 to 70 , increasing by 10 and repeat the test five times for each network size . The number of times each method passes the test are shown in Fig 3 . Our SDPM algorithm clearly has much higher success rate than the rest . It passes all the tests of size up to 40 . The only method that manages to pass some of the tests is the Eigenvector based method ( EIG ) [ 15 ] . EIG passes the tests of sizes 10 , twice and sizes 20 and 30 , once . These tests illustrates the excellent capability of the SDP rounding methods for hardinstances of the modularity clustering problem .
VII . CONCLUSION
In this paper , we settle the question on the approximability of modularity clustering . We show that there is no ( multiplicative ) approximation algorithm with any factor ρ > 0 , unless P = NP . However , we show that there is an additive approximation algorithm that find community structure with modularity at least κQOP T − ( 1 − κ ) with κ = 0766 Not only modularity is hard to approximate , but also it is a poor indicator for the existing of community structure . The existing of high modularity clusters neither indicates the existing of community structure nor how easy it is to detect such a structure if it exists .
In the future , it is interesting to investigate additive approximation algorithms for modularity clustering , ie , algorithms to find CS with modularity at least QOP T − c for c > 0 . We conjecture that there exists c > 0 that approximating modularity clustering within an additive approximation factor c is NP hard .
VIII . ACKNOWLEDGEMENT
This work is partially supported by NSF CAREER 0953284 and NSF CCF 1422116 .
REFERENCES
[ 1 ] D . J . Watts and S . H . Strogatz , “ Collective dynamics of ’s mall world’ networks , ” Nature , vol . 393 , 1998 .
[ 2 ] M . Girvan and M . E . Newman , “ Community structure in social and biological networks . ” PNAS , vol . 99 , no . 12 , 2002 .
[ 3 ] S . Fortunato and C . Castellano , “ Community structure in graphs , ” Ency . of Complexity and Sys . Sci . , 2008 .
8
[ 4 ] S . Fortunato and M . Barthelemy , “ Resolution limit in community detection , ” Proceedings of the National Academy of Sciences , vol . 104 , no . 1 , 2007 .
[ 5 ] B . H . Good , Y A de Montjoye , and A . Clauset , “ Performance of modularity maximization in practical contexts , ” Phys . Rev . E , vol . 81 , p . 046106 , Apr 2010 . J . Ruan , “ A fully automated method for discovering community structures in high dimensional data , ” in Proc . of the IEEE Int . Conf . on Data Mining ( ICDM ) , 2009 , pp . 968–973 .
[ 6 ]
[ 7 ] P . Shakarian , P . Roos , D . Callahan , and C . Kirk , “ Mining for geographically disperse communities in social networks by leveraging distance modularity , ” in Proc . of the ACM Int . Conf . on Knowledge Discovery and Data Mining ( KDD ) , 2013 , pp . 1402–1409 .
[ 8 ] U . Brandes , D . Delling , M . Gaertler , R . Gorke , M . Hoefer , Z . Nikoloski , and D . Wagner , “ On modularity clustering , ” Knowledge and Data Engineering , IEEE Transactions on , vol . 20 , no . 2 , 2008 .
[ 9 ] T . N . Dinh and M . T . Thai , “ Toward optimal community detection : From trees to general weighted networks , ” Internet Mathematics , vol . 11 , no . 3 , pp . 181–200 , 2015 .
[ 10 ] B . Dasgupta and D . Desai , “ On the complexity of newman ’s community finding approach for biological and social networks , ” J . Comput . Syst . Sci . , vol . 79 , no . 1 , pp . 50–67 , Feb . 2013 .
[ 11 ] A . Lancichinetti and S . Fortunato , “ Community detection algorithms : A comparative analysis , ” Phys . Rev . E , vol . 80 , p . 056117 , Nov 2009 . [ 12 ] V . D . Blondel , J L Guillaume , R . Lambiotte , and E . Lefebvre , “ Fast unfolding of communities in large networks , ” Journal of Statistical Mechanics : Theory and Experiment , vol . 2008 , no . 10 , 2008 .
[ 13 ] T . N . Dinh and M . T . Thai , “ Community detection in scale free networks : Approximation algorithms for maximizing modularity , ” in IEEE Journal on Selected Areas in Communications , 2013 .
[ 14 ] T . N . Dinh , N . P . Nguyen , and M . T . Thai , “ An adaptive approximation algorithm for community detection in dynamic scale free networks , ” in Proceedings IEEE INFOCOM , 2013 , pp . 55–59 .
[ 15 ] M . E . J . Newman , “ Modularity and community structure in networks , ”
Proceedings of the National Academy of Sciences , vol . 103 , 2006 .
[ 16 ] S . Arora and B . Barak , Computational Complexity : A Modern Approach , 1st ed . New York , NY , USA : Cambridge University Press , 2009 .
[ 17 ] M . R . Garey and D . S . Johnson , Computers and Intractability : A Guide New York , NY , USA : W . H . to the Theory of NP Completeness . Freeman & Co . , 1990 .
[ 18 ] D . W . Matula and F . Shahrokhi , “ Sparsest cuts and bottlenecks in graphs , ” Discrete Applied Mathematics , vol . 27 , no . 12 , pp . 113 – 123 , 1990 .
[ 19 ] P . Vitanyi , “ How well can a graph be n colored ? ” Discrete mathematics , vol . 34 , no . 1 , pp . 69–80 , 1981 .
[ 20 ] M . Charikar , V . Guruswami , and A . Wirth , “ Clustering with qualitative information , ” Learning Theory , J . of Comput . Syst . Sci . , vol . 71 , no . 3 , pp . 360 – 383 , 2005 .
[ 21 ] G . Agarwal and D . Kempe , “ Modularity maximizing graph communi ties via mathematical programming , ” Eur . Phys . J . B , vol . 66 , 2008 .
[ 22 ] D . Aloise , S . Cafieri , G . Caporossi , P . Hansen , S . Perron , and L . Liberti , “ Column generation algorithms for exact modularity maximization in networks . ” Phys . Rev . E , vol . 82 , 2010 .
[ 23 ] R . H . T¨ut¨unc¨u , K . C . Toh , and M . J . Todd , “ Solving semidefinitequadratic linear programs using SDPT3 , ” Mathematical Programming , vol . 95 , no . 2 , pp . 189–217 , 2003 .
[ 24 ] A . Clauset , M . E . J . Newman , and C . Moore , “ Finding community structure in very large networks , ” Phys . Rev . E , vol . 70 , p . 066111 , Dec 2004 .
[ 25 ] F . Rendl , G . Rinaldi , and A . Wiegele , “ Solving Max Cut to optimality by intersecting semidefinite and polyhedral relaxations , ” Math . Programming , vol . 121 , no . 2 , p . 307 , 2010 .
