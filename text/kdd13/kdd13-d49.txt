Denser than the Densest Subgraph :
Extracting Optimal Quasi Cliques with Quality Guarantees
Charalampos E . Tsourakakis1
Francesco Bonchi2
Aristides Gionis3
Francesco Gullo2 Maria A . Tsiarli4
1Carnegie Mellon University
Pittsburgh PA , USA
2Yahoo! Research 3Aalto University Espoo , Finland Barcelona , Spain
4University of Pittsburgh
Pittsburgh PA , USA
ABSTRACT Finding dense subgraphs is an important graph mining task with many applications . Given that the direct optimization of edge density is not meaningful , as even a single edge achieves maximum density , research has focused on optimizing alternative density functions . A very popular among such functions is the average degree , whose maximization leads to the well known densest subgraph notion . Surprisingly enough , however , densest subgraphs are typically large graphs , with small edge density and large diameter .
In this paper , we define a novel density function , which gives subgraphs of much higher quality than densest subgraphs : the graphs found by our method are compact , dense , and with smaller diameter . We show that the proposed function can be derived from a general framework , which includes other important density functions as subcases and for which we show interesting general theoretical properties . To optimize the proposed function we provide an additive approximation algorithm and a local search heuristic . Both algorithms are very efficient and scale well to large graphs . We evaluate our algorithms on real and synthetic datasets , and we also devise several application studies as variants of our original problem . When compared with the method that finds the subgraph of the largest average degree , our algorithms return denser subgraphs with smaller diameter . Finally , we discuss new interesting research directions that our problem leaves open .
Categories and Subject Descriptors H28 [ Database Management ] : [ Database ApplicationsData Mining ]
General Terms Algorithms , Experimentation
Keywords Graph mining , Dense subgraph , Quasi clique
1 .
INTRODUCTION
Extracting dense subgraphs from large graphs is a key primitive in a variety of application domains [ 26 ] . In the Web graph , dense subgraphs may correspond to thematic groups or even spam link farms , as observed by Gibson et al . [ 18 ] . In biology , finding dense subgraphs can be used for discovering regulatory motifs in genomic DNA [ 16 ] , and finding correlated genes [ 25 ] . In the financial domain , extracting dense subgraphs has been applied to , among others , finding price value motifs [ 12 ] . Other applications include graph compression [ 9 ] , reachability and distance query indexing [ 21 ] , and finding stories and events in micro blogging streams [ 3 ] .
Given a graph G = ( V , E ) and a subset of vertices S ⊆ V , let G[S ] = ( S , E[S ] ) be the subgraph induced by S , and let e[S ] be the size of E[S ] . The edge density of the set S is defined as δ(S ) = e[S]/,|S|
2 . Finding a dense subgraph of
G would in principle require to find a set of vertices S ⊆ V that maximizes δ(S ) . However , the direct maximization of δ is not a meaningful problem , as even a single edge achieves maximum density . Therefore , effort has been devoted to define alternative density functions whose maximization allows for extracting subgraphs having large δ and , at the same time , non trivial size . Different choices of the density function lead to different variants of the dense subgraph problem . Some variants can be solved in polynomial time , while others are NP hard , or even inapproximable .
1.1 Background and related work
Cliques . A clique is a subset of vertices all connected to each other . The problem of finding whether there exists a clique of a given size in a graph is NP complete . A maximum clique of a graph is a clique having maximum size and its size is called the graph ’s clique number . H˚astad [ 20 ] shows that , unless P = NP , there cannot be any polynomial time algorithm that approximates the maximum clique within a factor better than O(n1−ǫ ) , for any ǫ > 0 . Feige [ 13 ] proposes a polynomial time algorithm that finds a clique of size O(( log n O( n log nb ) for any constant b . Based on this , an algorithm that approximates the maximum clique problem within a factor of O(n ( log log n)2 is a clique that is not a subset of any other clique . The Bron Kerbosch algorithm [ 7 ] finds all maximal cliques in a graph . log log n )2 whenever the graph has a clique of size is also defined . A maximal clique log n3
Densest Subgraph . Let G(V , E ) be a graph , |V | = n , |E| = m . The average degree of a vertex set S ⊆ V is de fined as 2e[S ] |S| The densest subgraph problem is to find a set S that maximizes the average degree . The densest subgraph can be identified in polynomial time by solving a parametric maximum flow problem [ 17 , 19 ] . Charikar [ 10 ] shows that the greedy algorithm proposed by Asashiro et al . [ 6 ] produces a 1 2 approximation of the densest subgraph in linear time .
In the classic definition of densest subgraph there is no size restriction of the output . When restrictions on the size |S| are imposed , the problem becomes NP hard . Specifically , the DkS problem of finding the densest subgraph of k vertices is known to be NP hard [ 5 ] . For general k , Feige et al . [ 14 ] provide an approximation guarantee of O(nα ) , where α < 1 3 . The greedy algorithm by Asahiro et al . [ 6 ] gives instead an approximation factor of O( n k ) . Better approximation factors for specific values of k are provided by algorithms based on semidefinite programming [ 15 ] . From the perspective of ( in)approximability , Khot [ 22 ] shows that there cannot exist any PTAS for the DkS problem under a reasonable complexity assumption . Arora et al . [ 4 ] propose a PTAS for the special case k = Ω(n ) and m = Ω(n2 ) . Finally , two variants of the DkS problem are introduced by Andersen and Chellapilla [ 2 ] . The two problems ask for the set S that maximizes the average degree subject to |S| ≤ k ( DamkS ) and |S| ≥ k ( DalkS ) , respectively . They provide constant factor approximation algorithms for DalkS and evidence that DamkS is hard . The latter was verified by [ 23 ] . Quasi cliques . A set of vertices S is an α quasi clique if e[S ] ≥ α,|S|
2 , ie , if the edge density of the induced sub graph G[S ] exceeds a threshold parameter α ∈ ( 0 , 1 ) . Similarly to cliques , maximum quasi cliques and maximal quasicliques [ 8 ] are quasi cliques of maximum size and quasicliques not contained into any other quasi clique , respectively . Abello et al . [ 1 ] propose an algorithm for finding a single maximal α quasi clique , while Uno [ 31 ] introduces an algorithm to enumerate all α quasi cliques .
1.2 Contributions
Extracting the densest subgraph ( ie , finding the subgraph that maximizes the average degree ) is particularly attractive as it can be solved exactly in polynomial time or approximated within a factor of 2 in linear time . Indeed it is a popular choice in many applications . However , as we will see in detail next , maximizing the average degree tends to favor large subgraphs with not very large edge density δ . The prototypical dense graph is the clique , but , as discussed above , finding the largest clique is inapproximable . Also , the clique definition is too strict in practice , as not even a single edge can be missed from an otherwise dense subgraph . This observation leads to the definition of quasiclique , whose underlying intuition is the following : assuming that each edge in a subgraph G[S ] exists with probability α , then the expected number of edges in G[S ] is α,|S| the condition of the α quasi clique expresses the fact that the subgraph G[S ] has more edges than those expected by this binomial model .
2 . Thus ,
Motivated by this definition , we turn the quasi clique condition into an objective function . In particular , we define the density function fα(S ) = e[S ] − α,|S| edge surplus of a set S over the expected number of edges under the random graph model . We consider the problem of finding the best α quasi clique , ie , a set of vertices S that maximizes the function fα(S ) . We refer to the subgraphs
2 , which expresses the
Table 1 : Difference between densest subgraph and optimal quasi clique on some popular graphs . δ = e[S]/,|S| graph , D is the diameter , and τ = t[S]/,|S|
2 is the edge density of the extracted sub3 is the triangle density . densest subgraph optimal quasi clique τ
δ
0.32 0.34 1 0.26
Dolphins Football Jazz Celeg . N .
|S| |V | 0.32 1 0.50 0.46
δ
0.33 0.09 0.34 0.13
D 3 4 3 3
τ
0.04 0.03 0.08 0.05
|S| |V | 0.12 0.10 0.15 0.07
D 2 2 1 2
0.68 0.73 1 0.61 that maximize fα(S ) as optimal quasi cliques . To the best of our knowledge , the problem of extracting optimal quasicliques from a graph has never been studied before . We show that optimal quasi cliques are subgraphs of high quality , with edge density δ much larger than densest subgraphs and with smaller diameter . We also show that our novel density function comes indeed from a more general framework which subsumes other well known density functions and has appreciable theoretical properties .
Our contributions are summarized as follows . • We introduce a general framework for finding dense subgraphs , which subsumes popular density functions . We provide theoretical insights into our framework : showing that a large family of objectives are efficiently solvable while other subcases are NP hard .
• As a special instance of our framework , we introduce the novel problem of extracting optimal quasi cliques .
• We design two efficient algorithms for extracting optimal quasi cliques . The first one is a greedy algorithm where the smallest degree vertex is repeatedly removed from the graph , and achieves an additive approximation guarantee . The second algorithm is a heuristic based on the local search paradigm .
• Motivated by real world scenarios , we define interesting variants of our original problem definition : ( i ) finding the top k optimal quasi cliques , and ( ii ) finding optimal quasi cliques that contain a given set of vertices .
• We extensively evaluate our algorithms and problem variants on numerous datasets , both synthetic and real , showing that they produce high quality dense subgraphs , which clearly outperform densest subgraphs . We also present applications of our problem in data mining and bioinformatics tasks , such as forming a successful team of domain experts and finding highly correlated genes from a microarray dataset .
1.3 A preview of the results
Table 1 compares our optimal quasi cliques with densest subgraphs on some popular graphs.1 The results in the table clearly show that optimal quasi cliques have much larger edge density than densest subgraphs , smaller diameters and larger triangle densities . Moreover , densest subgraphs are usually quite large sized : in the graphs we report in Table 1 , the densest subgraphs contain always more than the 30 % of the vertices in the input graph . For instance , in the Football
1
Densest subgraphs are extracted here with the exact Goldberg ’s algorithm [ 19 ] . As far as optimal quasi cliques , we optimize fα with α = 1 and use our local search algorithm .
3 graph , the densest subgraph corresponds to the whole graph , with edge density < 0.1 and diameter 4 , while the extracted optimal quasi clique is a 12 vertex subgraph with edge density 0.73 and diameter 2 . The Jazz graph contains a perfect clique of 30 vertices : our method finds this clique achieving perfect edge density , diameter , and triangle density scores . By contrast , the densest subgraph contains 100 vertices , and has edge density 0.34 and triangle density 008
2 . A GENERAL FRAMEWORK
Let G = ( V , E ) be a graph , with |V | = n and |E| = m . For a set of vertices S ⊆ V , let e[S ] be the number of edges in the subgraph induced by S . We define the following function .
Definition 1
( Edge surplus ) . Let S ⊆ V be a subset of the vertices of G , and let α > 0 be a constant . Given any two strictly increasing functions g and h , we define edgesurplus fα as : fα(S ) =(0 , g(e[S ] ) − αh(|S| ) ,
S = ∅ , otherwise .
The rationale behind the above definition is due to a counterbalancing of two contrasting terms : the first term g(e[S ] ) favors subgraphs abundant in edges , whereas the second term −αh(|S| ) penalizes large subgraphs . Our framework for finding dense subgraphs is based on the following optimization problem .
Problem 1
( optimal ( g , h , α) edge surplus ) . Given a graph G = ( V , E ) , a constant α , and a pair of strictlyincreasing functions g , h , find a subset of vertices S∗ ⊆ V such that fα(S∗ ) ≥ fα(S ) , for all sets S ⊆ V . We refer to the set S∗ as the optimal ( g , h , α) edge surplus of the graph G .
The edge surplus definition subsumes numerous popular existing density measures .
• By setting g(x ) = h(x ) = log x , α = 1 , the optimal ( g , h , α) edge surplus problem becomes equivalent to maximizing log e[S ] − log |S| = log e[S ] |S| , which corresponds to the popular densest subgraph problem .
2 optimal ( g , h , α) edge surplus problem becomes equiva
, α = 1 , the • By setting g(x ) = log x , h(x ) = log x(x−1 ) lent to maximizing the edge density δ(S ) = e[S]/,|S| 2 .
No general statements on the complexity characterization of the optimal ( g , h , α) edge surplus problem can be made , since certain cases are polynomial time solvable whereas others are NP hard . However , the following theorem provides a family of optimal ( g , h , α) edge surplus problems that are efficiently solvable .
Theorem 1 . If g(x ) = x and h(x ) is a concave function , then the optimal ( g , h , α) edge surplus problem is in P .
Proof . The optimal ( g , h , α) edge surplus problem becomes max∅6=S⊆V e[S ] − αh(|S| ) where h(x ) is a concave function . The claim follows directly from the following succession of facts . Fact 1 : The function defined by the map S 7→ e[S ] is a supermodular function . Fact 2 : The function h(|S| ) is submodular given that h is concave . Since α > 0 , the function −αh(|S| ) is supermodular . Fact 3 : Combining the above facts with the fact that the sum of two supermodular functions is supermodular , we obtain that fα(S ) is a supermodular function . Fact 4 : Maximizing supermodular functions is strongly polynomial time solvable [ 28 ] .
Finally , an important property of the edge surplus abstraction is that it allows us to model scenarios in numerous practical situations where one wants to find a dense subgraph with bounds on its size . For instance , by relaxing the monotonicity property of h , the k densest subgraph problem can be modeled as an optimal ( g , h , α) edge surplus problem by setting g(x ) = x and h(x ) =(0 ,
+∞ , x = k otherwise .
By choosing h(x ) appropriately , one can design algorithms that avoid outputting subgraphs of undesired size .
3 . OPTIMAL QUASI CLIQUES
By setting g(x ) = x , h(x ) = x(x−1 )
, and restricting α ∈ ( 0 , 1 ) in Problem 1 , we obtain the problem we address in this paper , which we call OQC Problem .
2
Problem 2
( OQC Problem ) . Given a graph G =
( V , E ) , find a subset of vertices S∗ ⊆ V such that fα(S∗ ) = e[S ] − α |S|
2 ! ≥ fα(S ) , for all S ⊆ V .
We refer to the set S∗ as the optimal quasi clique of G .
3.1 Problem characterization
Hardness . Theorem 1 shows a class of problems which are solvable in polynomial time , while leaving open the hardness characterization of the problems that do not fall into that class . Our OQC Problem belongs to the latter class of problems : it is not among the polynomial time solvable optimal ( g , h , α) edge surplus problems stated in Theorem 1 , thus any result about its hardness is not immediate . However , in this regard , we note the following .
For any single edge ( u , v ) , fα({u , v} ) > 0 ; but , for any set
S , where |S| is large enough and e[S ] = α,|S|
Therefore , the OQC Problem assigns a positive score to sets S which have density strictly greater than α . Specifically , let F = {S1 , . . . , Sk} be the family of sets such that fα(Si ) > 0 , for all Si ∈ F . Notice that if the input graph G is connected , then k ≥ 1 , as fα({u , v} ) > 0 , for any edge
2 , fα(S ) = 0 . i = 1 , . . . , k . The objective of the OQC Problem is equiva
2 , ǫi > 0 for all 2 . In
( u , v ) . This suggests that e[Si ] = ( α + ǫi),|Si| lent to maximizing over all sets in F the product ǫi,|Si| conclusion , therefore , the OQC Problem is closely related to the problem of finding a maximum clique in a graph , thus being suspected to be NP hard . However , a formal proof of hardness is nontrivial and it constitutes an interesting open problem for future research . Parameter selection . A natural question that arises whenever a parameter exists is how to choose an appropriate value . We provide here a simple empirical criterion to properly pick the α parameter in our fα function .
Algorithm 1 GreedyOQC Input : Graph G(V , E ) Output : Subset of vertices ¯S ⊆ V
Sn ← V for i ← n downto 1 do
Let v be the vertex with the smallest degree in G[Si ] Si−1 ← Si \ {v} end for ¯S ← arg maxi=1,,n fα(Si )
Let us consider two disjoint sets of vertices S1 , S2 in the graph G . Assume that G[S1 ∪ S2 ] is disconnected , ie , G[S1 ] and G[S2 ] form two separate connected components . Also , without any loss of generality , assume that fα(S1 ) ≤ fα(S2 ) . As our goal is to favor small dense subgraphs , a natural condition to satisfy is fα(S1 ∪ S2 ) ≤ fα(S1 ) ≤ fα(S2 ) , ie , we require for our objective to prefer the set S1 ( or S2 ) rather than the larger set S1 ∪ S2 . Therefore , we obtain : e[S1 ] + e[S2 ] − α |S1|+|S2| which , considering that e[S2 ] ≤,|S2|
2 ! , ! ≤ e[S1 ] − α |S1| 2 , leads to :
2
|S2| − 1
2|S1| + |S2| − 1
.
α ≥
,|S2| 2 ,|S1|+|S2| −,|S1| 2
2
=
Let us now assume for simplicity that |S1| = |S2| = k ; then the above condition becomes : α ≥ k−1 3 , it suffices choosing α ≥ 1
3k−1 < 1 3 to have the condition satisfied .
3k−1 . As k−1
Thus , we choose a value for α around 1
3 , which is actually the value we adopt in our experiments . Alternatively , one could choose α = e[V ]/,|V | of our objective . However , we do not advocate this choice since typically e[V ] = o(|V |2 ) .
2 to obtain a normalized version
3.2 Algorithms
A greedy approximation algorithm . The first efficient algorithm we propose is an adaptation of the greedy algorithm by Asashiro et al . [ 6 ] , which has been shown to provide a 1 2 approximation for the densest subgraph problem [ 10 ] . The outline of our algorithm , called GreedyOQC , is shown as Algorithm 1 . The algorithm iteratively removes the vertex with the smallest degree . The output is the subgraph produced over all iterations that maximizes the objective function fα . The algorithm can be implemented in O(n+m ) time : the trick consists in keeping a list of vertices for each possible degree and updating the degree of any vertex v during the various iterations of the algorithm simply by moving v to the appropriate degree list .
The GreedyOQC algorithm provides an additive approximation guarantee for the OQC Problem , as shown next .
Theorem 2 . Let ¯S be the set of vertices outputted by the GreedyOQC algorithm and let S∗ be the optimal vertex set . Consider also the specific iteration of the algorithm where a vertex within S∗ is removed for the first time and let SI denote the vertex set currently kept in that iteration . It holds that : fα( ¯S ) ≥ fα(S∗ ) −
|SI |(|SI | − |S∗| ) .
α 2
Proof . Given a subset of vertices S ⊆ V and a vertex u ∈ S , let dS(u ) denote the degree of u in G[S ] .
We start the analysis by considering the first vertex belonging to S∗ removed by the algorithm from the current vertex set . Let v denote such a vertex , and let also SI denote the set of vertices still present just before the removal of v . By the optimality of S∗ , we obtain : fα(S∗ ) ≥ fα(S∗ \ {u} ) , ∀u ∈ S∗
⇔ e[S∗]−α |S∗|
2 ! ≥ ( e[S]−dS∗ ( u))−α |S∗|−1
2 ! , ∀u ∈ S∗
⇔ dS∗ ( u ) ≥ α(|S∗| − 1 ) , ∀u ∈ S∗ .
As the algorithm greedily removes vertices with the smallest degree in each iteration , it is easy to see that dV ( u ) ≥ dSI ( u ) ≥ dS∗ ( u ) ≥ α(|S∗| − 1 ) , ∀u . Therefore , noticing also that S∗ ⊆ SI , it holds that :
1
=
2 ! fα(SI ) = e[SI ] − α |SI | dS∗ ( u ) + Xu∈S∗ dSI ( u) 
2 Xu∈S∗ + Xu∈SI \S∗ 2  Xu∈S∗
≥
1
= e[S∗ ] +
≥ e[S∗ ] +
( dSI ( u ) − dS∗ ( u ) ) +
2 ! − α |SI | dSI ( u)  2 ! dSI ( u ) − α |SI | dS∗ ( u ) + Xu∈SI \S∗ 2 Xu∈SI \S∗ 2 ! ( |SI | − |S∗|)α(|S∗| − 1 ) − α |SI |
2 ! − α |SI |
1 2
1
= fα(S∗ ) −
α 2
|SI |(|SI | − |S∗| ) .
As the final output of the algorithm is the best over all iterations , we finally obtain : fα( ¯S ) ≥ fα(SI ) ≥ fα(S∗ ) −
|SI |(|SI | − |S∗| ) .
α 2
The above result can be interpreted as follows . Assuming that |SI | is O(| ¯S| ) , the additive approximation factor proved 2 | ¯S|(| ¯S| − |S∗| ) . in Theorem 2 becomes fα( ¯S ) ≥ fα(S∗ ) − α Thus , the error achieved by the GreedyOQC algorithm is guaranteed to be bounded by an additive factor proportional to the size of the optimal quasi clique outputted . As optimal quasi cliques are typically small graphs , this results in an approximation guarantee that is very tight in practice . A local search heuristic . Even though the above GreedyOQC algorithm achieves provable approximation guarantee , it is not guaranteed for that algorithm to be related to any ( local ) optimal solution , which is a desirable property that in many practical cases can lead to very good results . To this purpose , we present next a local search heuristic , called LocalSearchOQC , which performs local operations and outputs a vertex set S that is guaranteed to be locally optimal , ie , if any single vertex is added to or removed from S , then the objective function decreases .
Algorithm 2 LocalSearchOQC Input : Graph G = ( V , E ) ; maximum number of iterations
TM AX
Output : Subset of vertices ¯S ⊆ V
S ← {v} , where v is chosen uniformly at random b1 ← TRUE , t ← 1 . while b1 and t ≤ TM AX do b2 ← TRUE while b2 do
If there exists u ∈ V \S such that fα(S∪{u} ) ≥ fα(S ) then let S ← S ∪ {u} otherwise set b2 ← FALSE end while If there exists u ∈ S such that fα(S\{u} ) ≥ fα(S ) then let S ← S\{u} otherwise , set b1 ← FALSE t ← t + 1 end while ¯S ← arg max ˆS∈{S,V \S} fα( ˆS )
The outline of LocalSearchOQC is shown as Algorithm 2 . The algorithm initially selects a random vertex and then it keeps adding vertices to the current set S while the objective improves . When no vertices can be added , the algorithm tries to find a vertex in S whose removal may improve the objective . As soon as such a vertex is encountered , it is removed from S and the algorithm re starts from the adding phase . The process continues until a local optimum is reached or the number of iterations exceeds Tmax . The time complexity of LocalSearchOQC is O(Tmax m ) .
The effectiveness of the LocalSearchOQC algorithm partly depends on the initial seeding set S . To this end , we devise a heuristic to choose an initial seeding set more appropriately than setting it equal to a randomly selected vertex . Let v∗ be the vertex that maximizes the ratio t(v∗ ) d(v∗ ) , where t(v∗ ) is the number of triangles of v∗ and d(v∗ ) its degree ( we approximate the number of triangles in which each vertex participates with the technique described in [ 24] ) . Given vertex v∗ , we use as a seed the set {v∗ ∪ N ( v∗)} , where N ( v∗ ) = {u : ( u , v∗ ) ∈ E} is the neighborhood of v∗ .
4 . PROBLEM VARIANTS
We present here two variants of our basic problem , that have many practical applications : finding top k optimal quasi cliques ( Section 4.1 ) and finding an optimal quasi clique that contains a given set of query vertices ( Section 42 )
4.1 Top k optimal quasi cliques
The top k version of our problem is as follows : given a graph G = ( V , E ) and a constant k , find top k disjoint optimal quasi cliques . This variant is particularly useful in scenarios where finding a single dense subgraph is not sufficient , rather a set of k > 1 dense components is required .
From a formal viewpoint , the problem would require to find k subgraphs for which the sum of the various objective function values computed on each subgraph is maximized . Due to its intrinsic hardness , however , here we heuristically tackle the problem in a greedy fashion : we find one dense subgraph at a time , we remove all the vertices of the subgraph from the graph , and we continue until we find k subgraphs or until we are left with an empty graph . Note that this iterative approach allows us to automatically fulfill a
Table 2 : Graphs used in our experiments . Description
Edges
Dolphins Polbooks Adjnoun
Vertices 62 105 112
Football Jazz Celegans N . Celegans M . Email AS 22july06 Web Google Youtube AS Skitter Wikipedia 2005 Wikipedia 2006/9 Wikipedia 2006/11
115 198 297 453 1 133 22 963 875 713 1 157 822 1 696 415 1 634 989 2 983 494 3 148 440
159 Biological Network 441 Books Network 425 Adj . and Nouns in ‘David Copperfield’
613 Games Network
2 742 Musicians Network 2 148 Biological Network 2 025 Biological Network 5 451 Email Network 48 436 Auton . Systems
3 852 985 Web Graph 2 990 442
Social Network 11 095 298 Auton . Systems 18 540 589 Web Graph 35 048 115 Web Graph 37 043 456 Web Graph very common requirement of finding top k subgraphs that are pairwise disjoint .
4.2 Constrained optimal quasi cliques
The constrained optimal quasi cliques variant consists in finding an optimal quasi clique that contains a set of prespecified query vertices . This variant is inspired by the community search problem [ 30 ] , which has many applications , such as finding thematic groups , organizing social events , tag suggestion . Next , we formalize the problem , prove that it is NP hard , and adapt our algorithms for this variant .
Let G = ( V , E ) be a graph , and Q ⊆ V be a set of query vertices . We want to find a set of vertices S ⊆ V , so that S contains the query vertices Q and maximizes our objective function fα . Formally , we define the following problem .
Problem 3
( Constrained OQC Problem ) . Given a graph G = ( V , E ) and set Q ⊆ V , find S∗ ⊆ V such that fα(S∗ ) = maxQ⊆S⊆V fα(S ) .
It is easy to see that , when Q = ∅ , the ConstrainedOQC Problem reduces to the OQC Problem . However , contrarily to the basic OQC Problem , the ConstrainedOQC Problem can very easily be shown to be NP hard . The hardness is quite immediate from Theorem 1 in [ 31 ] and we omit details due to space constraints .
Theorem 3 . The Constrained OQC Problem is
NP hard .
The GreedyOQC algorithm can be adapted to solve the Constrained OQC Problem simply by ignoring the nodes u ∈ Q during the execution of the algorithm , so as to never remove vertices of Q .
Similarly , our LocalSearchOQC algorithm can solve the Constrained OQC Problem with a couple of simple modifications : the set S is initialized to the set of query vertices Q , while , during the iterative phase of the algorithm , we never allow a vertex u ∈ Q to leave S .
5 . EXPERIMENTAL EVALUATION
In this section we present our empirical evaluation , first on publicly available real world graphs ( Section 5.1 ) , whose main characteristics are shown in Table 2 , and then on synthetic graphs where the ground truth is known ( Section 52 )
Table 3 : Densest subgraphs extracted with Charikar ’s method vs . optimal quasi cliques extracted with the pro posed GreedyOQC algorithm ( greedy ) and LocalSearchOQC algorithm ( ls ) . δ = e[S]/,|S| of the extracted subgraph S , D is the diameter , and τ = t[S]/,|S| 3 is the triangle density .
D
δ
2 is the edge density opt . quasi clique greedy 0.47 0.67 0.48 0.89 0.54 0.55 0.61 1 0.53 1 0.46 0.53 0.43 0.43 0.43 ls 0.68 0.61 0.60 0.73 1 0.61 0.67 0.71 0.58 0.98 0.49 0.49 0.48 0.49 0.56 densest subgraph 3 6 3 4 3 3 3 4 3 3 4 2 3 3 3 ls opt . quasi clique greedy 3 2 3 2 2 2 2 1 2 2 2 2 3 3 3
2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 densest subgraph 0.05 0.02 0.01 0.03 0.08 0.07 0.07 0.01 0.09 0.03 0.02 0.10 0.02 0.10 0.31
τ opt . quasi clique greedy 0.12 0.28 0.10 0.67 0.23 0.20 0.26 1 0.19 0.99 0.12 0.19 0.06 0.06 0.06 ls 0.32 0.24 0.12 0.34 1 0.26 0.33 0.30 0.20 0.95 0.14 0.13 0.10 0.11 0.35 densest subgraph 19 53 45 115 99 126 44 289 204 230 1874 433 24555 1594 1638
Dolphins Polbooks Adjnoun Football Jazz Celeg . N . Celeg . M . Email AS 22july06 Web Google Youtube AS Skitter Wiki ’05 Wiki ’06/9 Wiki ’06/11 ls
|S| opt . quasi clique greedy 13 13 16 10 59 27 22 12 73 46 124 319 451 526 527
8 16 15 12 30 21 17 8 12 20 119 96 321 376 46 densest subgraph 0.27 0.18 0.20 0.09 0.35 0.14 0.35 0.05 0.40 0.22 0.05 0.41 0.26 0.17 0.17
Our main goal is to compare our optimal quasi cliques with densest subgraphs . For extracting optimal quasi cliques , we involve both our proposed algorithms , ie , GreedyOQC and LocalSearchOQC , which , following the discussion in Section 3.1 , we run with α = 1 3 ( for LocalSearchOQC , we also set Tmax = 50 ) . For finding densest subgraphs , we use the Goldberg ’s exact algorithm [ 19 ] for small graphs , while for graphs whose size does not allow the Goldberg ’s algorithm to terminate in reasonable time we use the Charikar ’s 1 2 approximation algorithm [ 10 ] .
All algorithms are implemented in java , and all experiments are performed on a single machine with Intel Xeon cpu at 2.83GHz and 50GB ram .
5.1 Real world graphs
Results on real graphs are shown in Table 3 . We compare optimal quasi cliques outputted by the proposed GreedyOQC and LocalSearchOQC algorithms with densest subgraphs extracted with the Charikar ’s algorithm . Particularly , we use the Charikar ’s method to be able to handle the largest graphs . For consistency , Table 3 reports on results achieved by Charikar ’s method also for the smallest graphs . We recall that the results in Table 1 in the Introduction refer instead to the exact Goldberg ’s method . However , a comparison of the two tables on their common rows shows that the Charikar ’s algorithm , even though it is approximate , produces almost identical results with the results produced by the Goldberg ’s algorithm .
Table 3 clearly confirms the preliminary results reported in the Introduction : optimal quasi cliques have larger edge and triangle densities , and smaller diameter than densest subgraphs . Particularly , the edge density of optimal quasicliques is evidently larger on all graphs . For instance , on Football and Youtube , the edge density of optimal quasicliques ( for both the GreedyOQC and LocalSearchOQC algorithms ) is about 9 times larger than the edge density of densest subgraphs , while on Email the difference increases up to 20 times ( GreedyOQC ) and 14 times ( LocalSearchOQC ) . Still , the triangle density of the optimal quasi cliques outputted by both GreedyOQC and LocalSearchOQC is one order of magnitude larger than the triangle density of densest subgraphs on 11 out of 15 graphs .
Figure 1 : Edge density and diameter of the top10 subgraphs found by our GreedyOQC and LocalSearchOQC methods , and Charikar ’s algorithm , on the AS skitter graph ( top ) and the Wikipedia 2006/11 graph ( bottom ) .
Comparing our two algorithms to each other , we can see that LocalSearchOQC performs generally better than GreedyOQC . Indeed , the edge density achieved by LocalSearchOQC is higher than that of GreedyOQC on 10 out of 15 graphs , while the diameter of the LocalSearchOQC optimal quasi cliques is never larger than the diameter of the GreedyOQC optimal quasi cliques .
Concerning efficiency , all algorithms are linear in the number of edges of the graph . Charikar ’s and GreedyOQC algorithm are somewhat slower than LocalSearchOQC , but mainly due to bookkeeping . LocalSearchOQC algorithm ’s running times vary from milliseconds for the small graphs ( eg , 0.004s for Dolphins , 0.002s for Celegans N. ) , few seconds for the larger graphs ( eg , 7.94s for Web Google and 3.52s for Youtube ) and less than one minute for the largest graphs ( eg , 59.27s for Wikipedia 2006/11 ) .
Top k optimal quasi cliques . Figure 1 evaluates top k optimal quasi cliques and top k densest subgraphs on the ASSkitter and Wikipedia 2006/11 graphs using the iterative method described in Section 41 Similar results hold for the other graphs but are omitted due to space constraints . For each graph we show two scatterplots . The x axis in logarithmic scale reports the size of each of the top k dense components , while the y axes show the edge density and the diameter , respectively . In all figures , optimal quasi cliques correspond to blue filled circles ( LocalSearchOQC ) or red diamonds ( GreedyOQC ) , while densest subgraphs correspond to green circles . It is evident that optimal quasicliques are significantly better in terms of both edge density and diameter also in this top k variant . The edge density is in the range 0.4 − 0.7 and the diameter is always 2 or 3 , except for a 56 vertex clique in Wikipedia 2006/11 with diameter 1 . On the contrary , the densest subgraphs are large graphs , with diameter ranging typically from 3 to 5 , with significantly smaller edge densities : besides few exceptions , the edge density of densest subgraphs is always around 0.1 or even less .
5.2 Synthetic graphs
Experiments on synthetic graphs deal with the following task : a ( small ) clique is planted in two different types of random graphs , and the goal is to check if the dense subgraph algorithms are able to recover those cliques . Two different random graph models are used as host graphs for the cliques : ( i ) Erd˝os R´enyi and ( ii ) random power law graphs . In the former model , each edge exists with probability p independently of the other edges . To generate a random power law graph , we follow the Chung Lu model [ 11 ] : we first generate a degree sequence ( d1 , . . . , dn ) that follows a power law with a pre specified slope and we connect each pair of vertices i , j with probability proportional to didj .
We evaluate our algorithms by measuring how “ close ” are the returned subgraphs to the planted clique . In particular , we use the measures of precision P and recall R , defined as
P =
R =
#{returned vertices from hidden clique} size{subgraph returned}
#{returned vertices from hidden clique} size{hidden clique}
, and
.
Next we discuss the results obtained . For the Erd˝os R´enyi model we also provide a theoretical justification of the outcome of the two tested algorithms .
Erd˝os R´enyi graphs . We plant a clique of 30 vertices on Erd˝os R´enyi graphs with n = 3 000 and edge probabilities p ∈ {0.5 , 0.1 , 0008} Those values of p are selected to represent very dense , medium dense , and sparse graphs .
We report in Table 4 the results of running our LocalSearchOQC and GreedyOQC algorithms for extracting optimal quasi cliques , as well as the Goldberg ’s algorithm for extracting densest subgraphs . We observe that our two algorithms , LocalSearchOQC and GreedyOQC , produce identical results , thus we refer to both of them as optimal quasi cliques algorithms . We see that the algorithms produce two kinds of results : they either find the hidden clique , or they miss it and return the whole graph . In the very dense setting ( p = 0.5 ) all algorithms miss the clique , while in the sparse setting ( p = 0.008 ) all algorithms recover it . However , at the middle density setting ( p = 0.1 ) only the optimal
Table 4 : Subgraphs returned by the Goldberg ’s max flow algorithm and by our two algorithms ( GreedyOQC , LocalSearchOQC ) on Erd˝os R´enyi graphs with 3 000 vertices and three values of p , and with a planted clique of 30 vertices .
Erd˝os R´enyi parameters n
3 000 3 000 3 000 p 0.5 0.1 0.008 densest subgraph |S| R
P
3 000 3 000 30
0.01 0.01 1.00
1.00 1.00 1.00 optimal quasi clique
|S|
3 000 30 30
P
0.01 1.00 1.00
R
1.00 1.00 1.00 quasi cliques algorithms find the clique , while the Goldberg ’s algorithm misses it .
To better understand the results shown on Table 4 , we provide a theoretical explanation of the behavior of the algorithms depending on their objective . Assume that h is the size of the hidden clique , p > log n/n . If np ≥ h − 1 the densest subgraph criterion always returns the whole graph with high probability . In our experiments , this happens with p = 0.5 and p = 01 On the other hand , if np < h − 1 , the densest subgraph corresponds to the hidden clique , and therefore the Goldberg ’s algorithm cannot miss it .
Now consider our objective function , ie , the edge surplus function fα . The expected score for the hidden clique is
E [ fα(H ) ] = fα(H ) = ( 1 − α),h the whole network is E [ fα(V ) ] =,p,n
We obtain the following two cases : ( A ) when p > α , we have E [ fα(V ) ] ≥ fα(H ) . ( B ) when p < α , we have fα(H ) ≥ E [ fα(V ) ] . This rough analysis explains our findings .
2 . The expected score for 2 − α,n 2 .
2 + ( 1 − p),h
Power law graphs . We plant a clique of 15 vertices in random power law graphs of again 3 000 vertices , with powerlaw exponent varying from 2.2 to 31 We select these values since most real world networks have power law exponent in this range [ 27 ] . For each exponent tested , we generate five random graphs , and all the figures we report are averages over these five trials .
Again , we compare our GreedyOQC and LocalSearchOQC algorithms with the Goldberg ’s algorithm . The LocalSearchOQC algorithm is run seeded with one of the vertices of the clique . The justification of this choice is that one can always re run the algorithm until it finds such a vertex with high probability.2
The precision and recall scores of the three competing algorithms as a function of the power law exponent are shown in Figure 2 . As the exponent increases the host graph becomes sparser and both algorithms have no difficulties in finding the hidden clique . However , for exponent values ranging between 2.2 and 2.6 the optimal quasi cliques are significantly better than the densest subgraphs . Indeed , in terms of precision , the Goldberg ’s algorithm is outperformed by both our algorithms . In terms of recall , our LocalSearchOQC is better than Goldberg ’s , while our GreedyOQC performs slightly worse . An explanation for this is that the GreedyOQC algorithm detects other high density subgraphs , but not exactly the planted clique . As an ex
2
If the hidden clique is of size O(nǫ ) , for some 0 ≤ ǫ < 1 , it suffices to run the algorithm a sub linear number of times ( ie , O((1 − γ)n1−ǫ ) times ) in order to obtain one of the vertices of the clique as a seed with probability at least 1 − γ .
Abiteboul , Bernstein , Brodie , Carey , Ceri , Crof ,
DeWitt , Ehrenfeucht , Franklin , Gawlick , Gray , Haas , Halevy , Hellerstein , Ioannidis , Jagadish , Kanellakis ,
Kersten , Lesk , Maier , Molina , Naughton , Papadimitriou , Pazzani , Pirahesh , Schek , Sellis , Silberschatz , Snodgrass ,
Stonebraker , Ullman , Weikum , Widom , Zdonik
Authors returned by our LocalFigure 3 : SearchOQC algorithm when queried with Papadimitriou and Abiteboul . The set includes well known database scientists . The induced subgraph has 34 vertices and 457 edges . The edge density is 0.81 , the diameter is 3 , the triangle density is 066
Alt , Blum , Garey , Guibas , Johnson ,
Karp , Mehlhorn , Papadimitriou , Preparata ,
Tarjan , Welzl , Widgerson , Yannakakis ,
Authors
Figure 4 : returned by our LocalSearchOQC algorithm when queried with Papadimitriou and Blum . The set includes well known theoretical computer scientists . The induced subgraph has 13 vertices and 38 edges . The edge density is 0.49 , the diameter is 3 , the triangle density is 014 database scientists . On the other hand , with query Q2 we invoke Papadimitriou ’s interests in theory , given that Blum is a Turing award theoretical computer scientist . As we can see in Figure 4 , the returned optimal quasi clique contains well known theoretical computer scientists .
Figure 2 : Precision and recall for our method and Goldberg ’s algorithm vs . the power law exponent of the host graph . ample , with power law exponent 2.3 , GreedyOQC finds a subgraph with 23 vertices and edge density 087
Stability with respect to α . We also test the sensitivity of our density measure with respect to the parameter α . We use again the planted clique setting , and we test the ability of our algorithms to recover the clique as we vary the parameter α . We omit detailed plots , due to space constraints , but we report that the behavior of both algorithms is extremely stable with respect to α . Essentially , the algorithms again either find the clique or miss it , depending on the graphgeneration parameters , as we saw in the previous section , namely , the probability p of the Erd˝os R´enyi graphs , or the exponent of the power law graphs . Moreover , in all cases , the performance of our algorithms , measured by precision and recall as in the last experiment , does not depend on α .
6 . APPLICATIONS
6.2 Correlated genes
In this section we show experiments concerning our constrained optimal quasi cliques variant introduced in Section 42 To this end , we focus on two applications that can be commonly encountered in real world scenarios : finding thematic groups and finding highly correlated genes from a microarray dataset . For the sake of brevity of presentation , we show next results for only one of our algorithms , particularly the LocalSearchOQC algorithm .
6.1 Thematic groups
Motivation . Suppose that a set of scientists Q wants to organize a workshop . How do they invite other scientists to participate in the workshop so that the set of all the participants , including Q , have similar interests ?
Setup . We use a co authorship graph extracted from the dblp dataset . The dataset contains publications in all major computer science journals . There is an undirected edge between two authors if they have coauthored a journal article . Taking the largest connected component gives a graph of 226K vertices and 1.4M edges .
We evaluate the results of our algorithm qualitatively , in a sanity check form rather than a strict and quantitative way , which is not even well defined . We perform the following two queries : Q1 = {Papadimitriou , Abiteboul} and Q2 = {Papadimitriou , Blum} .
Results . Papadimitriou is one of the most prolific computer scientists and has worked on a wide range of areas . With query Q1 we invoke his interests in database theory given that Abiteboul is an expert in this field . As we can observe from Figure 3 , the optimal quasi clique outputted contains
Motivation . Detecting correlated genes has several applications . For instance , clusters of genes with similar expression levels are typically under similar transcriptional control . Furthermore , genes with similar expression patterns may imply co regulation or relationship in functional pathways . Detecting gene correlations has played a key role in discovering unknown types of breast cancer [ 29 ] . Here , we wish to illustrate that optimal quasi cliques provide a useful graph theoretic framework for gene co expression network analysis [ 25 ] , without delving deeply into biological aspects of the results . Setup . We use the publicly available breast cancer dataset of van de Vijner et al . [ 32 ] , which consists of measurements across 295 patients of 24 479 probes . Upon running a standard probe selection algorithm based on Singular Value Decomposition ( SVD ) , we obtain a 295×1000 matrix . The graph G in input to our LocalSearchOQC algorithm is derived using the well established approach defined in [ 25 ] : each gene corresponds to a vertex in G , while an edge between any pair of genes i , j is drawn if and only if the modulus of the Pearson ’s correlation coefficient |ρ(i , j)| exceeds a given threshold θ ( θ = 0.99 in our setting ) . We perform the following query , along the lines of the previous section : “ find highly correlated genes with the tumor protein 53 ( p53 ) ” . We select p53 as it is known to be central in tumorigenesis . Results . The output of our algorithm is a clique consisting of 14 genes shown in Figure 5 . A potential explanation of our finding is the pathway depicted in Figure 6 , which shows that the activation of the p53 signaling can be initiated by signals coming from the PI3K/AKT pathway . Both PI3KCA and p53 , BRCA1 , ARID1A , ARID1B , ZNF217 , FGFR1 , KRAS , NCOR1 , PIK3CA , APC , MAP3K13 , STK11 , AKT1 , RB1
Figure 5 : Genes returned by our LocalSearchOQC algorithm when queried with p53 . The induced subgraph is a clique with 14 vertices .
Figure 6 : A tumorigenesis pathway consistent with our findings .
AKT1 that are detected by our method are key players of this pathway . Furthermore , signals from the JUN kinase pathway can also trigger the p53 cascade ; MAP3K13 is a member of this pathway .
One of the results of p53 signaling is apoptosis , a process promoted by RB . The latter can also regulate the stability and the apoptotic function of p53 . Finally , our output includes BRCA1 , which is known to physically associate with p53 and affect its actions [ 33 ] .
7 . CONCLUSIONS
In this work we introduce a novel density measure to extract high quality subgraphs . We show that the proposed density function is included into a more general framework for dense subgraph extraction , which also subsumes other various popular density functions and provides a principled way to derive application specific algorithms and heuristics . We provide theoretical insights both into the general framework and in the proposed function . We design two efficient algorithms to optimize our function : an additive approximation algorithm , as well as a local search heuristic . We test our algorithms on real graphs , showing that the subgraphs outputted by our methods have larger edge and triangle densities , and smaller diameter than the subgraphs extracted by the method that optimizes the popular average degree measure . We also evaluate our methods in tackling a couple of variants of our original problem , ie , finding top k dense subgraphs and finding subgraphs containing a set of pre specified vertices , as well as on real world data mining and bioinformatics applications , such as forming thematic groups and finding highly correlated genes from a microarray dataset .
Our work leaves several open problems , such as the formal hardness characterization of our OQC Problem , the formal analysis of LocalSearchOQC , the design of efficient randomized algorithms , and the derivation of more densities from the general framework with desirable properties for existing applications .
8 . REFERENCES
[ 1 ] J . Abello , M . G . C . Resende , and S . Sudarsky . Massive quasi clique detection . In LATIN , 2002 .
[ 2 ] R . Andersen and K . Chellapilla . Finding dense subgraphs with size bounds . In WAW , 2009 .
[ 3 ] A . Angel , N . Sarkas , N . Koudas , and D . Srivastava . Dense subgraph maintenance under streaming edge weight updates for real time story identification . PVLDB , 5(6 ) , 2012 .
[ 4 ] S . Arora , D . Karger , and M . Karpinski . Polynomial time approximation schemes for dense instances of NP hard problems . In STOC , 1995 .
[ 5 ] Y . Asahiro , R . Hassin , and K . Iwama . Complexity of finding dense subgraphs . Discr . Ap . Math . , 121(1 3 ) , 2002 .
[ 6 ] Y . Asahiro , K . Iwama , H . Tamaki , and T . Tokuyama . Greedily finding a dense subgraph . J . Algorithms , 34(2 ) , 2000 .
[ 7 ] C . Bron and J . Kerbosch . Algorithm 457 : finding all cliques of an undirected graph . CACM , 16(9 ) , 1973 .
[ 8 ] M . Brunato , H . H . Hoos , and R . Battiti . On effectively finding maximal quasi cliques in graphs . In Learning and Intelligent Optimization . 2008 .
[ 9 ] G . Buehrer and K . Chellapilla . A scalable pattern mining approach to web graph compression with communities . In WSDM , 2008 .
[ 10 ] M . Charikar . Greedy approximation algorithms for finding dense components in a graph . In APPROX , 2000 .
[ 11 ] F . R . K . Chung and L . Lu . The average distance in a random graph with given expected degrees . Internet Mathematics , 1(1 ) , 2003 .
[ 12 ] X . Du , et al . Migration motif : a spatial temporal pattern mining approach for financial markets . In KDD , 2009 . [ 13 ] U . Feige . Approximating maximum clique by removing subgraphs . SIAM Journal of Discrete Mathematics , 18(2 ) , 2005 .
[ 14 ] U . Feige , G . Kortsarz , and D . Peleg . The dense k subgraph problem . Algorithmica , 29(3 ) , 2001 .
[ 15 ] U . Feige and M . Langberg . Approximation algorithms for maximization problems arising in graph partitioning . J . Algorithms , 41(2 ) , 2001 .
[ 16 ] E . Fratkin , B . T . Naughton , D . L . Brutlag , and S . Batzoglou .
MotifCut : regulatory motifs finding with maximum density subgraphs . In ISMB , 2006 .
[ 17 ] G . Gallo , M . D . Grigoriadis , and R . E . Tarjan . A fast parametric maximum flow algorithm and applications . Journal of Computing , 18(1 ) , 1989 .
[ 18 ] D . Gibson , R . Kumar , and A . Tomkins . Discovering large dense subgraphs in massive graphs . In VLDB , 2005 .
[ 19 ] A . V . Goldberg . Finding a maximum density subgraph .
Technical report , University of California at Berkeley , 1984 . [ 20 ] J . H˚astad . Clique is hard to approximate within n1−ǫ . Acta
Mathematica , 182(1 ) , 1999 .
[ 21 ] R . Jin , Y . Xiang , N . Ruan , and D . Fuhry . 3 hop : a high compression indexing scheme for reachability query . In SIGMOD , 2009 .
[ 22 ] S . Khot . Ruling out PTAS for graph min bisection , dense k subgraph , and bipartite clique . Journal of Computing , 36(4 ) , 2006 .
[ 23 ] S . Khuller and B . Saha . On Finding Dense Subgraphs . ICALP ,
2009 .
[ 24 ] M . N . Kolountzakis and et al . : Efficient triangle counting in large graphs via degree based vertex partitioning . Internet Mathematics , 8(1 2 ) , 2012 .
[ 25 ] M . A . Langston and et al . A combinatorial approach to the analysis of differential gene expression data : The use of graph algorithms for disease prediction and screening . Methods of Microarray Data Analysis IV . 2005 .
[ 26 ] V . E . Lee , N . Ruan , R . Jin , and C . C . Aggarwal . A survey of algorithms for dense subgraph discovery . Managing and Mining Graph Data . 2010 .
[ 27 ] M . Newman . The structure and function of complex networks .
SIAM review , 45(2):167–256 , 2003 .
[ 28 ] A . Schrijver . Combinatorial Optimization : Polyhedra and
Efficiency ( Algorithms and Combinatorics ) . Springer , 2004 .
[ 29 ] T . Sorlie and et al . Repeated observation of breast tumor subtypes in independent gene expression data sets . PNAS , 100(14 ) , 2003 .
[ 30 ] M . Sozio and A . Gionis . The community search problem and how to plan a successful cocktail party . KDD , 2010 .
[ 31 ] T . Uno . An efficient algorithm for solving pseudo clique enumeration problem . Algorithmica , 56(1 ) , 2010 .
[ 32 ] M . J . van de Vijver and et al . A gene expression signature as a predictor of survival in breast cancer . The New England journal of medicine , 347(25 ) , 2002 .
[ 33 ] R . A . Weinberg . The Biology of Cancer HB . Garland Science ,
2006 .
