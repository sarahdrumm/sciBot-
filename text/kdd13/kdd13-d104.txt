Making Recommendations from Multiple Domains
Wei Chen
Wynne Hsu
Mong Li Lee
School of Computing , National University of Singapore , Singapore
{weichen,whsu,leeml}@compnusedusg
ABSTRACT Given the vast amount of information on the World Wide Web , recommender systems are increasingly being used to help filter irrelevant data and suggest information that would interest users . Traditional systems make recommendations based on a single domain eg , movie or book domain . Recent work has examined the correlations in different domains and designed models that exploit user preferences on a source domain to predict user preferences on a target domain . However , these methods are based on matrix factorization and can only be applied to two dimensional data . Transferring high dimensional data from one domain to another requires decomposing the high dimensional data to binary relations which results in information loss . Furthermore , this decomposition creates a large number of matrices that need to be transferred and combining them in the target domain is non trivial . Separately , researchers have looked into using social network information to improve recommendation . However , this social network information has not been explored in cross domain collaborative filtering . In this work , we propose a generalized cross domain collaborative filtering framework that integrates social network information seamlessly with cross domain data . This is achieved by utilizing tensor factorization with topic based social regularization . This framework is able to transfer high dimensional data without the need for decomposition by finding shared implicit cluster level tensor from multiple domains . Extensive experiments conducted on real world datasets indicate that the proposed framework outperforms stateof art algorithms for item recommendation , user recommendation and tag recommendation .
Categories and Subject Descriptors H33 [ Information Storage and Retrieval ] : Search and RetrievalInformation Filtering
Keywords Recommendation , Social trust , Personalization , Collaborative Filtering
1 .
INTRODUCTION
With the increasing popularity of social media communities , we now have data repositories from various domains such as useritem tag data from social tagging in book and movie domains , and friendship data between users in social networks . The joint analysis of information from various domains and social networks has the potential to improve our understanding of the underlying relationships among users , items and tags and increase user acceptance in recommender systems .
For example , users who like to read romance books generally have similar preferences as users who like to watch romance movies . By learning the characteristics of romance movie lovers from the Movie domain and transferring the learned characteristics to the Book domain , recommender systems can predict users’ preferences more accurately and provide more customized recommendations . Let us consider Tables 1 and 2 which show sample data from the Movie and Book domains respectively . Suppose we want to recom . 1 in Table 2 . Unfortunately , we cannot mend some books to user u find similar users in the Book domain to base the recommendation . 1 is the only user who uses the tag fantasy . However , we on since u can utilize the denser Movie domain dataset to learn the character . 1 . istics of users and make suitable recommendations for u
Recent works [ 1 , 2 ] apply transfer learning methods to utilize data in some auxiliary domain such as Movie domain , and transfer knowledge that are consistent in this domain to a target domain such as Book domain . However , they are limited to transferring only binary relationships , eg user item , in the form of matrices . Shi et al . [ 3 ] use tags as a bridge for cross domain transfer by decomposing the ternary user tag item relation into two binary relations user tag and item tag . However , this decomposition is lossy and may lead to inaccurate recommendations .
For example , the ternary relationship in the Movie domain ( Table 1 ) can be decomposed into 3 binary relationships as shown in Table 3 . Based on the binary User Tag relationship in Table 3(a ) , we see . 1 is similar to u1 and u2 because they all like fantasy items . that u Since u1 and u2 also watch other movies like comedy/action type movie ’Big Daddy’ or ’Iron man’ , the work in [ 3 ] will look for . 1 , namely , ’Good omens’ , comedy/action books to recommend to u ’James Bonds Girls’ and ’Ghost rider’ .
However , if we take a closer look at the ternary relationship in both Table 1 and Table 2 , we realize that the book ‘New moon‘ , . 1 , has been tagged fantasy and romance . Between users read by u u1 and u2 , we observe that u1 watches fantasy , romance and comedy type of movies , while u2 watches fantasy , adventure and action . 1 is more similar to u1 type of movies . Thus , we conclude that u than u2 . Further , from the Movie domain , we realize that users who like fantasy and romance type of movies also like comedy movies . . 1 . Thus , we should recommend comedy books “ Good omens" to u
892 Table 1 : Example Movie domain dataset
Table 3 : Three binary relationships in Movie domain
User u1 u1 u1 u2 u2 u2 u3 u3 u4 u4 u5 u5
Tag fantasy romance comedy fantasy adventure action comedy comedy action action adventure adventure
Item
Twilight Twilight Big Daddy Spider man Spider man Iron Man Big Daddy Little man Iron Man Star war Die hard Braveheart
Table 2 : Example Book domain dataset
User . u 1 . u 2 . u 3 . u 4 . u 5 . u 5 . u 5
Tag fantasy romance comedy action action action adventure
Item
New moon New moon Good omens
James Bonds Girls
Ghost rider
James Bonds Girls
Scorpia
( a ) User Tag Tag
User u1 u1 u1 u2 u2 u2 u3 u4 u5 fantasy romance comedy fantasy adventure action comedy action adventure
( c ) Item Tag
Item
Twilight Twilight
Spider man Spider man Iron Man Star war Big Daddy Little man Die hard Braveheart
Tag fantasy romance fantasy adventure action action comedy comedy adventure adventure
( b ) User Item Item
User u1 u1 u2 u2 u3 u3 u4 u4 u5 u5
Twilight Big Daddy Spider man Iron Man Big Daddy Little man Iron Man Star war Die hard BraveHeart
The above example illustrates the information loss when we decompose ternary relationships to binary relations for cross domain recommendation . This is because users may have different interests for an item , and items may have multiple facets . Although u1 and u2 use same tag fantasy , however , u1 ’s notion of fantasy is related to the romance aspects of the movies while u2 ’s notion of fantasy is on the adventure aspects . Thus , we advocate that recommendation using cross domain data should be carried out without decomposition .
Another major source of information that has yet to be fully utilized is that of social network data . Researchers have proposed to use data from the social network domain to increase user acceptance in recommender systems [ 4 , 5 ] . The assumption is that the social network structure is useful for predicting users’ preferences because users’ interests may be affected by their friends . However , this assumption is not realistic as it implies that if two users , say ui and uj , are friends , then ui will be influenced by uj on all topics/aspects .
. 4 is influenced by u
. 5 in Table 2 . Suppose we know If from some social network website that u . 5 to the same degree on all we assume that u topics/aspects , then we will recommend the book ’Ghost rider’ and . 5 previously . How’Scorpia’ to u . . 5 due to their common interests in 4 may be friends with u ever , u . 4 may not like adventure books . Given action related books , and u the multi facet nature of social trust among users , we advocate that trust is topic specific and model the social relationship based on topics in our framework .
. 4 since they have been tagged by u
. . 5 . 4 is a friend of u
Let us consider users u
. 4 and u
In this paper , we propose a tensor factorization based framework to fuse knowledge from different domains . We design a topic based social trust regularization to integrate social network information with cross domain data . Our contributions are as follows :
• For cross domain data , we construct a shared three dimen sional cluster level tensor as a bridge to uncover the hidden knowledge between the target domain and auxiliary domain . In particular , we extend tensor factorization to the setting of transfer learning .
• For social network information , we construct a shared users’ latent feature space and design a topic based social trust regularization model , which has not been well studied in cross domain recommender systems .
• Experiments on real world datasets demonstrate the effectiveness of using multiple domains and social network for recommendation .
To the best of our knowledge , this is the first study that combines cross domain recommendation and social network in a unified framework .
The rest of this paper is organized as follows . Section 2 gives the problem formulation . Section 3 describes the unified framework . Section 4 presents the experimental results . We discuss related work in Section 5 and conclude in Section 6 .
2 . PROBLEM FORMULATION A tensor is a multidimensional array . An N order tensor A is denoted as A ∈ RI1×···×IN with elements ai1in and dimensions I1,I2 , ··· IN . Let the target domain dataset be a list of tuples <u , t , v> denoting that a user u tags an item v with tag t . We model this target domain dataset as a 3 order tensor Atgt ∈ Utgt×Ttgt× Vtgt , where Utgt is the set of users , Ttgt is the set of tags , and Vtgt is the set of items/resources . Atgt(u , t , v ) has a value of 1 if the tuple <u , t , v> exists , otherwise it has a value of 0 . For example , we can model the tagging activities of users in Table 1 as a 3 order tensor A with dimensions 5 × 5 × 8 . Entry A(1,1,1 ) has a value of 1 since it corresponds to the tuple
893 <u1,’fantasy’,’Twilight’> which is found in Table 1 . On the other hand , the entry A(1,3,1 ) has a value of 0 since its corresponding tuple <u1,comedy , ’Twilight’> does not exist in Table 1 . Similarly , we model the dataset in the auxiliary domain as Aaux ∈ Uaux × Taux × Vaux . Note that our proposed approach can handle the case when Utgt ∩ Uaux = ∅ and/or Vtgt ∩ Vaux = ∅ .
At the same time , suppose the users in the target domain are connected to each other via some social network . We model the user connections as a Utgt × Utgt trust matrix , F = [ fu,w ] where u , w ∈ Utgt and fu,w ∈ [ 0 , 1 ] denotes the degree of social trust that u has on w . A value of 0 implies u does not trust w while a value of 1 suggests that u trusts w completely .
We formulate the recommendation problem as a tensor missing value prediction problem . The goal is to generate a ranked list of users/items/tags based on the predicted value in the tensor . Here , we show how to extract the informative , yet compact cluster level tensor ( knowledge we want to transfer ) from the auxiliary domain along with the mappings of users , items and tags between target and auxiliary domains , and the social trust knowledge in the target domain to enable better prediction results in the target domain . In other words , we want to predict the missing values in Atgt with knowledge from Aaux and the trust matrix F = [ fu,w ] . tgt be the tensor obtained . Based on A∗ Let A∗ to perform the following recommendation tasks . tgt , we can use it
• Tag recommendation . This is to find the top N tags that user u is most likely to use for an item v and can be derived from
[ A∗ tgt]u,t,v
N argmax t∈Ttgt
• Item recommendation . This task recommends the top N items for user u based on the set of tags Tu s/he has used previously . The top N items is determined from
N argmax v∈Vtgt
[ A∗ tgt]u,t,v
. t∈Tu
.
• User recommendation . This task recommends the top N most likely friends for user u as follows :
N argmax u.∈{Utgt−{u}}
( u,t,v)∈Atgt 3 . UNIFIED FRAMEWORK
In this section , we first describe our approach to establish a bridge from the auxiliary domain to the target domain . Then we present our framework to fuse the social network information and the cross domain data to generate recommendations . 3.1 Cluster Level Tensor
The key to a successful knowledge transfer from the auxiliary domain to the target domain lies in extracting the appropriate information from the auxiliary domain and establishing a mapping from the extracted knowledge back to the target domain . Here , the knowledge we want to extract are groupings of users , items , and tags that have similar characteristics . Our proposed method will construct a cluster tensor in the auxiliary domain . Then we will map the users , tags and items in the target domain to the clusters in the auxiliary domain . We first perform a PARAFAC tensor decomposition on the auxiliary tensor Aaux . This decomposition maps users , items and tags into a shared latent feature space . In this shared space , we perform clustering to obtain groups of similar users , items , and tags .
[ A∗ tgt]u.,t,v
ˆU ( 3 ) =
The PARAFAC tensor decomposition [ 6 ] for a tensor A of size
I1 × I2 ··· × IN with an input rank R is :
ˆA ≈ R .
[ ˆU ( 1)]∗j ◦ [ ˆU ( 2)]∗j ◦ ··· [ ˆU ( N )]∗j j=1
R1
RN
F is the square frobenius norm and is defined as ||A||2 where ˆU ( n ) of size In × R for n = 1 , , N and [ ˆU ( i)]∗j denotes the jth column of matrix ˆU ( n ) and ||A − ˆA ||2 fi i1=1 ···fi F is minimized . ||.||2 fi F = iN =1 A(i1 ··· , iN )2 . ◦ is the outer product between vectors . The entry ˆA(i1,··· , iN ) is equal to j=1[ ˆU ( 1)]i1j × [ ˆU ( 2)]i2j ··· × [ ˆU ( N )]iN j . For the Movie dataset in Table 1 , the PARAFAC tensor decomposition factorizes the auxiliary tensor Aaux in the form of the latent feature representation ˆU ( i ) ( 1 ≤ i ≤ 3 ) as follows : [ ˆU ( 1)]∗j ◦ [ ˆU ( 2)]∗j ◦ [ ˆU ( 3)]∗j
Aaux ≈ R=5 .
R j=1 where [ ˆU ( i)]∗j denotes the jth column of matrix ˆU ( i ) , and ˆU ( 1 ) ∈ |Uaux|×5 , ˆU ( 2 ) ∈ R The projection matrices ˆU ( i ) ( 1 ≤ i ≤ 3 ) obtained for the
R
Movie dataset are as follows :
ˆU ( 1 ) =
ˆU ( 2 ) =
0
0
0
0
0 0
0.85
0.53
0.53 0 1 0 1 0 0 0.85 0 0 0 0 0 0 0 0 1
|Taux|×5 , and ˆU ( 3 ) ∈ R ⎛ ⎜⎜⎜⎝ ⎛ ⎜⎜⎜⎝ ⎛ ⎜⎜⎜⎜⎜⎜⎜⎜⎜⎝
0 0 0.71 0.71 0 0.71 0 0 0 0 1 0 1 0 0 0.71 1 0 0
|Vaux|×5 . ⎞ ⎟⎟⎟⎠ ⎞ ⎟⎟⎟⎠ ⎞ ⎟⎟⎟⎟⎟⎟⎟⎟⎟⎠
0 1 0.85 0 0 1 0 0 0 0.52 0 0 0 0 0 0 0.71 0 0 0.71
0 0 0 0 0 0
0.85
0.52
0 0 0
0 0 0
0 0 0
0 0
0 0
0 0
0
0
0
Based on the projection matrices , we apply some existing clustering algorithm to cluster the users , items , and tags . Table 4 shows the clusters obtained . aux
With this , we replace the ids of user , item and tag in the auxiliary dataset with their respective cluster id to obtain a cluster level tensor , denoted as Acluster ∈ RR×R×R . Table 5 shows the clusterlevel tensor obtained for the Movie dataset . The V al column is the normalized count of the duplicate tuples obtained after replacing the ids . We use this tensor to transfer the knowledge from the auxiliary domain ( Movie ) to the target domain ( Book ) . Transferring knowledge from Aaux to Atgt is achieved through a reverse process of summarization in the auxiliary domain . By assuming that there exists implicit correspondence between the user/ tag/item group of the auxiliary domain and those of the target domain . Based on the cluster level tensor and the correspondence of user/tag/item group , we reconstruct the tensor A∗ tgt as follows : ×3 ˆ U ( 2 ) tgt tgt = Acluster A∗
ˆ U ( 1 ) tgt
ˆ U ( 3 ) tgt
×1
×2
( 1 ) aux
894 Table 4 : Clusters for the Movie domain in Table 1
Table 6 : Mapping between Book and Movie domains .
( a ) Users
Cluster ID Cluster { u1 } User G1 { u2 } User G2 { u3 } User G3 { u4 } User G4 User G5 { u5 }
( b ) Tags
Cluster ID
Tag G1 Tag G2 Tag G3 Tag G4 Tag G5
Cluster { fantasy } { romance } { comedy } { adventure }
{ action }
( a ) Users
Cluster ID Weight User G1 User G1 User G3 User G4 User G2
0.2 0.61 1.8 0.46 1.5
User . u 1 . u 2 . u 3 . u 4 . u 5
Cluster ID Item G1 Item G2 Item G3 Item G4 Item G5
( c ) Items
Cluster
{ Twilight }
{ Big Daddy , Little man }
{ Spider man }
{ Iron man , Star war } { Die hard , Braveheart }
Table 5 : Cluster level tensor in Movie domain .
User
User G1 User G1 User G1 User G2 User G2 User G2 User G3 User G4 User G5
Tag
Tag G1 Tag G2 Tag G3 Tag G1 Tag G4 Tag G5 Tag G3 Tag G5 Tag G4
Item
Item G1 Item G1 Item G2 Item G3 Item G3 Item G4 Item G2 Item G4 Item G5
Val 0.5 0.5 0.5 0.5 0.5 0.5 1 1 1 tgt tgt
∈ R
∈ R
|Utgt|×R , ˆU ( 2 )
|Ttgt|×R , and ˆU ( 3 )
∈ where ˆU ( 1 ) |Vtgt|×R are user latent feature matrix , tag latent feature matrix R and item latent feature matrix which we want to learn respectively , and ×n is the n mode product . The n mode product of a tensor A = RI1×···×IN by a matrix U = RJn×In , denoted by A ×n U , is a ( I1 × I2 ···I n−1 × Jn × In+1 ···× IN ) tensor where the entries are given by : tgt
. ( A ×n U )i1i2i3···in−1jnin+1···iN · ujnin ai1i2i3···in−1inin+1···iN
= in
To compute the optimal A∗ find the ˆU ( i ) served tensor Atgt and the reconstructed tensor A∗ mized , that is , tgt for recommendation , we need to tgt ( 1≤i≤3 ) such that the difference between the obtgt is mini
||[Atgt − A∗ tgt]||2 min ··· ˆU
F
ˆU
( 1 ) tgt
( 3 ) tgt
Table 6 shows the correspondence ˆU ( i )
( 2 ) tgt ( 1≤i≤3 ) between the users , items and tags in the Book domain and the user , item and tag clusters in the Movie domain . The W eight column indicates how similar a user/item/tag is to the cluster .
Suppose we want to recommend some books to user u
. 1 in Table 2 . User u1 in the Movie domain forms a cluster User G1 . From . 1 and cluster Table 6 , we observe that the mapping between user u . 1 has similar interests User G1 has a weight of 0.2 , indicating that u as the users in cluster User G1 . Since users in User G1 like com
( b ) Tags Cluster ID Weight
0.3 2.68 0.50 1.47 1.24
Tag G1 Tag G2 Tag G3 Tag G4 Tag G5
( c ) Items
Tag fantasy romance comedy adventure action
Item
New moon Good omens
Scorpia
James Bonds Girls
Ghost rider
Cluster ID Weight Item G1 1.22 Item G2 Item G3 Item G4 Item G4
0.89 1.24 0.76
1 edy movies ’Big Daddy’ , we may infer that user u comedy books and thus recommend the book ’Good Omens’ to u 3.2 Fusing Social Network Information
. 1 may also like . 1 .
Besides cross domain data , another valuable source of information is the social network information . Existing works on social recommendations [ 4][5 ] are all based on the assumption that friends in the social network will have similar interests in all topics and areas . They incorporate such a network based similarity property among users to regulate the latent factor modeling as follows .
N . N . j=1 i=1
N . N . R . i=1 r=1 h =
=
= ff
( 3 )
F ij||[ ˆU ( 1 ) tgt ]i∗ − [ ˆU ( 1 ) R . tgt ]j∗||2
( [ ˆU ( 1 ) tgt ]ir − [ ˆU ( 1 ) tgt ]jr)2
F ij j=1 r=1 tgt ]T∗r(D − F )[ ˆU ( 1 ) [ ˆU ( 1 ) tgt ]T ( D − F ) ˆU ( 1 ) tgt ) tgt ]∗r
= tr([ ˆU ( 1 ) fi where Fij is the similarity between users ui and uj ( defined in terms of either Vector Space Similarity ( VSS ) or Person Correction Coefficient ( PCC ) [ 5] ) , N is the number of users in the target doF ij , main , D is a diagonal matrix whose diagonal elements D ii= and tr(· ) denotes the trace of a matrix . The terms target to minimize tgt ]i∗ ∈ R 1×R and the difference between the latent vectors of [ ˆU ( 1 ) 1×R for all r topics ( 1 ≤ r ≤ R ) with same weight . tgt ]j∗ ∈ R [ ˆU ( 1 ) Here , we want to differentiate user interest based on topics . We define a similarity matrix F ( r ) for each topic r ( 1 ≤ r ≤ R ) , where R is the dimension of user latent feature ˆU ( 1 ) tgt . If users i and j are friends , then we define their similarity on a topic r , denoted j
895 by F ( r ) ij , as follows :
F ( r ) ij = fifi fifi
[ ˆU ( 1 ) k=1[ ˆU ( 1 ) tgt ]ir[ ˆU ( 1 ) tgt ]ik
R tgt ]jr
R k=1[ ˆU ( 1 ) tgt ]jk
Otherwise their similarity F ( r ) ij = 0 .
We introduce the topic based similarity function into the latent factor model and modify Eq ( 3 ) to the following : tgt ]ir − [ ˆU ( 1 ) tgt ]jr||2
F ( r ) ij
||[ ˆU ( 1 ) R .
( [ ˆU ( 1 ) tgt ]ir − [ ˆU ( 1 ) tgt ]jr)2 ff
N . N . j=1
R . r=1
F ( r ) ij i=1
N . N . R . i=1 r=1 h =
=
= j=1 r=1 tgt ]T∗r(D ( r ) − F ( r ))[ ˆU ( 1 ) [ ˆU ( 1 ) tgt ]T ( D ( r ) − F ( r ) ) ˆU ( 1 ) tgt ) tgt ]∗r
= tr([ ˆU ( 1 )
( 4 ) fi
( 5 )
( 6 )
( 7 )
( 8 ) where N is the number of users in the target domain , D ( r ) is a topic based diagonal matrix whose diagonal elements D ( r ) and tr(· ) denotes the trace of a matrix . ii= j
By combining Equations ( 2 ) and ( 4 ) , we obtain the objective
F ( r ) ij , function for minimization : f
||A − A∗
||2
+λ ·fi
=
ˆU ( 1 ) tgt min ··· ˆU ( 3 ) tgt tgt ]T ( D ( r ) − F ( r ) ) ˆU ( 1 ) r=1 tr([ ˆU ( 1 ) tgt ) tgt
R
F
Equation ( 5 ) can be reduced to a non negative tensor factorization problem with regularization [ 7 ] . We derive the multiplicative updating rules for ˆU ( i ) tgt ( 1 ≤ i ≤ 3 ) as follows : ]∗r . [ A(1)ST
[ ˆU ( 1 ) tgt
S(1)ST
( 1)]∗r + λF ( r )[ ˆU ( 1 )
]∗r ]∗r + λD ( r )[ ˆU ( 1 ) tgt
( 1 ) tgt
]∗r
[ ˆU ( 1 ) tgt
]∗r ← [ ˆU ( 1 ) tgt
ˆU ( 2 ) tgt
← ˆU ( 2 ) tgt
ˆU ( 3 ) tgt
← ˆU ( 3 ) tgt
. A(2)ST
( 2 ) S(2)ST
( 2 )
ˆU ( 2 ) tgt
. A(3)ST
( 3 ) S(3)ST
( 3 )
ˆU ( 3 ) tgt aux
×mff=n where A(n ) ( 1 ≤ n ≤ 3 ) is matrix unfolding of tensor A at mode n , S(n ) = [ Acluster tgt ](n ) , and . is the ˆU ( m ) Hadamard product . The matrix unfolding of an N order tensor A = RI1×···×IN along the dimension d are vectors obtained by keeping the index d fixed while varying the other indices and is denoted as A(d ) . The Hadamard product of a matrix U = RI×J by a matrix V = RI×J , denoted as U . V = RI×J where the entries are given by
[ U . V ]ij = [ U ]ij · [ V ]ij where 1 ≤ i ≤ I and 1 ≤ j ≤ J .
These multiplicative update rules have stationary points at local minimum , and will not break the non negativity constraint for the tgt ( 1 ≤ i ≤ 3 ) [ 8 ] . The convergence of the above multimatrix ˆU ( i ) plicative update rules can be proven by using the auxiliary function method similar to the work in [ 8 ] .
Based on the above multiplicative update rules , we design an tgt ( 1 ≤ i ≤ 3 ) which minimize iterative algorithm to obtain ˆU ( i ) the objective function . Algorithm 1 shows the details . We observe
Algorithm 1 FUSE Input :
Output : aux
∈ RR×R×R
List of tuples <users , tags , items> ; λ ; Cluster level tensor Acluster Tensor A∗ tensor Atgt ∈ R number of users , items and tags respectively
1 : Initialization : From the tuple ( users , items tag ) , we construct , where |U|,|V | and |T| are the fl
|U|×|T|×|V | tgt ; fl fl ffi0 ffi0 ffi0
ˆU ( 1 ) tgt
,
ˆU ( 2 ) tgt and
ˆU ( 3 ) tgt to random
2 : Random initialize nonnegative value . for r = 1 to R do Update [ ˆU ( 1 )
3 : for t = 1 to N umIter do 4 : 5 : 6 : 7 : 8 : 9 : A∗ tgt 10 : end for end for Update [ ˆU ( 2 ) Update [ ˆU ( 3 )
≈ Acluster
×1 aux tgt ]t∗r using Equation ( 6 ) . tgt ]t using Equation ( 7 ) . tgt ]t using Equation ( 8 ) .
ˆU ( 1 ) tgt
×2
ˆU ( 2 ) tgt
×3
ˆU ( 3 ) tgt that lines 5 , 7 and 8 are the most time consuming steps . We exploit the sparsity of A(n ) and compute A(n)[S(n)]T in a single scan of nonzero elements of A(n ) . Let N1 denote the number of nonzeros elements in A(i ) . Then the complexity of Algorithm 1 is O(N umIter × ( R × N1 + ( |U||V |+|U||T|+|V ||T| ) × R2 ) . Our experiments show that N umIter is typically less than 15 . Table 7 shows the A∗ tgt obtained using cross domain information with social network . Note that the last 6 tuples are newly . added . Previously , we are unable to recommend any books to u 1 since s/he is the only one who has used the tag ’fantasy’ . How . 1 , comedy , Good Omens , 0.15> associates ever , the new tuple <u . 1 with a the book ’Good Omens’ and the tag ’comedy’ with user u weight of 015 Thus , we can now recommend the comedy book . 5 are friends , ’Good Omens’ to u . 4 since action is their only com’Scorpia’ is not recommended to u mon topic of interest . With the new tuples , we can recommend ’Ghost rider’ to u
. 1 . In addition , although u
. 4 and u
. 4 .
Table 7 : Output tensor A∗ tgt
User . u 1 . u 2 . u 3 . u 4 . u 5 . u 5 . u 5 . u 1 . u 1 . u 2 . u 2 . u 4 . u 5
Tag fantasy romance comedy action action action adventure romance comedy fantasy comedy action fantasy
Item
New moon New moon Good Omens
James Bonds Girls
Ghost rider
James Bonds Girls
Scorpia
New moon Good Omens New moon Good Omens Ghost rider
Scorpia
Val 0.04
1
0.97 0.72 1.17 0.72
1
0.33 0.05 0.11 0.15 0.45 0.20
4 . EXPERIMENTS
In this section , we evaluate the effectiveness of the proposed framework for recommendation . We implemented 3 versions of FUSE for the various recommendation tasks :
896 • FUSE+ utilizes topic based social regularization • FUSE does not utilize topic based social regularization • FUSE− does not utilize social network information . This is achieved by setting λ = 0 for FUSE
We implement our framework in MATLAB and perform the experiments on a 2.33Ghz Intel Core 2 CPU with 4GB RAM , running Windows 7 64 bit . By default , R = 50 and λ = 10 . We use the following data sets in our experiments : • MovieLens dataset1 ( Auxiliary domain ) : This is a publicly available dataset which comprises of two files . The first file contains users’ tags on different movies . The second file contains users’ ratings on different movies on a scale of 1 to 5 , with 1 being bad and 5 being excellent . By joining these two files over user and movie , we obtain the quadruples <user , movie , tag , rating> . We have a total of 24563 quadruples with 2,026 users , 5,088 movies , and 9,078 tags . We pre process these quadruples to generate a subset such that each user , movie and tag occur at least 10 times in the dataset . The resulting dataset has 24,185 tuples with 339 users , 982 movies , and 582 tags .
• LibraryThing dataset2 ( Target domain ) : Librarything is an online book review website . This dataset also comprises of two files . The first file contains users’ tags and ratings on a scale of 1 to 5 , with 1 being bad and 5 being excellent on different books . The second file contains users’ trust statements on different users ( binary value is recorded here to indicate the friendship ) . We have a total of 2,056,487 tuples with 7,279 users , 37,232 books , and 10,559 tags . We preprocess these tuples to generate a subset such that each user , book and tag occur at least 5 times . The resulting dataset has 402,246 tuples with 2,834 users , 2,768 books , 1,012 tags and 7,279 trust statements .
Table 8 summarizes the characteristics of these two datasets .
Table 8 : Characteristics of datasets .
Statistics Users Items Tags Social Relations # of tuples
Movie 339 982 582 N.A 24,185
Books 2,834 2,768 1,012 7,279 402,246
4.1 Experiments on Item Recommendation
We first evaluate the effectiveness of the proposed unified framework for item recommendation . We compare our methods with the following existing methods :
1 . UPCC [ 9 ] . This method uses the Pearson ’s Correlation Coefficient to cluster similar users and recommend items based on these similar users .
2 . IPCC [ 10 ] . This method uses the Pearson ’s Correlation Co efficient to cluster similar items for recommendation .
1http://wwwgrouplensorg/node/73 2http://wwwlibrarythingcom/
3 . TSA [ 11 ] . This method recommends items based on the target domain data only , which is a ternary semantic analysis on users items tags .
4 . RMGM [ 2 ] . This is a state of the art cross domain collaborative filtering algorithm that utilizes the user item networks . Latent factor is set to 50 .
5 . TagCDCF [ 3 ] . This is a state of the art cross domain collaborative filtering algorithm that utilizes the tagging networks by reducing the three dimensional correlations to two 2D correlations . Latent factor is also set to 50 .
We use the Hit Ratio [ 10 ] as the metric to evaluate the effectiveness of the various item recommendation methods . For each user u ∈ U , we randomly choose one item v that has tagged by user previously and withhold the tuples involving u and v [ 10 ] . Then we run the various methods to generate the top N items recommended for this user . If the item v is among the top N recommended items , then we say that a hit has occurred . The hit ratio of a method is given by :
HitRatio =
N umber of hits
|U|
.
−
Figure 1(a ) shows the effect of utilizing cross domain informaconsistion for item recommendation . We observe that FUSE tently outperforms TagCDCF , RMGM , UPCC and IPCC as we vary N from 10 to 100 . In particular , RMGM outperforms UPCC and IPCC , indicating that cross domain transfer of binary relationships ( user rating ) can improve recommendation accuracy . Further , TagCDCF outperforms RMGM demonstrating that tag information is useful in cross domain recommendation . However , since TagCDCF requires the decomposition of ternary relationship into two binary relationships ( user item and item tag ) , there is information loss resulting in reduced accuracy compared to FUSE
−
−
Figure 1(b ) shows the effect of utilizing social trust for item recommendation we vary N from 10 to 100 . We observe that FUSE indicating the benefits of incorconsistently outperforms FUSE porating topic specific social regularization . Further , FUSE+ outperforms FUSE by an average of at least 8 % demonstrating that accurate modeling of topic specific trust relationships leads to more accurate item recommendation .
Figure 1(c ) shows the performance of FUSE+ which combines both cross domain and social trust information against existing recommendation algorithms such as UPCC , IPCC , and TSA . We observe that FUSE+ is a clear winner , indicating that the joint analysis of cross domain information and social network are useful in understanding the users’ interests better and providing better item recommendation compared to TSA which makes use of the social tagging network , and UPCC/IPCC which make use of the rating network only . 4.2 Experiments on Tag Recommendation
For the tag recommendation task , we evaluate our algorithm against two state of the art methods : TSA [ 11 ] and RTF [ 12 ] . For each user u ∈ U , we randomly choose one item v and remove all tuples involving u and v from the dataset [ 12 ] . Then we run the methods to generate the top N tags recommended for this user .
We use the standard recall and precision measures to evaluate the results :
P recision =
N umber of Hits
N
Recall =
N umber of Hits
|Tu,v|
897 0.3
0.25
0.2
0.15
0.1
0.05 o i t a R t i
H
UPCC IPCC RMGM TagCDCF FUSE
TSA FUSEFUSE FUSE+
0.3
0.25
0.2
0.15 o i t a R t i
H
UPCC IPCC TSA FUSE+
0.35
0.3
0.25
0.2
0.15
0.1
0.05 o i t a R t i
H
10
50 Top N
( a ) Effect of cross domain
0.1
10
100
50 Top N
100
0
10
50 Top N
100
( b ) Effect of social trust
( c ) Effect of cross domain and social trust
Figure 1 : Item Recommendation where Tu,v is the set of tags used by user u on item v .
Figures 2(a ) and 2(b ) show the precision and recall of the methods for varying values of N . We see that FUSE+ is able to achieve a higher recall and precision compared to the other three methods . FUSE+ outperforms FUSE by 2.5 % on average in both recall and precision , indicating that topic specific trust regularization can improve tag recommendation compared to traditional trust regularization . Both FUSE+ and FUSE outperform FUSE , indicating the effectiveness of incorporating social trust in tag recommendation . All our methods outperform state of the art TSA demonstrating the effectiveness of using cluster level tensor in transferring knowledge from the Movie domain to Book domain .
− i i n o s c e r P l l a c e R
0.6
0.5
0.4
0.3
0.2
0.1
0.8
0.7
0.6
0.5
0.4
0.3
0.2
0.1
1
1
TSA RTF FUSEFUSE FUSE+
TSA RTF FUSEFUSE FUSE+
10
10
5 Top N
( a ) Precision
5 Top N
( b ) Recall
Figure 2 : Tag recommendation
4.3 Experiments on User Recommendation For user recommendation , we compare our algorithm with TSA [ 11 ] . For each user u ∈ U , we randomly choose one of his/her friend uf and remove uf from u ’s friendship list . Then we run the algorithms to generate the top N users recommended for this user . We use the standard recall measures to evaluate the results :
Recall =
N umber of Hits
|U|
Figure 3 shows the results for varying values of N . We observe that FUSE+ achieves the best performance and outperforms FUSE is very close by 10 % on average , while the performance of FUSE to TSA . This confirms that both topic specific trust and social network information are useful in user recommendation task .
− l l a c e R
0.2
0.15
0.1
0.05
1
TSA FUSEFUSE FUSE+
5 Top N
10
Figure 3 : User recommendation
In order to evaluate the effectiveness of our methods in recommending interesting users , we first determine the similarity of items among the recommended top N users [ 13 ] since users with shared interests are more likely to tag and rate similar items and with similar friends . We compute the item similarity as the cosine similarity of their TF × IDF tag term vector [ 13 ] . fi
Let N Bu be the set of top N users recommended to u . The intraneighborhood similarity is given by the average cosine similarity of all items for the users in N Bu : fi fi w∈N Bu i∈Iu,j∈Iw
|Iu||Iw| w∈N Bu sim(i , j )
IntraSim(N Bu ) = where Iu and Iw are the sets of items tagged by users u and w . Let Randomu be the set of N users randomly chosen from the set of users U − {u} . We can determine the inter neighborhood similarity as follows : fi fi w∈Randomu fi sim(i , j ) i∈Iu,j∈Iw
|Iv||Iw| w∈Randomu
InterSim(Randomu ) =
898 o i t a R t i
H
0.17
0.16
0.15
0.14
0.13
0.12
0.11
0.1
0.09
0.08
FUSE FUSE+
10
20
50 R
( a )
100
150 o i t a R t i
H
0.18
0.16
0.14
0.12
0.1
0.08
0.06
0.04
0.02
0
1
λ=0.5 λ=10 λ=20
0.16
0.15
0.14
0.13
0.12
0.11
0.1 o i t a R t i
H
5
10
15
20
25
0.09
0
0.5
1
Iteration
( b )
Figure 4 : Sensitivity Analysis
FUSE FUSE+
2 lambda
5
10
20
( c ) where Iu and Iw are the sets of items tagged by users u and w respectively .
Table 9 shows the intra similarity and inter similarity of FUSE+ and TSA . We observe that the average intra similarity is generally higher than the average inter similarity for all the two methods . Furthermore , FUSE+ have much higher intra similarity and lower inter similarity as compared to TSA . This indicates that more relevant users are found by FUSE+ and hence lead to more accurate user recommendation .
Table 9 : Intra and inter similarity between FUSE and TSA
Method
TSA FUSE+
Intra similarity 0.15 0.225
Inter similarity 0.09 0.037
4.4 Sensitivity Experiments
We also examine the effect of various parameters on the performance of Algorithm FUSE and FUSE+ for item recommendation . Figure 4(a ) shows the results as we vary the tensor dimension R . We observe that the proposed method FUSE+ consistently outperforms the FUSE . This provides a evidence that the topicbased social recommendation is useful and can be used to improve the recommendation accuracy . We also find that the hit ratio of both FUSE and FUSE+ increase as R increases , but decrease after R = 50 which may be caused by model over fitting when the latent dimensions are large . Thus we set R = 50 .
Figure 4(b ) shows the hit ratio for various values of λ as we vary the number of iterations from 1 to 25 . We observe that when we increase the iteration to be around 10 , there seem to be little improvement for any large iteration . This suggests that a small number of iteration ( such as 10 ) is enough for models . In other words , our algorithms typically converge after 10 iterations .
Figure 4(c ) shows the impact of λ on the recall rate of our algorithms . Recall that the parameter λ control how much the information from social network will dominate the learning process . In the extreme case where λ = 0 , the social network information is not used . As we can see from Figure 4(c ) , adopting a larger λ value can help to avoid the sparsity problem suffered by most MF based CF methods . When we set λ >0 , we can achieve better results . This clearly demonstrates the impact of social network information , that is , adding more social network information can improve the generalization ability of the model . Moreover , Figure 4(c ) also shows that the performance might degrade when λ is too large . In practice , we should choose a moderate value of λ . We observe that the best recall is obtained when λ = 10 indicating that social network information helps to improve item recommendation . 4.5 Scalability
Finally , we show the scalability of Algorithm 1 after mapping it to the MapReduce framework . The expensive operations in the algorithm are the matrix multiplication in the update formulae in Eq ( 6 ) , ( 7 ) . Following the idea of [ 14 ] , we implemented the MapReduce version of Algorithm 1 on our in house cluster , Awan3 . The cluster consists of 72 computing nodes , each of which has one Intel X3430 2.4GHz processor , 8GB of memory , two 500GB SATA hard disks and gigabit ethernet . On each node , we install CentOS 5.5 operating system , Java 160 with a 64 bit server VM , and Hadoop 0236 All the nodes are connected via three high speed switches . We vary the dataset size from 2 million to 10 million by duplicating the users , items and tags in the original datasets and run the experiment by setting the model dimension R to 10 and 20 respectively . Figure 5 shows the results . We observe that the runtime increases linearly with respect to the dataset size for both R = 10 and R = 20 . This shows that our algorithm is scalable with respect to the dataset size .
) s d n o c e s n i ( e m T d e s p a E i l
R=10 R=20
14000
12000
10000
8000
6000
4000
2000
0 2 × 106
4 × 106
6 × 106
8 × 106
10 × 106
Number of tuples
Figure 5 : Scalability
5 . RELATED WORK
Collaborative filtering ( CF ) in recommender systems can be roughly divided into two major categories . Memory based methods aim at finding like minded users to predict the active user ’s preference
3http://awanddnscompnusedusg/ganglia/
899 [ 9][10][15 ] . Model based methods [ 11][12][16 ] model the useritem rating or user item tagging interaction based on the observed rating or tagging . However , in reality , such data is sparse as users tend not to give much rating or tagging information . Data sparsity is a major challenge for CF methods .
Recently , researchers consider using auxiliary data to address the data sparsity problem . One promising approach is the user side knowledge transfer for trust based recommendation [ 4][5][17][18 ] . The other approach is user item side knowledge transfer using related but not aligned cross domain data for collaborative filtering [ 1][2][3 ] .
For the trust based recommendation , two different approaches have been proposed to compute trust : model based [ 4][5][19 ] , and memory based [ 17][18 ] . Model based approaches learn the parameters of a model to determine the trust between users , while memory based approaches typically use exploration and heuristics . The works in [ 4][5 ] propose a matrix factorization with social regularization approach for social recommendation . [ 19 ] develop a joint personal and social latent factor ( PSLF ) model which combines the collaborative filtering and social network modeling approaches .
On the other hand , memory based methods such as [ 17 ] perform a modified breath first search in the trust networks to compute a prediction . They find users with the shortest path from the source user and aggregates their ratings based on the weights ( degree of trust ) between the source user and them . [ 18 ] proposes a random walk method to combine trust based and item based recommendation . All these works assume single trust relationships between users . However , we have shown that trust is topic specific .
For the cross domain collaborative filtering , researchers have tried to utilize knowledge of users’ behavior in a different domain . These methods can be categorized into ( a ) binary relationships knowledge transfer [ 1][2 ] ; and ( b ) ternary relationship knowledge transfer with decomposition [ 3 ] . For binary relationships knowledge transfer , [ 1 ] introduces a coordinate system transfer over multiple domains and transfer framework consisting of multiple data domains . These approaches share user/item latent feature spaces across CF domains and knowledge can be transferred through the shared latent features . [ 2 ] design a probabilistic method transfer for solving adaptive transfer learning problem in CF .
The work in [ 3 ] propose a matrix factorization based method use tags as bridge for cross domain transfer , by reducing the ternary relation to two 2D correlations and use these for regularization . A major difference from our work is that current cross domain recommendation systems can only deal with the transfer binary relationships knowledge such as users items relationship [ 1][2 ] and/or ternary relationship with decomposition [ 3 ] , while our method learns a ternary relation representation directly without information loss . To the best of our knowledge , this is the first work to integrate the cross domain and social trust for personalized recommendation .
6 . CONCLUSIONS
In this work , we have presented a novel collaborative filtering method for integrating social network and cross domain network in a unified framework via latent feature sharing and cluster level tensor sharing . This framework utilizes data from multiple domains and allows the transfer of useful knowledge from auxiliary domain to the target domain . The results of extensive experiments performed on real world datasets show that our unified framework outperforms the state of the art techniques in all the three recommendation tasks . We have also implemented the algorithm on a map reduce infrastructure and have demonstrated its scalability .
7 . REFERENCES [ 1 ] W . Pan , N . N . Liu , E . W . Xiang , and Q . Yang , “ Transfer learning to predict missing ratings via heterogeneous user feedbacks . ” in IJCAI , 2011 , pp . 2318–2323 .
[ 2 ] B . Li , Q . Yang , and X . Xue , “ Transfer learning for collaborative filtering via a rating matrix generative model , ” in ICML , 2009 , pp . 617–624 .
[ 3 ] Y . Shi , M . Larson , and A . Hanjalic , “ Tags as bridges between domains : improving recommendation with tag induced cross domain collaborative filtering , ” in UMAP , 2011 , pp . 305–316 .
[ 4 ] M . Jamali and M . Ester , “ A transitivity aware matrix factorization model for recommendation in social networks . ” in IJCAI , 2011 , pp . 2644–2649 .
[ 5 ] H . Ma , D . Zhou , C . Liu , M . R . Lyu , and I . King ,
“ Recommender systems with social regularization , ” in WSDM , 2011 .
[ 6 ] L . D . Lathauwer , B . D . Moor , and J . Vandewalle , “ A multilinear singular value decomposition , ” SIAM J . Matrix Anal . Appl . , vol . 21 , pp . 1253–1278 , March 2000 .
[ 7 ] Y D Kim and S . Choi , “ Nonnegative tucker decomposition . ” in CVPR .
IEEE Computer Society , 2007 , pp . 1 –8 .
[ 8 ] D . D . Lee and H . S . Seung , “ Algorithms for non negative matrix factorization , ” in NIPS , 2000 , pp . 556–562 .
[ 9 ] P . Resnick , N . Iacovou , M . Sushak , P . Bergstrom , and
J . Riedl , “ Grouplens : An open architecture for collaborative filtering of netnews , ” in CSCWC , 1994 , pp . 175–186 .
[ 10 ] M . Deshpande and G . Karypis , “ Item based top n recommendation algorithms , ” ACM Transactions on Information Systems , vol . 22 , pp . 143–177 , 2004 .
[ 11 ] P . Symeonidis , A . Nanopoulos , and Y . Manolopoulos , “ A unified framework for providing recommendations in social tagging systems based on ternary semantic analysis , ” IEEE TKDE , 2010 .
[ 12 ] S . Rendle , L . Balby Marinho , A . Nanopoulos , and
L . Schmidt Thieme , “ Learning optimal ranking with tensor factorization for tag recommendation , ” in KDD , 2009 , pp . 727–736 .
[ 13 ] C . Wei , W . Hsu , and M . L . Lee , “ A unified framework for recommendations based on quaternary semantic analysis , ” in SIGIR , 2011 , pp . 1023–1032 .
[ 14 ] C . Liu , H c Yang , J . Fan , L W He , and Y M Wang ,
“ Distributed nonnegative matrix factorization for web scale dyadic data analysis on mapreduce , ” ser . WWW , 2010 , pp . 681–690 .
[ 15 ] G R Xue , C . Lin , Q . Yang , W . Xi , H J Zeng , Y . Yu , and
Z . Chen , “ Scalable collaborative filtering using cluster based smoothing , ” in SIGIR , 2005 , pp . 114–121 .
[ 16 ] Y . Koren , “ Factorization meets the neighborhood : a multifaceted collaborative filtering model , ” in KDD , 2008 , pp . 426–434 .
[ 17 ] J . A . Golbeck , “ Computing and applying trust in web based social networks , ” PhD dissertation , 2005 .
[ 18 ] M . Jamali and M . Ester , “ Trustwalker : a random walk model for combining trust based and item based recommendation , ” in KDD , 2009 , pp . 397–406 .
[ 19 ] Y . Shen and R . Jin , “ Learning personal + social latent factor model for social recommendation , ” in KDD , 2012 , pp . 1303–1311 .
900
