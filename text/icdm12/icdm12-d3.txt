2 1 0 2 r a
M 9 1
] I S . s c [
3 v 5 9 7 4
.
1 1 1 1 : v i X r a
IRIE : Scalable and Robust Influence Maximization in Social Networks
Kyomin Jung∗1 , Wooram Heo†1 , and Wei Chen‡2
1Korea Advanced Institute of Science and Technology
2Microsoft Research Asia
Abstract
Influence maximization is the problem of selecting top k seed nodes in a social network to maximize their influence coverage under certain influence diffusion models . In this paper , we propose a novel algorithm IRIE that integrates a new message passing based influence ranking ( IR ) , and influence estimation ( IE ) methods for influence maximization in both the independent cascade ( IC ) model and its extension IC N that incorporates negative opinion propagations . Through extensive experiments , we demonstrate that IRIE matches the influence coverage of other algorithms while scales much better than all other algorithms . Moreover IRIE is more robust and stable than other algorithms both in running time and memory usage for various density of networks and cascade size . It runs up to two orders of magnitude faster than other state of the art algorithms such as PMIA for large networks with tens of millions of nodes and edges , while using only a fraction of memory comparing with PMIA .
1 Introduction
Word of mouth or viral marketing has long been acknowledged as an effective marketing strategy . The increasing popularity of online social networks such as Facebook and Twitter provides opportunities for conducting large scale online viral marketing in these social networks . Two key technology components that would enable such large scale online viral marketing is modeling influence diffusion and influence maximization . In this paper , we focus on the second component , which is the problem of finding a small set of k seed nodes in a social network to maximize their influence spread — the expected total number of activated nodes after the seed nodes are activated , under certain influence diffusion models .
In particular , we study influence maximization under the classic independent cascade ( IC ) model [ 10 ] and its extension IC N model incorporating negative opinions [ 2 ] . IC model is one of the most common information diffusion model which is widely used in economics , epidemiology , sociology , and so on [ 10 ] . Most of existing researches for the influence maximization problem are based on the IC model , assuming dynamics of information diffusion among individuals are independent . Kempe et al . originally proposed the IC model and a greedy approximation algorithm to solve the influence maximization problem under the IC model [ 10 ] . The greedy algorithm proceeds in rounds , and in each round one node with the largest marginal contribution to influence spread is added to the seed set . However , computing influence spread given a seed set is shown to be #P hard [ 3 ] , and thus the greedy algorithm has to use Monte Carlo simulations with a large number of simulation runs to obtain an accurate estimate of influence spread , making it very slow and not scalable . A number of follow up works tackle the problem by designing more efficient and scalable optimizations and heuristics [ 11 , 13 , 8 , 4 , 3 , 8 , 9 ] . Among them PMIA [ 3 ] algorithm has stood out as the most efficient heuristic
∗kyomin@kaist.edu †modesty83@kaistackr ‡weic@microsoft.com
1 so far , which runs three orders of magnitude faster than the optimized greedy algorithm of [ 13 , 4 ] , while maintaining good influence spread in par with the greedy algorithm .
In this paper , we propose a novel scalable influence maximization algorithm IRIE , and demonstrate through extensive simulations that IRIE scales even better than PMIA , with up to two orders of magnitude speedup and significant savings in memory usage , while maintaining the same level or even better influence spread than PMIA . We also demonstrate that while the running time of PMIA is very sensitive to structural properties of the network such as the clustering coefficient and the edge density , and to the cascade size , IRIE is much more stable and robust over them and always shows very fast running time . In the greedy algorithm as well as in PMIA , each round a new seed with the largest marginal influence spread is selected . To select this seed , the greedy algorithm uses Monte Carlo simulations while PMIA uses more efficient local tree based heuristics to estimate marginal influence spread of every possible candidate . This is especially slow for the first round where the influence spread of every node needs to be estimated . Therefore , instead of estimating influence spread for each node at each round , we propose a novel global influence ranking method IR derived from a belief propagation approach , which uses a small number of iterations to generate a global influence ranking of the nodes and then select the highest ranked node as the seed . However , the influence ranking is only good for selecting one seed . If we use the ranking to directly select k top ranked nodes as k seeds , their influence spread may overlap with one another and not result in the best overall influence spread . To overcome this shortcoming , we integrate IR with a simple influence estimation ( IE ) method , such that after one seed is selected , we estimate additional influence impact of this seed to each node in the network , which is much faster than estimating marginal influence for many seed candidates , and then use the results to adjust next round computation of influence ranking . When combining IR and IE together , we obtain our fast IRIE algorithm . Besides being fast , IRIE has another important advantage , which is its memory efficiency . For example , PMIA needs to store data structures related to the local influence region of every node , and thus incurs a high memory overhead . In constrast , IRIE mainly uses global iterative computations without storing extra data structures , and thus the memory overhead is small .
We conduct extensive experiments using synthetic networks as well as five real world networks with size ranging from 29K to 69M edges , and different IC model parameter settings . We compare IRIE with other state of the art algorithms including the optimized greedy algorithm , PMIA , simulated annealing ( SA ) algorithm proposed in [ 9 ] , and some baseline algorithms including the PageRank . Our results show that ( a ) for influence spread , IRIE matches the greedy algorithm and PMIA while being significantly better than SA and PageRank in a number of tests ; and ( b ) for scalability , IRIE is some orders of magnitude faster than the greedy algorithm and PMIA and is comparable or faster than SA ; and ( c ) for stability IRIE is much more stable and robust over structural properties of the network and the cascade size than PMIA and the greedy algorithm .
Moreover , to show the wide applicability of our IRIE approach , we also adapt IRIE to the IC N model , which considers negative opinions emerging and propagating in networks [ 2 ] . Our simulation results again show that IRIE has comparable influence coverage while scales much better than the MIA N heuristic proposed in [ 2 ] .
Related Work . Domingo and Richardson [ 6 ] are the first to study influence maximization problem in probabilistic settings . Kempe et al . [ 10 ] formulate the problem of finding a subset of influential nodes as a combinatorial optimization problem and show that influence maximization problem is NP hard . They propose a greedy algorithm which guarantees ( 1−1/e ) approximation ratio . However , their algorithm is very slow in practice and not scalable with the network size . In [ 13 ] , [ 8 ] , authors propose lazy foward optimization that significantly speeds up the greedy algorithm , but it still cannot scale to large networks with hundreds of thousands of nodes and edges . A number of heuristic algorithms are also proposed [ 11 , 4 , 3 , 15 , 9 ] for the independent cascade model . SPM/SP1M of [ 11 ] is based on shortest path computation , and SPIN of [ 15 ] is based on Shapley value computation . Both SPM/SP1M and SPIN have been shown to be not scalable [ 3 , 5 ] . Simulated annealing approach is proposed in [ 9 ] , which provides reasonable influence coverage and running time . The best heuristic algorithm so far is believed to be the PMIA algorithm proposed by Chen et al . [ 3 ] , which provides matching influence spread while running at three orders of magnitude faster than the optimized greedy algorithm . PageRank [ 1 ] is a popular ranking algorithm for ranking web pages and
2 other networked entities , and it considers diffusion processes whose corresponding transition matrix must have column sums equal to one . Hence it can not be directly used for the influence spread estimation . Our algorithm IR overcomes this shortcoming , and uses equations more directly designed for the IC model . More importantly , our IRIE algorithm integrates influence ranking with influence estimation together with the greedy approach , overcoming the general issue of ignoring overlapping influence coverages suffered by all pure ranking methods . Our simulation results also demonstrate that IRIE performs much better than PageRank in influence coverage . The IC N model is proposed in [ 2 ] to consider the emergence and propagation of negative opinions due to product or service quality issues . A corresponding MIA N algorithm , an extension of PMIA is proposed for influence maximization under IC N . We show that our IRIE algorithm adapted to IC N also outperforms MIA N in scalability . Recently , Goyal et al . propose a data based approach to social influence maximization [ 7 ] . They define a new propagation probability model called credit distribution model , which reveals how influence flows in the networks based on datasets and propose a novel algorithm for influence maximization for that model . Scalable algorithms for a related model called linear threshold model has also been studied [ 5 ] . It is a future work to see if our IRIE approach could be applied to further speed up scalable algorithms for the linear threshold model .
The rest of the paper is organized as follows . Section 2 describes problem statement and preliminaries . Section 3 provides our IRIE algorithm and its extension for IC N model . Section 4 shows experimental results , and Section 5 contains the conclusion .
2 Model and Problem Setup
2.1 Influence Maximization Problem and IC Model
Influence Maximization problem [ 10 ] is a discrete optimization problem in a social network that chooses an optimal initial seed set of given size to maximize influence under a certain information diffusion model . In this paper , we consider Independent Cascade ( IC ) model as the information diffusion process . We first introduce IC model , then provide a formal definition of Influence Maximization problem under the IC model . Let G = ( V , E ) be a directed graph for a social network and Puv ∈ [ 0 , 1 ] be an edge propagation probability assigned to each edge ( u , v ) ∈ E . Each node represents a user and each edge corresponds to a social relationship between a pair of users . In the IC model , each node has either an active or inactive state and is allowed to change its state from inactive to active , but not the reverse direction . Given a seed set S , the process of IC model is as follows : At step t = 0 , all seed nodes u ∈ S are activated and added to S0 . At each step t > 0 , a node u ∈ St−1 tries to affect its inactive out neighbors v ∈ N out(u ) with probability Puv and all the nodes activated at this step are added to St . This process ends at a step t if |St| = 0 . Note that every activated node u belongs to just one of Si , where i = 0 , 1 , , t . Hence , it has a single chance to activate its neighbors v ∈ N out(u ) at the next step that it is activated . This activation of nodes models the spread of information among people by the word of mouth effect as a result of marketing campaigns . Under the IC model , let us define our influence function σ(S ) as the expected number of activated nodes given a seed set . Formally , Influence Maximization problem is defined as follows : Given a directed social network G = ( V , E ) and Puv for each edge ( u , v ) ∈ E , influence maximization problem is to select a seed set S ⊆ V with |S| = k that maximizes influence σ(S ) under the IC model . In [ 10 ] , it is shown that the exact computation of optimum solution for this problem is NP hard , but the Greedy algorithm achieves ( 1 − 1/e ) approximation by proving the facts that the influence function σ is non negative , monotone , and submodular . A set function f is called monotone if f ( S ) ≤ f ( T ) for all S ⊆ T , and the definition of submodular function is described at Definition 1 . Definition 1 . A set function f : 2V → R is submodular if for every S ⊆ T ⊆ V and v ∈ V , f ( S∪u)−f ( S ) ≥ f ( T ∪ u ) − f ( T ) .
Theorem 1 . [ 10 ] For a non negative , monotone , and submodular influence function σ , let S be a size k set obtained by the greedy hill climbing algorithm in Algorithm 1 . Then S satisfies σ(S ) ≥ ( 1 − 1/e ) · σ(S∗ )
3 where S∗ is an optimum solution .
At each step , Algorithm 1 computes marginal influence of every node u ∈ V \S and then add the maximum one into the seed set S until |S| = K . Although the greedy algorithm guarantees constant approximation solutions and is easy to implement , computing the influence function σ(S ) is proven to be #P hard [ 3 ] . To estimate influence function σ(S ) , Monte Carlo simulation has been used in many previous works [ 10 , 13 , 4 , 8 ] . Although Monte Carlo simulation provides the best accuracy among existing measures of influence function , the Greedy algorithm with Monte Carlo simulation takes days or weeks in large networks with millions of nodes and edges . Many heuristic measures have been used to estimate influence function such as Shortestpath computation [ 11 ] , Shapley value computation [ 15 ] , Effective diffusion values [ 9 ] , Degree discount [ 4 ] , Community based computation [ 17 ] . They show much faster running time than the Monte Carlo simulation , but result in lower accuracy than the Greedy algorithm . Hence , it is essential to design an algorithm that has the best trade off between running time and accuracy . In this paper , we design a scalable , and memory efficient heuristic algorithm balancing running time and accuracy .
Algorithm 1 Greedy(K ) 1 : initialize S = ∅ 2 : for i ← 1 to K do
3 : 4 : 5 : end for 6 : output S select u ← argmaxw∈V \S(σ(S ∪ {w} ) − σ(S ) ) S = S ∪ {u}
2.2 IC N Model
We also provide a generalized version of our algorithm for Independent Cascade model with Negative Opinions ( IC N ) , which has been recently introduced in [ 2 ] to model the emergence and propagation of negative opinions caused by social interactions . In the IC N model , each node has one of three states , neutral , positive , and negative . Initially , every node u ∈ V \ S has neutral state and may change its state during the diffusion process . We say that a node v is activated at time t if its state is neutral at time ( t− 1 ) and becomes either positive or negative at time t . IC N model has a parameter q called quality factor which is a probability that a node is positively activated by a positive in neighbor . Given a seed set S , the IC N model works as follows : Initially at time t = 0 , for each node u ∈ S , u is activated positively with probability q or negatively with probability 1 − q , independently of all other activations . At a step t > 0 , for any neutral node v , let At(v ) ⊆ N in(v ) be the set of in neighbors of v that are activated at step t − 1 and πt(v ) = u1 , u2 , , um be a randomly permuted sequence of nodes ui where ui ∈ At(v ) , i = 1 , 2 , , m . Each node ui ∈ πt(v ) tries to activate v with an independent probability Puiv in the order of πt(v ) . This process ends at time t when there is no activated node at time ( t − 1 ) .
If any node in At−1(v ) succeeds in activating v , v is activated at step t and becomes either positive or negative . The state of v is decided by the following rules : If v is activated by a negative node u , then v becomes negative . If v is activated by a positive node , it becomes positive with probability q , or negative with probability 1− q . Those rules reflect negativity bias phenomenon — negative opinions usually dominate over positive opinions well known in social psychology [ 16 ] .
In the IC N model , the influence function of a seed set S in a social network G with quality factor q is defined as the expected number of positive nodes activated in the graph , and is denoted as σG(S , q ) . In [ 2 ] , Chen et al . show that σG(S , q ) is always monotone , non negative and submodular . Therefore , Algorithm 1 also guaranteeing ( 1− 1/e) approximation of an optimum solution for influence maximization problem under the IC N model .
4
3 Our Algorithm
In this section , we describe our algorithms for influence maximization . As in the greedy algorithm and PMIA , at each round of IRIE , it selects a node u with the largest marginal influence estimate σ(S∪{u})− σ(S ) . For a given seed set S , let σ(u|S ) = σ(S∪{u})−σ(S ) . The Greedy algorithm estimates σ(u|S ) by a Monte Carlo simulation and PMIA generates local tree structures for all u ∈ V inducing slow running time . The novelty of our algorithm lies in that we derive a system of linear equations for {σ(u|S)}u∈V whose solution can be computed fast by an iterative method . Then we use these computed values as our estimates of {σ(u|S)}u∈V .
3.1 Simple Influence Rank We first explain our formula for {σ(u|S)}u∈V when S = ∅ . Let σ(u ) = σ(u|∅ ) . The basic idea of our formula lies in that the influence of a node u is essentially determined by the influences of u ’s neighbors under the IC model . First suppose that graph G = ( V , E ) is a tree graph . For ( v , u ) ∈ E , we define m(u , v ) to be the expected number of activated nodes when S = {u} and ( u , v ) is removed from E . Note that for a tree graph G , m(u , v ) is the expected influence from u excluding the direction toward v . Let ˜σ(u ) and ˜m(u , v ) be our estimates of σ(u ) and m(u , v ) respectively . We compute ˜σ(u ) and ˜m(u , v ) from the following formulas .
˜σ(u ) = 1 +
Puv · ˜m(v , u ) ,
 v∈N out(u ) w∈N out(u),w=v
˜m(u , v ) = 1 +
Puw · ˜m(w , u )
 .
( 1 )
( 2 )
Note that equation ( 2 ) forms a system of |E| linear equations on |E| variables . When G is a tree , ( 2 ) has a unique solution . We prove correctness of ( 1 ) and ( 2 ) by Theorem 2 . The proof of Theorem 2 is described in Appendix A . Theorem 2 . For any tree graph , for each node u , ˜σ(u ) = σ(u ) , and for each edge ( v , u ) ∈ E , ˜m(u , v ) = m(v , u ) .
Even when G is not a tree , we can define the same equations ( 1 ) and ( 2 ) . In this case , the ˜σ(u ) computed from 1 ) and ( 2 ) corresponds to the influence of u when we allow multiple counts of influence from u to each node via different paths . Note that this approach has a similarity with the popular Belief Propagation(BP ) algorithm . As in the BP , one natural way to compute the solution of ( 1 ) and ( 2 ) is using an iterative message passing algorithm .
This iterative algorithm , which we call Influence Propagation ( IP ) , is described in Algorithm 2 .
Algorithm 2 Influence Propagation 1 : for all ( u , v ) ∈ E do
˜m0(u , v ) ← 1
2 : 3 : end for 4 : repeat 5 :
6 : 7 : 8 : t ← t + 1 for all ( v , u ) ∈ E do mt(u , v ) ← 1 + α · ( ˜σ(u ) ← 1 + end for
9 : until ∀(u , v ) ∈ E , ˜mt(u , v ) = ˜mt−1(u , v ) 10 : for all u ∈ V do v∈N out(u ) Puv · ˜mt(v , u )
11 : 12 : end for w∈N out(u),w=v Puw · ˜mt−1(w , u ) )
5 since one iteration of IP takes O(
Although IP computes good estimates of σ(u ) for tree and general graphs , its running time may be slow v∈V din(v ) · dout(v ) ) time where din(v ) and dout(v ) is the in degree and out degree of v respectively . We observe that for most nodes u , m(u , v ) ’s are similar for any v ∈ N in(u ) since the out degree of u is not too small . Based on this observation , by substituting the same variable r(u ) for all the m(u , v ) , v ∈ N in(u ) , we obtain our formulas for the simplified expected influence r(u ) as follows :
 v∈N out(u )
 . r(u ) = 1 +
Puv · r(v )
Note that equation ( 3 ) forms a system of |V | linear equations on |V | variables . Let X = ( r(u))u∈V , and the influence matrix A ∈ R|V |×|V | be Auv = Puv . Let B = ( 1 , 1 , . . . , 1)T ∈ R|V | . Then ( 3 ) becomes
If k→∞ Ak = 0 , the solution of ( 4 ) becomes lim
X = AX + B .
( I − A)X = B . ( I + A + A2 + ··· )(I − A)X = ( I + A + A2 + ··· )B .
∴ X = B + AB + A2B + ···
( 4 )
( 5 )
Note that ( Ak)uv is the summation of the expectation of influence paths so that the diffusion process begins from a single node set {u} and it activates a node v after exactly k number of iterations when we allow loops in the paths . Hence ( Ak · B)u is equal to the expectation of relaxed influence of node u after exactly k number of iterations where relaxed means that we allow multiple counts of influence on some nodes and loops in the paths . Hence , from ( 5 ) , Xu is the expectation of relaxed influence of node i . Note that Xu is an upper bound of σ(u ) for all u ∈ V . Here we assumed that k→∞ Ak = 0 . Note that otherwise there can appear a lim large spreading ( constant fraction of nodes becomes influenced ) even if the diffusion process begins from a single node . It is known that in most real world information diffusion processes , such large spreading rarely happens . Even when there is a large spreading , letting X to be X = B + AB + ··· + AkB for some k is reasonable since it computes the relaxed influence of each node up to k iterations . Recall that Xu computes relaxed influence of node u . Since we should not allow loops in the influence paths or multi counts for the computation of σ(u ) , we introduce a damping factor α ∈ ( 0 , 1 ) in our algorithm as follows .
 v∈N out(u )
 . r(u ) = 1 + α ·
Puv · r(v )
( 3 )
( 6 )
( 7 )
( 8 )
Note that ( 6 ) is equivalent to
X = αAX + B , and when lim k→∞(αA)k = 0 , the solution of ( 6 ) becomes
X = B + αAB + α2A2B + α3A3B + ··· .
For any A ∈ R|V |×|V | , when α is smaller than the inverse of the largest eigenvalue of A ,
Moreover , if there is no large spreading in the given IC model , for all α ∈ ( 0 , 1 ) , those cases ( 8 ) becomes the solution of ( 6 ) . k→∞(αA)k = 0 . lim k→∞(αA)k = 0 . Hence in lim
6 u ∈ V , and r(t)(u ) = 1 + α · v∈N out(u ) Puv · r(t−1)(v )
To compute X , we use an iterative computation obtained from ( 6 ) as follows . Let r(0)(u ) = 1 for all for all u ∈ V and t = 1 , 2 , . . . , . Then by using ( 7 ) recursively , we have
( r(t)(u))u∈V = B + αAB + ( αA)2B + ··· + ( αA)tB . Hence ( r(t)(u))u∈V converges exponentially fast to the solution of ( 6 ) if lim
O( k→∞(αA)k = 0 . Even when there is a large spreading , ( r(k)(u))u∈V , for some constant k are good estimates of ( σ(u))u∈V as explained before . The running time of simple IR becomes significantly faster than IP since one iteration of simple IR takes v∈V dout(v ) ) time . We confirmed by experiments that accuracies of IP and simple IR are almost the same . In Section 5 , we show by extensive experiments that IR runs much faster than the Greedy and PMIA , especially for large or dense networks .
One possible approach for influence maximization using simple IR would be selecting top K seed nodes with the highest r(u ) . We describe this algorithm in Algorithm 3 .
Algorithm 3 Influence Rank(K ) 1 : S ← {} 2 : for all u ∈ V do r(u ) ← 1 for all u ∈ V do r(u ) ← 1 + α · (
3 : 4 : end for 5 : repeat 6 : 7 : 8 : 9 : until the stopping criteria is met 10 : repeat 11 : end for
( r(u ) ) u ← arg max S ← S ∪ {u} V ← V − {u} u∈V
12 : 13 : 14 : until K nodes are selected v∈N out(u ) Puv · r(v ) )
However , simple IR can only compute the influence for individual nodes , and σ(S ) = u∈S σ(u ) in In the next subsection , we propose IRIE as an general due to influence dependency among seed nodes . extension of simple IR to overcome this shortcoming .
3.2 Influence Rank Influence Estimation In this subsection , we describe IRIE , which performs an estimation of {σ(u|S)}u∈V for any given seed set S . Let S be fixed and APS(u ) be the probability that node u becomes activated after the diffusion process , when the seed set is S . Suppose that we can estimate APS(u ) by some algorithm . Many known algorithms including MIA and its extension PMIA , and Monte Carlo simulation can be used for this estimation . We call this part of our algorithm as Influence Estimation ( IE ) . all other nodes . We have the following extension of ( 6 ) so that {r(u)}u∈V estimates {σ(u|S)}u∈V .
Suppose that the probability that a node u becomes activated by S is independent from activations of r(u ) = ( 1 − APS(u ) ) ·
1 + α
 v∈N out(u )
 .
Puv · r(v )
( 9 )
Note that given {APS(u)}u∈V , ( 9 ) is a system of linear equations and is exactly same with ( 6 ) when S = ∅ . The factor ( 1 − APS(u ) ) indicates the probability that a node u is not activated by a seed set S and the remaining terms are the same as ( 6 ) .
7
Let D ∈ R|V |×|V | be a diagonal matrix so that Duu = ( 1 − APS(u) ) . Then for X = ( r(u))u∈V , ( 9 ) becomes X = αDAX + DB . IRIE compute the solution of ( 9 ) by an iterative computation as in the simple k→∞(αDA)k = 0 , the iterative IR . A pseudo code of IRIEis in Algorithm 4 . As in the simple IR , when lim computation of r(u ) converges to the solution of ( 7 ) exponentially fast . As in the simple IR , repeating line 11 of Algorithm 4 for constantly many times computes {r(u)} which is a good estimate of {σ(u|S)}u∈V .
3 : r(u ) ← 1
Algorithm 4 IRIE(K ) 1 : S ← {} 2 : for all u ∈ V do 4 : APS(u ) ← 0 5 : end for 6 : repeat 7 : 8 : 9 : 10 : 11 : 12 : end for
∀u ∈ S , APS(u ) = 1 ∀u ∈ V \ S , estimate APS(u ) repeat for all u ∈ V do r(u ) ← ( 1 − APS(u ) ) · ( 1 + α · ( v∈N out(u ) Puv · r(v) ) )
13 : 14 :
( r(u ) ) until the stopping criteria is met u ← arg max S ← S ∪ {u} V ← V − {u}
15 : 16 : 17 : until K nodes are selected u∈V
Now we explain how we estimate APS(u ) . Given a seed set S , we compute the Maximum Influence Out Aborescence ( MIOA ) [ 3 ] of s for all s ∈ S . MIOA is a tree based approximation of local influence region of an individual s , assuming the influence from a seed node s to other nodes is propagated mainly along a single path which gives the highest activation probability . By generating MIOA structure for all the seed node s ∈ S , we estimate APS(u ) according to following equation . s∈S
APS(u ) =
APs(u ) .
Although the equation for APS(u ) is not the exact activation probability from a seed set S to a node u , simple summation over the activation probability for each seed node has advantages in terms of of running time and memory usage while achieving very high accuracy as shown by experiments in Section 5 . Note that the IE part can be replaced with any other algorithm that estimates APS(u ) , making our IRIE algorithm to be a general framework . Regarding the choice of α , we found by extensive experiments that the accuracy of IRIE is quite similar for broad range of α ∈ [ 0.3 , 0.9 ] for most cases . We suggest a fixed α = 0.7 since the IRIE shows almost highest accuracy when α = 0.7 for most cases of our experiments .
3.3 Algorithm for IC N model
In this subsection , we describe the extension of IRIE to the IC N model , which we call IRIE N . For the IC N model , we generalize a net influence function of a seed set S as σnet(S ) = σP ( S ) − λ · σN ( S ) , where λ ≥ 0 . We propose a system of linear equations that estimates the net influence σnet(S ) of a seed set S for any λ ≥ 0 under the IC N model .
For the IC N model , we define APS(u ) as the probability that a node u has either a positive or a negative opinion after the diffusion process with the seed set S . In the IC N model , note that Puv is the same for
8 the positive opinion activation and the negative opinion activation . Hence , if we merge the two opinions of a node into one activated state , the diffusion process under the IC N model is exactly the same as the IC model with the same {Puv} . So APS(u ) for the IC N model is equal to that for the corresponding IC model . Therefore , {APS(u)}u∈V can be computed by the same algorithm for the corresponding IC model . The basic framework of IRIE N is the same as the IRIE . IRIE N consists of K rounds , and at each round , it selects a node u with the largest marginal net influence σnet(S ∪ {u} ) − σnet(S ) . Let σP ( u|S ) = σP ( S ∪{u})− σP ( S ) and σN ( u|S ) = σN ( S ∪{u})− σN ( S ) . To estimate σnet(S ∪{u})− σnet(S ) , we consider σP ( u|S ) and σN ( u|S ) separately , and obtain formulas among them .
Algorithm 5 IRIE N(K , λ ) 1 : S ← {} 2 : for all u ∈ V do 3 : APS(u ) ← 0 , gP ( u ) ← q , gN ( u ) ← 1 − q , h(u ) ← 1 4 : end for 5 : repeat 6 : 7 :
∀u ∈ S , APS(u ) = 1 ∀u ∈ V \ S , estimate APS(u ) repeat for all u ∈ V do gP ( u ) ← ( 1 − APS(u ) ) · q · ( 1 + α · ( gN ( u ) ← ( 1 − APS(u ) ) · ( (1 − q ) + α · ( h(u ) ← ( 1 − APS(u ) ) · ( 1 + α · ( end for until the stopping criteria is met u ← arg max ( gP ( u ) − λ · gN ( u ) ) S ← S ∪ {u} V ← V − {u}
16 : 17 : 18 : until K nodes are selected u∈V
8 : 9 : 10 :
11 :
12 : 13 : 14 : 15 : v∈N out(u ) Puv · gP ( v) ) ) v∈N out(u ) Puv · ( (1 − q ) · h(v ) + q · gN ( v)) ) ) v∈N out(u ) Puv · h(v) ) )
Let S be fixed . We denote gP ( u ) and gN ( u ) to be our estimates of σP ( u|S ) and σN ( u|S ) respectively . Let h(u ) denote our estimate of marginal negative influence when u is activated by a negative activation trial . We obtain the following formulas for gP ( u ) , gN ( u ) , and h(u ) . gP ( u ) = ( 1 − APS(u ) ) · q · gN ( u ) = ( 1 − APS(u))·
(1 − q ) + α
 v∈N out(u ) h(u ) = ( 1 − APS(u ) ) · v∈N out(u )
Puv · gP ( v )

 , 1 + α Puv ·,(1 − q ) · h(v ) + q · gN ( v)  ,  . 1 + α

Puv · h(v ) v∈N out(u )
( 10 )
( 11 )
( 12 )
In ( 10 ) , gP ( u ) has a factor q which is the probability that u has a positive state when u is chosen as a seed or u is positively activated by one of its neighbors . In ( 11 ) , gN ( u ) computation considers both cases when u becomes a positive state , and u becomes a negative state after a positive neighbor activates u . Equation ( 12 ) has the same form as ( 9 ) since nodes that have negative opinion only negatively activates its neighbors .
9
Table 1 : Summary of Real world Social Networks
Dataset ArXiv
Epinions Slashdot DBLP
LiveJournal
#nodes #edges
5K 76K 77K 655K 4.8M
29K 509K 905K 2M 69M direction undirected directed directed undirected directed
We compute the solution of ( 10 ) , ( 11 ) , and ( 12 ) by a similar iterative computation as in the IRIE . The pseudo code is described in Algorithm 5 . Note that if the corresponding influence matrix A satisfies that k→∞(αDA)k = 0 , the iterative computations of IRIE N also converge exponentially fast to the solution of lim ( 10 ) , ( 11 ) , and ( 12 ) for any q ∈ [ 0 , 1 ] , and {APS(u)}u∈V .
4 Experiments
We conduct extensive experiments on a number of algorithms including IRIE algorithm and other stateof the art algorithms for influence maximization on various real world social networks . Our experiments consider following major issues : scalability , sensitivity to propagation models , influence spreads , running time , and memory efficiency .
4.1 Experimental Setup
411 Datasets
We perform experiments on five real world social networks , whose edge sizes range from 29K to 69M . First , we have two ( undirected ) co authorship network , collected from ArXiv General Relativity [ 12 ] and DBLP Computer Science Biblography Database , denoted by ArXiv and DBLP respectively . Nodes corresponds to users and edges are established by co authorship among users . We also have three ( directed ) friendship networks collected from Epinions.com [ 12 ] , Slashdot.com [ 12 ] , and LiveJournal.com [ 12 ] , denoted by Epinions , Slashdot , and LiveJournal respectively . A node corresponds to a user and a directed edge represents a trust relationship between users . We note that in Epinions and Slashdot , nodes are more densely connected than co aurhorship networks , although the number of nodes for both networks are of moderate size . The five real world social network datasets are summarized in Table 1 . For the scalability test , we use synthetic power law random networks with various sizes generated by PYTHON web Graph Library .
412 Propagation Probability Models
We use two propagation probability models , the Weighted cascade ( WC ) model and the Trivalency ( TR ) model which have been used as standard benchmarks in previous works so that we can compare IRIE with previous works easily .
• Weighted cascade model . Weighted cascade model proposed in [ 10 ] assigns a propagation probability to each edge by Puv = 1/dv where dv is the in degree of v . This model can be used to explain information spreading in social networks where the receivers of information adopts similar amount of information regardless of her indegree . For example , consider the case when everyone reads similar number of tweets per a day in Twitter .
• Trivalency model . Trivalency model proposed in [ 3 ] assigns a randomly selected probability from {0.l , 0.01 , 0.001} to each directed edge . This model represents the case when there several types of personal relations ( three types in this case ) , and the edge propagation probability depends on the type of the relation .
10
( a ) Weighted Cascade
( b ) Trivalency
( c ) Weighted Cascade
( d ) Trivalency
Figure 4.1 : Scalability test for the synthetic dataset
413 Algorithms and Parameter Settings
We compare our algorithms with state of the art algorithms . The list of algorithms and corresponding parameter settings are as follows . ability T Puv along edge ( u , v ) is defined by T Puv = Pvu/
Degree A baseline algorithm selecting K seed nodes with highest degree . PageRank A baseline algorithm selecting K seed nodes with highest ranking according to a diffusion process . In our experiments , we used the following weighted version of PageRank [ 3 ] . The transition probw∈N in(u ) Pwu . The more activation probability along the edge ( u , v ) , the more transition probability of moving from u to v . We set the random jump factor of PageRank as 0.15 as in [ 3 ] .
CELF Greedy algorithm with Cost Effective Lazy Forward(CELF ) optimization [ 13 ] . SAEDV Simulated Annealing with Effective Diffusion Values(SAEDV ) [ 9 ] uses an efficient heuristic measure to estimate influence of a set of nodes , which significantly running time of the algorithm . We do simulations with the proposed parameter settings , as well as our tuned parameters for our datasets . In our tuned parameters , we set initial temperature T0 = 5|V | . The parameters q and T are set as 1000 and where Ci is the number of 2000 respectively as in [ 9 ] . We use the down hill probability to be exp iterations . We present results with better accuracy among the original parameters and our tuned parameters for each dataset . f·Ci√
Tt
PMIA PMIA [ 3 ] restricts the influence estimation for a set of nodes on local shortest paths . The parameter θ of PMIA is set to 1/320 as in [ 3 ] .
IR Our Algorithm 3 with α = 07 IRIE Our Algorithm 4 with α = 07 Another parameter θ for generating MIOA [ 3 ] is set to 1/320 as in
[ 3 ] .
11
Figure 4.2 : Sensitivity of algorithms under various Bivalency models for the Epinions dataset
As the stopping criteria of IR and IRIE , we use the followings . For IR and the first round of IRIE , ie , when S = ∅ , we stop iterative computations for corresponding formulas when for each u ∈ V , difference between current r(u ) and the previous r(u ) is less than 00001 Otherwise iterative computations run 20 rounds . For the subsequent rounds of IRIE , we initialize each r(u ) by the output of the previous round . Since those initial values make the iteration converge much faster , we run the iterations of line 10 12 of Algorithm 4 at most 5 times and apply the same stopping criteria as in the first round .
Algorithms for IC N Model .
CELF N Greedy algorithm with cost effective lazy forward optimization [ 13 ] with the influence function
σG(S , q ) .
MIA N MIA N proposed in [ 2 ] is a variation of PMIA for IC N model . The parameter θ of MIA N is set to 1/160 as in [ 2 ] .
IRIE N Our Algorithm 5 with α = 07 We set the parameter θ for generating MIOA [ 3 ] as 1/160 . The same stopping criteria as in IRIE is used for IRIE N .
To compare the amount of influence spread of above algorithms , we run the Monte Carlo simulation on both IC and IC N models 10,000 times for each seed set and take the average of the influence spreads . Our experimental environment is a server with 2.8GHZ Quad Core Intel i7 930 and 24GB memory .
4.2 Experimental Results
421 Scalability Test for the Synthetic Dataset
Figure 4.1 shows the experimental results on scalability of the algorithms . For Figures 4.1(a ) and 4.1(b ) , we generate synthetic power law random network datasets by increasing the number of nodes |V | = 2K , 4K , 8K , , 256K while fixing the average degree = 10 . For Figures 4.1(c ) and 4.1(d ) , we generate second synthetic power law networks by fixing |V | = 2K and increasing the number of edges |E| = 2K , 4K , , 128K . We set K = 50 , and the figures are plotted in log log scale . In Figures 4.1(a ) and 4.1(b ) , IR and IRIE show efficient running time and scalability . PMIA is also scalable in the number of nodes but about 2 10 times slower than IR and IRIE . In 4.1(c ) and 4.1(d ) , IR and IRIE shows much better running time and scalability over the average degree than PMIA . Hence we find that IR and IRIE show much more robust performance over the edge density than PMIA in terms of scalability .
422 Sensitivity to Propagation Probability Models
We compare IRIE with PMIA in terms of the sensitivity of running time to propagation probability models . In this experiment , we compare running times of IRIE and PMIA on Epinions dataset for various bivalency models described as follows . For each propagation model indexed by i ∈ {1 , 2 , 4 , 8 , 16} , edge propagation
12
( a ) Arxiv WC
( b ) Arxiv TR
( c ) Epinions WC
( d ) Epinions TR
( e ) Slashdot WC
( f ) Slashdot TR
( g ) DBLP WC
( h ) DBLP TR
Figure 4.3 : Influence spreads for IC model
13
Table 2 : Influence spread at 50 seed set for LiveJournal
Algorithm Weighted Cascade Trivalency
IRIE
IR
PMIA
PageRank
Degree
74830.5 75861.2 71566.5 51162.6 52162.3
629694 629484 629512 629892 629498
Table 3 : Influence spread at 50 seed set of SAEDV and IRIE
WC
TR
Dataset ArXiv
Epinions Slashdot Amazon DBLP
SAEDV 669.755 11177.3 14803 487.671 33730
IRIE
724.666 12063 16712.3 824.795 53334.8
SAEDV 185.369 4176.35 10467.7 79.5405 1175.53
IRIE
190.006 4200.22 10490.2 82.041 1304.81 probabilities are randomly assigned from i × {0.01 , 0001} We set the seed size K = 50 . In Figure 4.2 , IRIE shows much faster and more stable running time than PMIA . The running time of IRIE slightly increases as the edge probability increases , while the running time of PMIA increases dramatically around i = 8 , where the spread size becomes large . Especially , IRIE is more than 1000 times faster than PMIA for the ( 0.16 , 0.016) bivalency model . Hence we observe that while the running time of PMIA is quite dependent on the spread size and the propagation model , the running time of IRIE is very stable over them .
423
Influence Spread for the Real World Datasets
We compare influence spread for each algorithms on the five real world datasets . The seed size K is set from 1 to 50 to compare the accuracies of algorithm in various range of seed sizes . Figure 4.3 ( a) (h ) and Table 2 show the experimental results on influence spread . We run the CELF only for Arxiv , and Epinions(for the WC ) since CELF runs too long for other datasets . We did Monte Carlo simulation for LiveJournal only for K=50 since it takes too long time .
In general , CELF performs almost the best influence spread for both the WC and the TR models . However , IRIE shows almost similar performance with CELF in all cases . PMIA also shows high performance but 1 5 % less influence spread than IRIE for all cases except for the Epinions TR . IR shows high performances for the WC models , but not quite good in the TR models . Hence we observe that IE part of IRIE is necessary to achieve robust performance in various steps . The baseline algorithms Degree and PageRank show low Performances for many cases such as Arxiv , Epinions , and DBLP . Unlike the Greedy based approaches , SAEDV computes the seed set for each K independently . Hence we include Table 3 that shows the influence spread comparison of SAEDV with IRIE for K=50 . Table 3 clearly shows that IRIE outperforms SAEDV in terms of influence spread by large margin for most cases . Hence we conclude that IRIE shows very high accuracy and robustness in most environments .
424 Running Time and Memory Usage for the Real World Datasets
We also checked the running time of the algorithms on the real world social networks . Figure 4.4 shows the results . The left and right figures in 4.4 corresponds to the WC model and the TR model respectively . In each figure , datasets are aligned in increasing order of network sizes from left to right . For both the WC and the TR model , IRIE is more than 1000 times faster than the CELF . Also in most cases , IRIE is quite faster than PMIA . Note that the running time of IRIE is increasing as the dataset size increases from Arxiv
14
Figure 4.4 : Running time of algorithms under IC model
Table 4 : Memory usages of IRIE and PMIA
Dataset ArXiv
Epinions Slashdot DBLP
LiveJournal
File size 715KB 18MB 24MB 88MB 2.4GB
WC PMIA 14MB 135MB 280MB 1.1GB 10.1GB
IRIE 8.7MB 35MB 39MB 160MB
3GB
File size 582KB 15MB 19MB 82MB 2GB
TR PMIA IRIE 10MB 8.7MB 143MB 35MB 340MB 40MB 357MB 158MB 16GB
3GB to LiveJournal . However , the running times of PMIA are somewhat unstable , resulting in longer running times even in smaller graph in both the numbers of nodes and edges .
Note that although the numbers of nodes and edges of Epinions and Slashdot are smaller than those of DBLP , the running times of PMIA for Epinions and Slashdot are much larger than for DBLP . One possible explanation is that the running time of PMIA is sensitive to structural properties of the network such as the clustering coefficient ( Epinions and Slashdot are social network dataset which contains many triangles ) and edge density , and the spread size ( note that Epinions TR and Slashdot TR induce larger spread than DBLP TR ) which matches the results of the scalability test and the sensitivity test in Sections 421 and 422 Hence , we conclude that IRIE shows much more stable and faster running time than PMIA in various networks .
Table 4 shows the experimental results on the amount of memory used by algorithms for the WC and the TR model respectively . In the table , file sizes indicate the size of raw text data files , and PMIA and IRIE indicate the amount of memory occupied by corresponding algorithms . For the WC model , IRIE is much more efficient in terms of memory than PMIA for all the datasets . The memory usages of PMIA are 4 20 times larger than the size of raw data file and also 2 7 times larger than that of IRIE . Especially , for the LiveJournal dataset , PMIA requires about 10GB of memory spaces while IRIE requires only 3GB of memory which is close to the size of the raw text file . We observe the similar patterns in memory usage for the TR model . However , the amounts of memory occupied by PMIA are even larger than the WC model while the memory usages of IRIE are almost same with those for the WC model . For the LiveJournal , PMIA requires about 16GB of memory which is an infeasibly large amount of memory .
4.3 Experiments on IC N Model
In this subsection , we show experimental results for the IC N model . Figure 4.5 ( a) (d ) show the influence spread of the algorithms . When λ = 0 , Greedy N and IRIE N shows the best performances , while MIA N
15
( a ) Arxiv WC
( b ) Arxiv TR
( c ) Wiki WC
( d ) Wiki TR
Figure 4.5 : Influence spreads for IC N model with q = 0.9 , λ = 0
Figure 4.6 : Running time of algorithms under IC N model where q = 0.9 , λ = 0
16 shows slightly less performance than IRIE N . Note that for Arxiv TR , IRIE N shows more stable influence spread than MIA N . For the running time described in Figure 4.6 , IRIE N is about 5 50 times faster than MIA N . Hence we conclude that IRIE N is much faster than other algorithms while achieving best influence spread .
5 Conclusion
In this paper , we propose a new scalable and robust algorithm IRIE for influence maximization under the independent cascade ( IC ) model and its extension IC N model . The IRIE algorithm incorporates fast iterative ranking algorithm ( IR ) with a fast influence estimation ( IE ) method to achieve scalability and robustness while maintaining good influence coverage . Comparing with other state of the art influence maximization algorithms , the advantage of IRIE is that it avoids the storage and computation of local data structures , which results in significant savings in both memory usage and running time . Our extensive simulations results on synthetic and real world networks demonstrate that IRIE is the best in influence coverage among all tested heuristics including PMIA , SAEDV , PageRank , degree heuristic , etc . , and it achieves up to two orders of magnitude speed up with only a small fraction of memory usage , especially on relatively dense social networks ( with average degree greater than 10 ) , comparing with other state of the art heuristics .
An additional advantage of IRIE is that its simple iterative computation can be readily ported to a parallel graph computation platform ( eg Google ’s Pregel [ 14 ] ) to further scale up influence maximization , while other heuristics such as PMIA involves more complicated data structures and is relative harder for parallel implementation . A future direction is thus validating and improving the IRIE algorithm on a parallel graph computation platform . Another future direction is to apply the IRIE framework to other influence diffusion models , such as the linear threshold model .
References
[ 1 ] S . Brin and L . Page . The anatomy of a large scale hypertextual web search engine . Computer Networks ,
1998 .
[ 2 ] W . Chen , A . Collins , R . Cummings , T . Ke , Z . Liu , D . Rincon , X . Sun , Y . Wang , W . Wei , and W . Yuan . Influence maximization in social networks when negative opinions may emerge and propagate . In SDM , 2011 .
[ 3 ] W . Chen , C . Wang , and Y . Wang . Scalable influence maximization for prevalent viral marketing in large scale social networks . In KDD , 2010 .
[ 4 ] W . Chen , Y . Wang , , and S . Yang . Efficient influence maximization in social networks . In KDD , 2009 .
[ 5 ] W . Chen , Y . Yuan , and L . Zhang . Scalable influence maximization in social networks under the linear threshold model . In ICDM , 2010 .
[ 6 ] P . Domingos and M . Richardson . Mining the network value of customers . In KDD , 2001 .
[ 7 ] A . Goyal , F . Bonchi , and L . V . S . Lakshmanan . A data based approach to social influence maximization .
In PVLDB , 2011 .
[ 8 ] A . Goyal , W . Lu , and L . V . S . Lakshmanan . Celf++ : optimizing the greedy algorithm for influence maximization in social networks . In WWW(Companion Volume ) , 2011 .
[ 9 ] Q . Jiang , G . Song , G . Cong , Y . Wang , W . Si , and K . Xie . Simulated annealing based influence maxi mization in social networks . In AAAI , 2011 .
17
[ 10 ] D . Kempe , J . Kleinberg , and E . Tardos . Maximizing the spread of influence through a social network .
In KDD , 2003 .
[ 11 ] M . Kimura and K . Saito . Tractable models for information diffusion in social networks . In PKDD , pages 259–271 . LNAI 4213 , 2006 .
[ 12 ] J . Leskovec . http://snapstanfordedu/indexhtml
[ 13 ] J . Leskovec , A . Krause , C . Guestrin , C . Faloutsos , J . VanBriesen , and N . S . Glance . Cost effective outbreak detection in networks . In KDD , 2007 .
[ 14 ] G . Malewicz , M . H . Austern , A . J . C . Bik , J . C . Dehnert , I . Horn , N . Leiser , and G . Czajkowski . Pregel : a system for large scale graph processing . In SIGMOD , 2010 .
[ 15 ] R . Narayanam and Y . Narahari . A shapley value based approach to discover influential nodes in social networks . IEEE Transactions on Automation Science and Engineering , 2010 .
[ 16 ] P . Rozin and E . B . Royzman . Negativity bias , negativity dominance , and contagion . Personality and
Social Psychology Review , 2001 .
[ 17 ] Y . Wang , G . Cong , G . Song , , and K . Xie . Community based greedy algorithm for mining top k influential nodes in mobile social networks . In KDD , 2010 .
18
Appendix
A Proof of Theorem 2
Proof . First , note that Algorithm 2 computes the unique solution of ( 1 ) and ( 2 ) . Let mt(u , v ) be the expected number of activated nodes when S = {u} and u activates other nodes within distance t from u using all out going edges of u except for ( u , v ) . Let ˜mt(u , v ) be the computed values from Algorithm 2 . Then we will prove that ˜mt(u , v ) = mt(u , v ) for all t = 0 , 1 , 2 , . . . by a mathematical induction . When t = 0 , ˜m0(u , v ) = m0(u , v ) = 0 for each edge ( v , u ) ∈ E . Suppose that the statement is true for all t < T . Let t = T , and fix u ∈ V . Let Tu be the tree graph G whose root is u , and for each w ∈ N out(u ) , let Tuw be the subtree of Tu whose root is w . Note that mt−1(w , u ) is the expected influence of {w} to the nodes in Tuw within distance t − 1 from w . ( v , u ) ∈ E ,
Since Tu is a tree graph , by the linearity of expectation and the definition of mt(u , v ) , we have for any m(u , v ) = 1 + w∈N out(u),w=v
Puw · m(w , u )
From the line 7 of Algorithm 2 , for any ( v , u ) ∈ E ,
˜mt(u , v ) = 1 + w∈N out(u),w=v
Puw · ˜mt−1(w , u )
 
 .  .
( 13 )
( 14 )
From the induction hypothesis , ˜mt(w , u ) = mt−1(w , u ) . Hence , from ( 13 ) and ( 14 ) , we have that for any ( v , u ) ∈ E , mt(u , v ) = ˜mt(u , v ) . Therefore we have shown the induction . Note that m(u , v ) = m|V |−1(u , v ) since the longest shortest path of G has length at most |V | − 1 . Hence {mt(u , v)}t converges before t ≤ |V | , and the same holds for { ˜mt(u , v)}t . Since { ˜mt(u , v)} are the converged values { ˜mt(u , v)}t by the line 7 of Algorithm 2 , we have that ˜m(u , v ) = ˜m|V |(u , v ) = m|V |(u , v ) = m(u , v ) for all ( v , u ) ∈ E .
Since G is a tree , from the definition of σ(u ) and the linearity of expectation ,
σ(u ) = 1 +
Here from ( 1 ) , ˜σ(u ) = σ(u ) for all u ∈ V .
Puv · m(v , u ) . v∈N out(u )
19
