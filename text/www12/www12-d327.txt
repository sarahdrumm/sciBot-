Graph Embedding on Spheres and its Application to Visualization of Information Diffusion Data
Kazumi Saito
University of Shizuoka
Shizuoka , Japan k saito@u shizuoka kenacjp
Masahiro Kimura Ryukoku University
Otsu , Japan
Kouzou Ohara
Aoyama Gakuin University
Kanagawa , Japan kimura@rinsryukokuacjp ohara@itaoyamaacjp
Hiroshi Motoda Osaka University
Osaka , Japan motoda@arsankenosaka uacjp
ABSTRACT We address the problem of visualizing structure of undirected graphs that have a value associated with each node into a K dimensional Euclidean space in such a way that 1 ) the length of the point vector in this space is equal to the value assigned to the node and 2 ) nodes that are connected are placed as close as possible to each other in the space and nodes not connected are placed as far apart as possible from each other . The problem is reduced to K dimensional spherical embedding with a proper objective function . The existing spherical embedding method can handle only a bipartite graph and cannot be used for this purpose . The other graph embedding methods , eg , multi dimensional scaling , spring force embedding methods , etc . , cannot handle the value constraint and thus are not applicable , either . We propose a very efficient algorithm based on a power iteration that employs the double centering operations . We apply the method to visualize the information diffusion process over a social network by assigning the node activation time to the node value , and compare the results with the other visualization methods . The results applied to four real world networks indicate that the proposed method can visualize the diffusion dynamics which the other methods cannot and the role of important nodes , eg mediator , more naturally than the other methods .
Categories and Subject Descriptors I26 [ Learning ] : Parameter learning
Keywords graph embedding , visualization , information diffusion
1 .
INTRODUCTION
Complex network is hard to understand . Visualization can help , but in reality it is not self evident whether there exists a good general visualization scheme that satisfies most of our needs . Especially if we want to visualize the dynamics
Copyright is held by the International World Wide Web Conference Committee ( IW3C2 ) . Distribution of these papers is limited to classroom use , and personal use by others . WWW 2012 Companion , April 16–20 , 2012 , Lyon , France . ACM 978 1 4503 1230 1/12/04 . taking place over a network , the only solution seems to use animation over time , which is not what we are aiming at .
We consider the following problem : Visualize the structure of an undirected graph that has a value assigned to each node in a K dimensional Euclidean space in such a way that 1 ) the length of the point vector in this space is equal to the node value and 2 ) nodes that are connected are placed as close as possible to each other in the space and nodes not connected are placed as far apart as possible from each other . The constraint 1 ) is unique to this method and brings more flexibility in visualization . In fact , this enables to visualize a dynamics mentioned in the beginning .
The need for visualization is so high that various graph embedding methods have already been proposed and are widely used . These include multi dimensional scaling [ 15 ] , spectral embedding [ 2 ] , spring force embedding [ 4 ] and crossentropy embedding [ 16 ] . All of them are applicable to undirected graphs . Spherical embedding [ 11 , 3 ] that came a little later is designed to visualize bipartite graphs . Among these five , the first four cannot handle the constraint 1 ) . The last one cannot apply to a general undirected graph . To our knowledge , there is no method that can directly handle our problem . Further , apart from the above problem , those that solve non linear optimization problem by a power iteration , except [ 3 ] , are extremely slow .
We show that the above visualization problem is reduced to spherical embedding that is formulated as a non linear optimization problem which maximizes a certain objective function that involves an operation called “ double centering ” . The problem can be solved by a simple power iteration as is done in the above existing methods , but this is very inefficient . We propose a much more efficient algorithm making effective use of the sparsity of the adjacency matrix , which is true for most complex networks . We verify that the algorithm works as intended by applying it to the visualization of information diffusion process over a large social network by assigning the node activation time to the node value ( detail in Section 42 ) The results obtained by four real world social networks confirm our conjecture . Time evolution of the diffusion process is easily visualized by the proposed method and in this process such nodes that have a role of mediating the diffusion are more easily identifiable than the other existing methods which cannot handle the diffusion dynamics . This paper is organized as follows . We first describe the
WWW 2012 – MSND'12 WorkshopApril 16–20 , 2012 , Lyon , France1137 problem framework of embedding undirected graphs into a low dimensional Euclidean space ( 21 ) , show a simple update method for solving the optimal solution ( 2.1 ) , followed by the proposed efficient update method ( 23 ) Next we briefly compare the proposed method with four existing methods ( 3 ) . We then explain how we apply the method to the visualization of information diffusion ( 4 ) , and report the results ( 5 ) . We conclude the paper by summarizing what has been achieved ( 7 ) .
2 . SPHERICAL GRAPH EMBEDDING
We describe the framework of embedding an undirectded graph G = ( V , E ) without self loops into a K dimensional Euclidean space , where V and E ( ⊂ V × V ) stand for the sets of all the nodes and links , respectively . For the sake of technical convenience , we identify the set of the nodes , V , by a series of positive integers , ie , V = {1 , · · · , m , · · · , M } . Here M is the number of the nodes in V , ie , |V | = M . Then , we can define the M × M adjacency matrix A = {am,n} by setting am,n = 1 if {m , n} ∈ E ; am,n = 0 otherwise . Note taht am,n = an,m and am,m = 0 . We denote the K dimensional embedding position vectors by xm for the node m ∈ V . Then we can construct the K × M matrix consisting of these position vectors , ie , X = ( x1 , · · · , xM ) .
2.1 Problem Formulation
We first state the framework of our embedding problem intuitively : For a given undirectded graph G = ( V , E ) and a set of values assigned to each node , denoted by ( r1 , · · · , rm , · · · , rM ) , we attempt to visualize the graph so that each pair of nodes with similar connection patterns is embedded as a pair of position vectors with similar directions , and each length of the embedded position vectors is set to the above value assigned to the node , ie , kxmk = rm for each m , where kxmk stands for the norm of the vector xm .
In order to more closely explain our embedding problem , we introduce the centering ( Young Householder transformation ) matrix ,
HM = IM −
1 M
1M 1T
M ,
( 1 ) where IM stands for the M × M identity matrix , 1M is an M dimensional vector whose elements are all one , and 1T means the transposition of the vector 1 . Clearly , the mean vector of the resulting position vectors becomes 0 by the operations XHM . Then , we consider the following doublecentered matrix B = {bm,n} that is calculated from the adjacency matrix A .
B = HM AHM .
( 2 )
Note that the mean vectors of both the row and the column vectors of the matrix B become 0 . On the other hand , for position vectors {x1 , · · · , xM } , we can consider the similarity matrix C = {cm,n} , each element of which is defined by the following cosine similarity . cm,n = xT m kxmk xn kxnk
.
( 3 )
As the basic strategy of our graph embedding , we maximize the correlation between the the double centered matrix B and the cosine similarity matrix C by adequately locating each position vector under the constraints kxmk = rm . Namely , we can consider the following objective function with respect to the matrix X constructed from the position vectors .
J(X ) =
M −1
X
M
X m=1 n=m+1 bm,ncm,n +
1 2
M
X m=1
λm(r2 m − xT mxm )
=
M −1
X
M
X m=1 n=m+1 bm,n xT m rm xn rn
+
1 2
M
X m=1
λm(r2 m − xT mxm )
( 4 ) where {λm | m = 1 , · · · , M } correspond to Lagrange multipliers for the constraints , ie , xT m for 1 ≤ m ≤ M . Intuitively , maximizing J(X ) pushes the pairs xm and xn to the same direction if they are connected and pushes them to the opposite direction if they are unconnected , and realizes the intended visualization . mxm = r2
Now , we consider a reparameterization of each position vector xm by ˜xm = xm/rm , and set ˜X = ( ˜x1 , · · · , ˜xM )T . Then , we can equivalently transform our objective function defined in Equation ( 4 ) as follows ,
J( ˜X ) =
M −1
X
M
X m=1 n=m+1 bm,n ˜xT m ˜xn +
1 2
M
X m=1
µm(1 − ˜xT m ˜xm ) , ( 5 ) where µm = λm/r2 m for each m . Thus , maximizing Equation ( 4 ) is implemented by the following two steps : First , we calculate the position vector ˜xm for each node on the unit sphere ( circle ) , so as to maximize Equation ( 5 ) ; Then , we can obtain the final position vectors just by rescaling them with respect to ( r1 , · · · , rM ) , ie , xm = rm ˜xm for each m . Thus we can regard our problem as a shperical graph embedding problem on the unit sphere . Hereafter , we simply denote ˜xm as xm in order to avoid notational complication . Here we should emphasize that in our problem formalization , the directions of the embedded position vectors are determined independently from the values assigned to each node .
2.2 Simple Update Method
Now we consider maximizing J(X ) defined in Equation ( 5 ) by use of a coordinate strategy : We maximize J(X ) with respect to each position vector xm , by fixing the other position vectors . In order to optimally update each position vector xm , we consider the following gradient vector of the objective function J(X ) with respect to xm .
∂J(X ) ∂xm
=
M
X n=1,n6=m bm,nxn − µmxm .
( 6 )
Thus , for the fixed vectors {x1 , · · · xM } \ xm , we obtain the optimal position vector xm which maximizes the objective function J(X ) as follow : xm =
1 kfmk fm ,
( 7 ) where fm =
M
X n=1,n6=m bm,nxn = ( X − xmeT m)Bem .
( 8 )
Here em is an M dimensional unit vector whose m th element is 1 , and the other elements are 0 .
However , this simple iteration method requires the computational complexity of O(M K ) for updating each optimal
WWW 2012 – MSND'12 WorkshopApril 16–20 , 2012 , Lyon , France1138 position vector according to Equation ( 8 ) . In order to make better use of the sparsity of adjacency matrix which is frequently observed in most complex networks , we derive an efficient way of calculating Equation ( 8 ) in the succeeding subsection .
2.3 Efficient Update Method
1 . Initialize position vectors {x1 , · · · , xM } adequately ; and calculate vectors φ and ψ by Equation ( 14 ) ;
2 . For each m ∈ {1 , · · · , M } , calculate fm by Equation ( 15 ) , set vectors ym and ∆xm by Equation ( 16 ) , and update vectors φ , ψ , and xm by Equation ( 17 ) ;
We first focus on the following equivalent formula for cal
3 . If maxm{k∂J(X)/∂xmk} < ǫ , output {x1 , · · · , xM } and culating fm in Equation ( 8 ) . fm = XBem − ( eT mBem)xm .
Here we consider a degree vector defined by d = ( d1 , · · · , dM )T = A1M , and their average ,
D =
1 M
1T
M d =
1 M
1T
M A1M .
( 9 )
( 10 )
( 11 )
Then , from the definition of double centered matrix B given in Equation ( 2 ) , we can calculate Bem as follows .
Bem = ( IM −
M )A(IM −
1 M
1M 1T
M )em
1M 1T
1 M D − dm
M
= Aem +
1M −
1 M d .
( 12 )
By noting that eT obtain eT mBem as follows . mAem = 0 because of no self loops , we eT mBem =
D − 2dm
M
( 13 )
Now we define the average position vector φ and the degree weighted average position vector ψ by
φ =
1 M
X1M , ψ =
1 M
Xd ,
( 14 ) respectively . Then by substituting Equations ( 12 ) and ( 13 ) into Equation ( 9 ) , we can obtain the following . fm = X n∈Γ(m ) xn + ( D − dm)φ − ψ −
D − 2dm
M xm ,
( 15 ) where , Γ(m ) denotes a set of neighbour nodes of v , ie , those nodes that are connected to v . Thus by noting that both φ and ψ are K dimensional vectors , and the average number of elements in Γ(m ) is D , ie , D =< |Γ(m)| > , we can see that the average computational complexity of calculating fm is reduced to O(DK ) from O(M K ) in average . As mentioned earlier , we can naturally assume M ≫ D for a wide variety of complex networks .
On the other hand , after updating the position vector xm , we need to update vectors φ and ψ according to this change as well . For this purpose , after setting the updated vector ym and the modification vector ∆xm by , ym =
1 kfmk fm , ∆xm = ym − xm ,
( 16 ) we update the vectors φ , ψ , and xm as follows .
φ = φ +
1 M
∆xm , ψ = ψ + dm M
∆xm , xm = ym .
( 17 )
Clearly , these updates can be done within the computational complexity of O(K ) . Thus , we can see that the computational complexity of updating xm is equal to O(DK ) .
Below we summarize our spherical embedding algorithm proposed in this paper . terminate ;
4 . Return to the step 2 .
Our proposed algorithm employs a power iteration as the basic framework , just like the HITS algorithm [ 8 ] , which utilizes A and AT , does . However , the main differences are use of the double centering operation by HM , and the constraints described by kxmk = rm . Here note that the double centering operation is also employed in the standard multidimensional scaling method [ 15 ] .
Now we briefly mention the computational complexity of our algorithm . Clearly , the main computational complexity of one iteration comes from the multiplication by the matrix A with position vectors xm , which is the most computationally intensive part and is proportional to the number of links in the undirected graph . Thus , the proposed algorithm is expected to work much faster especially for a sparse undirected graph . In fact , it has been well known that the PageRank algorithm [ 1 ] based on a power iteration works very fast for a large and sparse network [ 10 ] even without parallel distributed processing .
3 . ALGORITHMIC COMPARISON WITH
CONVENTIONAL METHODS
We compare the proposed method from algorithmic aspect with the four well known embedding methods : multidimensional scaling [ 15 ] , spectral embedding [ 2 ] , spring force embedding [ 4 ] , and cross entropy embedding [ 16 ] . Here the former two perform a power iteration with respect to either a double centered distance matrix or a graph Laplacian matrix which is calculated from a given graph , while the latter two repeatedly move each position vector by using the Newton method in a framework of nonlinear optimization . Here note that the basic strategy of our method is a combination of the above basic strategy , ie , our method performs a power iteration with respect to a double centered adjacency matrix while repeatedly moving each position vector . However , recall that these existing methods cannot directly utilize the values associated with nodes . In what follows , we compare our method more closely with these existing methods .
Multi dimensional scaling method [ 15 ] first calculates the distance matrix G , and performs the double centering operation to the distance matrix . Mathematically it is formulated as minimizing Equation ( 18 ) .
M(X ) =
1 2
K
X k=1 zT k ( HM GHM )zk ,
( 18 ) where zk = ( x1,k , · · · , xM,k)T , and {z1 , · · · , zK } need to be k zk′ = 0 if k 6= k′ . orthonormal vectors , ie , zT Spectral embedding method [ 2 ] tries to directly minimize k zk = 1 and zT distances between position vectors of connecting nodes . Math
WWW 2012 – MSND'12 WorkshopApril 16–20 , 2012 , Lyon , France1139 ematically it is formulated as minimizing Equation ( 19 ) .
S(X ) =
1 2
K
M
N
X
X
X k=1 m=1 n=1 am,n(zk,m − zk,n)2
=
K
X k=1 zT k ( D − A)zk ,
( 19 ) where D is a diagonal matrix each element of which is the degree of node ( number of links ) . Note that ( D − A ) is referred to as a graph Laplacian matrix . Again , we set zk = ( x1,k , · · · , xM,k)T , and {z1 , · · · , zK } need to be orthonormal vectors , which excludes the trivial vector expressed as z ∝ 1M .
Spring force embedding method [ 4 ] assumes that there is a hypothetical spring between each connected node pair and locates nodes such that the distance of each node pair is closest to its minimum path length at equilibrium . Mathematically it is formulated as minimizing Equation ( 20 ) .
K(X ) =
M −1
X
M
X m=1 n=m+1
αm,n(gm,n − kxm − xnk)2 ,
( 20 ) where αm,n is a spring constant which is normally set to 1/(2g2 u,v ) .
Cross entropy embedding method [ 16 ] first defines a similarity ρ(xm , xn ) between the embedding positions xm and xn and uses the corresponding element am,n of the adjacency matrix as a measure of distance between the node pair , and tries to minimize the total cross entropy between these two . Mathematically it is formulated as minimizing Equation ( 21 ) .
C(X ) = −
M −1
X
M
X m=1 n=m+1
( am,n log ρ(xm , xn )
+(1 − am,n ) log(1 − ρ(xu , xv) ) ) .
( 21 )
Here , note that we used the function ρ(xu , xv ) = exp(− 1 xv||2 ) in our experiments .
2 ||xu−
The spectral embedding method is expected to work comparable to our method because these methods perform a power iteration on a sparse adjacency matrix . The multidimensional scaling method requires a substantially large computation time because it needs to perform a power iteration on a full distance matrix . Spring force embedding method and Cross entropy embedding method both of which repeatedly move each position vector by using the Newton method , require an extremely large computation time before the final results are obtained .
4 . APPLICATION TO VISUALIZATION OF
INFORMATION DIFFUSION DATA
Our primary application of the proposed method is visualization of information diffusion process over a social network . We start with a brief description of the diffusion models we used and then describe how we visualize the diffusion data .
4.1 Information diffusion models
We focus on the IC ( Independent Cascade ) and the LT ( Linear Threshold ) models [ 5 ] as the representative models of information diffusion , and utilize their extended version that can cope with asynchronous time activation , AsIC
( Asynchronous IC ) and AsLT ( Asynchronous LT ) models [ 13 , 14 ] in our experiments .
411 Asynchronous Independent Cascade Model
We first recall the definition of the IC model according to the work of [ 5 ] , and then introduce the AsIC model . In the IC model , we specify a real value pm,n with 0 < pm,n < 1 for each link ( m , n ) in advance . Here pm,n is referred to as the diffusion probability through link ( m , n ) . The diffusion process unfolds in discrete time steps t ≥ 0 , and proceeds from a given initial active set S in the following way . When a node m becomes active at time step t , it is given a single chance to activate each currently inactive child node n , and succeeds with probability pm,n . If m succeeds , then n will become active at time step t + 1 . If multiple parent nodes of n become active at time step t , then their activation attempts are sequenced in an arbitrary order , but all performed at time step t . Whether or not m succeeds , it cannot make any further attempts to activate n in subsequent rounds . The process terminates if no more activations are possible .
In the AsIC model , we specify real values rm,n with rm,n > 0 in advance for each link ( m , n ) ∈ E in addition to pm,n , where rm,n is referred to as the time delay parameter through link ( m , n ) . The diffusion process unfolds in continuous time t , and proceeds from a given initial active set S in the following way . Suppose that a node m becomes active at time t . Then , m is given a single chance to activate each currently inactive child node n . We choose a delay time δ from the exponential distribution1 with parameter rm,n . If n has not been activated before time t+δ , then m attempts to activate n , and succeeds with probability pm,n . If m succeeds , then n will become active at time t + δ . Said differently , whichever parent m that succeeds in satisfying the activation condition and for which the activation time is the earliest considering the time delay associated with each link can actually activate the node . Under the continuous time framework , it is unlikely that n is activated simultaneously by its multiple parent nodes exactly at time t + δ . So we ignore this possibility . Whether or not m succeeds , it cannot make any further attempts to activate n in subsequent rounds . The process terminates if no more activations are possible .
412 Asynchronous Linear Threshold Model
Same as the above , we first recall the LT model . In this model , for every node n ∈ V , we specify a weight ( qm,n > 0 ) from its parent node m in advance such that
X qm,n ≤ 1 . m∈B(n )
The diffusion process from a given initial active set S proceeds according to the following randomized rule . First , for any node n ∈ V , a threshold θn is chosen uniformly at random from the interval [ 0 , 1 ] . At time step t , an inactive node n is influenced by each of its active parent nodes , m , according to weight qm,n . If the total weight from active parent nodes of n is no less than θn , that is ,
X qm,n ≥ θn , m∈Bt(n )
1Similar formulation can be derived for other distributions such as power law and Weibull .
WWW 2012 – MSND'12 WorkshopApril 16–20 , 2012 , Lyon , France1140 then n will become active at time step t + 1 . Here , Bt(n ) stands for the set of all the parent nodes of n that are active at time step t . The process terminates if no more activations are possible .
The AsLT model is defined in a similar way to the AsIC . In the AsLT model , in addition to the weight set {qm,n} , we specify real values rm,n with rm,n > 0 in advance for each link ( m , n ) . Same as for AsIC , we refer to rm,n as the time delay parameter through link ( m , n ) . The diffusion process unfolds in continuous time t , and proceeds from a given initial active set S in the following way . Each active parent m of the node n exerts its effect on n with the time delay δ drawn from the exponential distribution with the delay parameter rm,n . Suppose that the accumulated weight from the active parents of node n has become no less than θn at time t for the first time . Then , the node n becomes active at t without any delay and exerts its effect on its child with a delay associated with its link . This process is repeated until no more activations are possible .
4.2 Visualization Method
Let R = {(m , tm ) , ( n , tn ) , · · · } be an information diffusion result over an undirected G = ( V , E ) , where ( n , tn ) is a pair of an activated node and its activation time . We set the initial activation time to 0 . From the set of nodes that appear in R , ie , V ′ = {n | ( n , tn ) ∈ R} , we obtain an induced subgraph G′ = ( V ′ , E′ ) . Here , we regard tn as n ’s associated value for n ∈ V ′ . If m ∈ V ′ , n ∈ V ′ , ( m , n ) ∈ E′ , and tm < tn , the direction of information diffusion is limited to from node m to n . Namely , a directed acyclic graph ( DAG ) is constructed from the information diffusion result R . Although our embedding method is designed for undirected graph , we can interpret that the diffusion of information takes over from the origin to the periphery by setting the radius of node n to tn . The major reason why we restricted the graph we handle to undirected graph is to maintain clear meaning of the objective function we are trying to maximize . Alternatively , we can start with a directed graph and obtain a directed induced subgraph . Then we reinterpret it as an undirected subgraph , and apply the above discussion .
5 . EXPERIMENTAL EVALUATION
5.1 Datasets
We generated diffusion results using both the AsIC and the AsLT models for four large real social networks . They are all bidirectionally connected networks . The first one is a trackback network of Japanese blogs used in [ 7 ] . It has 12 , 047 nodes and 79 , 920 directed links ( the blog network ) . The second one is a coauthorship network used in [ 12 ] , which has 12 , 357 nodes and 38 , 896 directed links ( the coauthorship network ) . The third one is a network derived from the Enron Email Dataset [ 9 ] by extracting the senders and the recipients and linking those that had bidirectional communications . It has 4 , 254 nodes and 44 , 314 directed links ( the Enron network ) . The fourth one is a network of people that was derived from the “ list of people ” within Japanese Wikipedia , used in [ 6 ] , and has 9 , 481 nodes and 245 , 044 directed links ( the Wikipedia network ) .
5.2 Experimental Results
We visualized the information diffusion result in 2 dimensional
Euclidean space , ie , K = 2 , and compared the results of the proposed method with the other four existing methods . The initial active node was chosen to be the most influential node for each diffusion model . The location of this node is the origin of the visualization plane for the proposed method , but the location of the same node for the other methods is not controllable and determined by the algorithm of each method . The proposed method has the time information . A family of blue dotted circles of different radii centered at the origin indicates the activation times , where the radius t of each blue dotted circle corresponds to the actual time t . For all the visualization methods , red points and green lines are used to display the activated nodes and their links , respectively . It is noted that we are visualizing from the observed data , meaning that we don’t know the parent which activated its child if there is more than one active parent . Thus , all the links between the activate parents and their active children are displayed .
Due to the space limitation , we only show parts of the results . Figure 1 shows the visualization result of information diffusion for the AsIC model over the Blog network using the proposed method , where the thick black circle indicate the initial active node . It is clear that the proposed method have the following properties :
1 . Given two active nodes , we can easily see which one became active earlier .
2 . Given an active node , we can easily identify its parents that could activate it ( but we cannot identify it if there are multiple active parents by the reason mentioned above ) .
20
15
10
5
0
5
10
15
20
20
15
10
5
0
5
10
15
20
Figure 1 : Visualization result of proposed method for the Blog network ( AsIC model ) .
We can observe that in general super mediators , ie , those nodes that play an important role in passing the information to other nodes , are easily identified by the proposed method . In Figure 1 , the thick black diamond node can naturally be interpreted as a super mediator . The same node is also displayed as thick black diamonds in Figures 2 , 3 , 4 and 5 . We notice that the multi dimensional scaling and the spring force embedding methods are also good to find supermediators , while it is more difficult to find them for the spectral embedding and the cross entropy embedding methods . Note that the multi dimensional scaling and the spring force
WWW 2012 – MSND'12 WorkshopApril 16–20 , 2012 , Lyon , France1141 0.08
0.06
0.04
0.02
0
0.02
0.04
0.06
0.08
0.06
0.04
0.02
0
0.02
0.04
0.06
0.08
Figure 2 : Visualization result of multi dimensional scaling for the Blog network ( AsIC model ) .
0.7
0.6
0.5
0.4
0.3
0.2
0.1
0
0.1
0.6
0.5
0.4
0.3
0.2
0.1
0
0.1
0.2
Figure 3 : Visualization result of spectral embedding for the Blog network ( AsIC model ) . embedding methods are based on graph distance matrix G , and the spectral embedding and the cross entropy embedding methods are based on graph adjacency matrix A . For the G based methods , the distance from the initial active node ( thick black circle ) to an active node v in the visualization plane can be correlated with the time if the node v is an active node . Thus , we can consider that such methods have a possibility of finding super mediators . However , we see from Figures 1 to 5 that the proposed method better identifies a super mediator than the multi dimensional scaling and the spring force embedding methods .
Figure 6 shows the visualization result of information diffusion for the AsLT model over the Blog network . Compared with the visualization result for the AsIC model , we observe that links are mostly outward directed and only small links are in circumferential direction . We consider that this observation comes from a characteristic difference between the AsIC and AsLT models . Especially , in case of the AsLT model , when a parent node becomes active , only its low degree child nodes are likely to be activated . Our proposed method will locate these child nodes to similar directions be
6
4
2
0
2
4
6
8
8
6
4
2
0
2
4
6
Figure 4 : Visualization result of spring force embedding for the Blog network ( AsIC model ) .
10
8
6
4
2
0
2
4
6
8
10
8
6
4
2
0
2
4
6
8
Figure 5 : Visualization result of cross entropy embedding for the Blog network ( AsIC model ) . cause their connectivity patterns are necessarily close . We consider that this fact partly explains the difference between the visualization results of Figure 1 and 6 .
Figures 7 and 8 respectively show the visualization results of information diffusion for the AsIC and AsLT models over the Wikipedia network . We can also see from these figures that the proposed method is promising for identifying influential super mediators and exploring the characteristic differences between the two information diffusion models . As mentioned earlier , the visualization results over the coauthorship and Enron networks are omitted due to the space limitation , but it is confirmed that we obtained similar results .
Last but not least , we evaluated our proposed method only in the case of two dimensional embedding for our visualization purpose , but this does not mean that it is limited to two dimensional embedding . It is quite easy to extend it to the general K dimension embedding . We plan to evaluate our method as a powerful technique for both dimensional reduction and clustering as a future work .
WWW 2012 – MSND'12 WorkshopApril 16–20 , 2012 , Lyon , France1142 15
10
5
0
5
10
15
15
10
5
0
5
10
15
15
10
5
0
5
10
15
15
10
5
0
5
10
15
Figure 6 : Visualization result of proposed method for the Blog network ( AsLT model ) .
Figure 8 : Visualization result of proposed method for the Wikipedia network ( AsLT model ) .
25
20
15
10
5
0
5
10
15
20
25
25
20
15
10
5
0
5
10
15
20
25
Figure 7 : Visualization result of proposed method for the Wikipedia network ( AsIC model ) .
6 . DISCUSSION
One of the unique features of the proposed method is that we deal with the graph that has a value to each node , and the visualization takes account of the node value . The application to information diffusion involves time evolution and assigning the time the node gets activated to the node value works nicely to allow the diffusion starts at the origin always . On the contrary , all the other existing methods , when applied to the same visualization problem , generates a graph where the starting point of the diffusion is determined by the algorithm . Thus , if we want to visualize multiple results of diffusion sequences each starting from the same node , the starting node in each visualization is placed in a different location . Thus , the above feature is one of the advantages of the proposed method .
7 . CONCLUSION
We addressed the problem of visualizing structure of a undirected graph that has a value associated with each node into a K dimensional Euclidean space in such a way that 1 ) the length of the point vector in this space is equal to the value assigned to the node and 2 ) nodes that are connected are placed as close as possible to each other in the space and nodes not connected are placed as far apart as possible from each other . We showed that this visualization problem is reduced to spherical embedding that is formulated as a non linear optimization problem for which a certain objective function to be maximized is defined . We proposed a very efficient algorithm based on a power iteration that employs double centering operations . To validate the effectiveness of the proposed method , we applied it to visualize the information diffusion process over a social network by assigning the node activation time to the node value . We used the result of information diffusion obtained by two different diffusion models ( AsIC and AsLT models ) for four real world networks , and compared the proposed method with the multi dimensional scaling , the spring force embedding , the spectral embedding and the cross entropy embedding methods . We first confirmed that the proposed method can visualize time evolution of the diffusion process in an more intuitively understandable manner . We also confirmed that the proposed method have the following properties : 1 ) given two active nodes , we can easily see which one became active earlier , and 2 ) given an active node , we can easily identify its parents that could activate it ( note that we are visualizing from the observed diffusion data , meaning that we don’t know the parent which activated its child if there is more than one active parent . ) Furthermore , we experimentally showed that the proposed method can better identify supermediators , ie , those nodes that play an important role in passing the information to other nodes , than the other four methods .
8 . ACKNOWLEDGMENTS
This work was partly supported by Asian Office of Aerospace
Research and Development , Air Force Office of Scientific Research under Grant No . AOARD 11 4111 , JSPS Grant inAid for Scientific Research ( C ) ( No . 23500312 ) , and Toyota Central R&D Labs . , Inc . ( No . E11114 ) .
WWW 2012 – MSND'12 WorkshopApril 16–20 , 2012 , Lyon , France1143 9 . REFERENCES [ 1 ] S . Brin and LPage The anatomy of a large scale hypertextual web search engine . Computer Networks and ISDN Systems , 30:107–117 , 1998 .
[ 2 ] F . R . K . Chung . Spectral Graph Theory . American
Mathematical Society , New York , 1997 .
[ 3 ] T . Fushimi , Y . Kubota , K . Saito , M . Kimura ,
K . Ohara , and H . Motoda . Speeding up bipartite graph visualization method . In Proceedings of the 24th Australasian Joint Conference on Artificial Intelligence , pages 697–706 . LNAI 7106 , 2011 .
[ 4 ] K . Kamada and S . Kawai . An algorithm for drawing general undirected graph . Information Processing Letters , 31:7–15 , 1989 .
[ 5 ] D . Kempe , J . Kleinberg , and E . Tardos . Maximizing the spread of influence through a social network . In Proceedings of the 9th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining ( KDD 2003 ) , pages 137–146 , 2003 .
[ 6 ] M . Kimura , K . Saito , and H . Motoda . Minimizing the spread of contamination by blocking links in a network . In Proceedings of the 23rd AAAI Conference on Artificial Intelligence ( AAAI 08 ) , pages 1175–1180 , 2008 .
[ 7 ] M . Kimura , K . Saito , and H . Motoda . Blocking links to minimize contamination spread in a social network . ACM Transactions on Knowledge Discovery from Data , 3:9:1–9:23 , 2009 .
[ 8 ] J . Kleinberg . Authoritative sources in a hyperlinked environment . Journal of the ACM ( JACM ) , 46:604–632 , 1999 .
[ 9 ] B . Klimt and Y . Yang . The enron corpus : A new dataset for email classification research . In Proceedings of the 2004 European Conference on Machine Learning ( ECML’04 ) , pages 217–226 , 2004 .
[ 10 ] A . N . Langville and C . D . Meyer . Deeper inside pagerank . Internet Mathematics , 1:335–380 , 2005 .
[ 11 ] A . Naud , S . Usui , N . Ueda , and T . Taniguchi .
Visualization of documents and concepts in neuroinformatics with the 3d se viewer . Frontiers in Neuroinformatics , 1:Article 7 , 2007 .
[ 12 ] G . Palla , I . Der´enyi , I . Farkas , and T . Vicsek .
Uncovering the overlapping community structure of complex networks in nature and society . Nature , 435:814–818 , 2005 .
[ 13 ] K . Saito , M . Kimura , K . Ohara , and H . Motoda .
Learning continuous time information diffusion model for social behavioral data analysis . In Proceedings of the 1st Asian Conference on Machine Learning ( ACML2009 ) , pages 322–337 . LNAI 5828 , 2009 . [ 14 ] K . Saito , M . Kimura , K . Ohara , and H . Motoda . Selecting information diffusion models over social networks for behavioral analysis . In Proceedings of the 2010 European Conference on Machine Learning and Principles and Practice of Knowledge Discovery in Databases ( ECML PKDD 2010 ) , pages 180–195 . LNAI 6323 , 2010 .
[ 15 ] W . Torgerson . Theory and methods of scaling . Wiley ,
New York , 1958 .
[ 16 ] T . Yamada , K . Saito , and N . Ueda . Cross entropy directed embedding of network data . In Proceedings of the 20th International Conference on Machine Learning ( ICML2003 ) , pages 832–839 , 2003 .
WWW 2012 – MSND'12 WorkshopApril 16–20 , 2012 , Lyon , France1144
