Multi application Profile Updates Propagation : a Semantic
Layer to improve Mapping between Applications
Nadia Bennani Université de Lyon
LIRIS – INSA de Lyon 7 , Avenue Jean Capelle 69622 Villeurbanne France nadia.bennani@insa lyon.fr
Max Chevalier
Université Paul Sabatier
IRIT/SIG
118 , route de Narbonne F 31062 Toulouse France maxchevalier@iritfr
Elöd Egyed Zsigmond
Université de Lyon
LIRIS – INSA de Lyon 7 , Avenue Jean Capelle
69622 Villeurbanne France elod.egyed zsigmond@insa lyon.fr
Gilles Hubert
Université Paul Sabatier
IRIT/SIG
F 31062 Toulouse France
118 , route de Narbonne gilleshubert@iritfr
Marco Viviani
Università degli Studi dell’Insubria BICOM
Via Mazzini , 5
21100 Varese Italia marcoviviani@uninsubriait
ABSTRACT In the field of multi application personalization , several techniques have been proposed to support user modeling for user data management across different applications . Many of them are based on data reconciliation techniques often implying the concepts of static ontologies and generic user data models . None of them have sufficiently investigated two main issues related to user modeling : ( 1 ) profile definition in order to allow every application to build their own view of users while promoting the sharing of these profiles and ( 2 ) profile evolution over time in order to avoid data inconsistency and the subsequent loss of income for web site users and companies .
In this paper , we conduct work and propose separated solutions for every issue . We propose a flexible user modeling system , not imposing any fixed user model whom different applications should conform to , but based on the concept of mapping among applications ( and mapping functions among their user attributes ) . We focus in particular on the management of user profile data propagation , as a way to reduce the amount of inconsistent user profile information over several applications .
A second goal of this paper is to illustrate , in this context , the benefit obtained by the integration of a Semantic Layer that can help application designers to automatically identify potential user attribute mappings between applications .
This paper so illustrates a work in progress work where two complementary approaches are integrated to improve a main goal : managing multi application user profiles in a semi automatic manner .
Categories and Subject Descriptors H33 [ Information Search and Retrieval ] : Clustering ; H35 [ Online Information Services ] : Data sharing
Copyright is held by the International World Wide Web Conference Committee ( IW3C2 ) . Distribution of these papers is limited to classroom use , and personal use by others . WWW 2012 Companion , April 16–20 , 2012 , Lyon , France . ACM 978 1 4503 1230 1/12/04 .
Keywords User Profile Data Propagation Management , User Profile Evolution , Multi Application Personalization , Mappings identification , Semantic Layer , Log Analysis
1 .
INTRODUCTION
Nowadays , many applications in different areas ( digital libraries , search engines , e learning , online databases , ecommerce , social networks . . . ) are concentrating on collecting information about users for service personalization . For this reason , different applications in different areas ( or within the same area ) organize user properties , preferences and assumptions based on the user state , in user profiles . Each application manages user information independently from others , using a specific user model .
Information collection can be ( i ) explicit : information can be gathered by direct intervention of users themselves by filling some kind of predefined forms and/or ( ii ) implicit : information can be derived by studying users’ behavior while using services ( tracing ) .
When user profile management takes place in an isolated way at single application level , we are in presence of mono application scenarios . In such a case , data incoherence among isolated user profiles can be produced , due to several drawbacks strictly connected to mono application personalization as redundancy : ( i ) it means a redundant process for users to re enter their information every time they start using a new application and ( ii ) the same data for the same user are repeated several times and fragmented over many different applications , leading to data redundancy and tedious update ; lack of efficacy : data connected to a given user remain private to each application . Even if a sufficient amount of data ( or useful data ) for the user has been already collected by other applications , the user will not take advantage of it in the application he is currently using ; lack of experience : as the user cannot take advantage of his information scattered across different applications , in the same way he cannot profit of the experience already accumulated by other users , in the same or different applications ; lack of
WWW 2012 – MultiAPro'12 WorkshopApril 16–20 , 2012 , Lyon , France949 control : users have little or no control over the information defining their profiles , in particular over personalization and sharing , since their data are deeply buried in personalization engines . No accessibility protocols are given to users in order to manage their data .
In this paper we address these issues , discussing the possibility and the manner for user profile information to evolve in a multi application context by user data propagation . We describe G Profile , our multi application user modeling system [ 30 ] and we also illustrate the possibility to integrate a novel feature in order to help application designers to identify user profile mappings between applications . This aspect is very important in G Profile , where the condition for an efficient data propagation is a correct mapping generation phase . For this reason , to improve mapping management and to limit human intervention , we propose to add to GProfile a Semantic Layer : a module allowing to automatically identify these mappings .
To illustrate our technique , we refer essentially to situations of collaborating applications , establishing data relationships between them without taking into account users’ explicit choices and data propagation among different users . We will detail in the rest of the paper how the concepts of “ collaboration ” and “ relationships among data ” are really expressed . A concrete example to illustrate the utility of our multi application user modeling system can be based on the scenario of virtual marketplaces , strictly connected to users’ centers of interest . Let us imagine that a web search engine lands a deal with a virtual marketplace in order to share part of a user web search history with it . This way , the e commerce application can exploit that , for instance , the user has been searching for specific items , in order to adjust its recommendation algorithm and present items regarding the centers of interest of the user at a given moment . Via our multi application user modeling , it would be possible for users and virtual marketplaces to take advantage of the suggestion of new items according to up to date users’ interests during the time .
The rest of the paper is organized as follows : in Section 2 we provide a short survey on current research in the field of personalization in multi application environments . In Section 3 we describe G Profile and the formalization of our model . We explain the concept of application collaboration via G Profile and the way user data are propagated . Section 4 illustrates the Semantic Layer that can be integrated into G Profile to improve the automatic identification of potential mappings between applications . Then , Section 5 discusses the benefits of the integration between G Profile and the Semantic Layer . Finally , in Section 6 we present the main directions for future research and the conclusions .
2 . BACKGROUND
Efforts in mono application personalization date back to the end of 1970 ’s . Kobsa in his survey on Generic User Modeling Systems ( GUMS ) [ 20 ] describes several approaches applied in academic and commercial applications until the beginning of the 2000 ’s .
The problem of personalization is addressed today in a scenario where distributed software environments are no longer static stand alone applications , but dynamic integrative environments that configure themselves according to the individual needs of the user , the context of use , and the platform requirements . User modeling [ 20 , 28 ] plays a cru cial role in this kind of scenario and represents the basis for multi application ( cross system ) personalization [ 23 ] .
In order to comprehensively integrate user information across different systems , one of the main challenges for user modeling is ( represented by ) guaranteeing interoperability of personalization approaches [ 5 , 8 ] . From the literature , we outline two major approaches for user modeling interoperability in a multi application scenario : ( i ) standardizationbased user modeling , based on a top down vision , defining some a priori – often centralized – standard whom all the involved applications have to comply ; ( ii ) mediation based 1 user modeling , behaving in a bottom up way , operating a sort of reconciliation between different user model representations . It deals with transferring user modeling data from one representation to another , in the same domain , or across domains . 2.1 Related Work
Standardization based user modeling techniques are based on the definition of standard ontologies [ 10 , 13 , 18 , 19 , 26 ] and/or unified ( general ) user models [ 14 , 15 , 23 , 24 ] which can be used with multiple systems . Standardization based user modeling is therefore focused on the reusability of the user model itself .
Over the years , due to the great deal of syntactical and structural differences between existing user modeling systems , it has become clear that developing a commonly accepted full ontology of a domain , or envisaging all possible purposes for user modeling in all possible contexts , do not represent feasible solutions for multi application personalization . A possible solution consists therefore in using mediation based techniques , mapping different user model representations by the use of suitable mapping rules and/or meta models . Berkovsky et al . in [ 4 ] give a formal definition for mediation of user models as “ a process of importing the user modeling data collected by other ( remote ) [ : : : ] systems , integrating them and generating an integrated user model for a specific goal within a specific context ” . First attempts in this direction were done in [ 2 , 6 , 17 ] .
Specific demonstrations of multi agent based user modeling systems are given in [ 7 , 16 , 21 , 22 , 27 , 29 ] . In [ 3 ] authors suggest the integration between mediation based techniques and standardization of user modeling based on Semantic Web technologies ( WordNet [ 25 ] , GUMO and UserML ) . The use of semantics for integration of user models is proposed also in [ 8 , 9 ] .
All the techniques described before , address in different ways how to integrate a large number of available user model fragments for personalized service delivery , but fail in addressing the problem of user profile evolution , not considering the concept of user data propagation among user profiles over the time .
3 . G PROFILE
The aim of G Profile is to provide a general purpose and flexible user modeling system for multi application environments . With respect to techniques already proposed in the literature , our approach is intended to address ( i ) user profile evolution via user data propagation in a ( ii ) secure and user centered way .
1The term ‘mediation’ has been introduced by Berkovsky et al . in [ 4 ]
WWW 2012 – MultiAPro'12 WorkshopApril 16–20 , 2012 , Lyon , France950 As introduced before , in this paper we are interested in particular in describing the G Profile role in guaranteeing correct propagation of user profile data modifications , disregarding issues on security , privacy , user behavior , and user preferences as well .
3.1 Scenario
In order to illustrate how the concept of user data propagation in multi application user modeling can be used to solve drawbacks connected to mono application environments , let us provide the following examples based on the domain of virtual marketplaces .
Example 1 . A user changes her address on her user profile on the marketplace A . The new zip code changes from xxxx1 to xxxx2 . The same user has a profile on the marketplace B . On the marketplace B the zip code for the user is still xxxx1 . The marketplace B is currently promoting a discount for all the clients having xxxx2 as a zip code . Via the multi application user modeling system , it would be possible for the user to take advantage of the promotion as the new zip code value would have been propagated automatically ( Figure 1 ) .
Figure 1 : Propagation of user data between applications .
Example 2 . A user ff , having a profile on a marketplace A , has some friends fi ; fl ; : : : ; ! using the same or different marketplaces collaborating between them via the multiapplication user modeling system . If fi ; fl ; : : : ; ! have favorite items , if they decide to share their favorite items with ff , and if the marketplaces permit the sharing of this kind of data , the favorite items of ff ’s friends can be accessible by ff ( Figure 2)2 .
Figure 2 : Propagation of user data among applications and users .
Figure 3 : Accessibility based mapping between applications .
3.2 G Profile Behavior
G Profile does not propose neither a specific reconciliation technique able to take into account all the possible user data representations in different applications , nor a standard user profile model . Instead , it is an abstract and flexible protocol ( Figure 3 ) able to interact with the potentially adopted matching techniques .
To do this , we define some abstract mapping functions , based on the generic concept of mapping between user data among applications3 .
Therefore , an application is G Profile aware if it provides a suitable application programming interface ( API ) to access both its user profile attributes and a set of mapping functions for these attributes to be used in mapping generation assisted by G Profile .
Each application A manages a set of user attributes
3.3 User Profile Formalization k ( k ∈ {1 ; : : : ; mA} , where mA is the total number of aA attributes for the application A ) . We assume that , for each user ux using the application A , each attribute aA k has a value vk associated , forming the user profile element as a k ; vk⟩ . couple ( attribute , value ) . Formally , eA;ux
= ⟨aA k
3.4 Data Mapping Formalization
In our system , where we plan to link attributes belonging to different applications , each attribute can , from time to time , be involved as the source or the target attribute in a relation with others . More specifically , since attributes are organized differently in each application Ai depending on the adopted user model , they can be per , 1 ≤ l ≤ 2mAi . Formally muted in several source sets SAi SAi , where tAi is the total number of sAi 1 ; sAi
{
} l =
2 ; : : : ; sAi tAi l
2Taking into account data propagation among users is out of the scope of this paper .
3Once the generic mapping established via our protocol , it is possible to use semi automatic assistants for the generation of concrete mappings , able to act either on structure based or content based collaborative user profiles . This aspect is out of the scope of this paper .
ApplicaƟon1UserProfileu1(A1)USER DATAUserProfileu1(A2)USER DATAApplicaƟon2…UserProfileu1(…)USER DATAUserProfileu1(An)USER DATAApplicaƟonnTimet= 0ModificaƟonofuserdata on A1Timet= 1PropagaƟonofthe modificaƟonon A2Timet= n 1PropagaƟonofthe modificaƟonon AnTimet= …PropagaƟonofthe modificaƟonon …mappingpropagaƟonApplicaƟon1UserProfileu1(A1)USER DATAUserProfileu2(A2)USER DATAApplicaƟon2…UserProfileu3(…)USER DATAUserProfileu1(An)USER DATAApplicaƟonnTimet= 1PropagaƟonofmodificaƟonon u1 ’s userdata on A1Timet= 1ModificaƟonofu2 ’s userdata on A2Timet= 1PropagaƟonofmodificaƟonon un ’s userdata on AnMAPPINGApplicaƟon1(A1usermodel)ApplicaƟon2(A2usermodel)mappingfuncƟons+propagaƟonaƩributesAPIAPIG ProfileWWW 2012 – MultiAPro'12 WorkshopApril 16–20 , 2012 , Lyon , France951 {
} source attributes for the set SAi Ai . l belonging to the application tAi 1 ; tAi
2 ; : : : ; tAi vAi
In the same way , each attribute of the application Ai can be a target attribute belonging to the target set T Ai of the application Ai , such that T Ai = where vAi is the total number of target attributes for the set T Ai belonging to the application Ai . We define a mapping MAi;Aj between two applications Ai and Aj , i ̸= j , as the triple MAi;Aj = ⟨SAi ; T Aj ; M Ai;Aj⟩ . SAi is the set of source sets SAi , M Ai;Aj is the set of mapping functions mAi;Aj between the applications Ai and Aj associating to each source set SAi a target attribute in T Aj . → tAj Formally , mAi;Aj h .
: SAi
We assume that the number k of mapping functions is k k l l l equal to the number of target attributes of T Aj .
3.5 Mapping Graph Formalization
It is possible to define a graph G as a combination of all the mappings in our environment . More specifically , we define our graph as a pair G = ( V ; E ) composed of ( i ) a set V of nodes , ( ii ) a set E of directed edges . Our graph is therefore a directed graph . function nodes ( n fun ) . Formally V = Vn att ∪ Vn fun . In particular , we represent the elements of each SAi
We define two kinds of node : attribute nodes ( n att ) and as n att nodes , while the elements mAi;Aj tAj h sented as n fun nodes . Formally , SAi Vn att ; mAi;Aj and are repre∈ We also define a function nodeType : V → {n att ; n fun}
∈ Vn att ;
∈ Vn fun . tAj h k k l l that retrieves the type of a given node . In the same way we define a function application : Vn att → A retrieving , for a given attribute node , the application it belongs to . ( n1 ; n2 ) ∈ E , such that :
We represent an edge between two nodes n1 and n2 as
• ∀(n1 ; n2 ) ∈ E ⇒ nodeType(n1 ) ̸= nodeType(n2 ) , • if ( n1 ; n2 ) ∈ E , ( n2 ; n3 ) ∈ E and nodeType(n2 ) = n fun ⇒ application(n1 ) ̸= application(n3 ) .
In order to construct this graph , we define the algorithm 1 .
3.6 Data Propagation Let us consider two applications Ai and Aj , i ̸= j , connected via a mapping MAi;Aj . Let us suppose that a mod , where SAi ification occurs on a source object sAi is connected via a mapping function mAi;Aj to an element tAj g will be h . propagated – via G Profile – to tAj h only if some conditions imposed by the application Aj hold . To do this , every time a modification takes place on sAi
It is our idea that the modification on sAi g ∈ SAi g , a set k l l
{
}
( A)s
Ai g =
( ff)o ; ( ff)t ; ( ff1)s
Ai g ; ( ff2)s
Ai g ; : : : ; ( ffnsg )s
Ai g of propagation attributes , connected to sAi g , is transmitted to G Profile . This set contains always the identification of the application Ai at the origin of the modification . This information is detained by the attribute denoted as ( ff)o , that
∈ MAi;Aj do to V
Ai;Aj for all m k Ai;Aj add m k for all sAi
Algorithm 1 Construction of the graph G from the set of existing mappings Require : All the mappings MAi;Aj Ensure : G 1 : G = ∅ 2 : for all MAi;Aj do 3 : 4 : 5 : 6 : 7 : 8 : 9 : 10 : 11 : 12 : 13 : 14 : 15 : 16 : end for g ∈ SAi l do ̸∈ V then to V g ; m ̸∈ V then Aj h to V end if Ai;Aj add ( m k if sAi g add sAi g end if add ( sAi end for if t
Aj h add t
Aj h ) to E
Ai;Aj k end for
) to E
; t we will call origin of the modification . In the same way , the set always contains the absolute modification time attribute , denoted as ( ff)t . It represents the instant ( in absolute terms ) wherein the original modification occurs .
Each application Aj defines , for each of its target ele
}
{ ments tAj h , a set ( K)t
Aj h =
( 1)t
Aj h ; ( 2)t
Aj h ; : : : ; ( nth
Aj h
)t of propagation conditions .
Each propagation condition ( ith
Aj h
)t cate which can be based on the set ( A)s Aj ’s rules . is a boolean prediAi g or directly on
A2 1
Example 3 . A modification takes place from the application A1 on a source object ˙sA1 1 . The ‘origin of the modification’ attribute ( ff)o = A1 is passed to G Profile . The target application A2 can decide to evaluate three conditions in order to accept the propagation of the modification . The first condition ( 1 ) _t is a boolean predicate based on the attribute ( ff)o : distance in G from ( ff)o ≤ 2 nodes . The second condition ( 2 ) _t is independent from the propagation attribute passed from A1 to G Profile . It is a boolean predicate of the form : time past between subsequent modifications ≥ 2ms . The third condition could be that the origin application should not belong to a blacklist of the application A2 . Another example of security conditions could be about the mapping originator : the application A2 could accept only propagations issued by application based partnership or either issued from users on the basis of a trust credentials4 .
A2 1
Aj h ; ( 2)t
This way , we can define a boolean function that we will call mapping activation function f acting on ( 1)t a change on sAi g Aj h ; : : : ; ( nth
Aj h ; : : : ; ( nth
The propagation of
)t to tAj h using mAi;Aj is enabled if
Aj h ; ( 2)t is true .
(
)
( 1)t
Aj h .
Aj h
)t f k
4As introduced before , treating security issues in a detailed way is out of the scope of this paper .
WWW 2012 – MultiAPro'12 WorkshopApril 16–20 , 2012 , Lyon , France952 Procedure
1 . A modification occurs on sAi g ∈ SAi l
;
2 . G Profile is notified that sAi gets the new value associated to sAi propagation attributes ; g has been modified and it g , together with the
3 . G Profile verifies the existence of a mapping function on tAj h having sAi g as source object ;
4 . G Profile asks the application Ai for complementary h detains a matching func data if the target object tAj tion needing additional data ;
5 . Once all the needed source data are available , G Profile sends to the application Aj : ( i ) the modification on sAi g , ( ii ) possible additional data necessary to the mapping function involving sAi h , ( iii ) the list of g propagation attributes given by the application Ai ; and tAj
6 . Once the application Aj receives this information from G Profile , Aj will use them in order to evaluate the conditions that will effectively permit to propagate the modification on sAi g to tAj h .
3.7 Recursive Data Propagation
∈ Aj can , in turn , be the source object sAj
As we have seen before , a modification can be propagated from Ai to Aj if they are conbetween two applications : nected via a mapping MAi;Aj . But the target element g ∈ SAj tAj h ) connecting SAj of a mapping function m ∈ Aj′ , and so on . A modification occurred on to t Ai can , this way , propagate between several applications Aj ; Aj′ ; Aj′′ ; : : :
( j ̸= j
Aj ;Aj′ k
Aj′ h l l
′
Via recursive data propagation , it is possible to reach the aim of G Profile : reducing data inconsistencies and redundancy , as intuitively illustrated in the following example .
Figure 4 : Example of the effects of data propagation with and without G Profile .
Example 4 . Figure 4 illustrates the advantages of data
FN2FN1FN3FN6FN5FN4V2(2)V0(2)V1(2)V3(2)V0(1)V2(1)V3(1)V1(1)V1(0)V0(0)V3(0)V2(0)FN7FN9FN10FN8V3(3)V4(3)V2(3)V0(3)V1(3)FN15FN13FN11FN14FN12ATTRIBUTESMAPPING FUNCTIONS(a)FN2FN1FN3FN6FN5FN4V2(2)V0(2)V1(2)V3(2)V0(1)V2(1)V3(1)V1(1)V1(0)V0(0)V3(0)V2(0)FN7FN9FN10FN8V3(3)V4(3)V2(3)V0(3)V1(3)FN15FN13FN11FN14FN12MODIFICATIONS(b)FN2FN1FN3FN6FN5FN4V2(2)V0(2)V1(2)V3(2)V0(1)V2(1)V3(1)V1(1)V1(0)V0(0)V3(0)V2(0)FN7FN9FN10FN8V3(3)V4(3)V2(3)V0(3)V1(3)FN15FN13FN11FN14FN12MODIFICATIONS(c)FN2FN1FN3FN6FN5FN4V2(2)V0(2)V1(2)V3(2)V0(1)V2(1)V3(1)V1(1)V1(0)V0(0)V3(0)V2(0)FN7FN9FN10FN8V3(3)V4(3)V2(3)V0(3)V1(3)FN15FN13FN11FN14FN12INCOHERENCES(d)WWW 2012 – MultiAPro'12 WorkshopApril 16–20 , 2012 , Lyon , France953 propagation using G Profile . In ( a ) a simple mapping graph generated with G Profile is shown , where each Vn(k ) node represents the nth attribute belonging to the application k and each FNn node represents a mapping function connected to the involved target attribute .
In ( b ) we suppose that two modifications occur on V1(3 ) and V3(3 ) .
In ( c ) , thanks to G Profile , modifications on V1(3 ) and V3(3 ) are automatically propagated to the attribute nodes connected via mapping functions to V1(3 ) and V3(3 ) . For the sake of simplicity , in this example we ignore propagation conditions and we show the end of the propagation process , without intermediate steps .
Finally , in ( d ) we illustrate the case of the same modifications taking place in a multi application scenario without on G Profile . Dotted lines and circles represent the absence of the multi application user modeling system . As we can see , once the modifications take place on V1(3 ) and V3(3 ) , this leads to the generation of incoherences on the attributes that would have been updated in presence of G Profile .
In this kind of scenario , based on data propagation across applications via mapping functions , two aspects need particular attention , notably ( i ) cycles and ( ii ) parallelism .
Concerning the first aspect , how to prevent cyclical data propagation in the presence for example of ( i ) symmetrical or ( ii ) cyclical mappings5 ?
Having established that ( ff)o is a mandatory attribute to propagate with the modification itself , we automatically prevent this kind of situation . The origin of the modification does not change during the recursive propagation . It contains always the application that started the propagation , ie , Ai . For this reason , between the propagation conditions , we introduce the mandatory presence of a condition ( )o that checks the value of the ( ff)o attribute . This way , we automatically stop the propagation when the target application has , as ( ff)o value , the same ( ff)o value detained by the source application ( (ff)o = Ai in the case of our example ) .
Concerning the second aspect , problems are connected to a correct modification ordering . How to prevent , for example , that two modifications originating from two different source objects occur simultaneously on the same target object ? For each modification , we define a separate propagation sequence starting when the original modification takes place and stopping at the first target application for which
)
( f
( 1)t
Aj h ; ( 2)t
Aj h ; : : : ; ( nth
Aj h
)t is false . This way , it is impossible to have two modifications on the same target object at the same time . In addition to this , let us consider the following scenario . Let us suppose that two applications Ai and Ak are mapped to an application Aj . Is it possible to prevent that a modification ( acting on sAi g′ , propagating to tAj h ) , occurred at the time t + 1 , be replaced at the time g′′ , propagating to tAj t + ffi by a modification ( acting on sAk h ) occurred at time t ? This might happen due to differences in path length between source and target applications ( Figure 5 ) . The introduction of the ( ff)t attribute as mandatory in
5eg , ( i ) Ai is mapped to Aj and Aj is , in turn , mapped back to Ai ; ( ii ) Ai is mapped to Aj , Aj is mapped to Ak and Ak is , in turn , mapped back to Ai or to Aj . our propagation attribute set , permits to synchronize data propagation avoiding drawbacks connected to parallelism .
Figure 5 : Data propagation drawbacks connected to parallelism .
4 . SEMANTIC LAYER TO IMPROVE USER PROFILE MAPPING IDENTIFICATION
In the previous section , we have illustrated G Profile and the motivations behind its development . When possible mappings have been identified between applications ( ie , between attributes constituting user profiles ) , possible modifications on user data connected to a specific user profile are propagated to other connected user profiles via some mappings . How these mappings are identified ? One may propose that each application designer explains to others what corresponds to every shared attribute . This solution is quite limited because an application designer should give explanations to all applications with which she accepts to share user profiles . This may be a repeating and boring task when the number of applications grows . Moreover , sharing user profiles between applications is interesting only if these applications exploit the same kind of dimensions characterizing the user . As a solution , we propose to integrate in G Profile a Semantic Layer allowing application designers to limit the manual detection of mappings between applications . This solution is based on previous works [ 11 , 12 ] related to user profile interoperability between various applications . In the case of G Profile , the Semantic Layer has the possibility to preliminarily know possible mappable attributes , this way its development is simplified with respect to the past .
4.1 Semantic Layer Content
Our Semantic Layer aims at describing the content of shared user profiles . This corresponds to a high level description of various dimensions characterizing users in a specific context . For instance , such semantic description of user data can correspond to classical customer user profiles [ 1 ] . The customer profile includes attributes that can be classified in two main categories : factual attributes ( ie , Who is the customer ? ) and transactional attributes ( ie , What does the customer does? ) . An example of such description is illustrated in Figure 6 . This description is more “ conceptual ” without considering how every user dimension is organized and implemented in each application . It corresponds to a dimension based pivot format enabling the detection of attributes corresponding to the same concept even if they have different names , formats ,
In addition to the conceptual description of user dimensions , the Semantic Layer includes the description of general value types that are commonly used in applications . One may consider some value types like those used in XML sg’Aisg’’AkthAjsg’’AkthAjsg’Ait+1tt+δWWW 2012 – MultiAPro'12 WorkshopApril 16–20 , 2012 , Lyon , France954 Figure 6 : Semantic Layer example characterizing customer dimensions .
Figure 7 : User profiles associated to the Semantic Layer .
Schema6 , highly sufficient for many applications where relations between value types are expressed .
Furthermore , a set of conversion methods between types ( ie , ‘yyyy mm dddd’ => ‘YYYY’ ) is provided in order to improve the mapping identification process ( ie , restriction ) . This set could be adopted to provide higher interaction between the two layers , using these conversion methods for applications not having yet mapping functions .
The Semantic Layer can be defined in two ways :
1 . Using an existing model framework available in various contexts ;
2 . Defining a high level description of users , instead of defining a unique user profile structure for various applications . As we discussed at the beginning of the paper , this not represent nowadays a feasible solution due to heterogeneity of user models .
4.2 Using the Semantic Layer to Identify Po tential Mappings
To allow the system to automatically identify potential mappings , every application have to select for each attribute it wants to share , the related concept and value type information in the Semantic Layer ( Figure 7 ) . This figure shows only conceptual information , value type information is not displayed for the sake of readability .
The Semantic Layer is used to identify related attributes via the application of a transformation process . This pro
6http://wwww3org/TR/xmlschema 2/
Figure 8 : Potential Mapping Identification . cess has been adapted from [ 11 ] , where multi values are connected to attributes , because in G Profile user profiles are supposed to be a list of attributes having a single value ( see Section 33 )
This process is illustrated in Figure 8 . Four main steps can be identified :
1 . Extraction of all the attributes shared by applications ;
2 . For every attribute , the associated conceptual infor mation is also extracted from the Semantic Layer ;
3 . Thanks to these conceptual dimensions , for every couple of attributes the Semantic Layer is exploited to check if there is a possible relation between the concepts associated to these two attributes . To do this , inference rules are exploited to identify possible and accepted relations between concepts . All non related attributes are deleted for further analysis .
4 . For all the remaining couples of attributes , a valuetype compatibility is verified . Thanks to information available in the Semantic Layer ( value type relationships and value type conversion methods ) , the process verifies if the value type of one attribute can be converted into the other one .
A potential mapping is automatically detected for every couple of attributes that passes all the first four steps . 4.3 Implementation
Identifying potential mappings between attributes coming from different applications can be based on an ontology tool set . Thus , the Semantic Layer can be based on a formal description through OWL7/RDF8 to model relations between concepts and to store them . In order to verify the conceptual compatibility between two attributes ( step ( 1 . ) described in the previous section ) SparQL9 is used .
Figure 9 illustrates a SparQL query example that verifies if two concepts cf1 and cf2 ( associated to attribute1 and attribute2 , respectively ) are compatible through selected relationships between concepts ( ie , equivalentClass or sameAs ) . Note that the “ . ” in the WHERE clause corresponds to the AND logical operator . Value type compatibility checking relies on the same approach .
7http://wwww3org/TR/owl ref/ 8http://wwww3org/RDF/ 9http://wwww3org/TR/rdf sparql query/
CustomerFactual DataTransacƟonal DataCustomer IDIdenƟtyFirst NameLast NamePurchase HistoryGenderBirthDateProduct Preference……CustomerFactual DataTransacƟonal DataCustomer IDIdenƟtyFirst NameLast NamePurchase HistoryGenderBirthDateProduct Preference……ApplicaƟon Side SemanƟc LayerShared AƩributes ExtracƟonProfile #2Corresponding Concept ExtracƟonShared AƩributes ExtracƟonProfile #1Corresponding Concept ExtracƟonConcept CompaƟbility CheckingValue type CompaƟbility CheckingWWW 2012 – MultiAPro'12 WorkshopApril 16–20 , 2012 , Lyon , France955 to the semantic description of the attributes provided by each application , G Profile can , through the Semantic Layer , identify potential mappings between user profiles . On the basis of these potential mappings , mapping functions respecting semantic description can easily associate the attributes belonging to different applications thanks to GProfile . Thus , building mapping functions can be considered as a simpler task with respect to the previous ones .
6 . CONCLUSION AND PERSPECTIVES
In recent years , several approaches have been proposed in different fields to solve the problem of multi application personalization . The focus is gradually shifted from the model itself to the process of modeling . Due to the great deal of syntactical and structural differences between existing user modeling systems , developing a commonly accepted full ontology of a domain , or envisaging all possible purposes for user modeling in all possible contexts , definitely do not represent feasible solutions for multi application personalization .
In this paper we have illustrated G Profile : a flexible multi application user modeling system , able to address typical problems of collaborative distributed environments and in particular to guarantee evolution , security , and privacy in multi application personalization , aspects that have not been sufficiently considered up to now . We have focused in particular on the process of user profile data propagation in a multi application environment . Data propagation relies for us on the correct identification of mappings between applications , mappings that are based on the generation of mapping functions between user attributes constituting user profiles . In order to facilitate both applications and users in the activity of generate and manage mapping functions , we have proposed to integrate to G Profile a Semantic Layer allowing to identify potential mappings between applications based on a semantics . In addition to this , the Semantic Layer allows to better understand attributes definition in order to facilitate their use .
Our aim for the future is to complete our work by providing a complete evaluation , taking into account the user in the different phases of mapping establishment and data propagation , introducing the formalization and the methodology to address issues on security and privacy . Concerning aspects connected to the Semantic Layer , since the proposed approach allows a potential mapping identifications between user profiles even if they have different structures , G Profile could benefit from such possibility by allowing applications to manage user profile through a more sophisticated structure ( ie , tree structure ) . Moreover , the current version of G Profile relies on a single value format for each attribute . Multi valued attributes should be introduced in order to offer more possibilities to G Profile aware applications . Finally , a last perspective concerns the potential gain offered by the Semantic Layer . Indeed , a deeply reflection has to be done in order to implement generic transformation methods allowing G Profile to directly map most of the attributes from one application to others . This could mainly simplify tasks related to mapping generation because most of them would be mainly generic .
7 . REFERENCES [ 1 ] G . Adomavicius and A . Tuzhilin . Using data mining
Figure 9 : SparQL query example to verify conceptual compatibility .
5 . BENEFITS OF
INTEGRATING GPROFILE WITH THE SEMANTIC LAYER
In this section , we illustrate via some use cases how the integration of the Semantic Layer can significantly improve the mapping generation/management in G Profile . For the sake of simplicity , we consider three possible main actions in G Profile : ( i ) an application not using G Profile wants to establish a partnership with a G Profile aware application ; ( ii ) a user intends to be involved in a mapping generation/modification on user data she can effectively manage ; ( iii ) two applications want to establish a partnership via G Profile .
In the first scenario , a non G Profile aware application that wants to establish a partnership with a G Profile aware one , must describe all the attributes it is effectively intended to share ( i.e , every attribute has to be associated to the corresponding concept and its value type in the Semantic Layer ) . The application then provides this description to G Profile when establishing a partnership . The main advantage of such approach is that the description of the attributes is done only once during the attribute sharing decision phase .
The second case is more complex . As introduced before , a user can act only on a subset of user attributes that applications declare as public . On these data users can modify mappings already established by applications , or generate new mappings not provided by applications . In the first case , the semantic description of attributes can help users to manage/modify existing mappings . In the second case , not disposing of predefined mapping functions , the user is requested to play the role of ‘application’ . If she is intended to create a mapping between two applications where she has a user profile , she will memorize her data on a personal data storage , and how to map attributes connected to these data on the two different applications , could be done using the Semantic Layer described before .
Concerning the third action , the Semantic Layer is used to propose possible partnerships between applications . Thanks
PREFIX owl : <http://wwww3org/2002/07/owl#>PREFIX rdf : <http://wwww3org/1999/02/22 rdf syntax ns#>SELECT ?c1 ?c2FROM <Concepts.rdf>WHERE{ ?c1 rdf:type sp:Concept . ?c2 rdf:type sp:Concept . { ?c1 owl:equivalentClass ?c2 } UNION { ?c1 owl:sameAs ?c2 } . FILTER( ( ?c1=<cf1> || ?c1=<cf2> ) && ( ?c2=<cf1> || ?c2=<cf2> ) )}WWW 2012 – MultiAPro'12 WorkshopApril 16–20 , 2012 , Lyon , France956 methods to build customer profiles . Computer , 34:74–82 , February 2001 .
[ 2 ] L . Ardissono , C . Barbero , A . Goy , and G . Petrone . An agent architecture for personalized Web stores . In Proc . of AGENTS ’99 , pages 182–189 , New York , NY , USA , 1999 . ACM .
[ 3 ] S . Berkovsky , D . Heckmann , and T . Kuflik .
Addressing challenges of ubiquitous user modeling : Between mediation and semantic integration . In Advances in Ubiquitous User Modelling , volume 5830 of LNCS , pages 1–19 . Springer , 2009 .
[ 4 ] S . Berkovsky , T . Kuflik , and F . Ricci . Mediation of user models for enhanced personalization in recommender systems . User Modeling and User Adapted Interaction , 18:245–286 , 2008 . 101007/s11257 007 9042 9
[ 5 ] S . Berkovsky , T . Kuflik , and F . Ricci .
Cross representation mediation of user models . User Modeling and User Adapted Interaction , 19(1 2):35–63 , 2009 .
[ 16 ] G . Gonz´alez , B . L´opez , and J . Llu´ıs de la Rosa . A
Multi agent Smart User Model for Cross domain Recommender Systems . In Proc . of the IUI ’05 Workshop on the Next Stage of Recommender Systems Research , Edinburgh , UK , 2005 .
[ 17 ] J . E . Greer , G . I . McCalla , J . Cooke , J . A . Collins ,
V . Kumar , A . Bishop , and J . Vassileva . The Intelligent Helpdesk : Supporting Peer Help in a University Course . In Proc . of ITS ’98 , pages 494–503 , London , UK , 1998 . Springer .
[ 18 ] D . Heckmann , T . Schwartz , B . Brandherm , and
A . Kroner . Decentralized User Modeling with UserML and GUMO . In Proc . of the UM ’05 DASUM Workshop , Edinburgh , UK , 2005 .
[ 19 ] J . Kay . Ontologies for reusable and scrutable student model . In Proc . of AIED 99 workshop on Ontologies for Intelligent Educational Systems , pages 72–77 , 1999 .
[ 20 ] A . Kobsa . Generic user modeling systems . User
Modeling and User Adapted Interaction , 11(1 2):49–63 , 2001 .
[ 6 ] D . Billsus and M . J . Pazzani . User modeling for
[ 21 ] A . Lorenz . A Specification for Agent Based adaptive news access . User Modeling and User Adapted Interaction , 10(2 3):147–180 , 2000 .
[ 7 ] A . Cal`ı , D . Calvanese , S . Colucci , T . Di Noia , and
F . M . Donini . A description logic based approach for matching user profiles . In Description Logics , volume 104 of CEUR Workshop Proc . , 2004 .
Distributed User Modelling in Ubiquitous Computing . In Proc . of the UM ’05 DASUM Workshop , Edinburgh , UK , 2005 .
[ 22 ] B . Mehta and W . Nejdl . Intelligent Distributed User
Modelling : from Semantics to Learning . In Proc . of the UbiDeUm Workshop , Edinburgh , UK , 2007 .
[ 8 ] F . Carmagnola and F . Cena . User identification for
[ 23 ] C . Nieder´ee , A . Stewart , B . Mehta , and M . Hemmje . cross system personalisation . Journal of Information Science , 179(1 2):16–32 , 2009 .
[ 9 ] F . Carmagnola , F . Cena , O . Cortassa , C . Gena , and
A . Toso . A preliminary step toward user model interoperability in the adaptive social web . In Proc . of the UbiDeUm Workshop , Corfu , Greece , 2007 .
[ 10 ] W . Chen and R . Mizoguchi . Communication Content
Ontology for Learner Model Agent in Multi agent Architecture . In Proc . of AIED 99 workshop on Ontologies for Intelligent Educational Systems , pages 95–102 , 1999 .
[ 11 ] M . Chevalier , C . Julien , C . Soule Dupuy , and
N . Valles Parlangeau . Personalized information access through flexible and interoperable profiles . In M . Weske , M S Hacid , and C . Godart , editors , Web Information Systems Engineering ˝U WISE 2007 Workshops , volume 4832 of Lecture Notes in Computer Science , pages 374–385 . Springer Berlin / Heidelberg , 2007 .
[ 12 ] M . Chevalier , C . Soul´e Dupuy , and P . L . Tchienehom .
Profiles semantics and matching flexibility for resources access . In SITIS , pages 224–231 , 2005 .
[ 13 ] P . Dolog and M . Sch¨afer . A Framework for Browsing , Manipulating and Maintaining Interoperable Learner Profiles . In User Modeling , volume 3538 of LNCS , pages 397–401 . Springer , 2005 .
[ 14 ] European Telecommunication Standards Institute
( ETSI ) . Human Factors ( HF ) – User Profile Management , 2005 . http://portaletsiorg/STFs/ STF_HomePages/STF342/eg_202325v010101ppdf
[ 15 ] Future of Identity in the Information Society ( FIDIS ) .
D2.3 – Models , 2005 . http://wwwfidisnet/fileadmin/fidis/ deliverables/fidis wp2 del23modelspdf
A Multi Dimensional , Unified User Model for Cross System Personalization . In Proc . of the AVI 2004 Workshop on Environments for Personalized Information Access , Gallipoli , Italy , 2004 .
[ 24 ] F . Petersen , G . Bartolomeo , M . Pluke , and
T . Kovacikova . An architectural framework for context sensitive personalization : standardization work at the ETSI . In Proc . of Mobility ’09 , pages 1–7 , New York , NY , USA , 2009 . ACM .
[ 25 ] Princeton University . Wordnet – a lexical database for english , 2010 . http://wordnetprincetonedu [ 26 ] L . Razmerita , A . A . Angehrn , and A . Maedche .
Ontology based user modeling for knowledge management systems . In User Modeling , volume 2702 of LNCS , pages 213–217 . Springer , 2003 .
[ 27 ] K . van der Sluijs and G J Houben . Towards a generic user model component , 2005 . http://citeseerxist psuedu/viewdoc/summary?doi=1011613148
[ 28 ] J . Vassileva . Distributed user modelling for universal information access . In Proc . of the 9th Int . Conf . on Human Computer Interaction ) , volume 3 , pages 122–126 , New Orleans , USA , 2001 . Lawrence Erlbaum .
[ 29 ] J . Vassileva , G . Mccalla , and J . Greer . Multi agent multi user modeling in i help . User Modeling and User Adapted Interaction , 13(1 2):179–210 , 2003 . [ 30 ] M . Viviani , N . Bennani , and E . Egyed Zsigmond . Multi application Personalization using G Profile . IJCSIS Users and Information Systems , Special Issue , 2011 . to appear .
WWW 2012 – MultiAPro'12 WorkshopApril 16–20 , 2012 , Lyon , France957
