Combining Usage and Content in an Online Music Recommendation System for Music in the Long Tail
Marcos A . Domingues
INESC TEC , Portugal marcosadomingues@ inescporto.pt
José Paulo Leal
CRACS , INESC TEC , FCUP University of Porto , Portugal zp@dccfcuppt
Fabien Gouyon
INESC TEC , Portugal fgouyon@inescporto.pt
Alípio Mário Jorge
FCUP , University of Porto
INESC TEC , Portugal amjorge@fcuppt
João Vinagre
FCUP , University of Porto
INESC TEC , Portugal jnsilva@inescporto.pt
Luís Lemos
University of Porto
INESC TEC , Portugal llemos@inescporto.pt
ABSTRACT In this paper we propose a hybrid music recommender system , which combines usage and content data . We describe an online evaluation experiment performed in real time on a commercial music web site , specialised in content from the very long tail of music content . We compare it against two stand alone recommenders , the first system based on usage and the second one based on content data . The results show that the proposed hybrid recommender shows advantages with respect to usage and content based systems , namely , higher user absolute acceptance rate , higher user activity rate and higher user loyalty .
Categories and Subject Descriptors I.2 [ Computing Methodologies ] : Artificial Intelligence ; I26 [ Artificial Intelligence ] : Learning—Induction
General Terms Algorithms , Experimentation , Measurement
Keywords Music recommendation , hybrid recommender system , usage data , tags , audio features
1 .
INTRODUCTION
Music discovery and consumption has changed dramatically in recent years . According to recent reports , eg from consultancy firms [ 6 ] , the web has become an increasingly relevant source of music discovery , recently reaching the importance of traditional sources such as AM/FM radios , music TVs , or friends . Most people now consume music on their personal computers and mobile devices via Internet . However , with virtually millions of pieces of music –henceforth tracks– available from thousands of web sites or online services , avoiding overwhelming choices and finding the “ right ” music has become a challenge for users . Music recommender systems have emerged in response to this problem . A music
Copyright is held by the International World Wide Web Conference Committee ( IW3C2 ) . Distribution of these papers is limited to classroom use , and personal use by others . WWW 2012 Companion , April 16–20 , 2012 , Lyon , France . ACM 978 1 4503 1230 1/12/04 . recommender system is an information filtering technology which can be used to output an ordered list of music tracks that are likely to be of interest to the user [ 2 ] .
Music recommendation has flourished on the Internet , and web sites as Last.fm1 , Amazon2 and Pandora3 are successful examples of music recommenders that adapt recommendations to particular user tastes . In this paper we present a hybrid recommender system implemented for Palco Principal4 , a web site of Portuguese music . Most of its music tracks are underground , unknown/unpopular and rarely accessed/rated by the users . In fact , only 19.7 % of its artists also exist on the Last.fm web site . This is a good example of very long tail content , for which traditional usage based recommenders typically do not work so well [ 2 ] .
In order to address the previous problems and achieve better recommendations than stand alone techniques , usage and content based approaches have been combined in many different ways as hybrid recommenders [ 1 ] . In this paper we describe the hybrid recommender system implemented on the Palco Principal and evaluate it . The hybrid recommender is compared against a usage and a content based recommender . We also propose performance measures to determine the impact of the recommenders in terms of user activity and loyalty .
2 . DIFFERENT MODALITIES FOR ITEM
SIMILARITIES
Item based recommender systems exploit similarity among items [ 7 ] . The system looks into the set of items and computes the similarity between pairs of items , generating a matrix representing the similarities between all the pairs of items , according to a similarity measure . A representation of an item item similarity matrix is shown below ( each item i can be , for example , a music track ) .
1
2
3
4 http://wwwlastfm http://wwwamazoncom http://wwwpandoracom http://wwwpalcoprincipalcom
WWW 2012 – AdMIRe'12 WorkshopApril 16–20 , 2012 , Lyon , France925 i1 1 ··· sim(i2 , i1 ) i2 sim(i1 , i2 )
1 ··· sim(iq , i1 ) sim(iq , i2 ) i1 i2 ··· iq
··· ··· ··· 1 ··· iq sim(i1 , iq ) sim(i2 , iq )
··· 1
The effectiveness of an item based recommender system depends on the method used to calculate the similarity among the items in the matrix . Thus , in the next sections we present three different methods to calculate the similarity among music tracks . These methods tap into two different types of data : usage based data on the one hand , and content based data on the other hand . 2.1 Usage based Similarity
The simplest form of usage data is a pair < user , item > meaning that user had a positive interaction with item ( eg , user listened to a track ) . The positive nature of the interaction is often inferred from behavior . In the case of this work , we have access to playlists , which are collections of music tracks created and organized by individual users . The fact that a user adds a track to a playlist is regarded as a preference . Therefore a < user , item > pair means , in our case , that the user added track ( item ) to his playlist and , ergo , likes this music . Usage data such as this is a particular case of preference data where each user rates some items on a given scale ( eg , 1 to 5 ) . In this case , we have a binary scale ( ie , likes / does not like ) .
To compute the similarity between pairs of music tracks from usage data , for example , u1 and u2 , we first isolate the users who have included the tracks in their playlists . Then , we compute the similarity sim(u1 , u2 ) between u1 and u2 . In [ 7 ] the authors present three methods to measure similarity between pairs of items : cosine angle , Pearson ’s correlation and adjusted cosine angle . In this paper , we use the cosine angle , defined as
−→u1.−→u2
−→u1,−→u2 ) =
||−→u1|| ∗ ||−→u2|| , sim(u1 , u2 ) =cos( −→u1 and
−→u2 are binary vectors with as many positions where as existing users . The value 1 means that the users included the track in their playlists . The value 0 is the opposite . The operator “ . ” denotes the dot product of the two vectors . 2.2 Tag based Similarity
( 1 )
Social music tags are free text labels that are assigned to items such as artists , playlists and music tracks [ 5 ] . In our particular case , tags describe music tracks , and are typically words or short phrases related to genre , intrument and influence . For example , music tracks in our data are typically tagged with tags like rock , guitar or Daft Punk . In order to capture the tag correlation , an M×N matrix of tracks and tags is built , where M is the number of tracks and N the number of tags . Matrix elements with values different than 0 mean that a given tag n has been used to annotate a given music track m . The rationale is that music tracks with similar tags would be similar . However , the dimensions M and N can be extremely large and the matrix very sparse , thus making the problem computationally expensive .
To overcome this problem , an information retrieval technique called Latent Semantic Analysis ( LSA ) [ 3 ] is used to analyze the inherent structure of the matrix . Basically , LSA makes use of Singular Value Decomposition ( SVD ) to create a space T of tag concepts by combining the N tags . This will reduce the dimensionality of the matrix by replacing the tags by a small number of tag concepts , while still preserving the similarity structure among rows or columns . Then , we use the reduced matrix , M × T , to calculate the similarity between pairs of music tracks . In our case , we use the cosine similarity distance , defined as sim(t1 , t2 ) = cos(.t1 , .t2 ) =
.t1 · .t2 ∗ t2 t1
,
( 2 ) where .t1 and .t2 are binary vectors with all the tag concepts . A value of 1 or 0 represents the presence or absence , respectively , of the tag concept for the given music track . 2.3 Audio based Similarity
For this approach , we have used the free MARSYAS framework5 to extract 16 audio features from 46ms frames of the audio signals with no overlap . The features are : the spectral centroid , rolloff frequency , spectral flux , and 13 MFCCs , including MFCC0 [ 8 ] . Features are aggregated in 1s texture windows , and then averaged over the whole file . Final features are average and standard deviation . We chose these features because of availability of code .
After extracting the audio features for each track , we calculate the similarity among the tracks . The similarity is calculated by the Euclidian distance through the 16 audio features . Here , we define the Euclidian distance between 2 tracks , a1 and a2 , as follows fi''ff 16
−→a1,−→a2 ) =
−→a1f − −→a2f ) −→a2 are vectors with the 16 audio features . f =1
2 ,
(
( 3 ) sim(a1 , a2 ) =euclidian (
−→a1 and where
Note that contrarily to the cosine , where the similarity is directly related to the measure , with the Euclidian distance the similarity is inversely related to the measure , ie , the lower the measure the higher the similarity .
3 . MUSIC RECOMMENDATION BASED ON
DIVERSE MODALITIES
In this section , we show how the similarity methods presented in Section 2 can be used to recommend music tracks . We start by describing a usage and a content based recommender system , which are used as benchmark systems in this paper . Then , we propose a hybrid recommender system that combines both usage and content . 3.1 Usage based Recommendation
Usage based recommendation is made on the basis of the similarity matrix between tracks described in Section 21 Given a user , his playlists are merged and the music tracks in it are used as seeds ( S ) for the recommendations . The general procedure follows the Item based Collaborative Filtering algorithm [ 7 ] . For each recommendable music track m we fetch its k closest neighbors N ( m ) . From the seeds s ∈ S , the neighbors and their similarities we calculate the activation weight ActWeight of each track m which is not already in the playlists of the user .
5 http://marsyas.info
WWW 2012 – AdMIRe'12 WorkshopApril 16–20 , 2012 , Lyon , France926 s∈N ( m)∩S sim(m , s )
ActWeight(m ) =
.
( 4 ) sim(m , n ) n∈N ( m )
Note that we exclude for recommendation tracks that are already in the playlist .
In our music recommendation application , we also have a source of negative information , called blacklist ( B ) . When recommendations are shown to the user , he has the option of blacklisting a particular recommendation . This way , the blacklisted track is not shown again . Here , we exclude from the similarity matrix the tracks in the blacklist B of the seed user . Moreover , the blacklist information is used to calculate a global acceptance index AccI of each track . This index captures the tendency of a track for being blacklisted and is calculated from the number of times a track is blacklisted B(m ) and the number of times it is included in a playlist P ( m ) . The value 1 means that the track is not included in any blacklist .
AccI(m ) = 1 −
B(m )
B(m ) + P ( m ) + 1
.
( 5 )
After calculating AccI(m ) it is multiplied by ActWeight(m ) to obtain the final score of the track . Recommended tracks are then sorted by score from highest to lowest . 3.2 Content based Recommendation
The content based recommender system that we describe in this section combines tags and audio features to recommend music tracks . As proposed in [ 2 ] , audio features should be good for low level similarities ( eg , the main timbre of music tracks ) , while tags should be good supplements as they account for higher level information that could not be reliably computed from audio ( eg , female voice ) .
The system starts by computing two item item similarity matrices ( Section 2 ) . One matrix is computed using tags ( Section 2.2 ) and the other one using audio features ( Section 23 ) Once we have the two matrices , we can generate the recommendations . Given a seed music track , s ∈ S , the system first fetches its k closest neighbors on each matrix , generating two lists of recommendable music tracks , ie , one based on tags and the other based on audio features . Then , the system ranks each list separately , taking into account the similarities , and computes a final ranking where the position is the sum of the two ranks in every independent ranking . Finally , the k best ranked music tracks , according to the final ranking , are recommended . 3.3 Recommendation Combining Usage and
Content
The recommendation strategy that combines Usage and Content data , referred to as Mix , is described in this section . Given a user playlist , we produce three lists of k recommendations . One obtained from usage data ( Ru ) , one from tags ( Rt ) and the third from audio data ( Ra ) . These three lists are sorted by inverse order of relevance of the recommendations . For each list , the recommended tracks are assigned ranks from k ( top recommendation ) to 1 . The combined rank for each track is the average of the three ranks . For example , if a track m is the first recommendation in
Ru , second in Rt and does not occur in Ra , and assuming k = 100 , the combined rank is ( 100 + 99 + 0)/3 = 6633
The blacklist information is also used by multiplying the combined rank by the AccI ( equation 5 ) of the track to be recommended . This will penalize tracks that are blacklisted by a large number of users .
4 . CASE STUDY
The recommendation strategies described in the previous section have been deployed on Palco Principal , a start up company that holds a web site of Portuguese music since 2007 . Besides music recommendations , the site also provides services like news , advertisements , social networking and an application for users to access the services of the site through their mobile phone .
During the period of our study , the site had about 76000 users ( 61223 listeners and 14777 artists who uploaded music ) and 61000 music tracks . From the tags available in the site , we used 373 tags which can be categorized into three classes : genre ( eg , hip hop ) , intrument ( eg , clarinet ) and influence ( eg , Daft Punk ) . There is a minimum of 1 , a mean of 3.52 and a maximum of 36 tags per track . As already stated , this content corresponds to the very end of the long tail of music [ 2 ] .
In the site , each of the recommenders are used separately . When a user opens the page for managing playlists , the recommender is invoked in real time and the results are shown to the user ( Figure 1 ) . The user can then listen to recommended tracks , add tracks to his playlist ( heart ) or add tracks to his blacklist ( cross ) .
Figure 1 : Recommendations as shown to the user .
4.1 Evaluation Methodology
To compare the merits of the three recommenders ( Usage , Content and Mix ) we have performed an online evaluation [ 4 ] and followed the reactions of users during 22 weeks , between 10/20/2010 and 03/22/2011 . These were real users with no knowledge of the evaluation in course . Each new user was assigned one of the three recommenders . The assignment was decided by the remainder of the division of the user ID by 3 . This way , we had a random assignment of users to each of the recommenders , and the same user would always get recommendations from the same source .
WWW 2012 – AdMIRe'12 WorkshopApril 16–20 , 2012 , Lyon , France927 User activity has been recorded in two different ways . One was Google Analytics ( GA ) and the other was the site ’s internal data base ( DB ) . In the case of GA , we have associated events to user actions of adding to playlist and adding to blacklist . In the case of DB , we have the playlist and blacklist tables in the data base . To be able to identify whether each track added to the playlists had been recommended , we added a source field indicating which recommender had done the job . In the end , we have observed some non significant differences in the values obtained from GA and DB , which comforted us in the quality of the data to be analyzed .
To measure the variation of the recommenders effects , we have divided the 22 weeks into 11 periods of 2 weeks . For each period we have measured the number of sessions ( S ) , the number of additions to playlists ( P ) and the number of additions to blacklists ( B ) for each recommender .
From these three basic measures we have defined the fol lowing derived measures :
Activity rate = ( P + B)/S ,
Absolute acceptance rate = P/S , Relative acceptance rate = P/(P + B ) .
( 6 )
( 7 )
( 8 )
Google Analytics also provides information about the number and frequency of users who return to the site . For a given period , L(x ) is the number of users who return x times to the site . Loyalty can then be measured in many different ways . We have tried to capture loyalty by counting users who return three or more than three times and using as reference the number of users who return less than three times . We call this measure Loyalty3 rate .
Loyalty3 rate =
.
( 9 ) x≥3 L(x ) L(1 ) + L(2 )
For each measure , and each recommender , we have collected samples with values from the 11 periods . We then compare averages and standard deviations of the measures and perform two tailed t tests ( α = 0.05 ) to determine the significance of the differences .
4.2 Results
In this section we discuss the results obtained with our case study . During the evaluation period there were about 57000 sessions involving recommendations , where 1327 users made 3267 additions to playlists and 3123 additions to blacklists .
As reported in Table 1 , overall , Mix shows a slightly lower relative acceptance rate ( RAR ) than Content and Usage . However , the differences are not significant ( this is due to the high variability of all three recommenders with respect to the 11 periods of 2 weeks , as shown in the relatively high standard deviations ) , and all three recommenders have a relative acceptance around 05 This can be understood as follows : in response to a given recommendation , the user is as likely to react with an addition to playlist ( ie , a positive reaction ) than an addition to blacklist ( ie , a negative reaction ) . This appears to be true for all three recommenders . This does not however mean that the three recommenders have a similar performance . Indeed , given a recommendation , a user can not only react by an addition to playlist or to blacklist , but also not react at all –which in our opinion is another negative reaction . As can be seen in Table 1 , activity rate ( AR ) measure , our data shows that for the same number of recommendations , the Mix recommender results in more user activity than the other two . In other words , it appears that users are more likely to react to recommendations when confronted with recommendations of Mix than those of the other two . This means that users will generate more additions to playlist , and more additions to blacklist , with Mix than with Content and Usage . The former can be observed in Table 1 , that show a significantly higher absolute acceptance rate ( AAR ) for Mix . When compared to Content , Mix presents a gain of 119 % . With respect to the Usage , it shows a gain of 50 % . This means that users getting the Mix suggestions had a significant tendency for reacting more positively to recommendations .
Finally , regarding the loyalty3 rate ( L3R ) , we see in Table 1 that the Mix recommender is similar to Content but significantly better than Usage . There , the system Mix presents a gain of 16 % when compared to Usage .
Measure
RAR
AR
Table 1 : Results . Values with ( * ) represent recommendation methods whose differences with Mix are statistically significant ( p value < 005 ) Std . Dev . 0.157 0.164 0.125 0.061 0.025 0.021 0.038 0.018 0.023 0.376 0.171 0.196
System Mean Mix 0.499 0.512 Content 0.600 Usage 0.165 Mix 0.074 ( * ) Content Usage 0.088 ( * ) 0.081 Mix 0.037 ( * ) Content 0.054 ( * ) Usage 1.880 Mix 1.870 Content Usage 1.620 ( * ) p value 0.848 0.162 0.001 0.002 0.013 0.049 0.867 0.044
AAR
L3R
5 . CONCLUSIONS
In this paper we proposed a music recommender system that combines usage and content data . Our proposal has been evaluated online , with real users , on a commercial web site of music from the very long tail . Our results show that Mix generates more activity and at least the same amount of positive responses of Content and Usage ( or more , depending on the evaluation measure ) . Finally , it has good results in terms of promoting user loyalty . Hence our conclusion that Mix tends to be a better option to music recommendation than the other two . Mix is currently the core recommendation engine on http://wwwpalcoprincipalcom We are currently developing a monitoring tool for continuously collecting and analyzing the activity of the recommenders of the site . This will allow the owners of the site to keep an eye on the impact of the recommenders . On the other hand , it will give us more reliable data and will enable us to look into other facets of the recommendations , such as variety and sensitivity to the order . With that information we will be able to better understand what makes users more active , as well as to design recommenders that may have different mixes , depending on the profile of the user .
WWW 2012 – AdMIRe'12 WorkshopApril 16–20 , 2012 , Lyon , France928 6 . ACKNOWLEDGMENTS
This work is supported by the QREN AdI Palco3.0/3121
PONORTE ; the European Commission , FP7 ( Seventh Framework Programme ) , ICT 201115 Networked Media and Search Systems , grant agreement No 287711 ; and the ERDF through the Programme COMPETE and by the Portuguese Government through FCT Foundation for Science and Technology , project ref . PTDC/EAT MMU/112255/2009 .
7 . ADDITIONAL AUTHORS
Additional authors : Mohamed Sordo ( Universitat Pom peu Fabra , Spain , email : mohamedsordo@upfedu )
8 . REFERENCES [ 1 ] R . Burke . Hybrid recommender systems : Survey and experiments . User Modeling and User Adapted Interaction , 12:331–370 , 2002 .
[ 2 ] O . Celma . Music Recommendation and Discovery in the
Long Tail . PhD thesis , Universitat Pompeu Fabra , Barcelona , Spain , 2008 .
[ 3 ] S . C . Deerwester , S . T . Dumais , T . K . Landauer , G . W .
Furnas , and R . A . Harshman . Indexing by latent semantic analysis . Journal of the American Society of Information Science , 41:391–407 , 1990 .
[ 4 ] R . Kohavi , R . Longbotham , D . Sommerfield , and R . M . Henne . Controlled experiments on the web : survey and practical guide . Data Mining and Knowledge Discovery , 18(1):140–181 , 2009 .
[ 5 ] P . Lamere . Social tagging and music information retrieval . Journal of New Music Research , 37(2):101 – 114 , 2008 .
[ 6 ] P . Ruppert , R . Hart , and S . Evans . The 2007 digital music survey , Entertainment Media Research , 2007 . http://wwwslidesharenet/patsch/ emr digital music survey 2007 .
[ 7 ] B . Sarwar , G . Karypis , J . Konstan , and J . Riedl .
Item based collaborative filtering recommendation algorithms . In Tenth International Conference on World Wide Web , pages 285–295 , Hong Kong , 2001 .
[ 8 ] G . Tzanetakis and P . Cook . Musical genre classification of audio signals . IEEE Transactions on Speech and Audio Processing , 10(5):293 – 302 , 2002 .
WWW 2012 – AdMIRe'12 WorkshopApril 16–20 , 2012 , Lyon , France929
