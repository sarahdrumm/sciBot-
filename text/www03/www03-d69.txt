Web sessions clustering with artificial ants colonies
Nicolas Labroche
Laboratoire d’Informatique de l’Universit´e de Tours
64 , avenue Jean Portalis
Tours , France
Nicolas Monmarch´e
Laboratoire d’Informatique de l’Universit´e de Tours
64 , avenue Jean Portalis
Tours , France
Gilles Venturini
Laboratoire d’Informatique de l’Universit´e de Tours
64 , avenue Jean Portalis
Tours , France labroche@univ tours.fr monmarche@univ tours.fr venturini@univ tours.fr
ABSTRACT In this paper , we present AntClust , an ant based clustering algorithm and its application to the Web usage mining problem . We define a Web session as a weighted multi modal vector and we also develop a similarity measure between two sessions . We show that the partitions found by AntClust are stable on a data set made of real sessions extracted from a Web site of the University of Tours . Contrary to some other studies , we do not only consider the transactions model to describe the sessions . We show that our algorithm performs well and is able to find non noisy clusters when dealing with sessions defined by a vector containing the number of hits recorded for each of the Web page .
Categories and Subject Descriptors Area 8 [ Search and Data Mining ]
General Terms Clustering
Keywords Web usage mining , artifial ants , clustering
1 .
INTRODUCTION
As the usage and the content of the World Wide Web ( ” Web ” ) growths , it becomes a necessity to better appreciate how Web sites are visited . This knowledge can be useful when we consider the problem of dynamically reorganizing Web sites according to navigation behaviours already observed . This knowledge can be also used to predict the pages that are likely to be requested in a near future . That allows loading them in the memory of the Web server , which can speed up the connection times for the users . Cooley defines the data mining task applied to Web data as Web mining . More precisely , the activity of mining data related to the behaviour of the users on the Web sites is called Web usage mining [ 1 ] .
The Web usage mining mainly relies on the study of Web sessions ( or ” sessions ” ) . These sessions are extracted from Web server log files . They reflect the activity of a user on a Web site during a given period of time . They are very noisy , since the user is generally not clearly identified . When the user identification is unknown , the requests contained in the log files are sorted by IP number and by date , and then grouped according to the estimated time Copyright is held by the author/owner(s ) . WWW2003 , May 20–24 , 2003 , Budapest , Hungary . ACM xxx . that lasts a session . Then , several methods have been developed to extract knowledge from the sessions to describe the navigational behaviours of the users on a Web site .
Some studies focuses on association rules to discover relationships between the Web pages that are accessed during the sessions like in [ 8 ] . In this work , sessions are coded as a transaction , a Boolean vector that indicates for each Web page of the site if it has been accessed during the session . At the end , the algorithm generates rules that link together two groups of Web pages , according to a support and a confidence thresholds specified by the analyst .
To avoid grouping pages that have been accessed within a large period of time , some researchers have introduced a time constraint when searching for relationship between the Web pages as in [ 7 ] . The generated rules are called sequential rules as time is used to order and define the relations between Web pages .
The knowledge extracted from the association rules and the sequential rules is worthy for cross marketing purposes as it enlightens relationships between items of the Web site . Thus , it becomes easy to advise the users to purchase one item , knowing it is linked to another one that has been previously visited .
Nevertheless , these rules are not sufficient enough to explain why people went to a page and not to another one first . These rules can not describe the way people perceive the Web site and the motivations that lead them to visit it . In other words , more information is needed in the description of the sessions , such as the time spent or the number of hits recorded for each page of the Web site , to evaluate the interest of the users .
Some other researchers tried to apply clustering algorithms to discover homogeneous groups of sessions . The underlying idea of the method is that the algorithm should gather in the same cluster the sessions that correspond to the users that navigate similarly , that is to say , that have the same motivation and interests .
We may cite among the research that has been conducted in this field the work of Yan et al . [ 9 ] in which the authors use the First Leader clustering algorithm to create groups of sessions . The sessions are described as previously , with a vector that states for each Web page if it has been accessed during the session . When the algorithm ends , a profile is edited for each cluster . This profile is a vector whose components correspond to a Web page similarly to the sessions vectors . The value associated to each Web page is equal to the mean value computed over the sessions for the same Web page . This ” mean access vector per page ” is then used to advise dynamically any user that corresponds to a cluster profile , with the other Web pages accessed in the profile that the user has not visited yet . The weakness of the method stands in the use of the First Leader algorithm . On the one hand , this algorithm is fast because it reads only one time each object to be clustered . But , on the other hand , the order of the objects in the file influences the composition of the groups . Furthermore , the analyst has to specify how many groups are expected .
Other authors try to apply more sophisticated algorithm . They searched for robustness and for low time consumption like in [ 2 ] . Estivill Castro and al . propose here a derivative form of the Kmeans algorithms which uses the median instead of the barycentre to compute the position of the centre of the groups after each affectation of an object to a cluster . Nevertheless , the main problem still remains : the analyst has to specify the number of expected clusters .
To solve this problem , Heer and al . propose in [ 3 ] to find automatically , the number of expected clusters by evaluating the stability of the partitions for different number of clusters . The method works well but is extremely time consuming . Thus , this method may not be used in the Web mining context , where the data sets to explore contain a lot of sessions ( often several thousands sessions extracted from one log file ) .
Finally , Labroche and al . describe in [ 6 ] a clustering algorithm called AntClust that is inspired from the chemical recognition system of ants and that allows to find automatically the number of expected clusters . To achieve this goal , the algorithm generates random meetings between ants that represent an object , similarly to a chemical odour and that react according to etablished behavioural rules . At the end , the ants that have the same odour should gather in the same nest . The algorithm can handle any data type provided that a similarity measure is defined to support these types . We propose here , to show how an enhanced version of AntClust can deal with sessions extracted from a real Web site .
This paper is organised as follows . We present in the section 2 an enhanced version of AntClust that allows handling the files of sessions extracted from the Web server files . In the section 3 , we introduce a weighted multi modal description of the sessions and a similarity measure between two sessions to manipulate them . In section 4 , we test the AntClust algorithm over a real data set of sessions , extracted from a Web site of the University of Tours containing online computer sciences courses . Finally , we show that AntClust performs well and is able , according to the weights chosen to describe the sessions , to find pertinent and non noisy clusters of sessions . We also discuss the future evolutions of the method and the advantages to use an ant based clustering algorithm to address the problem of determining the profiles of the clusters and the possibilities to develop an incremental method .
2 . PRESENTATION OF ANTCLUST
The goal of AntClust is to propose a solution to the unsupervised clustering problem . The method finds groups of similar objects as close as possible to the natural partition of the data set . No assumption is done about the representation of the objects , so they can be described either with numerical , with symbolic or with first order logic values . The algorithm only needs to use a similarity measure that takes a couple of objects   and as input , and outputs a real value between and . Value means that the objects are totally different , that they are identical . The similarity measure adapted to the processing of the Web sessions is described in the section 3 .
   
In order to solve the unsupervised clustering problem , the idea of AntClust is to model , in a simple way , the chemical recognition system of ants by associating an object to the genome of an artificial ant . To better understand the modelling that has been realised , we first introduce the main principles of the chemical recognition system of ants . Then , we show how the artificial ants are modelled in term of parameters and behavioural rules . Finally , we present the upgrades that have been developed to enhance the robustness and the adaptability of the original AntClust algorithm . 2.1 The chemical recognition system of real ants
The AntClust algorithm is inspired by the chemical recognition system of ants . This biological mechanism allows ants to recognize the nestmates from the intruders . To achieve this goal , ants detect the odour that is spread over the cuticle of the encountered ants ( also called label ) and then compare this perceived label to a neuronal template . The template is learned during the youth of ants and then updated during all their life . The label is partially determined by the genome of each ant and by the chemical substances continuously exchanged with the other nestmates . The environment ( the nest material , the food ) plays also a role in this discrimination process between ants . The continuous exchanges with the nestmates lead to the establishment of a colonial odour ( according to the ” Gestalt theory ” [ 4 ] ) that is shared and recognised by every nestmates . We now describe how these biological concepts are adapted to the clustering problem in AntClust . 2.2 Modelling of the artificial ants parameters :
Each artificial ant is mainly described by a genome , a label and
221 Parameters a template . More precisely , for one ant   , we define the following The label . It is determined by the belonging nest of the ant   and is simply coded by a number that is representathe influence of any nest , so equals . This label will evolve over time until each ant has found the nest that best fits its genome . tive of the nest . When the algorithm starts , ants are not under
The template . It is defined half by the genome  the ant , and half by an acceptance threshold!" primer corresponds to one session from the data set and can not be modified by the algorithm . The latter is learned during an initialisation phase , similar to the real ants ontogenesis period , in which each artificial ant meet other ants , and each time evaluates the similarity between their genomes . The re of % . The
$#
    ) observed during this period . sulting acceptance threshold !" % is a function of the and mean maximal &' ( similarities % !" updated after each encounter realised by the ant  j , as the sim ilarities observed may have changed . The following equation shows how this threshold is learned and then updated : is dynamic and is
    )
$# $#
$#
!"
% +*
    )
,.&' ( that reflects if the ant  
    ) is successful during its meetings with all encountered ants or not . Since a young
An estimator & ant has not realised any meeting , &0 213 at time %413 . & estimates the size of the belonging nest of ant   ( ie ants with is simply increased when ant   meets the same ) .
&
/ an other ant with the same label and decreased when labels are different .
An estimator &   in its nest . which measures how well accepted is ant It is increased when ant   meets another ant with the same label and when both ants accept each other and decreased when there is no acceptance between ants .
An age update the maximal and mean similarities values . which , at the beginning , equals and is used to
222 Acceptance between ants
Once artificial ants have learned their acceptance threshold , they have to do meetings to generate the nests that will define the final clusters . Before a nest can be created , ants test encountered ants by comparing the similarity of their genome to their own acceptance threshold . In order to understand how the acceptation prothat meet . We define cess works , let us consider two ants   and that there is acceptance ( or recognition ) between   and when ( see figure 1 ) :
2 . The /( ) rule applies when an ant with no nest meet and accept an ant that already belongs to a nest . In this case the ant that is alone join the other in its nest . This rule enlarges the existing cluster by adding similar ants .
3 . The
*,+ rule increments the estimators & in case of acceptance between two ants that belong to the same nest . Each ant , as it meets a nestmate and tolerates it , imagines that its nest is bigger and feels more integrated in its nest . and &
4 . The
'$ . rule applies when two nestmates meet and do not accept each other . In this case , the worst integrated ant is ejected from the nest . That rule permits to remove non optimally clustered ants to change their nest and try to find a more appropriate one .
5 . The
/'$ . rule applies when two ants that belong to a distinct nest meet and accept each other . This rule is very important because it allows the gathering of similar clusters , the small one being progressively absorbed by the big one .
 
   
$#
.!"
.!"
   
%
$#
%
Once , the ants have accepted each others , the behavioural rules define the actions to be done for the artificial ants and allow the convergence of the method .
 
! " # ! " # $
Figure 1 : Principle of acceptance and rejection between two ants   and
223 Behavioural rules
The AntClust algorithm randomly selects two ants at each iteration and simulates meetings between them . At this moment , their labels , their acceptance threshold but also the estimators &0 and &   are changed according to behavioural rules . These rules are extremly important because they ensure the convergence of the method . At the end of the algorithm , the gathering of ants in a finite number of nest provides the expected partition of the data set . The following rules are used in AntClust :
1 . The & % ' rule applies when two ants that have no nest meet and accept each others . In this case , a new nest is created . This rule initiates the gathering of similar ants in the very first clusters . The latter are then used as ” seeds ” to generate the final clusters according to the other rules .
6 . There is also a rule that is used when no other rule applies and that do nothing .
'$ .
2.3 Modifications in the new version
The presented version has been enhanced , compared to the version described in [ 6 ] . As the modifications concern the robustness and the optimization of the method , but do not modify the algorithm and the modelling of the artificial ants , we do not give much more details about these changes . The interested readers may refer to the following paper [ 5 ] , in which all the experiments leading to the enhanced version of AntClust are described .
Nevertheless,we may cite / major modifications , that allows to
AntClust , to be more adapted to the data sets where several clusters can be found .
The first modification concerns the number of iterations that are done to ensure a good convergence of the algorithm . In the previous version of AntClust , an analyst had to specify how many iterations had to be done whereas in the new version , this number is estimated according to the minimal number of meetings each ant has to perform . It has been shown in [ 5 ] , that each ant should perform iterations
1/ meetings , whatever the data set is , to enable the convergence . Since / ants are uniformly chosen at each iteration , the number of be clustered as follows : becomes linearly linked to the number of data to
43
' 5
1/ 764
43
' 5 percentage of the number of data ( generally 1/,8
The second modification concerns the method used to delete the nests that are not representative enough to be kept in the final partition . In the first version of AntClust , all the nests whose sizes do not exceed a threshold were deleted . The threshold was equal to a ) . This approach was limited , because the algorithm could not find more than a given number of clusters of the same size . The new version replace this deterministic method by a probabilistic one . Each nest is associated to a probability to be deleted . It depends mainly on the mean ) , and the size of the nest as in the previous version . The result are good since the algorithm is able to find from little to large number of clusters without any parameter that should be entered by an analyst , as it can be seen hereafter . integration of the ants in the nest ( estimated with &
5 :
 
# %
)   0 2 + 2 + 1 / 9 )   Initialisation of the ants :
Algorithm 1 : ANTCLUST main algorithm , enhanced version ANTCLUST( ) ( 1 ) ( 2 ) ( 3 ) ( 4 ) ( 5 ) ( 6 ) ( 7 ) ( 8 ) iterations during which two ran session of the data set
'$ .
  ants    *
* $# % is learned !" , , & & * ,/ 6 43
43
Compute for each nest 5 :
Simulate domly chosen ants meet bility to be deleted Test against the probability
, the proba
5 % ' for each nest
Delete the nests whose tests are successfull Re assign each ant having no more nest to the nest of the most similar ant found that have a nest .
( 9 )
( 10 )
( 11 ) ( 12 )
*
5 % '
5 :
3 . A NEW DEFINITION OF THE WEB SES
SIONS
In this section , we define a general and evolutive framework to represent and to compare the Web sessions . We describe a session as a weighted multi modal vector in which each component has its own data type and its own weight .
 
'$ .
. Let
3.1 Definition of the global similarity measure The data type implies that there exists a similarity measure between the   that has the data type % The weight associated to each component of a session allows us to define the global similarity measure
, between two sessions and , as the weighted sum of the sessions vector : component of the sessions and '
, be this similarity measure .
 
 
1
( #%$
 
"!
6& ( '
'
 
  with ( ' being the number of components used to describe the sessions . 3.2 Description of a session
We use the following parameters in our session vector each of them being extracted from the Web server log file :
The IP number of the user The identity of the user ( if it is known ) The date and time of connection The reconstructed history that lists sequentially the Web pages The representation of the session as a transaction vector which states for each page of the Web site if it has been accessed at least one time during the session . that have been visited during the session
A time vector that contains for each page , the estimated time that the user spent . For the last page seen , the time is estimated by the mean of the times spent on the other pages , as it can not be computed . For the pages that are loaded too the number of impacts recorded for each page . quickly , it is possible to have a time equal to . In this case , we artificially set this time to second to be consistent with A date vector that lists for each page of the Web site , the first A hits vector , that counts for each page of the Web site , the number of hits that have been recorded . date they have been visited the total time of the session
This list could be completed by taking into account the operating system or the browser of the user for example . We now describe some measures that correspond to the data types of the parameters described before . 3.3 Examples of typed similarity measure
We introduce in this section , some of the similarity measures associated to a data type . We present hereafter the measures that we use between two transactions , between two vectors of pages hits and finally between two histories .
331 Similarity between two transactions
As it has been said before , the transaction is a vector that either if the corresponding page has been reached during the if it has not been accessed . To evaluate a similarity contains session , or between two vectors )* and ) , we count the number of similar elements , and then normalise this sum by the total number of components as follows :
21
1 and otherwise and with 332 Similarity between two hits vectors of components in the transaction vectors .
+"+
41 with / if
( .$0/

"!
21
, the number
To compare two hits vectors , we evaluate two distinct measures .
First , we define the similary between two hits vectors 3 and 3 as the cosinus of the angle made by the vectors . This measure is often used to compare numerical vectors as it is not very time consuming . Nevertheless , one problem that appears is that the hits vectors gen erally contains many values , when many of the pages of the Web site are not visited during the sessions . In this case , the cosinus measure is not accurate enough , to guaranty a good discrimination between two vectors that are quiet similar .
Second , we use the normalised Euclidian distance 4 define our similarity measure that is then expressed as follows : as a base to
' %
6574
This similarity measure works very well , since it allows to reflect even the slight changes between two hits vectors . We use the same similarity measure between the date vectors and the time vectors , since they are coded with numerical values .
333 Similarity between two histories vectors
This similarity measure is more complicated , since the vectors contain as their first component , the first page seen by the user , and as second component , the second page , and so on . Our idea is to model each history as a string whose letters are pages , and to replace the history comparison , by a string comparison . In order to achieve this goal , we have to define an alphabet in which each letter corresponds to a page of the Web site .
 
*  
*
2
2
2
( 9 )
9 )
2
(
' ( % + ' '
, ( %
)
)
)
)
1
.
3
3
1
3
3
, where the number of components that are equal in both matrix and nor equation formalises the similarity measure according to the matrix
The comparison is made by representing each history as a mais the size of the alphabet . Each component of these matrix represents a transition between two pages . trix of size   The value taken by the component   of the matrix is equal to the number of time the user visited consecutively the   3 page and the "'%3 page of the Web site . Once that the matrix are set , we count ) . The following malise this sum by the number of components ( and & 21  "! % ' and otherwise and with with / 4 . EXPERIMENTS AND RESULTS that represent the original histories : of pages in the Web site .
, the number
41 if

( .$
( .$
"!
21 ences teaching . sessions extracted from a Web site of the University of Tours ( France ) related to the
We now present the data set of real Web sessions that we used to evaluate the AntClust algorithm and the experimental protocols that we conducted to verify the stability and the pertinence of our method . 4.1 Presentation of the data set The data set that we use is composed of ,0
. The latter corresponds to computer sci , %+&'
( such as ) . % The sessions have been recorded in october / , during one month . The ,00,0 unique sessions , that is to say , ses sions that come from an IP number that has been seen only one time during the month . Consequently , our sessions may reflect a lot of distinct behaviours of the users , and thus may be very noisy . Nevertheless , as there are few hyperlinks between the online courses , we expect the clusters to be representative of a minimum of courses in order to be valuable and understandable . 4.2 Stability of AntClust
Its Web site mainly presents the online courses

% sessions contain
,
 
%
!"
Before evaluating AntClust in term of performance , we must ensure that it is able to converge on data sets composed of users sessions . It has been already shown , in [ 5 ] , that AntClust converges and performs well , when it is applied on artificial data sets and real set and save the generated partitions stability measure that takes as input two partitions times the algorithm on the same data of Fisher . In order to decide if $ . Then , we define a
, and and data sets such as the famous AntClust is stable , we run outputs a real value
1
"!
  defined as follows :

$#
2  "!  
& %
1
  where : with and
0 if
 
1
 
& %
1 otherwise the number of objects in the original data set from which is the cluster identifiant for is the cluster identifiant have been generated . in the partition and the object  of the same object in the partition
.
This stability measure verifies for each couple of objects if its situation ( both objects of the couple are in the same cluster or not ) is the same in the compared partitions . If all the couples of objects are often clustered in the same way , our algorithm can be considered to be stable .
We compute the stability measure for all possible couples of distinct partitions . Each time , the minimum and maximum values of the stability measure are updated . The table 1 indicates the mean , maximum and minimum values of the measure of stability observed for the data set composed of real sessions . These
Std . Dev .
Max .
Mean
)(
*(
0"8
0*(
*"8
Min .
**(
Table 1 : Mean values ( and standard deviation ) , maximal and minimum values of stability measure observed on real sessions . results show that AntClust is extremely stable . The little variability observed for the number of clusters found , that is reflected by the standard deviation and the minimum and maximum values observed , is not significant . This variability is certainly due to the stochastic nature of the algorithm , when it randomly chooses the ants that meet or when it decides if a nest should be deleted . As the global repartition of the objects in the clusters is quiet constant , we can consider that AntClust converges . We describe hereafter how well it performs according to the values used to weight the parameters of the sessions . 4.3 Analysis of the performance
In order to evaluate the performance of AntClust in association with our definition of a session as a weighted multi modal vectors , we develop three experiments . The goal of these tests is to perceive the relative influence of the components that compose a session , on the quality of the final partition .
431 Description of the experiments
In the first experiment called
, our objective is to test the algorithm with all the components that describe a session . We give the same weight to each of the component ( in this case the weights are equal to ) , to evaluate the interest of our definition of the sessions . In the second experiment , called+
, we only consider the transaction component of our session . This test corresponds to the general case that is used when researchers want to evaluate their clustering algorithms on Web sessions , without deploying a time consuming measure of similarity . If our method performs well with this session representation , it could be considered as good , in a clustering point of view , as the other works of the research field .
In the last experiment , called
, we want to show the impact on the content of the clusters found , when the number of hits is used instead of just a Boolean vector as in the transaction representation .
.
,+ and
We sum up in the table 2 , the weights associated to each of the experiments described previously . The first column shows the components that define a session in our model . The three next columns present the weights associated to each of these components in the experiments 432 Results The experiment of the accesses that have been realised on the Web site . / clusters The problem is that the / biggest clusters that count respectively / sessions , mainly describe the same computer sessions and &*
, in which every components of the sessions are used with the same weight , does not provide a clear partition of them gather the half of the sessions . have been found , but only
' &
.
&
&
1
: /
&
&
1  
#  
 
3
 
  9
! 9
9
9
9
9
9
/ 2
2 5  
!
!
$
!

! " 9
1 9
9
9
9
1 9
9
1 9
2 9
9
9

9
9

9
' ' 8 ' ' / 8 * / / Parameters IP number User ID
Date & time Transaction Time vector Date vector Hits vector Total time
A B 0 1 1 0 0 1 1 1 0 1 0 1 1 0 0 1
C 0 0 0 0 0 0 1 0
Table 2 : Weights associated to the components of the sessions in the three experiments conducted to evaluate the performance of AntClust sciences course relative to an operating system . All the clusters are very noisy since they reflect the impacts on many distinct courses , even if some of the courses are more represented in each group . This is due to the fact that all the components are taken into account when generating the clusters and have the same weight in the computation of the similarity . Consequently , two sessions that do not refer to the same courses may be affected to the same cluster , if they begin the same day or if they last the same time , or if their IP number is the same . The use of the same weight for the components is not enough discriminating to generate meaningful clusters . Furthermore , as all the components are used , the time spent to compute the similarity between two sessions is maximal .
The experiment + . / clusters are found and
, only uses the transaction representation of the sessions . This coding associated to AntClust performs well as the clusters found are less noisy than the clusters of the previous experiment of them gather the half of the sessions . The difference is that each of these clusters refers to the same operating system course , but not to the same part of the course ( unlike in experiment ) . In this case , the clusters refer to several distinct parts of the course in the same cluster . Nevertheless , some other smaller clusters also refer these parts of the operating system course mixed with other courses . This method is good since the results are not to noisy to be interpreted quickly and the similarity measure is one of the less time consuming .
The last experiment
, in which the hits by page representation replaces the transaction model , performs well . The generated clusters are much more accurate than the clusters generated with the two previous method . experiments , clusters are created and as for the other to the / biggest clusters that refer to several courses ( / or clusters gather the half of the sessions . Contrary ) , all the other clusters whose size is smaller , refer to only one course or part of a course . This denotes that AntClust , when associated to a good session representation , can be enough discriminant to generate clusters that only deal with one subject where other coding are much more noisy . Furthermore , the similarity measure is not very time consuming since it relies on an Euclidian distance . sessions ( including reading , filtering and preprocessing the sessions )
Finally , AntClust treats the all clustering process of our ,0in about /   minutes , with a 5 . CONCLUSION minutes clustering step .
*,*
In this paper , we have presented AntClust , an ant based clustering algorithm and its application to the Web usage mining problem . AntClust is able to find a partition from any data set without any initial knowledge such as the number or the shape of the expected clusters . Furthermore , we enhanced AntClust so as it does not need to be parameterized by the user contrary to a lot of other algorithms . We have also proposed the definition of a session as a weighted multi modal vector for which we have developed an adapted similarity measure that can be used with all the similarity based clustering algorithms . We have shown experimentally that the partitions found by AntClust are stable on a data set made of real sessions extracted from a Web site of the University of Tours . We have also shown that the global performances of AntClust vary according to the weights used to described the sessions . AntClust is able to find non noisy clusters that deal with only one subject when it uses the pages hits representation of the sessions . In this case the results outperforms those obtained with a traditional transaction representation of the sessions .
In the future , we plan to solve some problems that remain , before AntClust can be used in a real world application . First , the incrementality of the method should be taken into account , since we can add new ants that have no label with the others . After the meetings , the existing nests will be enhanced and some new ones may be created . Second , the edition of profile for each cluster , can be estimated by the data of the ant which is the most representative of its value ) . Finally , the representation of the results is a hard problem since , the clustering must be understandable by a webmaster , who is not necessary a specialist of the data mining problem . We may choose a visualisation method that allows to see the profile of each cluster represented over the graph of the Web site . nest ( the ant that has the biggest &
6 . REFERENCES [ 1 ] R . Cooley , J . Srivastava , and B . Mobasher . Web mining :
Information and pattern discovery on the world wide web . In Proc . of the 9th IEEE International Conference on Tools with Artificial Intelligence ( ICTAI’97 ) , 1997 .
[ 2 ] V . Estivill Castro and J . Yang . Fast and robust general purpose clustering algorithms . In Pacific Rim International Conference on Artificial Intelligence , pages 208–218 , 2000 .
[ 3 ] J . Heer and E . Chi . Mining the structure of user activity using cluster stability . In Proceedings of the Workshop on Web Analytics , SIAM Conference on Data Mining ( Arlington VA , April 2002) . , 2002 .
[ 4 ] B . H¨olldobler and EO Wilson . The Ants , chapter Colony odor and kin recognition , pages 197–208 . Springer Verlag , Berlin , Germany , 1990 .
[ 5 ] N . Labroche . Adaptation des fourmis artificielles `a Internet pour la mesure d’audience . Rapport interne , Laboratoire d’Informatique de l’Universit´e de Tours , EPU DI Tours , november 2002 . 24 pages .
[ 6 ] N . Labroche , N . Monmarch´e , and G . Venturini . A new clustering algorithm based on the chemical recognition system of ants . In Proc . of 15th European Conference on Artificial Intelligence ( ECAI 2002 ) , Lyon FRANCE , pages 345–349 , 2002 .
[ 7 ] F . Masseglia , P . Poncelet , and R . Cicchetti . An efficient algorithm for web usage mining . In Networking and Information Systems Journal ( NIS ) , 2(5 6 ) , pages 571–603 , 1999 .
[ 8 ] B . Mobasher , R . Cooley , and J . Srivastava . Automatic personalization based on Web usage mining . Communications of the ACM , 43(8):142–151 , 2000 .
[ 9 ] TW Yan , M . Jacobsen , H . Garcia Molina , and U . Dayal .
From user access patterns to dynamic hypertext linking . In Proc . of 5th WWW , pages 1007–1014 , 1996 .
* * *    
