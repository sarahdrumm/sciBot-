Meta Patterns : Revealing Hidden Periodic Patterns fww1 , jiyang , psyug@usibmcom
IBM T . J . Watson Research Center
Wei Wang , Jiong Yang , and Philip S . Yu
Abstract
Discovery of periodic patterns in time series data has become an active research area with many applications . These patterns can be hierarchical in nature , where a higher level pattern may consist of repetitions of lower level patterns . Unfortunately , the presence of noise may prevent these higher level patterns from being recognized in the sense that two portions ( of a data sequence ) that support the same ( high level ) pattern may have different layouts of occurrences of basic symbols . There may not exist any common representation in terms of raw symbol combinations ; and hence such ( high level ) pattern may not be expressed by any previous model ( defined on raw symbols or symbol combinations ) and would not be properly recognized by any existing method . In this paper , we propose a novel model , namely meta pattern , to capture these high level patterns . As a more flexible model , the number of potential meta patterns could be very large . A substantial difficulty lies on how to identify the proper pattern candidates . However , the well known Apriori property is not able to provide sufficient pruning power . A new property , namely component location property , is identified and used to conduct the candidate generation so that an efficient computation based mining algorithm can be developed . Last but not least , we apply our algorithm to some real and synthetic sequences and some interesting patterns are discovered .
1 Introduction
Periodicity detection on time series data is a challenging problem of great importance in many real applications . The periodicity is usually represented as repeated occurrences of a list of symbols in a certain order at some frequency [ 3 , 6 , 11 , 12 ] . Due to the changes of system behavior , some pattern may be only notable within a portion of the entire data sequence and different patterns may present at different places and be of different durations . The evolution among patterns may also follow some regularity . Such regularity , if any , would be of great value in understanding the nature of the system and building prediction models . Consider the application of inventory replenishment . The history of inventory refill orders can be regarded as a symbol sequence . For brevity , let ’s only consider the replen ishment of the flu medicine . Figure 1(a ) shows the history of refill orders of a pharmacy during 1999 and 2000 on a weekly basis . The symbol “ r ” stands for a refill order of flu medicine was placed in the corresponding week while “ ” represents that no flu medicine replenishment was made in that week . It is easy to see that the replenishment follows a biweekly pattern during the first half of each year and falls into a triweekly cycle during the second half of each year . This seasonal fluctuation also forms a high level periodic pattern ( The period length is one year ) . However , such high level patterns may not be expressible by any previous model ( defined in terms of raw symbols ) due to the presence of noise , even when the noise is very limited . In the above example , a major outbreak of flu caused a provisional replenishment at the 4th week of 1999 ( Figure 1(a) ) . Afterwards , even though the replenishment frequency is back to once every other week , the occurrences of all subsequent replenishments become misaligned . Even though the biweekly replenishment cycle was notable in the first two quarters of both 1999 and 2000 , the corresponding portions in the data sequence have different layout of replenishment occurrences . This characteristic determines that the representation of the above twolevel periodicity is beyond the expressive power of any traditional model of periodic patterns that only takes raw symbols as components . In any traditional model , each symbol specified in a pattern uniquely matches its counterpart in the data sequence , and all occurrences of a pattern have to share a unique common layout . This inherent limitation would prevent many interesting high level patterns from being captured . Note that , even if , the only annual patthe period length ( ie , 52 weeks ) is given tern that is able to be generated under the traditional model via pairwise comparison of symbols corresponding to each week is shown in Figure 1(b ) . The symbol “ * ” denotes the don’t care and can match any symbol on the corresponding posiposition tion . Clearly , little information is conveyed in this pattern as the important two level periodicity is completely concealed .
To tackle the problem , we propose a so called meta pattern model to capture high level periodicities . A meta pattern may take occurrences of patterns/meta patterns ( of lower granularity ) as components . In contrast , we refer to the patterns that contain
Note that in many applications , eg , seismic periodicity analysis , the period length is usually unknown in advance and is part of the mining objective .
It is introduced to represent the position(s ) in a pattern where no strong periodicity exhibits .
1 bers in the brackets indicate the offset of the component within the pattern . The two level periodicity can be easily represented only raw symbol(s ) as the basic patterns , which may be viewed as special cases of meta patterns . In general , the noise could occur anywhere , be of various duration , and even occur multiple times within the portion where a pattern is notable as long as the noise is below some threshold . Even though the allowance of noise plays a positive role in characterizing system behavior in a noisy environment , it prevents such a meta pattern from being represented in the form of an ( equivalent ) basic pattern . The model of meta pattern provides a more powerful means to periodicity representation . The recursive nature of meta pattern not only can tolerate a greater degree of noises/distortion , but also can capture the ( hidden ) hierarchies of pattern evolutions , which may not be expressible by previous models . In the previous example , the biweekly and the triweekly replenishment cycles can be easily represented byP =(r:[ ; ];fi:[ ; ] ) andP =(r:[ ; ];fi:[ ; ] ) , respectively , where the numas(P :[ ; ];fi:[ ; ];P :[ ; ] ) which can be interpreted as the patternP repeats at the first 24 weeks and the patternP repeats from week 26 to week 52 . As shown in Figresponding low level pattern ( ie , either(r:[ ; ];fi:[ ; ] ) or ( r:[ ; ];fi:[ ; ] ) ) is notable . ffl While a basic pattern has two degrees of freedom : the peffl Many patterns/meta patterns may collocate or overlap for riod ( ie , the number of positions in the pattern ) and the choice of symbol for each single position , a meta pattern has an additional degree of freedom : the length of each component in the pattern . It is incurred by the fact that a component may occupy multiple positions . This extra degree of freedom would increase the number of potential meta pattern candidates dramatically .
Unfortunately , the flexibility of meta pattern poses serious challenges in the discovery process , which may not be encountered in mining basic patterns . ure 1 ( c ) , each rectangle box denotes the portion where the cor any given portion of a sequence . As a result , during the meta pattern mining process , there could be a large number of candidates for each component of a ( higher level ) metapattern . This also aggravates the mining complexities .
Therefore , how to identify the “ proper ” candidate metapatterns is very crucial to the overall efficiency of the mining process , and will be the focus of the algorithm part of the paper . To tackle this problem , we employ a so called component location property , in addition to the traditionally used Apriori property , to prune the search space . This is inspired by the observation that a pattern may participate in a meta pattern only if its notable portions exhibit a certain cyclic behavior . A computationbased algorithm is devised to identify the potential period of a meta pattern and for each candidate period , the potential components and their lengths within the meta pattern . The set of all meta patterns can be categorized according to their structures and are evaluated in a designed order so that the pruning power provided by both properties can be fully utilized .
In summary , we claim the following contributions in this pa per.ffl A model of meta pattern is identified to capture the cyclic ffl The component location property is proposed to provide ffl A computation based algorithm is designed to identify and relationship among discovered periodic patterns and to enable a recursive construction of exhibited cyclic regularities . further pruning power , in addition to the traditional Apriori property . to verify potential meta pattern candidates .
The remainder of this paper is organized as follows . Section 2 gives a brief overview of recent related research . The general model is presented in Section 3 . Section 4 outlines the major steps of our algorithm . Section 5 presents experimental results . The conclusion is drawn in Section 6 .
2 Related Work
Most previous work on mining sequence data fell into two categories : discovering sequential patterns [ 1 , 2 , 4 , 7 , 8 , 9 , 10 , 14 ] and mining periodic patterns[3 , 6 , 11 , 12 ] . The primary difference between them is that the models of sequential pattern purely take into account the number of occurrences of the pattern while the frameworks for periodic patterns focus on characterizing cyclic behaviors . Due to space limitations , we will give a brief survey of the recent work on periodic patterns .
In [ 3 ] , Han et . al . presented algorithms for efficiently mining partial periodic patterns . In practice , not every portion in the time series may contribute to the periodicity . For example , a company ’s stock may often gain a couple of points at the beginning of each trading session but it may not have much regularity at later time . This type of looser periodicity is often referred to as partial periodicity . We will see later that our model also allows partial periodicity . tersminrep andmaxdis are employed to specify the mini
To accommodate the phenomenon that the system behavior may change over time , a flexible model of asynchronous periodic pattern was proposed in [ 11 ] . In this model , a qualified pattern may be present only within a subsequence and whose occurrences may be shifted due to disturbance . Two parame mum number of repetitions that is required within each segment of non disrupted pattern occurrences and the maximum allowed disturbance between any two successive valid segments . The intuition behind this is that a pattern needs to repeat itself at least a certain number of times to demonstrate its significance and periodicity . On the other hand , the disturbance between two valid segments has to be within some reasonable bound . Otherwise , it would be more appropriate to treat such disturbance as a signal of “ change of system behavior ” instead of random noise injected into some persistent behavior . The parameter
2 week
1999
2000 week
( week
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r r
( a ) weekly replenishment schedule
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 * * ) r
* * * * * * * * * * * * * *
* * * * * * * * *
* * * * * * *
* * *
* *
* *
* *
*
* r r r r r r r r
( b ) annual pattern captured by traditional model of periodic pattern
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 r r r r r r r r r r r r r r r r r r r
( r : [ 1 , 1 ] , * : [ 2 , 2 ] ) : [ 1 , 24 ] ,
* : [ 25 , 25 ] , ( r : [ 1 , 1 ] , * : [ 2 , 3 ] ) : [ 26 , 52 ] )
( c ) annual pattern captured by meta pattern model
Figure 1 . Meta Pattern r r r r r r r r r r r
1999 r r r r r r r r r r r r
( r r
2000 maxdis acts as the boundary to separate these two phenomtern(r:[ ; ];fi:[ ; ] ) ( for both 1999 and 2000 ) if we set minrep= . ( Each valid segment is indicated by a shaded region ) . Moreover , if we setmaxdis= , the three valid sega valid symbol subsequence of(r:[ ; ];fi:[ ; ] ) while the ena . For example , Figure 1(c ) shows 6 valid segments of pat ments in 1999 ( separated by a disturbance of 1 symbol ) form three valid segments 2000 form another valid symbol subsequence . Obviously , the appropriate values of these two parameters are application dependent and need to be specified by the user . Note that , due to the presence of disturbance , some subsequent valid segment may not be well synchronized with the previous ones . ( Some position shifting occurs . ) Upon satisfying these two requirements , the longest valid subsequence of a pattern is returned . A two phase algorithm is devised to first generate potential periods by distance based pruning followed by an iterative procedure to derive and validate candidate patterns and locate the longest valid subsequence . Still , this paper only concerns patterns constructed from raw symbols and does not address the problem of meta patterns . As we pointed out earlier , due to the extra degree of freedom possessed by meta pattern and the massive amount of potential candidate components , no direct generalization of existing algorithm ( designed for mining patterns consisting of only raw symbols ) can be applied to mine meta pattern efficiently . In fact , serious challenges exist in how to quickly identify the “ proper ” candidate meta patterns so that unnecessary computation can be avoided . Thus , we will focus on candidate meta pattern generation ( rather than the candidate meta pattern validation ) in this paper .
Many patterns may occur frequently by nature and they are of no importance in many applications . In [ 12 ] , instead of frequently occurred periodic patterns , the statistically significant patterns are mined . There is an occurrence probability associated with each pattern . If a pattern occurrence much more than the expectation , then this pattern is called statistically significant or surprising . An efficient algorithm is also proposed in [ 12 ] for
3 mining such patterns .
3 Model of Meta Patterns period of the pattern . “ * ” can be substituted for any literal and is used to enable the representation of partial periodicity . For curs for every 3 time instances in the data sequence . The period of this pattern is 3 by definition . Note that the third component in the pattern is filled by a “ * ” since there is no strong periodicity presents in the data sequence with respect to this component . Because a pattern may start anywhere in the data sequence , only
Let==fa;b;c;:::g be a set of literals . A traditional periodic pattern [ 3 , 11 ] consists of a tuple ofk components , each of which is either a literal or “ * ” .k is usually referred to as the example,:::;a;b;c;a;b;d;a;b;b;: : : is a sequence of literals and(a;b;fi ) represents that the incident “ b followinga ” ocpatterns whose first component is a literal in= need to be conones . Formally , a meta pattern is a tuple consisting ofk components(x ;x ;:::;xk ) where eachxi( ik ) can be one ning of the meta pattern : ( 1 ) a symbol in= ; ( 2 ) “ don’t care ” * ; nent to ensure a non trivial pattern . For example,((r:[ ; ];fi : [ ; ]):[ ; ];fi:[ ; ];(r:[ ; ];fi:[ ; ]):[ ; ] ) is sidered . In this paper , we refer to this type of patterns as basic patterns as each component in the pattern is restricted to be either a literal or a “ * ” . In contrast , a meta pattern may have pattern(s)/meta pattern(s ) as its component(s ) . This enables us to represent complicated basic patterns in a more concise way and to possibly reveal some hidden patterns among discovered and ( 3 ) a pattern/meta pattern . We also require that at least one position of a meta pattern has to correspond to a non “ * ” compo of the following choices augmented by the offsets of the starting and ending positions of the component with respect to the begin
Since each component corresponds to exactly one symbol , we do not have to explicitly record the offset of a component within the pattern as this information can be easily derived . sitions ( or weeks in previous example ) followed by the pattern is the number of positions that the component occupies in the meta pattern . In the previous example , the component length of this meta pattern , which is equal to the sum of the length of all components in the meta pattern . This pattern can be inter tion in between , and such a behavior repeats for every 52 positions ” . For brevity , we sometimes omit the augmenting offset of a component if the length of the component is only one position . model than the basic pattern and the basic pattern can be viewed as a special ( and simpler ) case of the meta pattern . Because of the hierarchical nature of the meta pattern , the concept of level is introduced to represent the “ depth ” of a meta pattern . By setting the level of basic pattern to be 1 , the level of a meta pattern is defined as the maximum level of its components plus 1 . Ac a meta pattern with three components:(r:[ ; ];fi:[ ; ] ) , * , and(r : [ ; ];fi : [ ; ] ) . The length of a component of(r:[ ; ];fi:[ ; ] ) is 24 . We also say that 52 is the span preted as “ the pattern(r:[ ; ];fi:[ ; ] ) is true for 24 po(r:[ ; ];fi:[ ; ] ) for 27 positions with a gap of one posiFor example,(r;fi ) is the abbreviation of(r:[ ; ];fi:[ ; ] ) and((r;fi):[ ; ];fi;(r;fi:[ ; ]):[ ; ] ) is equivalent to ( (r:[ ; ];fi:[ ; ]):[ ; ];fi:[ ; ];(r:[ ; ];fi:[ ; ] ) : [ ; ] ) . It is obvious that the meta pattern is a more flexible cording to this definition , the level of(r;fi:[ ; ] ) is 1 and the level ofP =((r;fi):[ ; ];fi;(r;fi:[ ; ]):[ ; ] ) is 2 . the same level . For instance,(P :[ ;  ];fi:[ ; ] ) is a a symbol sequenceD =d ;d ;:::;ds and a basic pattern P=(p ;p ;:::;ps ) , we sayD  supportsP iff , for each i( is ) , eitherpi=fi orpi=di.D  match ofP . Given a patternP and a symbol sequenceD , a list ofj disjoint matches ofP inD is called a segment with respect toP iff they form a contiguous portion ofD.j is rea segment is said to be a valid segment iffj is greater than or equal to the required minimum repetition thresholdminrep . A valid subsequence inD ( with respect toP ) is a set of disjoint bance thresholdmaxdis.P is said to be a valid pattern inD if there exists a valid subsequence inD with respect toP . The parametersminrep andmaxdis , in essence , define the signifchange of system behavior . The appropriate values ofminrep andmaxdis are application dependent and are specified by the Similarly , given a symbol sequenceD =d ;d ;:::;ds , for any meta patternX=(x :[ ;t ];x :[t + ;t ];:::;xl : [ tl , + ;s]),D  supportsX iff , for each componentxi , either
All terminologies associated with the basic patterns [ 11 ] ( ie , level 1 patterns ) can be generalized to the case of metapatterns ( ie , higher level patterns ) . We now give a brief overview of terms defined in [ 11 ] for basic patterns . Given meta pattern ( of level 3 ) which has a level 2 component and a level 1 component . valid segments where the distance between any two consecutive valid segments does not exceed the required maximum distur icance of the periodicity and the boundary to separate noise and user .
Note that the components of a meta pattern do not have to be of is also called a ferred to as the number of repetitions of this segment . Such
We can define segment , subsequence , and validation in a similar
( 1)xi is “ * ” or ( 2)xi is a symbol anddti , + =:::=dti=xi or ( 3)xi is a ( mata )pattern anddti , + ;:::;dti is a valid subsequence with respect toxi.D  is in turn called a match ofP . manner to that of a basic pattern . Given a meta patternX and a symbol sequenceD , a list ofj disjoint matches ofX inD is called a segment with respect toX iff they form a contiguous portion ofD.j is referred to as the number of repetitions iffj is greater than or equal to the required minimum repetitions minrep . A valid subsequence inD ( with respect toX ) is a set mum disturbancemaxdis.P is said to be a valid pattern inD if there exists a valid subsequence inD with respect toX . minrep andmaxdis , we aim at mining valid meta patterns of disjoint valid segments where the distance between any two consecutive valid segments does not exceed the required maxi of this segment . Such segment is said to be a valid segment
In this paper , given a symbol sequence and two parameters together with their longest valid subsequences ( ie , the valid subsequence which has the most overall repetitions of the corresponding meta pattern ) . Since a meta pattern can start anywhere in a sequence , we only need to consider those starting with a non “ * ” component .
4 Algorithm Outline
The great flexibility of the model poses considerable difficulties to the generation of candidate meta patterns . Therefore , we will focus on the efficient candidate generation of meta patterns in the remainder of this paper . The well known Apriori property holds on the set of meta patterns of the same span , which can be stated as follows : for any valid meta patternP=(P :[ ;t ];P :[t + ;t ];:::;Ps:[ts , + ;ts] ) , the meta pattern constructed by replacing any componentPi with “ * ” inP is also valid . For example , letX = ( (a;b;fi):[ ; ];fi:[   ; ] ) andX =((a;b;fi):[ ; ];fi : [   ; ];(b;c):[ ; ];fi:[ ;  ];X :[ ;  ] ) . IfX is a valid meta pattern , then the patternX =((a;b;fi):[ ; ];fi : [   ; ];(b;c):[ ; ];fi:[ ;   ] ) ( generated by replacing X with “ * ” ) must be valid as well . Note thatX is a level3 meta pattern which has three non “ * ” components:(a;b;fi ) , ( b;c ) , andX ; whereasX is a level 2 meta pattern that has two non “ * ” components:(a;b;fi ) and(b;c ) . Intuitively,X should be examined beforeX so that the result can be used to of levell , the brute force method ( powered by the Apriori property ) to mine patterns of levell+ is to first generate all possible candidates of levell+ by taking valid lower level pat
Nevertheless , because of the hierarchical characteristic of the meta pattern , the Apriori property does not render sufficient pruning power as we proceed to high level patterns from discovered low level patterns . After identifying valid meta patterns prune the search space . terns as component(s ) ; and then , verify them against the symbol sequence . While the verification of a base pattern can be performed efficiently ( eg , in linear time with respect to the length of the symbol sequence [ 11] ) , the verification for a candidate
4
However , this match based approach is still very cumbersome , and more specifically , suffers from two major drawbacks . ( 1 ) The number of candidate patterns of a certain level ( say level ered lower level meta patterns . While a basic pattern has two degrees of freedom : the period and the choice of symbol at each position/component , a meta pattern has an additional degree of freedom : the length of each component . This additional degree of freedom dramatically increases the number of candidate patterns generated . meta pattern may be a cumbersome process because of the typically complicated structure of the candidate meta pattern . In fact , considerable difficulty lies on determining whether a certain portion of the raw symbol sequence corresponds to a valid subsequence of a component of the candidate pattern , especially when the component itself is also meta pattern . One strategy to speed up the process is to store all valid subsequences of each valid low level pattern when the pattern is verified . Then the procedure of determining whether a portion of the sequence is a valid subsequence of a given component can be accomplished via table look up operations . Even though this strategy requires additional storage space , it can usually lead to at least an order of magnitude of performance improvement . We will refer this method as the match based approach in the remainder of this paper . l ) is typically an exponential function of the number of discovIf there arev valid lower level patterns , the number of candidate patterns of spans and with exactlyk components for levell is in the order of(vk( k)s ) . ( 2 ) There are number of times ( ie , at leastminrep times ) . In the above example , the meta patternX can serve as a component of a higher level meta pattern ( eg,X ) only if the locations of valid subsequences ofX exhibits a cyclic behavior with a period equal to the span ofX ( ie , 150 ) . Otherwise,X could not serve as a component ofX . This property suggests typically a huge number of valid subsequences associated with each valid pattern even though only a few of them may eventually be relevant . Generating and storing all of them would consume a significant amount of computing resources and storage space , which in turn leads to unnecessary inefficiency . To overcome these drawbacks , we made the following observation .
Property 4.1 ( Component Location Property ) A valid low level meta pattern may serve as a component of a higher level meta pattern only if its presence in the symbol sequence exhibits some cyclic behavior and such cyclic behavior has to follow the same periodicity as the higher level meta pattern by sufficient that we can avoid the generation of a huge number of unnecessary candidate meta patterns by deriving candidates from qualified span component combinations according to the component location property . To identify qualified span component combinations , we need to detect the periodicities exhibited by the locations of valid subsequences of each low level meta pattern . This can be achieved without generating all valid subsequences for a meta pattern . In fact , only the set of maximum valid segments are sufficient . For a given pattern , a valid segment is a maximum valid segment if it is not a portion of another valid segment . For sitions ( positions 1 to 8 ) in Figure 2(a ) and its location indexes ments indeed provide a compact and ingenious representation of all necessary knowledge of a valid low level meta pattern and is motivated by the following observations . for the symbol sequence in Figure 2(a ) . Usually , the number of maximum valid segments is much smaller than the number of valid subsequences . The total number of distinct valid subse would be in the order of hundreds . It is in essence an exponential function of the number of maximum valid segments . Furthermore , for each maximum valid segment , we only need to store a pair of location indexes indicating its starting and ending ments of a pattern , it is easy to compute all possible starting positions and ending positions of valid subsequences . Any starting position of a valid segment is also a starting position of a valid subsequence because a valid subsequence is essentially a list of valid segments . Given a maximum valid example , ifminrep= andmaxdis= ,fS ;S ;S ;S ;S S g is the set of maximum valid segments of basic pattern(a;fi ) quences of(a;fi ) in the symbol sequence given in Figure 2(a ) positions . In the above example , the segmentS occupies 8 pois the pair( ; ) . The location indexes of maximum valid segffl Given the set of location indexes of maximum valid segsegmentS containingr repetitions of the pattern , there are r,minrep+ distinct starting positions that can be derived fromS . More specifically , they are the positions of the firstr,minrep+ occurrences of the pattern inS , starting positions derived fromS . Similarly , all possible ffl The starting positions of the valid subsequences that exhibit quences of(a;fi ) . Whenminrep= , by careful examination , the potential periodicities of(a;fi ) ( ie , the possible spans of meta patterns that(a;fi ) may participate in generated from(a;fi ) and the valid subsequences that support
Thus , our strategy is to first compute the set of possible starting positions and identify , if any , the ones that exhibit some periodicity . The same procedure is also performed on the ending positions . If the same periodicity exists for both starting positions and ending positions , we then examine , for each pair of starting and ending positions , whether a valid subsequence exists and what is the possible format of the higher level meta pattern ( ie , possible span of the meta pattern and possible length of the component ) . Figure 2(e ) shows some candidate components as a component ) include 7 , 9 , 11 , 18 , and 20 . The periodic behavior discovered on starting positions and ending positions for span = 18 is shown in Figure 2(c ) and ( d ) , respectively . cyclic behavior also present the same periodicity and so do their ending positions . Figure 2(b ) shows the set of possible starting positions and ending positions of valid subse respectively . For instance , positions 1 and 3 are the two ending positions can be computed as well . them .
It is important to notice that the maintenance of the location indexes of maximum valid segments leads to a double win situation . Besides its positive role in candidate generation , it also
5
S2
S4
S6
2
1 a f a
3 4 5 ab
6 a a
7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 a d a a a b e e g d a d ab ac ga a c b b b b b d a a a a a a a a a a a a a a c c c f f f
54 55 56 d e c
57 58 59 60 c d f e
S1
( a ) symbol sequence and maximum valid segments of ( a , * )
S3
S5
1
3
6
6
8
8
10
12
11
13
15
17
17
19
21
28
26
26
22
24
37
39
46
48 possible starting positions
31
33
42
44
51
53 possible ending positions
( b ) possible starting and ending positions of valid subsequences of ( a , * )
1
3
19
21
37
39
10
28
46
( c ) observed periodicies of starting positions for span = 18
6 a a a a a
8 a a a a a a a a a f a a f f a a a a a b b b b b a a a a a a a a d d d a a a g g
15 a a b
24
26
42
44
33
51
( d ) observed periodicies of ending positions for span = 18 a c a a d d a a b b a a a c a b a c a e b b a a a a a a ( e ) candidate components and supporting valid subsequences of ( a , * ) for span = 18 a a a a a a a a b b c c c c e e f f a b c a a a d d d a a a b b b a a a a a a
Figure 2 . Computation Based Approach enables the verification process to be accomplished efficiently without the expensive generation and maintenance of all valid subsequences nor the necessity of resort to the raw symbol sequence . As a result , we devise an efficient computation based algorithm ( as opposite to the traditional match based approach ) in the sense that the discovery of valid meta patterns ( other than base patterns ) can be accomplished through pure computation ( performed on the location indexes of maximum valid segments ) without ever resort back to the raw symbol sequence . It has been demonstrated that this advantage offers at least two orders of magnitudes speed up comparing to the match based approach . The component location property can provide substantial inter level pruning effect during the generation of high level candidates from valid low level meta patterns ; whereas the traditional Apriori property can render some pruning power to conduct the mining process of meta patterns of the same level . While all meta patterns can be categorized according to their levels and the number of non “ * ” components in the pattern as shown in Figure 3 , the pruning effects provided by the component location property and the Apriori property are indicated by dashed arrows and solid arrows , respectively . Consequently , the algorithm consists two level of iterations . The outer iteration exploits the component location property while the inner iteration utilizes the Apriori property . More specifically , each outer iter ation discovers all meta patterns of a certain level ( say , levell ) ered valid pattern/meta pattern of levell , generate candidate components for meta patterns of levell+ . The com
1 . candidate component generation . For each newly discov and consists of the following two phases . ponent location property is employed in this phase .
2 . candidate pattern generation and verification . This phase a a a a a f c c b f f b b b b a a a a a a f f c c f f f b b a a c c c b b b a a a a a a a a a component length = 6 component length = 8 component length = 13 component length = 15 the candidate components discovered in the previous step and validates them . This phase utilizes the Apriori property and contains an iteration loop . During each iteration , meta generates candidate meta patterns of levell+ based on patterns with a certain number ( sayk ) of non “ * ” com
( a ) Ifk= , the candidate singular meta patterns levell+ are generated from candidate components date meta patterns of levell+ withk non “ * ” com(l+ ) meta patterns with(k , ) non “ * ” compoterns of level(l+ ) can be generated . ponents are examined , which includes the following two steps .
This inner iteration continues until no new candidate pat
( b ) The newly generated candidate patterns are validated . derived in the previous phase . Otherwise , the candi ponents are generated based on the discovered level nents . of
The entire procedure terminates when no new candidate components can be generated . Due to space limitations , we would not elaborate on the details of the algorithm . Interested readers please refer to [ 13 ] .
5 Experimental Results
The meta pattern discovery algorithm is implemented in C on an AIX workstation with 300 MHz CPU and 128 MB main
A singular meta pattern is a meta pattern that has only one non “ * ” compo nent . Otherwise , it is called a complex meta pattern .
6 level 3 meta patterns with one non "*" component level 3 meta patterns with two non "*" components level 3 meta patterns with three non "*" components level 3 level 2 meta patterns with one non "*" component level 2 meta patterns with two non "*" components basic patterns with one non "*" component patterns with one non "*" component basic patterns with two non "*" components patterns with two non "*" components level 2 meta patterns with three non "*" components level 2 level 1
Figure 3 . Pruning Directions
5.1 Scour Traces memory . A real trace log from the search engine scour.net is employed to evaluate the benefits of the meta pattern model while four synthetically generated sequences are used to measure the performance of our algorithm . ing patterns . Whenminrep andmaxdis are set to 3 and 200 ,
Scour is a web search engine specialized in multimedia content search whose URL is “ http://wwwscournet ” . We apply the meta pattern discovery algorithm to the traces of scour traces . Table 1 shows the number of patterns discovered from the Scour sequence with respective thresholds . There exist some interest respectively , there is a level 3 meta pattern . This level 3 pattern describes the following phenomenon . In a weekday between 4am and 12pm EST , there exists a pattern that the number of hits is between 10000 to 20000 ; and during 5pm to 1:30am EST , we found the pattern that the number of hits is between 40000 and 49999 . Furthermore , this pattern repeated itself during each weekday within a week ( ie , level 2 pattern ) and it also exhibits weekly trend ( ie , level 3 pattern ) . In addition , we also compute the meta patterns that cannot be expressed in the form of basic patterns . We call these patterns meta only patterns and the number of these patterns is also shown in Table 1 . From this table , we can see that most of the discovered level 2 and 3 patterns can not be expressed in the form of basic patterns , and thus can only be represented as meta patterns .
To further understand the behavior of our proposed metapattern mining algorithm , we constructed four long synthetic sequences and the sensitive analysis of our algorithm on these sequences is presented in the following section .
5.2 Synthetic Sequences termined . The lengthl of each segment is selected based on a
The four synthetic sequences are generated as follows . Each sequence consists of 1024 distinct symbols and 20M occurrences of symbols . The synthetic sequence is generated as follows . First , at the beginning of the sequence , the level of pattern is determined randomly . There are four possible levels , ie , 1 , 2 , and 3 , 4 . Next , the number of segments in this pattern is de basic patterns with three non "*" components patterns with three non "*" components
The number of symbols involved in a pattern is randomly cho
After each valid segment , the length of the disturbance is deter of a lower level pattern in a segment is randomly chosen between process repeats until the length of the sequence reaches 20M . geometric distribution with meanl . The number of repetitions minrep andblpc wherep is the span of the lower level pattern . sen between 1 and the spanp . The number of valid segments is chosen according to a geometrical distribution with means . mined based on a geometrical distribution with meand . This Four sequences are generated based on values ofl,s,r , and d in Table 2 . d DS DS DS DS is evident that the pruning effects increase with theminrep
In our proposed algorithm , we use the component location property pruning to reduce the candidate patterns . Figure 4(a ) shows the effects of the component location property pruning method . The pruning effect is represented as a ratio of the candidate patterns ( after pruning ) and the total number of potential patterns at each level . We compute the pruning effects of each data set individually and the average is shown in the figure . It
Table 2 . Parameters of Synthetic Data Sets s
5 5 r
50 1000 50 1000
50 1000 50 1000 l
5 5 100 100
Data Set
1000 1000 threshold because more patterns would be disqualified . In addition , in the higher level , the pruning effects are more evident because more constraints are involved .
In our approach , we only store the maximum valid segments for each pattern . We compare the computation based approach with the match based approach . In the match based approach , for each pattern , all valid subsequences are stored and used to mine higher level meta patterns . For each level of pattern , we track the CPU time consumed by the computation based approach and the match based approach . ( We assume that all information can be stored in main memory . Since the number of possible subsequences is much larger than that of maximum valid segments , the match based approach has more ad
7 minrepmaxdis
3 10 20
200 200 200
Level 1 Level 2 Level 3
4000
3500
3000
2500
2000
1500
) . c e s ( e m i t e s n o p s e R
10−2
10−3
10−4 i s n r e t t a p e t a d d n a c f o n o i t c a r f
Level 1 Patterns Level 2 Patterns Level 3 Patterns Meta only Patterns
107 31 15
12 5 2
1 0 0
10 5 2
Table 1 . Patterns Discovered in Scour Trace number of candidates of meta patterns could be very large . To minimize the response time of the pattern mining process , a pruning algorithm based on the component location property and Apriori property is proposed which can greatly to reduce the number of candidate patterns . In addition , a computationbased algorithm is designed to identify potential meta pattern candidates . We use the meta pattern mining algorithm on some real traces and some very interesting results are discovered .
10−5
10
15
20 min_rep
25
30
35
40
1000
10
15
( a )
20 min_rep
25
30
35
40
( b )
Figure 4 . Performance of Meta pattern Algorithm
References
2 3
0.02 0.05
0.02 0.03
0.04 0.01
0.01 0.02
Table 3 . CPU Time Ratio
The overall response time is one of the most important criteria for evaluation of an algorithm . We mine the meta patterns vantages with this assumption . ) The ratio of the CPU time of the computation based approach over that of the match based approach is calculated and presented in Table 3 . It is obvious that the computation based approach can save at least 95 % of the CPU time comparing to the match based approach . This is because the number of maximum valid segments is far less than that of valid subsequences as we explained in Section 5 .
LevelDS DS DS DS with differentminrep threshold . For a givenminrep , we The average response time decreases exponentially asminrep whenminrep is small , but it is still tolerable ( around 1 hour ) minrep andmaxdis are used to qualify a subsequence . The due to the pruning effects of component location property and the computation based candidate pattern generation . The metapattern mining algorithm is also applied to symbol sequences with different lengths . We found that the response time of our algorithm is linearly proportional to the length of the symbol sequence .
Meta pattern is proposed to capture the hierarchical cyclic behavior exhibited in data sequence . A meta pattern itself can serve as a component of some higher level meta patterns . To accommodate noises in the data sequence , two parameters mine the patterns on all four data sets and the average response time over the four data sets are taken and shown in Figure 4(b ) . increases . Although the average response time is a bit long
6 Conclusion
[ 1 ] R . Agrawal and R . Srikant . Mining Sequential Patterns . Proc .
ICDE , 3 14 , 1995 .
[ 2 ] M . Garofalakis , R . Rastogi , and K . Shim . SPIRIT : sequential pattern mining with regular expression constraints . Proc . VLDB , 223234 , 1999 .
[ 3 ] J . Han , G . Dong , and Y . Yin . Efficient mining partial periodic pat terns in time series database . Proc . ICDE , 106 115 , 1999 .
[ 4 ] J . Han , J . Pei , B . Mortazavi Asl , Q . Chen , U . Dayal , and M . Hsu . FreeSpan : frequent pattern projected sequential pattern mining . Proc . SIGKDD , 2000 .
[ 5 ] L . Lin and T . Risch . Querying continuous time sequences . Proc .
VLDB , 170 181 , 1998 .
[ 6 ] S . Ma and J . Hellerstein . Mining partially periodic event patterns with unknown periods . Proc . ICDE , 205 214 , 2001 .
[ 7 ] H . Mannila , H . Toivonen , and A . I . Verkamo . Discovery of frequent episodes in event sequences . Data Mining and Knowledge Discovery , vol . 1 , no . 3 , 259 289 , 1997 .
[ 8 ] B . Padmanabhan and A . Tuzhilin . Pattern discovery in temporal databases : a temporal logic approach . Proc . SIGKDD , 351 354 , 1996 .
[ 9 ] R . Srikant and R . Agrawal . Mining sequential patterns : generaliza tions and performance improvements . Proc . EDBT , 3 17 , 1996 .
[ 10 ] W . Wang , J . Yang , and R . Muntz . TAR : temporal association rules on evolving numerical attributes . Proc . ICDE , 283 292 , 2001 .
[ 11 ] J . Yang , W . Wang , and P . Yu . Mining asynchronous periodic pat terns in time series data . Proc . SIGKDD , 275 279 , 2000 .
[ 12 ] J . Yang , W . Wang , and P . Yu . Mining surprising periodic patterns .
To appear in Proc . SIGKDD , 2001 .
[ 13 ] J . Yang , W . Wang , and P . Yu . Meta Patterns : revealing hidden periodic patterns . IBM Research Report , 2001 .
[ 14 ] M . Zaki . Sequence mining in categorical domains : incorporating constraints . Proc . CIKM , 422 429 , 2000 .
8
