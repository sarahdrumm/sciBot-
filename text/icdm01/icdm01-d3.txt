Heuristic Optimization for Decentralized Frequent Itemset Counting
Viviane Crestana Jensen
Nandit Soparkar
Electrical Engineering and Computer Science
The University of Michigan , Ann Arbor , MI 48109 2122 fviviane,soparkarg@eecsumichedu
Abstract
The choices for mining of decentralized data are numerous , and we have developed techniques to enumerate and optimize decentralized frequent itemset counting . In this paper , we introduce our heuristic approach to improve the performance of such techniques developed in ways similar to query processing in database systems . We also describe empirical results that validate our heuristic techniques .
1 . Introduction
The counting of frequent itemsets [ 1 ] is expensive , and research efforts concentrate on this step ( eg , [ 2 , 3 , 5] ) . Available algorithms for partitioned databases ( eg , see [ 4 ] ) deal only with one single table partitioned horizontally . In contrast , decentralized schemas involve several tables that could be partitioned vertically as well . Our previous work [ 6 ] describes decentralized algorithms for finding frequent itemsets in a Star schema . Our algorithms run at individual tables separately , and the partial results are “ merged ” thereafter , thereby avoiding the expensive join of all tables required in typical centralized solutions . ized join ) ; and C , frequent itemsets across tables ( ie , the merging of results ) . Examples of equivalence rules are : Eq1 : F X 1 Y = F X [ F Y [ C fX ; Y g Eq2 : C fX ; Y ; Zg = C fX ; Y 1 Zg [ C fY ; Zg To exemplify the use of our equivalences , consider a data schema composed of 4 tables : De g a hic , d c , C e ( which besides its attributes , has a foreign key to De g a hic ) , and e B gh ( which contains only foreign keys to tables C e and d c ) . Since e B gh does not contain any non key attributes , it is only used as the weight table . Our goal is to find the frequent itemsets across all tables ( from here on , referred to by the first letter in their names ) , ie , we want to compute 1 . F D 1 C 1
Using Eq1 and Eq2 subsequently we get various equiva lent expressions : 2 . F D [ F C 1 [ C fD ; C 1 g 3 . F D [ F C [ F [ C fC ; g [
C fD ; C 1 g
4 . F D [ F C [ F [ C fD ; C ; g 5 . F D [ F C [ F [ C fD ; Cg [
C fD 1 C ; g
6 . F D 1 C [ F [ C fD 1 C ; g
2 . Enumerating Alternatives
3 . Heuristic Optimization
There are several alternatives to effecting the mining when dealing with decentralized tables ( see [ 7] ) . Our “ algebra ” facilitates enumerating and choosing among alternatives – in a manner similar to an algebra for relational query processing . Our enumeration approach begins with an expression representing the join of all tables prior to finding the frequent itemsets . Thereafter , by using equivalence rules , we obtain alternative equivalent expressions that are often less expensive to compute ( than using traditional techniques which first materialize the join ) . Each expression generated corresponds to different logical evaluation plans . The basic notation for our “ algebra ” 1 has two terms : F , frequent itemsets of a table ( which could be a material
1Due to space constraints , we use a simplified notation for F and C : we omit one parameter , the weight table , that carries the weight of the joined table when computing at separate tables . This weight table typically contains only foreign keys . For details , see [ 7 ] .
When using cost models , database systems utilize heuristics to reduce the number of choices for which cost estimates are computed . Likewise , besides cost based optimization ( see [ 7] ) , we use heuristics to reduce the number of choices . Furthermore , in situations where cost estimates are not available , heuristics help decide which plans are more efficient . Here , we show a few heuristics . Heu1 : When the table in an F has joins between unrelated tables , use Eq1 to convert the expression . Heu2 : When tables have a direct relationship , merge them before merging with other tables .
Applying our heuristics to the expressions listed in Section 2 , we choose expression 5 over 1 and 2 ( using Heu1 ) , and over 3 and 4 ( using Heu2 ) . Our heuristics do not help in choosing between expressions 5 and 6 .
A simple algorithm would be to enumerate all possible expressions , and then to use the heuristic rules to choose
Proceedings of the 2001 IEEE International Conference on Data Mining ( ICDM(cid:146)01 ) 0 7695 1119 8/01 $17.00 ' 2001 IEEE among them . Given that the number of possible expressions is very large , this approach would be impractical ( note that not all possible expressions for our example were listed ) . Instead , based on our heuristic rules , we developed an efficient algorithm ( on the order of the number of tables , ) that develops a plan to merge efficiently the related tables only . The algorithm creates a decentralized logical plan with F s : one for each table . Since no tables are prejoined , Cartesian products ( Heu1 ) are avoided , and only tables that are directly related by foreign keys get pre merged ( Heu2 ) . The plan generated is then improved using other heuristic rules ( see [ 7 ] for details ) . If cost estimates are available , they can be used where our heuristics do not help .
4 . Empirical Validation
We base our dataset on the TPC D benchmark [ 8 ] , which reflects the decentralized schemas typical in a data warehouse , as shown in Figure 1 . To incorporate customer buying patterns we replaced the i e e table with the transactions generated by the IBM Almaden synthetic data generator [ 2 ] with 1,500,000 transactions and 800,000 items , which we call y i e e . The table y i e e had about 14 million records , and was approximately 120 Mbytes in size . The joined table was approximately 5.3 Gbytes in size .
Customer
Orders
MyLineItem
PartSupp Part
Supplier
Nation
Figure 1 . TPC D benchmark schema .
We implemented the typical Apriori approach [ 2 ] for the centralized and the Memory saving [ 6 ] strategies . Our Memory saving strategy uses the same algorithm and data structure as used in any Apriori like approach – with the added advantage accrued from decentralized counting . Therefore , any Apriori like algorithm could be transformed , with expected savings comparable to the ones shown here . We also implemented our I/O saving strategy [ 6 ] for decentralized mining . The runtime for support 30 % for each plan that we examined is shown in Figure 2 , with Phase I corresponding to computing frequent itemsets locally , and Phase II to merging results across tables . Plans ( a) (f ) are decentralized plans , whereas the Apriori is centralized . All 3 way and 2 way merges were performed by the Memory saving the I/O saving strategies , respectively . Our experiments were performed on a 200 MHz Pentium Pro with 256 Mbytes of RAM , running Linux .
25000
20000
15000
10000
5000
0
PhaseI join
PhaseII
Apriori
Apriori
( a )
( b )
( c )
( d )
( e )
( f )
Figure 2 . Runtime for 30 % support .
Our heuristic algorithm would derive plan ( e ) , where no joins were computed and tables were merged only when related directly . This plan was the second best plan ( within 1 % ) for support 30 % . The optimal plan ( corresponding to plan ( f ) ) differed from ( e ) in that it computed 2 prejoins . Again , cost estimates could be used here when deciding whether to prejoin any tables . It is important to notice that several plans with poor performance are usually precluded by our heuristics ( eg , see [ 7] ) . For instance , plan ( b ) , which was the worst performing ( see Figure 2 ) , would be discarded . We performed extensive experiments [ 7 ] and for all cases studied , our heuristic approach chose the best ( or nearly best ) strategy among those generated . References [ 1 ] R . Agrawal , T . Imielinski , and A . Swami . Mining association rules between sets of items in large databases . In Proceedings of ACM SIGMOD Int’l Conference on Management of Data , 1993 .
[ 2 ] R . Agrawal and R . Srikant . Fast algorithms for mining assoIn Proceedings of the 20th ciation rules in large databases . Int’l Conference on Very Large Data Bases , 1994 .
[ 3 ] S . Brin , R . Motwani , J . Ullman , and S . Tsur . Dynamic itemset counting and implication rules for market basket data . In Proceedings of ACM SIGMOD Int’l Conference on Management of Data , 1997 .
[ 4 ] D . Cheung , V . Ng , A . Fu , and Y . Fu . Efficient mining of association rules in distributed databases . IEEE Transactions on Knowledge and Data Engineering , 1996 .
[ 5 ] J . Han , J . Pei , and Y . Yin . Mining frequent patterns without candidate generation . In Proceedings of ACM SIGMOD Int’l Conference on Management of Data , 2000 .
[ 6 ] V . C . Jensen and N . Soparkar . Frequent itemset counting across multiple tables . In Proceedings of the 4th Pacific Asia Conference on Knowledge Discovery and Data Mining , 2000 . [ 7 ] V . C . Jensen and N . Soparkar . Optimization and evaluation strategies for decentralized database mining . Technical Report . The University of Michigan , Ann Arbor , USA , June 2001 . Consolidated version submitted for journal publication . Council .
[ 8 ] Transaction
Performance
Processing http://wwwtpcorg , May 1995 .
Proceedings of the 2001 IEEE International Conference on Data Mining ( ICDM(cid:146)01 ) 0 7695 1119 8/01 $17.00 ' 2001 IEEE
