Mining Clickthrough Data for Collaborative Web Search
Jian Tao Sun†,Xuanhui Wang‡,Dou Shen§,Hua Jun Zeng† , Zheng Chen†
†Microsoft Research Asia , Beijing , PRChina
{jtsun,hjzeng,zhengc}@microsoft.com
‡Department of Computer Science ,
University of Illinois at Urbana Champaign xwang20@csuiucedu
§Department of Computer Science ,
Hong Kong University of Science and Technology dshen@csusthk
ABSTRACT This paper is to investigate the group behavior patterns of search activities based on Web search history data , ie , clickthrough data , to boost search performance . We propose a Collaborative Web Search ( CWS ) framework based on the probabilistic modeling of the co occurrence relationship among the heterogeneous web objects : users , queries , and Web pages . The CWS framework consists of two steps : ( 1 ) a cube clustering approach is put forward to estimate the semantic cluster structures of the Web objects ; ( 2 ) Web search activities are conducted by leveraging the probabilistic relations among the estimated cluster structures . Experiments on a real world clickthrough data set validate the effectiveness of our CWS approach .
Categories and Subject Descriptors H33 [ Information Storage and Retrieval ] : Information Search and Retrieval Search Process ; H35 [ Information Storage and Retrieval ] : Online Information Services Web based services
General Terms Algorithms , Experimentation , Performance
Keywords Clickthrough Data , Cube Clustering , Collaborative Web Search
1 .
INTRODUCTION
Typical search engines conduct retrieval without considering the users’ preferences . It is not appropriate since users with different interests may expect to get different Web pages even with the same query . Recently , a number of methods have been developed for the “ Collaborative Filtering ” or “ Social Filtering ” of information [ 1 ] . The idea is to recommend products or services to a person based on the opinions of a group of users who share similar preferences with him/her . In fact , as more and more Web users start using search engines , the search activity can also be regarded
Copyright is held by the author/owner . WWW 2006 , May 22–26 , 2006 , Edinburgh , Scotland . ACM 1 59593 332 9/06/0005 . as a social behavior . All search activities are recorded in the clickthrough data , which contains a large number of Web objects ( users , queries , and pages ) . Organizing these Web objects into semantic groups and analyzing the relationships among these groups will be potentially helpful for discovering meaningful patterns , such as different users may share similar search behaviors by issuing similar queries and visiting similar Web pages , thus improve the utility of Web search .
However , mining clickthrough data is really challenging : ( 1 ) the clickthrough data contains heterogeneous objects , including users , queries , and Web pages , and the relationship among these objects are complicated ; ( 2 ) since users always only click the first few pages for a query , the data is highly sparse . In order to effectively conduct clickthrough data analysis for Web search , it is a key factor to handle the sparseness problem and discover the hidden relations among the heterogeneous data objects .
In this paper , we propose a framework to overcome the above difficulties . This framework contains the following two steps . ( 1 ) The hidden cluster structures contained in the clickthrough data , as well as the probabilistic relations among them , are discovered by an unsupervised method : cube clustering . ( 2 ) The relations among the hidden clusters are used to improve the search performance in a collaborative manner . Since we exploit the group structures of the clickthrough data and our approach is motivated by the collaborative filtering idea , we name it Collaborative Web Search ( CWS ) . In [ 3 ] , the authors also developed a collaborative search system named I SPY . Their system is a type of meta search engine and requires users to explicitly select a community before search activities are conducted . In our CWS framework , the clickthrough data is automatically utilized and Web users’ manual efforts are not required .
2 . COLLABORATIVE WEB SEARCH
In this section , we describe the two steps of our CWS framework one by one . 2.1 Cube Clustering Approach
Inspired by Dhillon et al . ’s Co Clustering algorithm for clustering two dimensional co occurrence data [ 2 ] , we put forward the Cube Clustering approach which clusters users , queries , and Web pages simultaneously based on the three dimensional co occurrence among them . Our Cube Clustering algorithm is based on information theory and maximizes the multi information among a set of random variables , which is defined as :
I(X1 , · · · , Xs ) = X P ( X1 , · · · , Xs ) log
P ( X1 , · · · , Xs ) P ( X1 ) · · · P ( Xs )
.
We treat a cube data of the three dimensions : user , query , and Web page , as a joint probability distribution among three discrete random variables : P r(U , Q , P ) . Variables U , Q and P take values from the user set {u1 , · · · , ul} , query set {q1 , · · · , qm} , and page set {p1 , · · · , pn} . Our goal is to cluster the l users , m queries , and n pages into i , j and k clusters respectively : {ˆu1 , · · · , ˆui} , {ˆq1 , · · · , ˆqj} , {ˆp1 , · · · , ˆpk} . We use CU , CQ , and CP to denote the mapping functions and refer to the triple ( CU , CQ , CP ) as a cube clustering .
Given the mapping functions ( CU , CQ , CP ) , CU ( U ) , CQ(Q ) , and CP ( P ) are the cluster random variables and we denote them as ˆU , ˆQ , ˆP respectively . Apparently , a fixed cube clustering mapping determines the joint probability of the cluster random variables . We judge the quality of cube clustering by the loss in multi information . The multiinformation is a measurement to capture the amount of information that a set of variables contain about each other . Naturally , a good clustering should preserve the information of the original data as much as possible , thus minimize the loss in multi information : I(U , Q , P ) − I( ˆU , ˆQ , ˆP ) . This is also the objective function that an optimal cube clustering minimizes , subject to the constraints on the cluster numbers in each dimension . For a cube clustering , we find the loss in multi information is equal to the KL divergence between P r(U , Q , P ) and ˜P r(U , Q , P ) , where ˜P r(U , Q , P ) is a distribution of the form
˜P r(u , q , p ) = P r(ˆu , ˆq , ˆp)P r(u|ˆu)P r(q|ˆq)P r(p|ˆp )
( 1 ) where u ∈ ˆu , q ∈ ˆq , p ∈ ˆp . That is , the cube clustering can be approached by minimizing the KL divergence between P r(U , Q , P ) and ˜P r(U , Q , P ) . We can also prove that the loss in multi information can be expressed as a weighted sum of the KL divergence between two distributions associated with a fixed dimension . Thus the calculation of the objective function can be solely expressed in terms of user clustering , query clustering , or page clustering . Based on this conclusion , we have the Cube Clustering algorithm . We omit all the proofs for the space reason .
The input of the Cube Clustering algorithm is the joint probability P r(U , Q , P ) . Assume i , j , k are the desired number of clusters for each dimension . The output is the partition function CU , CQ , CP . The Cube Clustering algorithm is described as follows : Step 1 : Start with some initial partition functions , thus for each u , q , p , we have its corresponding cluster . Compute
˜P r( ˆU , ˆQ , ˆP ) , ˜P r(U | ˆU ) , ˜P r(Q| ˆQ ) , ˜P r(P | ˆP )
( 2 )
Step 2 : ( 2.1 ) Calculate the distributions ˜P r(Q , P |ˆu ) , 1 ≤ ˆu ≤ i using
˜P r(q , p|ˆu ) = ˜P r(p|ˆp ) ˜P r(q|ˆq ) ˜P r(ˆq , ˆp|ˆu )
( 3 )
( 2.2 ) Update user clusters : for each u , find its new cluster index as
CU = argmin ˆuKL(P r(Q , P |u)|| ˜P r(Q , P |ˆu ) )
( 2.3 ) Update the distributions listed in Eq 2 .
Table 1 : Search Results of CF and CWS
N P @N ( CF ) P @N ( CWS ) Relative Improvement 1 2 3 4 5
0.632321 0.339479 0.232106 0.176383 0.141973
0.581887 0.315347 0.214571 0.162961 0.131669
8.66 % 7.75 % 8.17 % 8.23 % 7.82 %
Step 3 : Process queries and pages symmetrically as in step 2 . Step 4 : Iterate Step 2 and Step 3 until the change in objective function is less than a small value , eg , 10−6 ; else go to step 2 . 2.2 Search Based on Cube Clustering
After the cube clustering step , the Web search problem is converted to recommendation of a ranked page list according to their relevance with the hu , qi pair , instead of depending only on q . In our CWS framework , we rank Web pages by estimating ˜P r(p|u , q ) . Given u and q ,
˜P r(p|u , q ) =
˜P r(u , q , p ) ˜P r(u , q ) ∝ ˜P r(u , q , p ) = P r(ˆu , ˆq , ˆp)P r(u|ˆu)P r(q|ˆq)P r(p|ˆp ) ∝ P r(ˆu , ˆq , ˆp)P r(p|ˆp )
( 4 )
Thus according to Eq ( 4 ) , the Web pages are ranked by P r(ˆu , ˆq , ˆp)P r(p|ˆp ) .
3 . EXPERIMENTS AND CONCLUSIONS
We use 10 days’ clickthrough data for experiments , the first 5 days’ data is used for estimating the cluster structures and the rest 5 days’ for testing . The search accuracy is evaluated using the P @N measure , that is , the percentage of correct pages among the top N pages . We compared the result of CWS and Pearson collaborative filtering algorithm ( CF ) [ 1 ] . The results are given in Table 1 . N is varied from 1 to 5 . We can see the CWS approach leads to better search result compared with CF ( around 8 % improvement ) .
This shows the CF algorithm can not effectively exploit the clickthrough data as the data is three way and highly sparse . However , the cluster structures can be discovered by the Cube Clustering algorithm and the probabilistic relations among them can be utilized for improving Web search . This validates the effectiveness of our CWS approach : leveraging the clickthrough data for collaborative Web search .
4 . REFERENCES [ 1 ] J . S . Breese , D . Heckerman , and C . Kadie . Empirical analysis of predictive algorithms for collaborative filtering . In UAI , pages 43–52 . Morgan Kaufman , 1998 .
[ 2 ] I . S . Dhillon , S . Mallela , and D . S . Modha .
Information theoretic co clustering . In SIGKDD , pages 89–98 , 2003 .
[ 3 ] B . Smyth , E . Balfe , O . Boydell , K . Bradley , P . Briggs ,
M . Coyle , and J . Freyne . A live user evaluation of collaborative web search . In IJCAI , pages 1419–1424 , 2005 .
