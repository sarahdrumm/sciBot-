Improving Music Genre Classification Using Collaborative
Tagging Data
Ling Chen
L3S Research Center
Leibniz University Hannover lchen@l3s.de
Phillip Wright
College of Computing
Georgia Institute of
Technology phillipwright@ccgatechedu
Wolfgang Nejdl
L3S Research Center
Leibniz University Hannover nejdl@l3s.de
ABSTRACT As a fundamental and critical component of music information retrieval ( MIR ) systems , music genre classification has attracted considerable research attention . Automatically classifying music by genre is , however , a challenging problem due to the fact that music is an evolving art . While most of the existing work categorizes music using features extracted from music audio signals , in this paper , we propose to exploit the semantic information embedded in tags supplied by users of social networking websites . Particularly , we consider the tag information by creating a graph of tracks so that tracks are neighbors if they are similar in terms of their associated tags . Two classification methods based on the track graph are developed . The first one employs a classification scheme which simultaneously considers the audio content and neighborhood of tracks . In contrast , the second one is a two level classifier which initializes genre label for unknown tracks using their audio content , and then iteratively updates the genres considering the influence from their neighbors . A set of optimizing strategies are designed for the purpose of further enhancing the quality of the twolevel classifier . Extensive experiments are conducted on realworld data collected from Lastfm Promising experimental results demonstrate the benefit of using tags for accurate music genre classification .
Categories and Subject Descriptors H.3 [ Information Systems ] : Information Storage and Retrieval ; J.5 [ Computer Applications ] : Arts and Humanities—music
General Terms Algorithms , Experimentation , Performance
Keywords Music genre classification , exploiting tag semantics , relax ation labelling
1 .
INTRODUCTION
Due to the rapid advancement of digital technology in the last two decades , there has been an increasingly large amount of music files available on the Web . It is very likely that in the near future all recorded music in human history will be available online [ 26 ] . The enormous —and continuously growing— volume of online music data necessitates the development of efficient and effective music information retrieval ( MIR ) systems . Although most of the traditional music databases index songs by title or artist name , it was observed that people often need to search music by music content instead [ 8 ] . Music genre ( eg , Jazz , Rock , Country etc . ) is one of the top level descriptions of music content . Consequently , accurate music genre classification is a critical step toward the success of modern music information retrieval systems .
Most of the existing MIR systems ( eg , AllMusic Guide1 and MSN Music Search Engine ) rely on human experts as well as amateurs to categorize music by genres . However , this kind of approach is not only expensive but also timeconsuming . As noted by Weare [ 9 ] , Microsoft required the assistance of 30 musicologists over a period of one year in order to manually label a “ few hundred thousand songs ” . Not surprisingly , huge research interest has been triggered to perform the task automatically . Aucouturier and Pachet [ 2 ] summarized the representative efforts in this regard ( a survey on automatic genre classification of music content can be found in [ 23] ) , where most of the proposed approaches trained their classifiers with low level features extracted from music audio signals .
Automatically classifying music by genre is a challenging problem considering that music is an evolving art , where performers and composers have been influenced by music in other genres [ 15 ] . Hence , automatic classification approaches depending on low level features alone may not be able to obtain satisfactory results . As observed and suggested in [ 20 ] , incorporating other features , such as highlevel features based on music abstractions , could result in performance improvements .
With the recent rise of Web 2.0 technologies , Web users from different backgrounds began to annotate/tag resources on the Web at an incredible speed . Many social media applications like Flickr , Delicious , and Last.fm provide features which allow users to assign tags to information on the web , 1http://wwwallmusiccom ie images , blog entries , or video clips . This emerging metadata provides useful information which has been explored in applications such as navigation [ 11 ] , enterprise search [ 10 ] and Web search [ 3 ] . We believe that the valuable information embedded in user supplied tags can be beneficial in many other applications . Particularly , in this paper , we investigate performing automatic music genre classification by taking advantage of available tag data . To the best of our knowledge , this is the first attempt in the literature which exploits the usage of tags in music genre classification .
Using tags to facilitate music genre classification is a nontrivial problem due to the fact that tags are usually freely chosen by users . The varied tags supplied by different users provide not only related information but also noise which is either useless or ambiguous . For example , the track “ I hope you dance ” by Lee Ann Womack was labelled by Last.fm users with tags including country as well as songs to remember . While the former indicates the genre of the track , the latter does not seem to be helpful . Furthermore , it is often observed that a track is assigned tags which imply different genres , such as blues and rock 2 .
In our work , we take into account the tag information by constructing a graph of tracks so that tracks are neighbors if they are semantically similar in terms of their associated tags . Two classification methods , integrating audio content information as well as tag information , are developed based on the track graph . The first method , called Single Layer Classifier , simultaneously considers the audio content of tracks and the tag based neighbors . The second one , called Double Layer Classifier , firstly estimates the genres for unknown ( unclassified ) tracks using the audio content information , and then improves the estimation by updating the genre of each unknown track based on not only its known neighbors but also its unknown neighbors . A set of optimizing strategies are also designed to further improve the quality of the Double Layer Classifier . Performance evaluations are conducted on a set of tracks and tags collected from Last.fm3 , an internet radio and music community website . The promising results demonstrate the usefulness of tags in music genre classification .
The rest of the paper is organized as follows . Section 2 presents background information by reviewing related work in the literature . In Section 3 , we formally define the classification problem and describe the two classification schemes . Section 4 evaluates the performance of the two classifiers . In Section 5 , we discuss the optimizing strategies we adopt to further improve the performance of the Double Layer Classifier . Finally , we draw some conclusions and discuss our future work in Section 6 .
2 . RELATED WORK
We address related work from two related research areas , music genre classification , collaborative tagging systems , and collective classification .
The state of the art in music genre classification primarily focuses on classifying music based on low level features extracted from audio signals . Most of the existing work proceeds in two steps : feature extraction and multi class classification . As summarized in [ 23 ] , three sets of fea
2Classifying music tracks sitting on the boundaries between genres is beyond the scope of this paper . 3http://wwwlastfm tures for representing timbral texture , rhythmic content , and melodic and harmonic content are widely used in the literature . Features characterizing timbre mainly analyze the spectral distribution of the signal . G . Tzanetakis et al . [ 26 ] described some of the most common timbral features : MelFrequency Cepstral Coefficients ( MFCC ) , Spectral Centroid , Spectral Rolloff , Spectral Flux , Zero Crossings and Low Energy . Rhythmic content refers to the temporal regularity of a music work . The features for representing rhythmic content are based on detecting the most salient periodicities of the signal . An in depth study on low level rhythmic descriptors extracted from different periodicity representations is given in [ 13 ] . Harmony represents the actual or implied pitch simultaneity in music , while melody is defined as a succession of pitched events perceived as a single entity . Although melodic and harmonic analysis have been used by musicologists to study music structures for a long time , there have only been limited attempts [ 26 ] at building a genre classifier based on pitch features . After a set of relevant and significant features are extracted , different classification schemes can be applied . For example , the K Nearest Neighbor ( KNN ) is probably the simplest classifier which assigns a song with the genre most commonly represented in its K neighbors [ 21 ] . Other classification techniques used in music genre classification include Support Vector Machines ( SVM ) [ 18 ] , Gaussian Mixture Models ( GMM ) [ 6 ] , and Linear Discriminant Analysis ( LDA ) [ 27 ] . Our method can be applied on top of any of these automatic music classification algorithms based on low level features ( eg , these methods can serve as the Base Classifier in our approach ) . A recent direction in music genre classification is to combine features from multiple aspects . For example , some promising results have been obtained in [ 19 ] by combining low level features with high level ones . Whitman and Smaragdis [ 28 ] combined cultural features , such as terms frequently occurring together with artists in Web pages , with low level features and achieved significantly improved performance over the use of low level features alone .
Tags have recently become popular as a means of annotating objects on the Web . Golder and Huberman [ 12 ] provided a detailed account of different types of tagging systems . Halpin et al . [ 14 ] studied the dynamics of tagging data and pointed out that the frequency distribution of the tag set for popular sites from Delicious follows a power law . Besides analyzing the trends and properties of various tagging systems , some efforts have explored the usage of tags in Web applications . For example , P . Schmitz [ 24 ] discussed extracting an ontology from Flick tags . X . Wu [ 29 ] used a tripartite conceptual model to derive emergent semantics in annotated social bookmark services . The learned semantics were applied to discover and search for shared Web bookmarks . In [ 10 ] , the authors discussed using tags to lighten the limitation of the amount and quality of anchor text to improve enterprise search . The usage of tags in Web search has also been investigated in [ 3 ] . There are also a few works applying tags in data mining tasks . Berendt and Hanser [ 4 ] compared the performance of blog post classification using features derived from tags , titles and body . They found that tags together with body yielded better classification accuracy than any other feature alone . Brooks and Montanez [ 5 ] performed unsupervised learning on blogs using tags , which showed tags are useful in clustering blog posts into broad categories .
Another related area is collective classification . Collective classification refers to the simultaneous prediction of vertex labels of a graph . The intuitive is that the label of a vertex can be influenced by its own attributes and the labels and attributes of other nodes in the graph . Many collective classification methods [ 16 , 17 , 25 , 7 ] have been proposed in the literature which model such dependencies differently . However , most the existing works focus on classifying documents . To the best of our knowledge , this paper is the first effort which investigates the effectiveness of collective classification on collaborative tagging data . Considering that tag data is noisy , several feature processing strategies are proposed to improve the classification performance .
3 . GENRE CLASSIFICATION
In this section , we first define the music genre classification problem . After introducing the graph structure which models music tracks and the semantic similarity measure between tracks , two classification schemes , considering tag information as well as audio content information , are illustrated respectively . 3.1 Problem Description
It is extremely difficult to give a precise definition of a music genre [ 15 ] . Similarly , there is no consensus on the construction of music genre taxonomies [ 2 ] . All the existing work on automatic genre classification , which either classifies music to a list of genres or to a hierarchy of genres , makes the same assumption that a genre list/taxonomy is given and should be imposed on the music database . In this paper , we make the same assumption and consider the problem of automatically classifying music to a list of genres − though our approach can be extended easily to classify music into a hierarchy of music genres . In the context considered in this paper , the music genre classification problem can be specified as follows . Let X = {x1 , x2,··· , xn} be a set of music tracks , where each track xi is associated with a set of low level audio signal features Γ(xi ) and a set of tags T ( xi ) . Let C = {c1 , c2,··· , ck} be a list of music genres such that ∀xi ∈ X , the label of xi is C(xi ) ∈ C . The goal is to infer a function fX→C which sufficiently approximates the mapping of the set of music tracks to the list of music genres . 3.2 Graph Structure
A straightforward solution which classifies music using tag data in addition to audio content data is an ensemble method , which constructs two base classifiers using the two sources of information respectively and performs classification by taking a vote on the predictions made by each classifier . The base classifier which focuses on tag information can directly use tags as features . However , due to the data sparsity problem , we consider tag information indirectly in our work . Particularly , we construct a graph of tracks so that tracks which are semantically similar , in terms of tags that are assigned to them , are adjacent nodes in the graph . Given the complete set of tags associated with all tracks , T = {tj|tj ∈ T ( xi ) ∧ xi ∈ X} , we first compute a TFIDF like score for each tag tj associated with a track xi as below : T F IDF ( tj , xi ) = F req(tj , xi ) × log xi∈X Occurs(tj , xi ) where F req(tj , xi ) is the frequency that tj was assigned
|X|
After that , each track xi is associated with a vector , to xi , |X| is the number of all tracks in the dataset , and Occurs(tj , xi ) is a boolean function returning 1 if tj is used to annotate track xi and 0 otherwise .
−→ −→ T ( xi ) , of length |T | . Each element of T ( xi ) is the TFIDF value of a tag associated with the current track . We define the similar−→ ity between two tracks xi and xj , denoted as Sim(xi , xj ) , as the cosine similarity of the two corresponding vectors T ( xi ) and
−→ T ( xj ) :
Sim(xi , xj ) =
−→ T ( xi ) · −→ −→ T ( xi ) −→
T ( xj ) T ( xj )
A graph G = ( N , E ) can then be created , with N being the set of nodes , each representing a track , and E the set of edges , containing only edges ( xi , xj ) ∈ E with Sim(xi , xj ) above a certain threshold . The terms node and track are used interchangeably hereafter . 3.3 Single layer Classification
Given the audio content of tracks , Γ(x ) , as well as the graph structure G , which reflects the similarities between tracks in terms of tags , we assign a genre ci to a track xi so that the probability P r(ci| Γ(xi ) , G ) is maximized . Based on the Markov Random Field ( MRF ) assumption that the class of a node is conditionally independent of the classes of other nodes in a graph , given the classes of its immediate neighbors , we have P r(ci| Γ(xi ) , G ) =P r(ci| Γ(xi ) , N ( xi) ) , where N ( xi ) is the set of neighbors of xi . Assuming that the audio content of a track has no direct coupling with its neighbors’ genres , and manipulating with Bayes Rule , the probability can be computed as follows : P r(ci|Γ(xi ) , N ( xi ) ) ∝ P r(ci)P r(Γ(xi)|ci)P r(N ( xi)|ci ) ( 1 ) By further assuming the independence between each pair of nodes in the neighborhood of xi , the right side of Equation 1 can be written as :
P r(ci)P r(Γ(xi)|ci )
P r(C(xj)|ci )
Thus , the genre of xi will be ci = arg max ci
P r(ci)P r(Γ(xi)|ci )
P r(C(xj)|ci ) xj∈N ( xi ) xj∈N ( xi )
( 2 )
( 3 )
It can be observed from Equation 3 that this classification scheme simultaneously considers the audio content information and tag information . For easy reference , we call this classifier Single Layer Classifier . Note that , the audio content information is taken into account explicitly , while the tag information is studied implicitly by considering the class labels of neighboring tracks with similar tags . 3.4 Double layer Classification
In order to enhance the classification quality , learning from unknown data has been used in hypertext categorization [ 7 ] . In our work , we adopt this idea to consider neighborhoods including not only tracks with known genres but also unknown tracks whose genre labels need to be predicted . Then , the Relaxation Labelling technique [ 22 ] is used to iteratively update the genre labels for unknown tracks .
Let ∆k denote all of the known information ( eg , the audio content of tracks and the known genre labels of tracks ) , and N u(xi ) be the set of unknown neighbors of xi . We aim to find the class ci for xi to maximize the probability P r(ci|∆k ) , which can be written as a summation over unknown neighbors : P r(ci|∆k ) =
P r(ci|N u(xi ) , ∆k)P r(N u(xi)|∆k ) ( 4 )
N u(xi )
Based on the MRF assumption and the independence assumption among neighbors as described in the previous subsection , the two components on the right side of Equation 4 respectively yield :
P r(ci|N u(xi ) , ∆k ) = P r(ci|N u(xi ) , N k(xi ) )
P r(N u(xi)|∆k ) =
P r(C(xj)|∆k )
( 5 )
( 6 ) where N k(xi ) refers to the set of known neighbors of xi . Combining Equations 5 and 6 with Equation 4 , an iterative process can be obtained :
P r(ci|∆k)(r+1 ) =
N u(xi )
[ P r(ci|N u(xi ) , N k(xi ) )
P r(C(xj)|∆k)(r ) ] xj∈N u(xi ) xj∈N u(xi )
Figure 1 : The Framework of the Double Layer Classifier .
( 7 )
Table 1 : Track genre distribution
Equation 7 illustrates the framework of the double layer classifier , which is presented in Figure 1 . Basically , there are two classifiers involved : a Base Classifier , and a Graph Classifier built on top of the Base Classifier . Given the set of known tracks ( training data ) and the set of unknown tracks ( test data ) , the Base Classifier estimates the genres of unknown tracks using the known information . That is , the component P r(C(xj)|∆k ) in Equation 7 will be computed . In our approach , we calculate this probability by employing a Naive Bayes Classifier using the audio content information , though other classification schemes ( eg the SingleLayer Classifier described in the previous subsection ) and information sources ( eg both audio content and tag data ) can be used as well .
Next , a Graph Classifier is used to iteratively update the genres of unknown tracks according to Equation 7 . The degree to which the genres estimated in the previous iteration are taken into account in this iteration is controlled by P r(ci|N u(xi ) , N k(xi) ) , which , based on Bayes Rule , can be manipulated as below :
P r(ci|N u(xi ) , N k(xi ) ) = P r(ci )
P r(C(xj)|ci )
( 8 ) xj∈N u(xi)∪N k(xi )
The relaxation procedure described in Equation 7 is guaranteed to converge to a locally consistent assignment of genre labels . In addition , since the computation of Equation 7 is intractable , we adopt the hard labelling technique in [ 1 ] . The basic idea is to approximate Equation 8 by considering only the most probable neighborhood labelling . That is , for each unknown neighbor xj , we calculate using its most probable label Cmax(xj ) as of the previous iteration .
4 . EXPERIMENTS
Jazz Rock
1 2 3 Country
451 287 602
R&B
4 5 Electronica 6
Rap
287 386 249
4.1 Data Set
Three sets of data were collected for our experiments : audio tracks , tag data and genre data . Over 10 , 000 MP3 files were crawled from the Last.fm site by accessing “ radio stations ” based on genre and keywords . We then used the jAudioTagger library4 to extract the artist and title information from the ID3 tags contained in each MP3 file . With the artist and title information , we collected the “ ground truth ” genre data for each track from the All Music Guide , a popular edited Web resource for music information . Tracks belonging to genre classes with too few class representatives were removed . The remaining 2 , 262 tracks represent six genres , Jazz , Rock , Country , R&B , Electronica and Rap , with the class distribution shown in Table 1 .
Then , the Last.fm API was used to download the tags for each artist track pair . A total of 17 , 383 tags were collected . Each track has at most 99 tags and at least 1 tag . On average , each track is associated with 29.9 tags . Note that , we did not prune tracks with very few tags , because we are interested in examining the robustness of the classification approaches when classifying such tracks in addition to more frequently tagged tracks .
All of the audio tracks were converted into 22K , 16bit , mono WAV files , which were further processed using the MARSYAS system5 — an open source software framework for audio processing — to extract low level features such as MFCC , spectral centroid , spectral rolloff , and spectral flux .
In this section , we first describe the data set used in our experiments . Then , we respectively evaluate the performance of each individual classifier .
4http://wwwjthinknet/jaudiotagger 5http://marsyassnessnet
Base ClassifierKnown TracksUnknown TracksGraph ClassifierGenre Labels Converge?NoAssigned ClassesYes Table 2 : Baseline accuracy
Table 4 : Double layer classification performance
Table 3 : Single layer classification accuracy
Table 5 : Experiments with variation on similarity threshold
4.2 Performance Evaluation
Baseline . In order to evaluate the idea of classifying music using tags , we first conduct experiments for baseline approaches which perform music genre classification using audio content data only . Two classifiers , Naive Bayes ( NB ) and Support Vector Machine ( SVM ) , are trained on the set of low level features extracted from tracks . We carried out the experiments by varying the number of classes and the percentage of training data . The resulting accuracy is presented in Tables 2 ( a ) and ( b ) respectively . The class numbers correspond to those of Table 1 ( which is same for Tables 3 and 4 ) . Each result is averaged over 30 runs of the method ( as are all of the following results presented in this paper ) . It can be observed that SVM surpasses NB slightly . While , the performance of both approaches is limited when all of the six classes are taken into account .
Single Layer Classification . We conduct similar experiments with the Single Layer Classifier ( ie Equation 3 ) , which simultaneously considers the audio content information as well as the tag information . When constructing the track graph , the similarity threshold is set to 02 As shown in Table 3 , the accuracy of the single layer classification surpasses all corresponding values in Table 2 which demonstrates the usefulness of tags in music genre classification .
Double Layer Classification . We then investigate the performance of the Double Layer Classifier . Similarly , the similarity threshold is set to 0.2 in building the graph structure .
The accuracy values are shown in Table 4 ( a ) , where we examine on an extended range of the size of the training data . Compared with the baseline approaches , the results show again that tags are beneficial in improving the performance of music genre classification . Compared with the SingleLayer Classifier , the performance of the Double Layer Classifier with 10 % training data is even better than the performance of the Single Layer Classifier with 50 % training data . The probable reason is that the Double Layer Classifier utilizes not only known tracks but also unknown tracks in inferring the label of an unknown track . Hence , if unknown neighbors provide reliable information in pulling the test tracks to the right class , the performance can be good as well even with fewer number of known neighbors . Thus , the good performance of the Double Layer Classifier verifies that tag data is reliable information source in discovering neighboring tracks of same genres . The recall values of the Double Layer Classifier are shown in Table 4 ( b ) .
We further evaluate the performance of the Double Layer Classifier by varying the similarity threshold from 0.1 to 05 Table 5 presents the results on all 6 classes , from which we notice that the accuracy is dependent on the similarity threshold , especially when the size of the training data is small . When the similarity threshold is low ( eg , 0.1 ) , each unknown node has a relatively larger neighborhood − so the chances are greater that its neighbors belong to genres different from the true genre of the test node . Hence , the accuracy is poor when the similarity threshold is set too low .
ClassesTrainingData 10%20%30%40%50%1 21 31 41 51 66653672468076760693258936045618061876252494351785316532453504509467748684853494142334397448444934535(a ) Using Naive Bayes on Low level FeaturesClassesTrainingData 10%20%30%40%50%1 21 31 41 51 67293763177437795788963346688687868636885528456015729581158784642489249125071511044614678476848674943(b ) Using SVM on Low level FeaturesClassesTrainingData 10%20%30%40%50%1 21 31 41 51 67836836483728625874170067161733674037560601063286468669868775744603663616627683754255009619164676601ClassesTrainingData 5%10%15%20%1 21 31 41 51 660079459947995295975708284328280631473718773879062977238844186416053717483918657ClassesTrainingData 5%10%15%20%1 21 31 41 51 670089393944695156612720078788040662375858579854565237174830783856067722282908313(a ) Double Layer Classification Accuracy(b ) Double Layer Classification Recall50%9526916688858745883250%94958789867385618541Similarity Threshold TrainingData 5%10%15%20%01020304055440700982898636605371748391865761257178834086075557682581408598542367098139844950%87068832881188058812 Table 6 : Per class performance of double layer classifier
Table 7 : Performance of double layer classifier with tag discrimination
On the other hand , when the similarity threshold is high , the neighborhood size shrinks so that it does not provide sufficient influence any more . That ’s why the accuracy falls down when the similarity threshold is increased .
5 . OPTIMIZING STRATEGIES
Although the Double Layer Classifier performs well when there are enough known tracks , its performance is limited when a smaller set of training data is used . We consider it expensive to acquire the training data , as this usually requires human assessment . Therefore , we aim to improve the performance when a smaller percentage of known data is used .
We examine why misclassification is caused when the percentage of known data is low . Table 6 shows the per class precision and recall given 5 % training data . It can be observed that the misclassification usually occurs among tracks of the three genres : “ Rock ” , “ R&B ” , and “ Rap ” . By taking a closer look at the intermediate results , we find there exist many cross class edges between tracks of the three genres . This kind of edges affect not only the neighborhoods of unknown tracks but also those of known tracks , which are used to estimate the conditional probabilities between genres ( ie P r(Cj|ci) ) . Recall that the Double Layer Classifier uses both the conditional probabilities estimated from known tracks and the current neighborhood of unknown tracks to update genres . The existence of cross class edges hampers the classification performance .
We believe such cross class edges are caused by the noise problem of tag data . For example , besides the obvious noisy tags such as “ favorite ” and “ mood ” , we also observe tags like “ pop ” and “ rock ” are frequently used to annotate tracks from both “ Rock ” and “ R&B ” . Thus , in order to decrease the number of cross class edges , we consider several strategies to process tag features . 5.1 Feature Processing
Particularly , three feature processing strategies are studied in our work : Tag Discrimination , Tag Augmentation , and Content Combination , which are illustrated as follows respectively .
Tag Discrimination . The first strategy we test is to discriminate between tags occurring in single class and tags occurring in multiple classes . To this end , We re adjust the weights of tags based on their class distributions . As discussed in Section 3 , initially , tags are weighted using a TFIDF like score . The TFIDF method assigns more weight to a tag which occurs frequently in a particular track while occurs rarely in other tracks . Thus , it emphasizes tags occurring in a particular track . In order to emphasize tags occurring in a particular genre class , we weight tags based on their class distributions . The basic idea is that the weight of a tag should be low , if the tag is supplied with tracks of
Table 8 : Per class performance of double layer classifier with tag discrimination different genres . Otherwise , it should be assigned a higher weight . Hence , first we use an entropy based measure to justify the class distribution of a tag . Let X k = {x1 , x2,··· , xn} be the set of known tracks . The notations T , C , T ( xi ) , and C(xi ) , as defined in Section 3 , respectively represent the complete set of tags , genre classes , the tags associated with a track xi , and the genre label of a track xi . We compute the frequency that a tag tj occurs in a class ck as S(tj , ck ) = |{xi|tj ∈ T ( xi ) , C(xi ) = ck , xi ∈ X k}| . Then , the class entropy of a tag tj is :
S(tj , ck ) log2
S(tj , ck )
SC ck∈C
SC
EC ( tj ) = −
Recall that each track is associated with a vector where SC = ck∈C S(tj , ck ) is the overall occurrence of tag tj in all classes . The lower value of the class entropy of a tag , the more certainly the tag distributes in classes , and the higher weight we should assign to the tag .
−→ T ( xi ) , where each element is the TFIDF value of a tag tj associated with xi . To include the class distribution of a tag in the existing TFIDF method , the new weight of a tag tj is the product of the tag ’s TFIDF value and the inverse of it ’s class entropy , T F IDF ( tj , xi ) ∗
1
EC ( tj ) .
As a result of weighting tags based on their class entropy , the similarity values between tracks decrease . The performance with the similarity threshold = 0.05 is shown in Table 7 . For easy comparison , we include the performance of the original Double Layer Classifier in the figure as well . We notice that this strategy improves the performance of the original Double Layer Classifier only when the percentage of known data is 10 % . When the percentage of known data is low , discriminating tags based on class distribution even damages the performance of the original Double Layer Classifier . The possible reason is that , without enough training data , the class entropy of tags may not be computed reliably . The reason that the performance of this strategy decreases given more training data is because of the fixed similarity
Class5 % TrainingData PrecisionRecallJazzRockCountryR&BElectronica8158755743772281755388183917575470747244Rap523848475%10%15%20%Double LayerTag DiscriminationDouble LayerTag Discrimination6053496260674997865772798313694971747879722273898391773682907036Training Data PrecisionRecallMethodMeasureClass10 % Training Data PrecisionRecallJazzRockCountryR&BElectronica8741842977923487900196785334724772918681Rap91166810841519139729638990847801804057378129606784426629Double LayerDouble LayerTag DiscriminationTag Discrimination Table 9 : Performance of double layer classifier with tag augmentation
Table 10 : Performance of double layer classifier with tag entropy and augmentation threshold we use . As we observe from the intermediate results , when more training data is given , the similarity values of tracks are getting smaller . Hence , a lower similarity threshold should be used . Otherwise , the neighborhood of tracks shrinks so that it does not provide sufficient information for accurate classification .
The per class performance of the Double Layer Classifier with the Tag Discrimination strategy is shown in Table 8 . For genres of “ Jazz ” and “ Rock ” , both the precision and recall are improved . For genres of “ Country ” and “ Rap ” , the precision is improved significantly with a tiny sacrifice in the recall . For the genre of “ R&B ” , the recall value is improved evidently while the precision decreases slightly .
Tag Augmentation . Instead of directly decreasing the number of cross class edges , the second strategy aims to increase the number of in class edges . Particularly , when the percentage of training data is low , the data sparsity is severe so that the in class edges are not sufficient ( given our particular dataset , this happens more seriously for tracks of “ Rock ” ) . We consider to handle this problem by augmenting the tag −→ vector of each track with tags from its neighbors . −→ We now associate two tag vectors with each track , T and
T , where the former contains the original tags associated with the track and the latter consists of augmented tags . Given the training data , we firstly discover neighborhoods from it with respect to some similarity threshold . Then , for each known track , the original tags of its neighbors are added to its augmented tag vector , if they do not occur in its original tag vector . The weight of each augmented tag is averaged over the number of neighboring tracks originally having this tag . After augmenting tags from neighbors , the similarity between tracks based on their augmented tag vector can be computed using the cosine similarity measure as well . Let S(xi , xj ) and S ( xi , xj ) be the similarities between tracks xi and xj based on their original tag vector and the augmented tag vector respectively . The overall similarity between the two tracks can be computed as α ∗ S(xi , xj ) + ( 1 − α ) ∗ S ( xi , xj ) , where α ∈ [ 0 , 1 ] controls the relative importance of each singular similarity .
Note that , tag augmentation is computationally expensive , since the neighborhood of a tag need to be explored twice , before and after adding tags . Consequently , we perform this strategy for training data only . By augmenting tags for known tracks , we aim to estimate better conditional probabilities between genres . Our experimental results suggest the effectiveness of this strategy when only training data is processed .
Table 9 presents the performance of the Double Layer Classifier integrated with the Tag Augmentation strategy , where the coefficient α is set to 0.6 and the similarity threshold is 0.2 , together with the performance of the original Double Layer Classifier and the one with Tag Discrimination . The performance of the classifier with Tag Augmentation outperforms the other two clearly . It is notable that the Tag Augmentation strategy shows some effect when the percentage of training data is as low as 5 % , although the improvement is not quite significant .
We further integrate the Tag Discrimination and the Tag Augmentation strategies . The performance , with α = 0.6 and = 0.05 , is shown in Table 10 . Given 10 % training data , the simultaneous employment of the two strategies performs better than employing the Tag Augmentation strategy alone . When more training data is given , the advantage of the integration of the two strategies disappears . The possible reason is similar to as discussed on the Tag Discrimination strategy . Content Combination . Although the Tag Augmentation strategy obviously improves the performance , it is expensive to compute neighborhood twice from the training data . Thus , instead of augmenting tag features from neighbors , we consider to augment features with other sources of information . Particularly , we take into account the audio content of tracks , and measure the similarity between known tracks based on not only their associated tags but also their associated low level features . Similar to tag based similarity measure between tracks , the cosine similarity is employed to measure the proximity between tracks based on their lowlevel features . Given the tag based similarity , St(xi , xj ) , and content based similarity , Sc(xi , xj ) , the overall similarity between tracks xi and xj is β ∗ St(xi , xj ) +(1− β)∗ Sc(xi , xj ) , where β ∈ [ 0 , 1 ] controls the relative importance of similarity based on different information sources .
We apply this strategy on both known and unknown tracks . Consequently , not only the conditional probabilities estimated from known tracks , but also the neighborhoods of unknown tracks are adjusted . Table 11 shows the performance of this strategy with β = 0.6 and = 05 For easy comparison , we include the results in Table 9 as well . Compared with the original Double Layer Classifier , this strategy improves the performance given the percentage of training data ranging from 5 % to 20 % . It also outperforms the other two strategies which focus on processing tag features themselves . The results suggest the effectiveness of integrating multiple information sources . Moreover , compared with the Tag Augmentation , this strategy is more preferable as it is computationally efficient .
This strategy cannot be easily integrated with the Tag
5%10%15%20%Double LayerTag DiscriminationDouble LayerTag Discrimination6053496260674997865772798313694971747879722273898391773682907036Training Data PrecisionRecallMethodMeasureTag Augmentation Tag Augmentation629486778178863567308586814383975%10%15%20%Tag AugmentationDiscrimination & Augmentation.Tag Augmentation6294701367306214867785398586842881788518814382368635850383978427Training Data PrecisionRecallMethodMeasureDiscrimination & Augmentation Table 11 : Performance of double layer classifier with content combination
Table 13 : Performance of double layer classifier with static weighting schemes
Table 12 : Per class performance of double layer classifier with content combination
Discrimination strategy , considering the latter leads to very small similarity values between tracks . Our preliminary experimental results show that the integration of Content Combination and Tag Augmentation is capable of generating performance which is a bit more better than Content Combination only . However , due to the inefficiency of the Tag Augmentation strategy , we advise against this integration .
Table 12 presents the per class precision and recall of
Double Layer Classifier using the Content Combination strategy , where the results in Table 8 are included for comparison . This strategy improves the accuracy of almost every class , although the precision and recall of “ Rock ” and “ R&B ” are still not as good as those of the other genres . 5.2 Updating Optimization
Besides processing feature data , several strategies have been designed in an attempt to optimize the genre updating procedure . Particularly , we consider two sets of weighting schemes to adjust the influence of neighbors in predicting genres of unknown tracks . The first set of schemes assign static weights to neighbors , while the second set computes dynamic weights . However , according to our experimental results , most of the weighting schemes do not show strong and positive effect . We thus briefly introduce these schemes and analyze the reasons that they fail to work .
The following three static weighting schemes are considered . Similarity based Weights . Intuitively , neighbors which are more similar to an unknown track should have more impact on its classification than neighbors which are less similar . Thus , we assign a weight to a neighbor using the similarity between the target and the neighbor . That is , Equation 8 is computed as :
Sim(xj , xi)P r(C(xj)|ci )
( 9 )
P r(ci ) xj∈N u(xi)∪N k(xi )
Knowledge based Weights . Considering that the information provided by known and unknown neighbors might not be equally reliable , we introduce a coefficient γ ∈ [ 0 , 1 ] to adjust the relative impact of the two sets of neighbors ( γ is set to 0.6 in our experiments to emphasize the influence of known neighbors ) . Then , P r(ci|N u(xi ) , N k(xi ) ) is updated as
P r(ci )
γSim(xj , xi)P r(C(xj)|ci ) xj∈N k(xi ) ( 1 − γ)Sim(xj , xi)P r(C(xj)|ci ) xj∈N u(xi )
( 10 )
Degree based Weights . The last scheme takes into account the topology of the track graph . The neighborhood of each node can vary in size . Intuitively , a large neighborhood may have more variety in genre classes . A node with a large neighborhood is , therefore , probably less capable of confidently influencing its unknown neighbors’ genres . Hence , we use information from such a neighbor to assign a weight which is inversely proportional to its node degree . Applied to P r(ci|N u(xi ) , N k(xi) ) , we get :
δD(xj )Sim(xj , xi)P r(C(xj)|ci )
( 11 )
P r(ci ) xj∈N u(xi)∪N k(xi ) where D(xj ) is the node degree of xj and δ ∈ [ 0 , 1 ] is an experimentally decided parameter which results in an inverse ratio between assigned weight and node degree ( δ is set to 0.2 in the experiments shown in Table 13 ) .
The performance of the Double Layer Classifier integrated with the static weighting schemes , based on the Content Combination feature processing strategy , is shown in Table 13 . Unfortunately , apart from the Knowledge based Weight scheme for 5 % training data given , the static weighting schemes do not have positive impact on the performance .
Further investigation of the data shows that the similarity between some “ Rock ” and “ R&B ” tracks is very high , even
5%10%15%20%Double LayerTag DiscriminationDouble LayerTag Discrimination6053496260674997865772798313694971747879722273898391773682907036Training Data PrecisionRecallMethodMeasureTag Augmentation Tag Augmentation62948677817886356730858681438397Content CombinationContent Combination69688718830285327042859980748483Class10 % Training Data PrecisionRecallJazzRockCountryR&BElectronica8741842977923487900196785334724772918681Rap91166810841519139729638990847801804057378129606784426629Double LayerDouble LayerTag DiscriminiationTag Discrimination920470478698813588597868Content CombinationContent Combination9374518087696273913997085%10%15%20%Similarity basedKnowledge basedSimilarity basedKnowledge based6936761868477901860884458482832676778018754180218339849682648318Training Data PrecisionRecallMethodMeasureDegree based Degree based58778660772584266429841774748279Content Combination6968871883028532Content Combination 7042859980748483 Table 14 : Performance of double layer classifier with dynamic weighting schemes when low level features are taken into account . Therefore , the similarity based Weight is rendered mostly useless and is not able to disambiguate tracks .
The Degree based Weight scheme is designed based on the assumption , that a node with a larger neighborhood is less capable of confidently influencing its unknown neighbor . This assumption , however , does not hold for our particular data set . A node with a larger neighborhood does have more variety in genre classes . Nevertheless , in most cases , the majority of its neighbors indicating the true class of the node . Consequently , this node is still capable of correctly influencing its unknown neighbors . Another interesting observation is that , the performance cannot be improved either when we assign more weights to neighbors with higher node degree . This further suggests that , for our particular data set , node degree is not a distinctive feature reflecting the capability of neighbors in confidently influencing unknown tracks .
When the percentage of known data is low , a neighborhood of an unknown track is probably overwhelmed by unknown neighbors . In such cases , it is reasonable to assume that at least known neighbors are more reliable than unknown neighbors . This seems to be the reason why the Knowledge based Weight scheme improves the performance for 5 % training data .
The dynamic weighting schemes assign weights to nodes based on the class distributions of their neighborhoods . For each unknown node during each round of genre updating , we compute its neighborhood entropy . Given a node xi and its neighborhood N ( xi ) = {x1 , x2,··· , xn} , where ∀j ∈ [ 1 , n ] , C(xj ) ∈ C = {c1 , c2,··· , ck} , the neighborhood entropy of xi , denoted as EN ( xi ) , is computed as :
EN ( xi ) = − k j=1
H(cj )
HC log2
H(cj )
HC xj∈N ( xi)&C(xj )=cj where H(cj ) = Sim(xj , xi ) is the sum of similarities between xi and all its neighbors which are assigned to class cj . HC = cj∈C H(cj ) is the normalization constant .
Neighborhood Entropy based Weight 1 . The higher the neighborhood entropy value , the more even the class distribution of xi ’s neighbors . When its neighbors’ classes are distributed evenly , it is not easy to determine xi ’s class . Therefore , it probably should not be drastically influenced in this iteration . We design the first neighborhood entropy based weighting scheme to anchor the node to its current probability distribution in this iteration . That is , the Equa tion 7 is updated as
P r(ci|∆k)(r+1 ) = P r(ci|∆k)(r )
[ P r(ci|N u(xi ) , N k(xi ) )
P r(C(xj)|∆k)(r ) ] ( 12 ) xj∈N u(xi )
N u(xi )
Neighborhood Entropy based Weight 2 . Considering that a node with a higher neighborhood entropy is prone to be classified incorrectly , its influence to its unknown neighbors should be demoted to some degree . Therefore , the second neighborhood entropy based weighting scheme is designed as follows . Let xi and N ( xi ) be an unknown node and its neighborhood . Let ξ be some neighborhood entropy thresh(xi ) = {xj|xj ∈ N u(xi ) ∧ EN ( xj ) ≥ ξ} be the old , and N subset of N ( xi ) such that each node is an unknown neighbor of xi and has a high neighborhood entropy . Then , the Double Layer Classifier updates P r(ci|N u(xi ) , N k(xi ) ) as
P r(ci )
πP r(C(xj)|ci ) xj∈N
( xi ) xj∈N ( xi)\N
P r(C(xj)|ci )
( 13 )
( xi ) where π ∈ [ 0 , 1 ] decides how much the influence of neighbors with high neighborhood entropy should be decreased ( π is set to 0.75 in our experiments ) . Note that , this scheme is similar to the Degree based Weight in the way that both take into account the genre variety of a neighborhood . However , this scheme might be more accurate as it directly measures the genre variety of a neighborhood , while the Degree based Weight scheme infers from the size of a neighborhood . Furthermore , the Degree based Weight assigns fixed weights to nodes , while this scheme dynamically decides whether or not to dampen the influence of nodes in every round .
Table 14 shows the performance of the two neighborhood entropy based weighting schemes . We notice that , although both schemes show certain improvement with certain size of training data , the improvement is not significant . Compared with feature processing strategies , the effectiveness of these weighting schemes focusing on revising the genre updating procedure is limited for our problem .
6 . CONCLUSIONS
Automatic music genre classification is a pivotal problem in MIR systems , which has attracted numerous research efforts in the community . Most of the existing approaches focus on improving classification accuracy by finding better low level features which represent and distinguish music more precisely . In this paper , we propose to explore the usage of social tags for this task . To the best of our knowledge , it is the first attempt to perform music genre classification using such tags . We consider tag information in an implicit way by creating a graph of music tracks based on their semantic similarity in terms of associated tags . Two classification methods are introduced , Single Layer Classifier and Double Layer Classifier , which respectively considers the explicit audio content information and the implicit tag information simultaneously and sequentially . We evaluated the performance of the classifiers on real world data collected from Lastfm The experimental results demonstrate the usefulness of tags in music genre classification . The DoubleLayer Classifier performs better than the Single Layer Classifier as unknown data may be utilized as well in predicting the genres of unknown tracks . Further improvement of the Double Layer Classifier has been considered from two
5%10%15%20%Content CombinationNeighborhood Entropy 1Neighborhood Entropy 16968664270426750871886188599834983028483807482808532870184838604Training Data PrecisionRecallMethodMeasureNeighborhood Entropy 2 Neighborhood Entropy 270538723799486056693856278378527Content Combination pages 282–289 , 2003 .
[ 16 ] Q . Lu and L . Getoor . Link based classification . In
ICML , pages 496–503 , 2003 .
[ 17 ] S . Macskassy and F . Provost . Classification in networked data : A toolkit and a univariate case study . volume 8 , pages 935–983 , 2007 .
[ 18 ] M . Mandel and D . Ellis . Song level features and support vector machines for music classification . In ISMIR , pages 594–599 , 2005 .
[ 19 ] C . McKay and I . Fujinaga . Automatic genre classification using large high level musical feature sets . In ISMIR , 2004 .
[ 20 ] C . McKay and I . Fujinaga . Musical genre classification : Is it worth pursuing and how can it be improved ? In ISMIR , pages 101–106 , 2006 .
[ 21 ] E . Pampalk , A . Flexer , and G . Widmer .
Improvements of audio based music similarity and genre classificaton . In ISMIR , pages 628–633 , 2005 .
[ 22 ] L . Pelkowitz . A continuous relaxation labelling algorithm for markov random fields . volume 20 , pages 709–715 , 1990 .
[ 23 ] N . Scaringella , G . Zoia , and D . Mlynek . Automatic genre classification of music content : a survey . IEEE Singal Processing Magazine . , 23(2):133–141 , 2006 .
[ 24 ] P . Schmitz . Inducing ontology from flickr tags . In the workshop on Collaborative Web Tagging at WWW , 2006 .
[ 25 ] B . Taskar , P . Abbeel , and D . Koller . Discriminative probabilistic models for relational data . In UAI , pages 485–492 , 2002 .
[ 26 ] G . Tzanetakis and P . Cook . Musical genre classification of audio signals . IEEE Trans . on Speech and Audio Processing , 10(5):293–302 , July 2002 .
[ 27 ] K . West and S . Cox . Finding an optimal segmentation for audio genre classification . In ISMIR , pages 680–685 , 2005 .
[ 28 ] B . Whitman and P . Smaragdis . Combining musical and cultural features for intelligent style detection . In ISMIR , 2002 .
[ 29 ] X . Wu , L . Zhang , and Y . Yu . Exploring social annotations for the semantic web . In WWW , pages 417–426 , 2006 . aspects : feature processing and optimized updating . Our experimental results suggest , that strategies focusing on improving tag feature data are more effective than those focusing on revising the genre updating procedure .
In the future , we are going to apply ontological information to tags so that the semantic relationship between tracks can be captured more precisely . Then , we are interested in applying our methods to classifying music into a hierarchy of genres . Furthermore , investigating the usefulness of tags in music mood classification is an intriguing problem as well .
7 . ACKNOWLEDGMENTS
This work was partially supported by the PHAROS project funded by the European Commission under the 6th Framework Programme ( IST Contract No . 045035 ) .
8 . REFERENCES [ 1 ] R . Angelova and G . Weikum . Graph based text classification : learn from your neighbors . In SIGIR , pages 485–492 , 2006 .
[ 2 ] J J Aucouturier and F . Pachet . Representing musical genre : A state of the art . Journal of New Music Research . , 32(1):83–93 , 2003 .
[ 3 ] S . Bao , G R Xue , X . Wu , Y . Yu , B . Fei , and Z . Su .
Optimizing web search using social annotations . In WWW , pages 501–510 , 2007 .
[ 4 ] B . Berendt and C . Hanser . Tags are not metadata , but just more content to some people . In ICWSM , 2007 . [ 5 ] C . H . Brooks and N . Montanez . Improved annotation of the blogosphere via autotagging and hierarchical clustering . In WWW , pages 625–632 , 2006 .
[ 6 ] J . J . Burred and A . Lerch . A hierarchical approach to automatic musical genre classification . In 6th Int . Conf . Digital Audio Effects , 2003 .
[ 7 ] S . Chakrabarti , B . Dom , and P . Indyk . Enhanced hypertext categorization using hyperlinks . In SIGMOD Conference , pages 307–318 , 1998 .
[ 8 ] B . Cui , H . V . Jagadish , B . C . Ooi , and K L Tan .
Compacting music signatures for efficient music retrieval . In EDBT , pages 229–240 , 2008 .
[ 9 ] R . Dannenberg , J . Foote , G . Tzanetakis , and
C . Weare . Panel : new directions in music information retrieval . In Proc . Int . Computer Music Conf . , 2001 .
[ 10 ] P . A . Dmitriev , N . Eiron , M . Fontoura , and E . J .
Shekita . Using annotations in enterprise search . In WWW , pages 811–817 , 2006 .
[ 11 ] M . Dubinko , R . Kumar , J . Magnani , J . Novak ,
P . Raghavan , and A . Tomkins . Visualizing tags over time . In WWW , pages 193–202 , 2006 .
[ 12 ] S . Golder and B . A . Huber man . The structure of collaborative tagging systems . In http://wwwhplhpcom/research/idl/papers/tags/tagspdf , 2006 .
[ 13 ] F . Gouyon , S . Dixon , E . Pampalk , and G . Widmer .
Evaluating rhythmic descriptors for musical genre classification . In AES 25th Int . Conf . , 2004 .
[ 14 ] H . Halpin , V . Robu , and H . Shepherd . The complex dynamics of collaborative tagging . In WWW , pages 211–220 , 2007 .
[ 15 ] T . Li , M . Ogihara , and Q . Li . A comparative study on content based music genre classification . In SIGIR ,
