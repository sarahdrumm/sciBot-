A Viewpoint based Approach for Interaction Graph
Analysis∗
Sitaram Asur
Department of Computer Science
Ohio State University Columbus , OH 43210 asur@cseohio stateedu
†
Srinivasan Parthasarathy Department of Computer Science
Ohio State University Columbus , OH 43210 srini@cseohio stateedu
ABSTRACT Recent innovations have resulted in a plethora of social applications on the Web , such as blogs , social networks , and community photo and video sharing applications . Such applications can typically be represented as evolving interaction graphs with nodes denoting entities and edges representing their interactions . The study of entities and communities and how they evolve in such large dynamic graphs is both important and challenging .
While much of the past work in this area has focused on static analysis , more recently researchers have investigated dynamic analysis . In this paper , in a departure from recent efforts , we consider the problem of analyzing patterns and critical events that affect the dynamic graph from the viewpoint of a single node , or a selected subset of nodes . Defining and extracting a relevant viewpoint neighborhood efficiently , while also quantifying the key relationships among nodes involved are the key challenges we address . We also examine the evolution of viewpoint neighborhoods for different entities over time to identify key structural and behavioral transformations that occur . Categories and Subject Descriptors : H28 Database Management : Database Applications Data Mining General Terms : Algorithms , Measurement Keywords : Interaction networks , Neighborhood Analysis , Activation Functions
1 .
INTRODUCTION
The trend in online computing has shifted to a social context , with social communities such as Facebook , MySpace and Orkut , weblogs and community photo and video sharing applications gaining tremendous popularity . These networks share common attributes with other real world networks such as biological networks , co authorship networks ∗ RI CNS 0403342 , CCF 0702586 and SGER IIS 0742999 . † Contact Author
Work supported by the NSF CAREER Grant IIS 0347662 , and the Web , in that , they can be efficiently represented as an evolving interaction graph , where nodes denote entities of interest , and the ties among entities can be modeled as edges . The addition and deletion of edges symbolize the changes that occur in these graphs over time . The study of such networks can provide insight into the structure and function of such systems ( [5 , 4 , 15] ) , potentially allowing one to predict and reason about interesting aspects of their behavior . Such analysis is critical to online applications such as search ( [2 , 11 ] ) and advertising ( [1 , 12] ) .
In the setting of targeted advertising on a social network like Facebook , advertisers targeting an individual can glean useful information regarding the propensity of the person being responsive to a product by studying the local neighborhood of that individual , the presence of influential members in the immediate friend circle as well as the nature of the relationships among them . The key challenge is to identify and quantify these local relationships based on the topology of the graph . Also , most online communities provide facilities for storing content apart from link information [ 2 ] . We would like to consider how content information such as semantic features can be incorporated along with link information to capture relationships among nodes . In the first half of the paper , we concern ourselves with the following important question . How can we identify a local neighborhood of interest for a particular source node , and also quantify the impact or importance of different nodes in the constructed neighborhood , with respect to the source node ?
To obtain a satisfactory answer to this question , we formally define the notion of a Viewpoint Neighborhood of a node , to represent the immediate neighborhood of interest for a particular node . We then discuss the properties that need to be modeled to measure importance and effect , and arrive at an activation spread model , inspired by the heat diffusion equation , for identifying the members of a node ’s immediate neighborhood . We show how different activation functions can be employed capturing different intrinsic and extrinsic properties of nodes in the graph . We also extend this problem to one where we wish to identify the common shared neighborhood for a set of nodes , which is important in keyword search and influence maximization applications . Since these graphs are often evolving , the neighborhoods as well as the relationships will change over time . A crucial problem in this context is to characterize the changes occurring in these neighborhoods over time and show how they can be used to build models for dynamic behavior . For this purpose , we define certain temporal events that can characterize changes and measure important structural and be
79 havioral patterns such as stability and popularity over time . Also , changes typically impact different entities in the graph in different ways . We show how the effect of changes on specific nodes in the graph can be gleaned by temporal analysis on the Viewpoint Neighborhoods for nodes in the evolvIn this regard , we introduce core subgraphs , ing graph . which represent stable sections of a node ’s neighborhood , and transf ormation subgraphs to capture changing sections of the neighborhood .
To sum up , the key contributions of this work include : • The description and formalization of Viewpoint Neigh borhoods for nodes and groups of nodes .
• A general activation model for identifying Viewpoint Neighborhoods using different activation functions to capture topological and semantic properties .
• Efficient extraction of key temporal events and behavioral measures to characterize neighborhood change . • Introduction of core subgraphs and transformation subgraphs to capture stable and transient behavior in the neighborhoods of nodes over time .
2 . RELATED WORK
Recently , there has been considerable interest in analyzing dynamic interaction graphs . Kumar and others [ 15 ] have analyzed the evolution of structure in social networks , providing measurements on two real world networks . Backstrom et al [ 5 ] have focussed on the formation of groups and the ways they grow and evolve over time . Tantipathanandh and others [ 18 ] have developed a framework for detecting dynamic community structure in evolving graphs . Sun and others [ 17 ] have proposed GraphScope for parameter free pattern mining of time evolving graphs .
In our earlier work [ 4 ] , we proposed an event based framework for characterizing evolving interaction graphs , examining clusters of graphs and outlining events for their changes over time . However , clusters are dependent on the clustering algorithm applied and are restricted by the fact that they do not capture local relationships . All the nodes within a cluster are treated the same , without any structure information . This makes it infeasible to study local relationships and their evolution over time , which is the main aspect of this work . Here , we focus on identifying neighborhoods making use of topological and semantic information , while retaining local structural information . This enables us to examine and quantifying relationships within local neighborhoods and how they evolve over time .
Activation models have been studied for complex networks specifically in the context of influence maximization ( [12 , 13 , 6 , 1 , 8 ] ) and keyword search ( [11] ) . Kempe et al ( [12 , 13 ] ) discuss two models for the spread of influence through social networks . Their model however is computed by simulation on a static network . It does not consider the addition and deletion of nodes and edges in the network . In this work , we develop an activation model for extracting neighborhoods for nodes in dynamic graphs and quantifying relationships within them .
3 . DATASETS
We use two different real world interaction graphs for our experimental analysis .
1 . DBLP co authorship network : We used the DBLP computer science bibliography data to generate a co authorship network representing authors publishing in several important conferences in the field of databases , data mining and AI . The graph spanning 10 years ( 1997 2006 ) contained 23136 nodes and 54989 edges . We chose the snapshot interval to be a year , resulting in 10 consecutive snapshot graphs . 2 . Wikipedia Revision History Dataset : The dataset we employ represents the revision history of the Wikipedia online encyclopedia and consists of a set of webpages as well as links among them . We used a subset of the data representing the editing history from January 2001 to June 2002 , considering 3 month interval snapshots . This subset consisted of 178512 nodes ( webpages ) and 2.55 million edges .
4 . VIEWPOINT NEIGHBORHOODS
In this section , we introduce the notion of Viewpoint Neigh borhoods and discuss algorithms to find them .
Definition : Let Ps(v ) represent the importance or commitment value for node v wrt node s . A Viewpoint neighborhood ( VPN ) for a given source node s for a graph G=(V,E ) , . ∈ V is defined as a subgraph rooted at s with vertices , V such that ∀v ∈ V . ∈ E such that ∀(vi , vj ) ∈ E .
. , Ps(v ) > 0 , and all edges E , vi ∈ V and vj ∈ V
.
.
.
The above definition refers to nodes of importance to the given source node . The commitment of a node to a neighborhood is a quantity that captures the level of involvement of the node to the VPN in question . A node can potentially be associated with different commitment values with respect to each VPN in its environs . We will next discuss what factors govern the commitment of a node with respect to a source node . 4.1 Criteria for Node Commitment
S
A
B
C
D
E
F
1 :
Figure Example VPN
Consider a social network where nodes represent people and links represent the friendship ties among them . Since the network captures real world behavior , a node ’s real life friends are likely to be linked either directly to the node or within two hops . Since nodes that are closer to x are likely to have a greater effect on x than nodes further away , a baseline approach would be to consider all nodes within a particular distance as part of the neighborhood .
Such a depth based Viewpoint neighborhood for a node can be computed in a straightforward manner by performing depth limited search from that node with the traversal carried out until the required depth is attained . However , this definition is naive since it makes the assumption that all nodes are considered equal in terms of their involvement in the neighborhood , and in particular all nodes within a particular distance k from the source node will all belong to the VPN . This assumption is not true , as two nodes that are the same depth away may not necessarily impact the source node in the same way . For instance , in Fig 1 which shows a depth 3 VPN , we can see that nodes A and B are at the same distance from source node S . However , while A is well connected with other nodes in S ’s neighborhood , B is not . One can justly argue that A and B
80 impact node S differently and this needs to be captured by the algorithm . Hence , to identify nodes that are important to a particular node in a social network , we need to concentrate not only on distance from the source node but also local connectivity information . A third issue to consider in this context is that , in small world graphs , hub nodes ( nodes with high degrees ) have interactions with most nodes in the graph . This makes path lengths from one end of the graph to another very small . Hence , even for small values of k , the VPN for a node might include a large portion of the graph , which is not likely to be useful . Not only are the neighborhoods going to be unnecessarily large to store , but it severely impacts the analysis that can be done over them . This discussion leads to the following desiderata for con structing a VPN . 1 . Inverse Distance weighting : The commitment of a node to a VPN should be inversely proportional to its distance from the source . The intuition is that a node is likely to be affected more by changes occurring near itself than those occurring some distance away . 2 . Link Structure : Nodes that are well connected ,i.e having links to many other nodes within the VPN , should have high commitment or importance values . These are nodes that have high influence within the VPN . 3 . Hub nodes : As mentioned above , hub nodes distort neighborhoods by bringing ‘uninvited guests’ a host of other nodes that do not belong . The algorithm should expand such hub nodes with low probability . 4.2 Activation Spread
We propose a general activation spread model which is designed to satisfy the above three criteria and construct a VPN for a given source node . The model can be constructed as a special case of the popular Heat Diffusion Model ( HDM ) [ 20 ] which has been studied in literature . We will begin by describing the intuition of the model , before showing how it can be derived from the Heat equation .
Definition : Let dist(a , b ) represent the shortest distance in hops from node a to node b . In a VPN N s = ( V , E ) rooted at node s , ∀x ∈ V , the descendants of x are given as Desc(x ) = y : ( x , y ) ∈ E and dist(s , y ) >= dist(s , x ) .
The activation process originates at the given source node with a budget M . The source node distributes this amount among its immediate neighbors , activating them . Each node then retains some amount for itself and splits the remainder among its descendants , continuing the activation downwards and away from the source . A node is expanded only once . If a node has already been activated , it is not expanded a second time . Thus , the activation proceeds in one pass and in one direction only . To handle the inverse distance weighting of nodes , we decay the activation as it proceeds farther away from the source node . Each time the activation touches a node , it decays by a factor of the number of the links the node has . This ensures that nodes closer to the source node are more probable to be chosen . Key to the effectiveness of the spread is an activation function Act( ) that serves as a distribution mechanism . Let my be the amount at node y . At each successor node x , the activation function Act(x,y,my ) determines the portion of amount my that is diffused by predecessor node y to node x . The general spread algorithm is presented as Algorithm 1 . The activation proceeds until the amount reaches a minimum threshold , at
Algorithm 1 Find VPN(Adjlist , s , M , thresh )
Input : Adjacency list Adjlist , s , the start node , M , the budget and thresh the stopping threshold Output : Commitment P Initialize Commitment values Ps(x ) = 0 for all nodes for each neighbor y of source s do
/* Push the node and the amount it needs to receive into queue*/ Push ( y,Act(y , s , M ) ) end for while queue is not empty do
Pop node amount pair from the queue as ( x,mx ) if x has already been expanded or mx deg(x ) < thresh then
Add amount mx to Ps(x ) Continue end if /* Expand node x */ for each y ∈ Desc(x ) do if Act(y , x , mx ) < thresh then
/* No need to expand that node */ Add amount Act(y , x , mx ) to Ps(x ) else
/* Enqueue for activation */ if y is already on the queue and its predecessor is the same level as x then
Add amount Act(y , x , mx ) to what y is going to receive else
Push ( y,Act(y , x , mx ) ) into the queue end if end if end for Mark x as expanded end while for each expanded node do end for Return Ps
Ps(x ) = Ps(x )
M which it is deemed indivisible . At the end of the activation process , the amounts at each node sum to M . Hence , the fraction of the total amount that each node has received represents the Commitment P for that node . Thus the importance of a node is proportional to both its local connectivity and the shortest path to it from the source node . Note that the spread algorithm outlined above satisfies the three criteria provided earlier . During activation spread , the amount transmitted by the source is constantly decayed as it moves further and further away . Also , common neighbors of nodes will receive portions from each of the nodes , thereby ending up with higher amounts than nodes that are connected to only one of the earlier nodes . Finally , hubs will have low importance since a node retains only one portion after dividing among all its neighbors . So if a node has a large number of neighbors it will be left with a very small portion after distribution . Note that , if edge weights are available , then during the activation propagation , they can be incorporated in the activation function .
4.3 Activation Functions
An activation function is used by the spread algorithm to perform the distribution of amounts to different nodes depending on topological or semantic features . We will next present three different activation functions based on the node degree , betweenness and semantic content respectively 1
Degree based Activation : This is a simple activation function that down weights nodes with high degrees . When |Desc(x)|+1 a node x receives a certain amount , it retains
1
1Note that , it is possible to design a function to incorporate multiple features with different weights attached to them .
81 and distributes the same fraction to each of its descendants . Note that , hub nodes that are connected to a large number of nodes , will retain small amounts using this function .
Act(y , x , mx ) = Deg(x , mx ) = mx
|Desc(x)| + 1
This activation function satisfies the three criteria we dis
Algorithm 2 Find Bet(Adjlist , s , M , thresh )
Input : Adjacency list Adjlist , s , the start node , M , the budget , Activation Function Deg and thresh the stopping threshold Output : Betweenness B Initialize depths D(x ) = Inf for all nodes Initialize predecessor list P r for each neighbor y of source s do
Push ( y,Deg(y , M),1,s ) into queue end for while queue is not empty do
Pop node amount depth predecessor tuple from the queue as ( x,m,d,p ) if D(x ) = d then
/* Alternate predecessor for x along the shortest path from s */ Add predecessor p to P r(x ) else if D(x ) > d then
/* Found shorter path to x */ Clear predecessor list P r(x ) Add p to P r(x ) Set D(x ) to d end if if Deg(x , m ) < thresh then
Do not expand node x else
/* Expand node x */ for each y ∈ Desc(x ) do if D[y ] < D[x ] + 1 and previous maximum amount received by y > Deg(x , m ) then
/* No need to expand that node */ else
/* Enqueue for activation */ Push ( y,Deg(y , m),D[x ] + 1,x ) into the queue end if end for end if end while for each expanded node x do
Use predecessor list P r to find path to source and update betweenness B of nodes along the way end for Return B cussed previously , with inverse weighting of nodes taken care of by the decay , common neighbors getting higher weights and hubs down weighted . However , it does not completely capture the link structure in the graph . We can illustrate this with the example in Fig 1 . Nodes A and B both receive M 2 from the source node . While A has 2 descendants , and hence retains only M 2 it received since it does not have any descendants . Node A is connected to all other nodes in the VPN and should receive better recognition than it does using this activation function . Hence , the activation function needs to consider not only immediate links but also more topological information . We will show how this can be improved using the Betweenness topological measure next .
6 , node B will retain the entire M
Betweenness based Activation : The Betweenness centrality measure , which was first introduced by Freeman[10 ] , is a global topological measure and computes , for each node in the graph , the fraction of shortest paths that pass through it . In our case , we are interested in the reachability of nodes in the VPN from a given source node . Hence , we need to favor nodes that have high Betweenness Centrality in terms of paths from the source to other nodes in the VPN . These nodes are central within the VPN and can be considered important . The Betweenness Centrality for a given node x with respect to a source node s given a VPN of nodes N = ( V , E ) can be calculated as : B(x , s ) = SPx |V |−1 where SPx is the number of shortest paths passing through node x from source s to the nodes of the VPN V . The Betweenness centrality can be computed by performing BFS from the source node , building the shortest path tree for nodes in the VPN . Since we are considering local neighborhoods , we are interested only in betweenness centrality within the VPN . This quantity is less expensive to compute than the global betweenness centrality in the graph . However , we need to know the key members of the VPN before computing betweenness . For this , we simulate an activation spread , using the Degree based activation function to construct an initial VPN and simultaneously compute shortest paths . The algorithm F ind Bet is shown in Algorithm 2 .
Once the betweenness values are obtained for nodes in the neighborhood , they can be used in the activation function to refine the initial VPN . When a node receives an amount , it evaluates its own betweenness and the betweenness values of its descendants , and distributes the amount as a ratio of these values . Let the sum of the betweenness of its descendants be denoted as B(Desc(x) ) . The amount retained by node x is given as : B(Desc(x))+B(x ) The amount received by each descendant y is given as :
B(x)∗mx
Act(y , x , mx ) =
B(y ) ∗ mx
B(Desc(x ) ) + B(x )
In the example shown in Fig 1 , A will receive a larger amount ( 5M
6 ) than B ( M
6 ) from S .
1 , kx
Semantic Activation : Apart from topological features , it is possible to incorporate semantic properties of nodes to encode the activation function . This is of particular importance in personalized and keyword search applications ( [2 , 11] ) , where one is interested in identifying subgraphs that match given sets of keywords . To obtain efficient local neighborhoods when nodes are annotated with semantic terms , we need to consider the similarity of nodes with the source node . Let us consider two nodes x and y each associated with sets of terms denoted as Kx and K y where Kx = {kx 2 , , kx|Kx|} . A simple way to compute similarity for the two nodes would be to consider the number of terms in common . However , different terms are associated with different semantic meanings . Hence one needs to consider the distribution of topics and the relationships among them . When the terms are organized in a category hierarchy , we can use the notion of semantic similarity to serve our purpose . To begin with , the Information Content ( IC ) of a term ( category or keyword set ) , using Resnik ’s definition [ 16 ] , is given as : IC(ki ) = −ln F ( ki ) F ( root ) where ki represents a term and F ( ki ) is the frequency of encountering that particular term over all the entire corpus . Here , F ( root ) is the frequency of the root term of the hierarchy . Note that frequency count of a term includes the frequency counts of all subsumed terms in an is a hierarchy . Also note that terms with smaller frequency counts will therefore have higher information content values ( ie more informative ) . Using the above definition , the Semantic Similarity
82 2500
2000
1500 y c n e u q e r F
1000
1997 1998 1999 2000 2001 2002 2003 2004 2005 2006
500
0
0
20
40
60
80
100
120
140
Size of Neighborhood
3000
2500
2000 y c n e u q e r F
1500
1000
500
0
0
Jan−Mar 2001 Apr−Jun 2001 Jul−Sep 2001 Oct−Dec 2001 Jan−Mar 2002 Apr−Jun 2002
500
1000
1500
2000
2500
Size of Neighborhood
Metadata
Ontology ( computer science )
Internet
Computer
Computer network
Computer program
Robin Milner
Python programming language
List of computer scientists
Complementary network service
Parsing
Computer science
Computing
Information
Relational database
Turing Award
Relational model
Sales force management system
Dispersion−limited operation
Database management system
Database
Charles Bachman
Signal transition
Disengagement originator
Protocol ( computing )
Bugzilla
Customer relationship management
Data warehouse
Data mining
Customer privacy
Figure 3 : Distribution of neighborhood sizes for a)DBLP b)Wikipedia
Concurrency control
Database transaction
Usability
Distributed database
T = 7 borhood size distributions across time are close and overlapping . In the case of Wikipedia , the number of nodes
Figure 2 : Example of a semantic VPN . The source node Database is shown in yellow . The important ( high commitment ) nodes are shown in blue . i=1 j=1 SS(kx i , k
P|Ky|
P|Kx|
( SS ) between two terms ( categories ) can be computed as : SS(ki , kj ) = IC(lcs(ki , kj ) ) where lcs(ki , kj ) refers to the lowest common subsumer of terms ki and kj . The semantic similarity between the two nodes can be formulated as : y SS(x , y ) = j ) . While performing activation spread , we are interested in the semantic similarity between the source node and all other nodes in its VPN . While distributing amounts among nodes , we need to provide higher preference to nodes that are semantically more similar with the source node . Let s denote the source node . Let the semantic similarity of the descendants given source i∈Desc(x ) SS(s , i ) . The amount node s be S(Desc(x ) ) = retained by node x can then be given as :
P
SS(s , x ) ∗ mx
S(Desc(x ) ) + SS(s , x )
Similarly , the amount received by each descendant , y , is :
Act(y , x , mx ) =
SS(s , y ) ∗ mx
S(Desc(x ) ) + SS(s , x )
We present an example of a VPN using semantic activation on the Wikipedia webgraph in Fig 2 . The source node is Database ( shown in yellow ) , and the nodes with high importance ( > 0.025 ) are shown in blue . The node Database had a high degree in that particular snapshot , and was connected to a host of extremely unrelated nodes in the Wikipedia webgraph , such as Communications in Israel , 430 BC , DenverAurora metropolitan area and The Chicago Manual of Style . This is due to spurious links among webpages . Making use of the semantic similarity can help extract a relevant VPN for a node , which is extremely important in search ( [2 , 11 ] ) and spam applications . Note , that it is also possible to find the VPN for a node based on a particular input keywordset . In that case , the activation function needs to consider the semantic similarity of nodes with the source as well as with the query keywords . Figure 3 gives the distribution of the VPNs obtained for DBLP and Wikipedia datasets using the Betweenness based and Semantic Activation functions respectively . We can observe that for DBLP , the neigh
Time
1 2 3 4 5
Deg
104.75 200.73 229.83 225.75 229.31
Size Bet 77.75 88.99 92.55 93.88 95.35
Time/VPN
Sem 20.14 30.15 38.95 49.45 53.57
Deg 0.015 0.019 0.026 0.030 0.032
Bet 0.082 0.119 0.182 0.240 0.275
Sem 0.007 0.013 0.020 0.028 0.035
Table 1 : Size and computation time comparison for different activation functions on the Wikipedia dataset . increases constantly across timestamps , which causes the sizes of the neighborhoods and their number to increase , but the distribution pattern remains similar . The relative neighborhood size comparison for different activation functions on the Wikipedia webgraph are shown in Table 1 2 . We can observe that the Betweenness measure is more selective than the Degree based scheme and leads to smaller sized VPNs . The semantic activation function establishes relevance for webpages and the sizes of the VPNs it generates are smaller in size than the other two . We also present average computation times for different activation functions on the Wikipedia dataset . Note that , for the semantic activation , we have precomputed the semantic similarity values of terms , build an index and query for particular pairs . This makes it as fast as the degree based method which does not need to compute any information . 4.4 Relation to Heat Diffusion
The heat equation describes the distribution of heat ( or variation in temperature ) in a given region over time . In the context of a graph , let Fi(t ) , denote the heat received by a given node i from its neighbors at time t . The amount of heat diffused to a node is a function of the time interval as well as the difference in heat values at each of node i ’s neighbors . Thus the amount received by a node in a given period of time Δt can be described as :
Fi(t + Δt ) − Fi(t ) =
η(Fj(t ) − Fi(t))Δt
( 1 )
X j:(j,i)∈E
In the matrix form , it can be represented as :
F ( t + Δt ) − F ( t )
Δt
= ηHF ( t )
( 2 ) where η represents the heat diffusion coefficient and H represents the transition matrix . As shown recently by Yang 2We considered only nodes with commitment > 0.001 while computing sizes
83 Algorithm 3 MultiVPN(Adjlist , srclist , M , thresh , k )
Input : Adjacency list Adjlist , srclist , the list of source nodes , M the budget , thresh the stopping threshold and k the minimum number of VPNs the node should belong to Output : Commitment Values P /* Find VPNs for each source node as described previously */ for each source node s do
BT emps = Find Bet(Adjlist , s , M , thresh ) P T emps = Find VPN(Adjlist , s , M , thresh ) end for /* Coalesce individual BTemp and PTemp values to obtain joint betweenness and importance wrt all source VPNs */ for each node x do qP|srclist| i=1
Betall(x ) = /* Prune nodes that do not belong to at least k neighborhoods */ if x belongs to at least k VPNs then
BT empi(x)2 p|srclist| − qP|srclist| i=1
( 1 − P T empi(x)2 )
Pall(x ) = else
Figure 4 : Example of a multi source VPN . Members of the multi VPN are shown in red and labeled with commitment values . in the limit Δt → 0 , the equation bedt F ( t ) = ηHF ( t ) . Solving this equation leads to and others [ 20 ] , comes d F ( t ) = eηHtF ( 0 ) .
In our case , the amount diffused by a node to its neighbors is governed by the Activation Function . Thus H in our case is defined as : − P
( j:(j,i)∈E Act(j , i , mi ) j = i & i is active ∀j : ( j , i ) ∈ E & i is active otherwise
Hij =
Act(i , j , mj ) 0
Note that for our algorithm , the transition matrix values are defined only for active nodes . A node becomes active when it receives amounts from its neighbors . Once it has propagated parts of this value to its descendants , it becomes inactive . The key difference between our model and heat diffusion is that , in our case diffusion is performed only once through the graph , whereas heat diffusion is a continuous process . The solution is computed to convergence in the general case . This difference is motivated principally by computational complexity . For small scale graphs one may be able to apply the exact more principled solutions in a timely fashion . Clearly for larger graphs ( such as the ones we are interested in ) it becomes infeasible . 4.5 Community Viewpoint Neighborhoods
The activation spread model to extract the Viewpoint Neighborhood of a node can be extended to find such a neighborhood for a community , simply by replacing the community or cluster by a super node . All edges to nodes within the community can be replaced by weighted edges to the super node . For instance , if a node i has links to two members of the community , those edges will be replaced by a single weighted edge to the newly created super node . The activation is then performed with the super node as the source node , as described above . 4.6 Multi source Neighborhoods
In the multi source case , we are interested in identifying the shared central neighborhoods given multiple source nodes . The problem can be stated as follows .
Pall(x ) = 0 end if end for Initialize final commitment values P ( x ) = 0 for all nodes for each node y that belongs to at least k out of |srclist| neighborhoods do
/* Begin activating from the node with amount proportional to its importance wrt . all source nodes */
Amt =
P
( y)∗M
Pall i∈nodelist Pall
( i )
Py = Find VPN(Adjlist , srclist , Amt , thresh ) Update commitment values of nodes with Py end for for each node x do
P ( x ) = P ( x )
M end for Return P
Problem : Given a set of n source nodes S = ( s1 , s2 , , sn ) , the problem is to find the VPN that represents the intersection of at least k of their neighborhoods .
This is important again in keyword search applications , where one wishes to compute a subgraph to satisfy a given keyword set . The nodes that have high importance in this shared neighborhood should represent those that have involvement with the VPNs of at least k of the source nodes . Other nodes should have 0 importance . We would like to
T 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10
T 1 2 2 3 3 4 4 5 5 6
Grow/Shr 434/347 527/428 500/404 540/437 450/466 587/474 739/664 947/681 672/930
Grow/Shr 1146/16 6640/256 19773/869 39410/3646 51899/7718
DBLP
Cont/Mut
58/743 75/855 49/893 60/914 40/849 42/1059 44/1396 57/1617 37/1556
Wikipedia Cont/Mut
570/867
1409/4799 2628/16563 3273/27051 9561/19135
Att/Rep 426/377 473/403 491/484 525/502 474/549 636/662 858/851 1037/976 762/1088
Att/Rep 851/12
4543/171 15783/877 22487/2319 13532/1579
Table 2 : Event Occurrences for DBLP and Wikipedia design an activation model that results in the nodes well connected to the VPNs of the source nodes having high centrality and thus high weights . Such an activation model would proceed in a different vein from the one discussed
84 previously , since we are now concerned with nodes that are along multiple paths between the different source nodes .
The algorithm is shown as Algorithm 3 . Each of the source nodes construct their VPNs as in the single source case . Subsequently , nodes that have some level of involvement in at least k of the VPNs are identified . Activation is performed starting from these nodes , with amounts proportional to their importance in the different VPNs . We show an example of a multi source VPN from the DBLP graph in Fig 4 . We use three source nodes , shown in yellow Xifeng Yan , Adam Silberstein and Jessica Lin and a k of 2 . The red nodes indicate the members of the multisource VPN and they are labeled with their commitment or importance values . We see that Philip Yu is the most central node in terms of these source nodes , and is activated with higher values than the others . Note that the values represent importance in the shared neighborhood and not the neighborhood they are most involved in . Other nodes that are shown are nodes that exist in the individual neighborhoods but do not have a reasonable commitment value ( 0.005 ) with respect to the multi VPN .
At this point , we would like to clarify the relationship of our activation based multi source algorithm with connection subgraphs[9 ] , center piece subgraphs[19 ] , and proximity graphs[14 ] . These methods rely on the notion of effective conductance ( cycle free in the case of proximity graphs ) , or an equivalent definition using random walks , as a measure of network proximity . We would first like to point out that using one of these alternate methods to compute a viewpoint neighborhood is a viable alternative within our framework . The only problem is that it does not follow naturally within the context of the discussion given in the previous section . A key difference is that our approach naturally admits additional constructs such as semantic information to help construct , and more importantly , refine these neighborhoods .
5 . EVOLUTION OF VPNS ki i , N 2 i , . . . , N
An interaction graph G is said to be evolving if its interactions vary over time . Let G = ( V , E ) denote a temporally varying interaction graph where V represents the total unique entities and E the total interactions that exist among the entities . We define a temporal snapshot Si = ( Vi , Ei ) of G to be a graph representing only entities and interactions active in a particular time interval [ Tsi , Tei ] , called the snapshot interval . For each snapshot Si , there can be a set of |Ni| Viewpoint neighborhoods represented as Ni = i } . To characterize the changes occurring {N 1 in VPNs over time , we construct certain measures , which we term critical events . These events capture the behavior of nodes and neighborhoods over time . In an earlier work [ 4 ] , we composed events for clusters . Here , we make use of the committment and depth information to quantify key changes for Viewpoint Neighborhoods . 5.1 Events for Viewpoint Neighborhoods We define six basic events for neighborhoods . ( 1 ) Growth : increasing over time .
This event captures the size of the VPN
Growth(N k i ) = 1 iff |V k i | < |V k i+1|
Growth in a VPN indicates that more nodes are invested in the viewpoint of a particular node . ( 2 ) Shrinkage : This is the opposite of the above event and signifies the reduction of the size of a node ’s VPN .
Shrinkage(N k i ) = 1 iff |V k i | > |V k i+1|
Shrinkage can be caused by either edge deletions in the node ’s immediate neighborhood or the deletion of an influential hub node in its VPN . ( 3 ) Continuity : A VPN is said to continue if the members of the neighborhood do not change . Note that , this does not place any restrictions on the link structure among the members . It conveys the information that the nodes invested in this particular VPN remain unchanged .
Continuity(N k i ) = 1 iff V k i = V k i+1
If a node ’s VPN satisfies a Continuity event , it demonstrates that the changes occurring in the graph do not affect this particular node in any way . Note that this is a stability measure for a node . ( 4 ) Mutate : This event is the opposite of the above event and indicates major changes within the VPN of a node . If more than half of the members of a node ’s VPN are different over two successive snapshots , it indicates significant change in the VPN and hence can be considered a M utate event . i ) = 1 iff |V k i ∩ V k i+1| < 0.5 ∗ |V k i |
M utate(N k
( 5 ) κ Attraction : This event signifies positive change in the VPN of a node with κ % of the nodes moving closer than before . Let Dep(m)k i represent the depth ( from the root ) of node m in the VPN of k at time i . i |Dep(m )
S = {m ∈ V k k i > Dep(m ) i , κ ) = |S|if f ( |S| > κ ∗ |V k k i+1} i | ) k
Att(N
If a node experiences this event , it reflects positively on the influence of that particular node . ( 6 ) κ Repulsion : This event is the opposite of the previous event . It signifies the increase in distance between a node and the members of its VPN in the previous time stamp . If κ % of the nodes in the VPN of a node x are farther away in the next timestamp , x is considered to partake in this event . Thus it represents a negative influence for the node .
S = {m ∈ V k i |Dep(m ) k i < Dep(m ) i , κ ) = |S|if f ( |S| > κ ∗ |V i+1} i | ) k k k
Rep(N
Note that the events we describe above are not mutually exclusive . For instance , it is common for a VPN to undergo a Growth event and an Attraction event at the same time . To find the events , we consider two snapshots of VPNs at a time . We build an index on the root of the neighborhoods , so that correspondence is not an issue . We compare the corresponding VPNs of a node to identify all events for that node . The number of events discovered for the two datasets are shown in Table 2 3 . We can observe that in DBLP , the size based events ( Growth and Shrinkage ) are both frequent , while Continue events are rare . In the case of Wikipedia , Growth and Attract events far outnumber Shrinkage and Repel events . This is due to the fact that in Wikipedia , nodes ( pages ) and links are added but not frequently deleted , which causes VPNs to increase rather than decrease . Also , Continue events are quite frequent in Wikipedia , suggesting that semantic neighborhoods do not change much over time . 5.2 Behavioral Measures
We can use the events described in the previous subsection to build behavioral measures to signify key behavioral patterns that occur over time . Similar to our previous work [ 4 ] , 3We use kappa of 0.5 for Attract and Repel events
85 Event
Jun 1 Nepal Royal Massacre
Jun 20 Pervez Musharraf becomes president of Pakistan
Sept 11
Sept 18 Oct 9 Anthrax attacks using letters
Dec 19 Lord of the Rings :
Fellowship of the ring released in US
Dec 22 Hamid Karzai sworn in as President of Afghanistan
Mar 24 Oscars
Patterns of Global Terrorism
VPN Root
Nepal
Pervez Musharraf Politics of Pakistan History of Pakistan
Terrorism
Osama Bin Laden
World Trade Center Islamist Terrorism
Anthrax
Fellowship of the Ring
Peter Jackson JRR Tolkein
Democratic Republic of Afghanistan
Foreign Relations of Afghanistan
74th Academy Awards
A Beautiful Mind Denzel Washington
Halle Berry
Jennifer Connelly
June Serena Williams wins Wimbledon
Wimbledon
Serena Williams
Apr Jun 01
Jul Sep 01 Oct Dec 01
Jan Mar 02 Apr Jun 02
229
111 100 35 68 107 106
268
95
68 98 92 53 137 248
27 226 105 70
316
400
116
31
257
280 96 850 177 1132 214
140 35
506
95
744 681 79 275 50
Table 3 : Popularity Trends in Wikipedia . we define measures for Stability , Sociability , Popularity and Impact , that can be computed incrementally . Due to space constraints , we present only the Popularity measure here and describe the others in our technical report [ 3 ] . Note that , it is possible to define measures for capturing other types of behavior as well using the above mentioned events .
Popularity : Popularity is a measure of how many nodes are attracted to the node ’s VPN . It can be described using the κ Attraction and κ Repulsion events .
PT
P opularity(x ) = i=1 Att(N x i , κ ) − Rep(N x i , κ )
|Activity(x)|
( 3 ) i , κ)−Rep(N x
If a node attracts several nodes over time and does not have high repulsion rates , it is considered popular . In the case of Wikipedia , popularity reflects a buzz around a particular topic page , as more pages and links are added to it . This buzz can be identified by a spike in the popularity trend graph . We computed the popularity for VPNs ( as Att(N x i , κ ) ) at different timepoints 4 . We identified interesting real world events in the 2001 2002 period and analyzed the corresponding trend plots . Note that , we are not considering new pages created based on new events . An example for this would be the September 11 attacks ( which did have high popularity when created ) . We consider VPNs that already existed but spiked at a particular timepoint , indicating a buzz . The trend plots are shown in Table 3 . The event that inspires the popularity is shown in the first column . The root nodes of the VPNs under consideration are presented in Column 2 with their corresponding popularity scores in the subsequent columns 5 . The value spikes at the time corresponding to the particular event .
5.3 Core Subgraphs
An advantage of using VPNs is that , it enables us to perform frequent pattern mining over the viewpoint neighborhoods of points . By examining the VPNs for a point over all time instances , we can identify core substructures using
4We used a κ value of 50 5The dashed values indicate the VPN is not popular ( < κ ) . frequent graph mining techniques . We define a core subgraph for a given source node as the largest subgraph in its Viewpoint Neighborhood that is frequent over time . In the context of collaboration networks , a frequent subgraph or subtree in the VPNs of a graph indicates a core group associated with a particular author . By finding these core substructures , we can also gauge the level of stability for an author in terms of their neighborhood . An absence of significant core subgraphs would indicate disparate behavior with different groups separated from each other . To illustrate , we selected Dr Philip S . Yu , who is an influential and popular author . We computed the core subgraphs 6 for the VPNs of Dr Yu . We used a support threshold of 5/9 to obtain 2 maximal frequent core subgraphs , shown in Fig 5(a ) . Note that , graph mining will be more beneficial for analysis over larger time periods than the example shown . When we chose Juho Rousu , the author with the highest stability value [ 3 ] , we got a frequent subgraph Juho Rousu and T apio Elomaa with high support ( 7/9 ) . This is validated by the fact that , from 1996 to 2003 , every paper that this author published 7 was with Prof Elomaa .
5.4 Transformation Subgraphs
Apart from characterizing changes occurring in the graph over time , our goal is to also reason about the effect of changes on nodes and neighborhoods . As we mentioned earlier , changes in the graph are likely to affect different nodes in different ways . We are interested in identifying influential transformations that affect most of the nodes in the graph . For this , we again leverage the use of frequent subgraph mining over VPNs . First , we represent the changes occurring in a particular VPN over a pair of snapshots as a T ransf ormation Subgraph . A transformation subgraph T S for a VPN over two timepoints i and i + 1 , is a graph consisting of only edges that belong to the VPN either at time i or time i + 1 but not both . T S(N k i+1 ) = i , N k ( VT S(N k i+1 ) ) where ET S(N k i+1 ) = i ⊕Ek ( Ek i+1 ) However , we also need to distinguish edges that i+1 ) , ET S(N k i , N k i , N k i , N k
6We use the Graph mining toolkit developed by Gregory Buehrer for this purpose [ 7 ] 7in the conferences we considered
86 were inserted during the timestamp from edges deleted . For this purpose , we use edge labels , labeling each edge in the transformation subgraph as 0 ( deleted ) or 1 ( inserted ) .
Jiawei Han
Philip S . Yu Wei Fan
Wei Wang
0
Philip S . Yu
0
0
Haifeng Jiang
0
0
Xifeng Yan
Haixun Wang
Bing Liu
Charu C . Aggarwal
Philip S . Yu
( A )
Ramakrishnan Srikant
Jiong Yang
0 1
Zhongfei Zhang
Wei Fan
0
Haixun Wang
Jeffrey Xu Yu
0
1
Fang Chu
Chang Luo
( B )
Vivek R . Narasayya
Surajit Chaudhuri
0
1
1
Guy M . Lohman
0
0
Rakesh Agrawal
( C )
Figure 5 : a ) Maximal core subgraphs for Philip S . Yu . Largest maximal frequent transformation subgraphs for ( b ) Philip S . Yu c ) Vivek R . Narasayya .
We can represent the evolution of a VPN as a time series of transformation subgraphs , each representing changes over a pair of snapshots . Subsequently , we can perform frequent subgraph mining to identify the key transformations that affect the VPNs of most of the nodes . Also , one can identify frequent transformation subgraphs for individual nodes . These represent subgraphs or edges that have a high effect on the neighborhood of a particular node over time . As an example , we consider the VPNs of two authors Philip S . Yu and Vivek R . Narasayya . The largest maximal frequent transformation subgraphs in their VPNs are shown in Fig 5(b ) and ( c ) respectively . We can see that the authors with highdegree are typically influential authors ( shown in yellow ) , which explains the effects they have on the source neighborhood . An important difference that can be observed is that Philip S . Yu has high degree in his own transformation subgraph , which indicates that his own interactions cause most of the changes in his neighborhood . On the contrary , Surajit Chaudhuri and Rakesh Agrawal play an important role in affecting the VPN of Vivek Narasayya .
6 . CONCLUSIONS AND FUTURE WORK
In this paper , we have proposed an activation model to construct the Viewpoint Neighborhood of a node and quantify the relationships that exist within it . We have also shown how a common neighborhood of interest can be computed for a group of nodes and how different activation functions leveraging topological and semantic information can be constructed to facilitate the extraction of interesting neighborhoods . To characterize and measure the effect of changes over time , we have introduced temporal events as well as behavioral measures that can be computed incrementally . Finally , the use of frequent subgraph mining to identify stable and transient subgraphs has been highlighted . The algorithms and analysis provided are particularly relevant for social network applications such as personalized and community search , and online advertising .
In future work , we would like to extend the temporal analysis to graph production rules and graph grammars . Of particular interest in our context will be to evaluate if graph grammars can be inferred from such interaction networks by learning the production rules that govern evolution of clusters or viewpoint neighborhoods .
7 . REFERENCES [ 1 ] F . Alkemade and C . Castaldi . Strategies for the diffusion of innovations on social networks . Computational Economics , 25(1 2 ) , 2005 .
[ 2 ] S . Amer Yahia , M . Benedikt , and P . Bohannon .
Challenges in searching online communities . IEEE Data Eng . Bull . , 30(2):23–31 , 2007 .
[ 3 ] S . Asur and S . Parthasarathy . On the use of viewpoint neighborhoods for dynamic graph analysis . Technical Report Sept 2008 OSU CISRC 9/08 TR50 , 2008 . [ 4 ] S . Asur , S . Parthasarathy , and D . Ucar . An event based framework for characterizing the evolutionary behavior of interaction graphs . SIGKDD , 2007 .
[ 5 ] L . Backstrom , D . P . Huttenlocher , and J . M .
Kleinberg . Group formation in large social networks : membership , growth , and evolution . SIGKDD , 2006 .
[ 6 ] S . Brin and L . Page . The anatomy of a large scale hypertextual Web search engine . Computer Networks and ISDN Systems , 30(1–7):107–117 , 1998 .
[ 7 ] G . Buehrer and S . Parthasarathy and Y . Chen .
Adaptive Parallel Graph Mining for CMP Architectures ICDM , 2006 .
[ 8 ] R . Cowan and N . Jonard . Network structure and the diffusion of knowledge . Journal of Economic Dynamics and Control , 28:1557–1575 , 2004 .
[ 9 ] C . Faloutsos , K . S . McCurley , and A . Tomkins . Fast discovery of connection subgraphs . In SIGKDD , 2004 .
[ 10 ] C . L . Freeman . A set of measures of centrality based on betweenness . Sociometry , 40(1):35–41 , 1977 .
[ 11 ] V . Kacholia , S . Pandit et al . Bidirectional expansion for keyword search on graph databases . VLDB , 2005 . [ 12 ] D . Kempe , J . Kleinberg , and E . Tardos . Maximizing the spread of influence through a social network . SIGKDD , 2003 .
[ 13 ] D . Kempe , J . Kleinberg , and E . Tardos . Influential nodes in a diffusion model for social networks . ICALP , 2005 .
[ 14 ] Y . Koren , S . C . North , and C . Volinsky . Measuring and extracting proximity in networks . SIGKDD , 2006 .
[ 15 ] R . Kumar , J . Novak , and A . Tomkins . Structure and evolution of online social networks . In SIGKDD , 2006 .
[ 16 ] P . Resnik . Semantic similarity in a taxonomy : An information based measure and its application to problems of ambiguity in natural language . Journal of Artifical Intelligence Research , 11:95–130 , 1999 .
[ 17 ] J . Sun , C . Faloutsos , S . Papadimitriou , and P . S . Yu .
Graphscope : parameter free mining of large time evolving graphs . In SIGKDD , 2007 .
[ 18 ] C . Tantipathananandh , T . Y . Berger Wolf , and
D . Kempe . A framework for community identification in dynamic social networks . SIGKDD , 2007 .
[ 19 ] H . Tong and C . Faloutsos . Center piece subgraphs : problem definition and fast solutions . SIGKDD , 2006 .
[ 20 ] H . Yang , I . King , and M . R . Lyu . Diffusionrank : a possible penicillin for web spamming . In SIGIR , 2007 .
87
