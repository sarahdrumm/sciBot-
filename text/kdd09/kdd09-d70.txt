Fast Approximate Spectral Clustering
Donghui Yan
University of California
Berkeley , CA 94720 dhyan@statberkeleyedu
Ling Huang
Intel Research Lab Berkeley , CA 94704 linghuang@intelcom
Michael I . Jordan University of California
Berkeley , CA 94720 jordan@eecsberkeleyedu
ABSTRACT Spectral clustering refers to a flexible class of clustering procedures that can produce high quality clusterings on small data sets but which has limited applicability to large scale problems due to its computational complexity of O(n3 ) in general , with n the number of data points . We extend the range of spectral clustering by developing a general framework for fast approximate spectral clustering in which a distortion minimizing local transformation is first applied to the data . This framework is based on a theoretical analysis that provides a statistical characterization of the effect of local distortion on the mis clustering rate . We develop two concrete instances of our general framework , one based on local k means clustering ( KASP ) and one based on random projection trees ( RASP ) . Extensive experiments show that these algorithms can achieve significant speedups with little degradation in clustering accuracy . Specifically , our algorithms outperform k means by a large margin in terms of accuracy , and run several times faster than approximate spectral clustering based on the Nyström method , with comparable accuracy and significantly smaller memory footprint . Remarkably , our algorithms make it possible for a single machine to spectral cluster data sets with a million observations within several minutes .
Categories and Subject Descriptors H33 [ Information Search and Retrieval ] : Clustering ; I26 [ Artificial Intelligence ] : Learning
General Terms Algorithms , Experimentation , Performance
Keywords Unsupervised Learning , Spectral Clustering , Data Quantization
1 .
INTRODUCTION
Clustering is a problem of primary importance in data mining , statistical machine learning and scientific discovery . An enormous variety of methods have been developed over the past several decades to solve clustering problems [ 15 , 19 ] . A relatively recent area of focus has been spectral clustering , a class of methods based on eigendecompositions of affinity , dissimilarity or kernel matrices [ 20 , 28 , 31 ] . Whereas many clustering methods are strongly tied to Euclidean geometry , making explicit or implicit assumptions that clusters form convex regions in Euclidean space , spectral methods are more flexible , capturing a wider range of geometries . They often yield superior empirical performance when compared to competing algorithms such as k means , and they have been successfully deployed in numerous applications in areas such as computer vision , bioinformatics , and robotics . Moreover , there is a substantial theoretical literature supporting spectral clustering [ 20 , 34 ] . Despite these virtues , spectral clustering is not widely viewed as a competitor to classical algorithms such as hierarchical clustering and k means for large scale data mining problems . The reason is easy to state—given a data set consisting of n data points , spectral clustering algorithms form an n × n affinity matrix and compute eigenvectors of this matrix , an operation that has a computational complexity of O(n3 ) in general . For applications with n on the order of thousands , spectral clustering methods begin to become infeasible , and problems with n in the millions are entirely out of reach .
In this paper we focus on developing fast approximate algorithms for spectral clustering . Our approach is not fundamentally new . As in many other situations in data mining in which a computational bottleneck is involved , we aim to find an effective preprocessor that reduces the size of the data structure that is input to that bottleneck ( see , eg , [ 25 , 27] ) . There are many options that can be considered for this preprocessing step . One option is to perform various forms of subsampling of the data , selecting data points at random or according to some form of stratification procedure . Another option is to replace the original data set with a small number of points ( ie , “ representatives ” ) that aim to capture relevant structure . Another approach that is specifically available in the spectral clustering setting is to exploit the literature on low rank matrix approximations . Indeed , this last approach has been the approach most commonly pursued in the literature ; in particular , several researchers have proposed using the Nyström method for this purpose [ 10 , 35 , 12 ] . While it is useful to define such preprocessors , simply possessing a knob that can adjust computational complexity does not constitute a solution to the problem of fast spectral clustering . What is needed is an explicit connection between the amount of data reduction that is achieved by a preprocessor and the subsequent effect on the clustering . Indeed , the motivation for using spectral methods is that they can provide a high quality clustering , and if that high quality clustering is destroyed by a preprocessor then we should consider other preprocessors ( or abandon spectral clustering entirely ) . In particular , it is not satisfactory to simply reduce the rank of an affinity matrix so that an eigendecomposition can be performed in a desired time frame , unless we have certain understanding of the effect of this rank reduction on the clustering . In this paper we propose a general framework for fast spectral clustering and conduct an end to end theoretical analysis for our method . In the spirit of rate distortion theory , our analysis yields a relationship between an appropriately defined notion of distortion at the input and some notion of clustering accuracy at the output . This analysis allows us to argue that the goal of a preprocessor should be to minimize distortion ; by minimizing distortion we minimize the effect of data reduction on spectral clustering .
To obtain a practical spectral clustering methodology , we thus make use of preprocessors that minimize distortion . In the current paper we provide two examples of such preprocessors . The first is classical k means , used in this context as a local data reduction step . The second is the Random Projection tree ( RP tree ) of [ 8 ] . In either case , the overall approximate spectral clustering algorithm takes the following form : 1 ) coarsen the affinity graph by using the preprocessor to collapse neighboring data points into a set of local “ representative points , ” 2 ) run a spectral clustering algorithm on the set of representative points , and 3 ) assign cluster memberships to the original data points based on those of the representative points . Our theoretical analysis is a perturbation analysis , similar in spirit to those of [ 20 ] and [ 28 ] but different in detail given our focus on practical error bounds . It is also worth noting that this analysis has applications beyond the design of fast approximations to spectral clustering . In particular , as discussed by [ 18 ] , our perturbation analysis can be used for developing distributed versions of spectral clustering and for analyzing robustness to noise .
The remainder of the paper is organized as follows . We begin with a brief overview of spectral clustering in Section 2 , and summarize the related work in Section 3 . In Section 4 we describe our framework for fast approximate spectral clustering and discuss two implementations of this framework— “ KASP , ” which is based on k means , and “ RASP , ” which is based on RP trees . We evaluate our algorithms in Section 5 , by comparing both KASP and RASP with Nyström approximation and k means . We present our theoretical analysis in Section 6 . In particular , in that section , we provide a bound for the mis clustering rate that depends linearly on the amount of perturbation to the original data . We then turn to an analysis of the performance of our approximate algorithms in Section 7 . Finally , we conclude in Section 8 .
2 . SPECTRAL CLUSTERING
Given a set of n data points x1 , . . . , xn , with each xi ∈ Rd , we define an affinity graph G = ( V , E ) as an undirected graph in which the ith vertex corresponds to the data point xi . For each edge ( i , j ) ∈ E , we associate a weight aij that encodes the affinity ( or similarity ) of the data points xi and xj . We refer to the matrix A = ( aij )n i,j=1 of affinities as the affinity matrix .
The goal of spectral clustering is to partition the data into m disjoint classes such that each xi belongs to one and only one class . Different spectral clustering algorithms formalize this partitioning problem in different ways [ 31 , 26 , 28 , 37 ] . In the current paper we adopt the normalized cuts ( Ncut ) formulation [ 31].1 Define aij for two ( possibly overlapping ) subsets V1 and V2 of V . Let V = ( V1 , . . . , Vm ) denote a partition of
W ( V1 , V2 ) =Pi∈V1,j∈V2
1We use Ncut only for concreteness ; our methodology applies immediately to other spectral clustering formulations .
Algorithm 1 SpectralClustering ( x1 , . . . , xn ) Input : Output : Bipartition S and ¯S of the input data n data points {xi}n i=1 , xi ∈ Rd
1 . Compute the affinity matrix A with elements :
2 . Compute the diagonal degree matrix D with elements : i , j = 1 , . . . , n
2σ2 aij = exp “ − kxi−xj k2 di =Pn j=1 aij
L = D− 1
2 ( D − A)D− 1
” ,
2
3 . Compute the normalized Laplacian matrix :
4 . Find the second eigenvector v2 of L 5 . Obtain the two partitions using v2 : 6 .
S = {i : v2i > 0} , ¯S = {i : v2i ≤ 0}
V , and consider the following optimization criterion :
Ncut = m
Xj=1
W ( Vj , V ) − W ( Vj , Vj )
W ( Vj , V )
.
( 1 )
In this equation , the numerator in the jth term is equal to the sum of the affinities on edges leaving the subset Vj and the denominator is equal to the total degree of the subset Vj . Minimizing the sum of such terms thus aims at finding a partition in which edges with large affinities tend to stay within the individual subsets Vj and in which the sizes of the Vj are balanced .
The optimization problem in ( 1 ) is intractable and spectral clustering is based on a standard relaxation procedure that transforms the problem into a tractable eigenvector problem . In particular , the relaxation for Ncut is based on rewriting ( 1 ) as a normalized quadratic form involving indicator vectors . These indicator vectors are then replaced with real valued vectors , resulting in a generalized eigenvector problem that can be summarized conveniently in terms of the ( normalized ) graph Laplacian L of A defined as follows :
L = D− 1
2 ( D − A)D− 1
2 = I − D− 1
2 AD− 1
2 = I − L0 ,
( 2 ) j=1 aij , i = 1 , , n . where D = diag(d1 , , dn ) with di =Pn
Ncut is based on the eigenvectors of this normalized graph Laplacian . The classical Ncut algorithm focuses on the simplest case of a binary partition [ 31 ] , and defines multiway partitions via a recursive invocation of the procedure for binary partitions . In the case of a binary partition , it suffices to compute the second eigenvector of the Laplacian ( ie , the eigenvector with the second smallest eigenvalue ) . The components of this vector are thresholded to define the class memberships of the data points . Although spectral clustering algorithms that work directly with multiway partitions exist [ 4 , 37 ] , in the current paper we will focus on the classical recursive Ncut algorithm . We assume that the number of clusters is given a priori and we run the recursion until the desired number of clusters is reached . See Algorithm 1 for a specific example of a spectral bipartitioning algorithm where a Gaussian kernel is used to define the pairwise affinities .
3 . RELATED WORK
An influential line of work in graph partitioning approaches the partitioning problem by reducing the size of the graph by collapsing vertices and edges , partitioning the smaller graph , and then uncoarsening to construct a partition for the original graph [ 17 , 22 ] . Our work is similar in spirit to this multiscale approach , provid
Symbol m n , d xi , ˜xi y1 , . . . , yk
ǫ , ǫi
ρ
G , ˜G A , ˜A L , ˜L di
λ2 , λB , v2 , uB g , g0
Meaning Number of clusters for partitioning input data Size and dimension of input data Input data point i and its perturbed version k representative points Perturbation error Mis clustering rate Distribution of input data and its perturbed version Affinity matrix and its perturbed version Laplacian matrix and its perturbed version Sum of row i of affinity matrix 2nd eigenvalue & eigenvector of Laplacian matrix Eigengap of Laplacian matrix
Table 1 : Notation . ing theoretical analysis for a particular kind of coarsening and uncoarsening methodology . More generally , our work is related to a tradition in the data mining community of using data preprocessing techniques to overcome computational bottlenecks in mining largescale data . Examples include [ 27 ] , who proposed a nonparametric data reduction scheme based on multiscale density estimation , and [ 5 ] , who proposed a fast algorithm to extract small “ core sets ” from the input data , based on which ( 1 + ǫ) approximation algorithms for the k center clustering have been developed .
Our work is also related to the literature on kernel based learning , which has focused principally on rank reduction methods as a way to attempt to scale to large data sets . Rank reduction refers to a large class of methods in numerical linear algebra in which a matrix is replaced with a low rank approximation . These methods have been widely adopted , particularly in the context of approximations for the support vector machine ( SVM ) [ 10 , 35 , 11 , 32 ] . The affinity matrix of spectral clustering is a natural target for rank reduction . In particular , [ 12 ] have used the Nyström approximation , which samples columns of the affinity matrix and approximates the full matrix by using correlations between the sampled columns and the remaining columns . A variety of sampling procedures can be considered . [ 35 ] use uniform sampling without replacement , and [ 12 ] use a similar strategy in applying the Nyström method image segmentation . A drawback of these procedures is that they do not incorporate any information about the affinity matrix in choosing columns to sample ; moreover , they do not come with performance guarantees . [ 10 ] replace the uniform sampling step with a judiciously chosen sampling scheme in which columns of the Gram matrix are sampled with probability proportional to their norms . While this yields a rigorous bound on the approximation error of Gram matrix , this method may need to select a large number of columns to achieve a small approximation error ( eg , for data generated from Gaussian mixture model , when the Gaussian kernel is used , the number of columns sampled is expected to be O(n) ) .
Although the Nyström method reduces the rank of the kernel matrix , its working memory requirement can be very high ( see Section 5 for more details ) . Another issue with the Nyström method is that in data sets that are unbalanced the number of observations selected by the sampling procedure from the small clusters may be small ( if not zero ) , which can cause small clusters to be missed and may potentially lead to problems with numerical stability .
4 . FAST SPECTRAL CLUSTERING
In this section we present our algorithmic framework for fast spectral clustering . Our approach reposes on the theoretical analysis of spectral clustering that we present in Section 6 . In that section we establish a quantitative relationship between the mis clustering rate at the output of a spectral clustering algorithm and the distortion in the input . This motivates our interest in algorithms that invoke a distortion minimizing transformation on the original data before performing spectral clustering .
Our algorithm consists of a data preprocessing step and the spectral clustering step . In the current section we present two different ways of achieving the first step : one is based on k means and the other is based on random projection trees . We have chosen these two approaches because of their favorable computational properties and the simplicity of their implementation ; other methods ( eg , knearest neighbor , weighted k means [ 9 ] , etc . ) can be used as well . Table 1 summarizes our notation . 4.1 Fast spectral clustering with k means
Vector quantization is the problem of choosing a set of representative points that best represent a data set in the sense of minimizing a distortion measure [ 13 ] . When the distortion measure is squared error , the most commonly used algorithm for vector quantization is k means , which has both theoretical support and the virtue of simplicity . The k means algorithm employs an iterative procedure . At each iteration , the algorithm assign each data point to the nearest centroid , and recalculates the cluster centroids . The procedure stops when the total sum of squared error stabilizes .
The use that we make of k means is as a preprocessor for spectral clustering . In particular , we propose a “ k means based approximate spectral clustering ” ( KASP ) algorithm that has the form in Algorithm 2 .
Algorithm 2 KASP ( x1 , . . . , xn , k ) Input : Output : m way partition of the input data n data points {xi}n i=1 , # representative points k
1 . Perform k means with k clusters on x1 , . . . , xn to : a ) Compute the cluster centroids y1 , . . . , yk as the k representative points . b ) Build a correspondence table to associate each xi with the nearest cluster centroid yj .
2 . Run a spectral clustering algorithm on y1 , . . . , yk to obtain a m way cluster membership for each of yi .
3 . Recover the cluster membership for each xi by looking up the cluster membership of the corresponding centroid yj in the correspondence table .
The computational complexity of step 1 , k means , is O(knt ) , where t is the number of iterations2 . Given that the complexity of step 2 is O(k3 ) and the complexity of step 3 is O(n ) , the overall computational complexity of KASP is O(k3 ) + O(knt ) . In the evaluation section we compare KASP to the alternative of simply running k means on the entire data set . 4.2 Fast spectral clustering with RP trees
RP trees are an alternative to k means in which a distortionreducing transformation is obtained via random projections [ 8 ] . An RP tree gives a partition of the data space , with the center of the mass in each cell of the partition used as the representative for the data points in that cell . RP trees are based on k d trees , which are spatial data structures that partition a data space by recursively splitting along one coordinate at a time [ 2 ] . Rather than splitting along coordinate directions , RP tree splits are made ac
2There also exist approximate k means algorithms ( eg , the ( 1 + ǫ ) kmeans algorithm of [ 23 ] ) that achieve a running time of O(nt ) .
Data set Medium size ImageSeg Musk penDigits mGamma Large size Connect 4 USCI Poker Hand
# Features
# instances
# classes
19 166 16 10
42 37 10
2,100 6,598 10,992 19,020
67,557 285,779 1,000,000
7 2 10 2
3 2 3
Table 2 : UCI data sets used in our experiments . cording to randomly chosen directions . All points in the current cell are projected along the random direction and the cell is then split . While classical k d trees scale poorly with dimensionality of the data space due to the restriction to axis parallel splits , RP trees more readily adapt to the intrinsic dimensionality of the data .
Using the RP tree as a local distortion minimizing transformation , we obtain the “ RP tree based approximate spectral clustering ” ( RASP ) algorithm by replacing step 1 in Algorithm 2 with :
• Build an h level random projection tree on x1 , . . . , xn ; compute the centers of mass y1 , . . . , yk of the data points in the leaf cells as the k representative points .
The total computational cost of this method is O(k3 ) + O(hn ) , where the O(hn ) term arises from the cost of building the h level random projection tree .
5 . EVALUATION
Before turning to our theoretical analysis of KASP and RASP , we first present a comparative empirical evaluation of these algorithms . We have conducted experiments with data sets of various sizes taken from the UCI machine learning repository [ 3 ] ; an overview is given by Table 2 . For the USCI ( US Census Income ) data set , we excluded instances and features that contain missing items , and were left with 285,799 instances with 37 features , with all categorical variables converted to integers . The Poker Hand data set is extremely unbalanced , so we merged small classes together while leaving the large classes untouched . We obtained 3 final classes which correspond to about 50.12 % , 42.25 % and 7.63 % of the total number of instances , respectively . We normalized the Connect 4 and USCI data sets so that all features have mean 0 and standard deviation 1 . For spectral clustering , we set kernel bandwidths via a cross validatory search in the range [ 0 , 200 ] ( with step size 0.1 ) for each data set .
Spectral algorithms have not previously been studied on data sets as large as one million data points ; the largest experiment that we are aware of for spectral algorithms involves the MNIST data set , which consists of 60,000 handwritten digits . In particular , [ 14 ] reported experiments using this data set , where a total running time of about 30 hours was required when using a fast iterative algorithm . 5.1 Evaluation metrics
We used two quantities to assess the clustering performance : the running time and the clustering accuracy as measured by using the true class labels associated with each of the data sets . Our experiments were performed on a Linux machine with 2.2 GHz CPU with 32 GB main memory . The running time was taken as the elapsed time ( wall clock time ) for clustering . Clustering accuracy was computed by counting the fraction of labels given by a clustering algo rithm that agree with the true labels . This requires a search over permutations of the classes . Let z = {1 , . . . , k} denote the set of class labels , and θ(· ) and f ( · ) denote the true label and the label given by the clustering algorithm of a data point , respectively . Formally , the clustering accuracy β is defined as
β(f ) = max
τ ∈Πz( 1 n
I{τ ( f ( xi ) ) = θ(xi)} ) ,
( 3 ) n
Xi=1 where I is the indicator function and Πz is the set of all permutations on z . 5.2 Competing algorithms
We compare the performance of KASP and RASP with two competing algorithms : k means clustering and Nyström approximation based spectral clustering ( referred to simply as Nyström henceforth ) as implemented in [ 12 ] . Unless other specified , all algorithms were implemented in R code , which is available at http : //wwwcsberkeleyedu/~jordan/fasphtml
The existing work on spectral clustering has focused principally on rank reduction methods as a way to scale to large size data . We thus compare KASP and RASP algorithms to the rank reduction approach , focusing on the Nyström approximation . The idea of Nyström is to sparsify the Laplacian matrix by random sampling and then take advantage of the fact that eigendecomposition is usually much faster on a sparse matrix . There are several variants available for Nyström extension based spectral clustering , and we choose the Matlab implementation due to Fowlkes et al . [ 12 ] .
The performance of k means can vary significantly depending on the initialization method . Recently a variety of approaches have been proposed for the initialization of k means [ 21 , 1 , 30 , 24 , 6 ] . We chose to study three initialization methods , based on their documented favorable performance [ 6 , 29 , 30 , 24 ] , as well as their relatively straightforward implementation : the Hartigan Wong algorithm ( KM 1 ) [ 16 ] , the sampling based two stage algorithm ( KM2 ) ( ie , the Matlab implementation of k means with the “ cluster ” option ) , and the Bradley and Fayyad algorithm ( BF ) [ 6 ] . For all k means results we report the highest level of accuracy attained across these three algorithms for each data set .
KM 1 is simply the R function kmeans( ) with option “ HartiganWong . ” This function has two parameters , nrst and nit , which denote the number of restarts and the maximal number of iterations during each run , respectively . We ran KM 1 with ( nrst , nit ) = ( 20 , 200 ) , ( 50 , 200 ) , ( 20 , 1000 ) , respectively .
KM 2 consists of two stages of k means . The idea is to run kmeans in the first stage on a subset of the data to obtain good initial centroids so that substantially fewer iterations are required for kmeans in the second stage . In the first stage , we sample 10 % of the data uniformly at random , and run k means with k clusters . In the second stage , we run k means with the k cluster centers obtained in the first stage as initial centroids . The parameters for k means were chosen to be ( nrst , nit ) = ( 20 , 200 ) for the first stage and ( nrst , nit ) = ( 1 , 200 ) for the second stage .
BF consists of three stages of k means . In the first stage , BF runs k means several times ( we used 10 runs ) on randomly selected subsets , using , say , a fraction α of the entire data set . The output centroids from all individual runs constitutes a new data set , on which the second stage k means runs . The centroids so obtained are used as the initial cluster centers for the third stage of k means . In our experiment , we fixed the parameters ( nrst , nit ) = ( 20 , 200 ) for the first and second stages and ( nrst , nit ) = ( 1 , 100 ) for the third stage , while varying α ∈ {0.01 , 0.05 , 01}
The above are the standard settings for our first set of experiments . See below for discussion of an additional set of experiments
ImageSeg
Musk penDigits mGamma
51.15
0.04 64.91
1
0.05
51.10
0.03 54.02
K means Nyström γ = 1 54.76 200 0.47 84.97 3884 3.2 51.63 14188
0.07 52.85
1
1
3
4
0.13 84.45 386 0.42 54.40 593 1.0 70.97 2510 3.4
7.7 68.60 71863 22.0
γ = 4 58.95
γ = 8 53.66
Connect 4
11 0.06 83.18 567 0.32 53.36 381 0.73 70.61 1116 1.6
8
0.04 84.31 162 0.17 53.02 132 0.22 70.36 272 0.52
USCI
Poker Hand
γ = 20 65.70 628 1.6
γ = 50 65.69 138 0.35
γ = 100
65.70
γ = 200
65.69
71 0.28
51 0.20
γ = 100
γ = 200
γ = 300
γ = 500
94.04 796 1.2
93.97 661 0.92
94.03 554 0.91
94.03 282 0.90
γ = 500
γ = 1000
γ = 2000
γ = 3000
50.03 2500 0.77
50.01 1410 0.56
50.01 510 0.50
49.84 310 0.44
Table 3 : Evaluation of k means , Nyström and KASP on medium size data sets . Each cell contains three numbers : the clustering accuracy , the running time in seconds , and the amount of memory used in units of GB . The parameter γ denotes the data reduction ratio for KASP ; for Nyström sampling the data reduction ratio is fixed at γ = 8 . in which the running time of k means was matched to that of KASP . 5.3 Evaluation results Medium size data . We first evaluated k means using different initialization methods and parameter configurations on the four mediumsize data sets . The complete results are documented in [ 36 ] ; here we report the best result across all k means experiments . This result is reported in the second column of Table 3 , which also presents the performance of Nyström and our KASP methods on the medium size data sets .
We run KASP with KM 2 for data preprocessing using different data reduction ratios γ , where γ is the ratio of the size of original data set to the reduced data set . As expected , we see that k means runs the fastest among the three methods ; KASP runs faster and requires less working memory than Nyström when both of them use the same data reduction ratio ( γ = 8 ) . In terms of accuracy , KASP and Nyström are comparable with each other , and both are better than k means , particularly on the data sets Musk and mGamma . From Table 3 we also see that the running time and working memory required by KASP decrease substantially as the data reduction ratio γ increases , while incurring little loss in clustering accuracy . In fact , we see that sometimes clustering accuracy increases when we use the reduced data . ( This is presumably due to the regularizing effect of the pre grouping , where neighboring observations are forced into the same final clusters . ) Large size data . We now turn to the three large size data sets . We present the results of the KASP algorithm in in Table 4 , where we note that we have used relatively large data reduction ratios γ due to the infeasibility of running spectral clustering on the original data . For each data set , we observe that when we increase the data reduction ratio γ , there is little degradation in clustering accuracy while both computation time and working memory decrease substantially .
In our experiments on RASP , we used the C++ implementation of Nakul Verma to build the RP tree [ 8 ] and used this as input to our spectral clustering algorithm ( implemented in R ) . We varied the tree depth and required that each leaf node in the tree contains at least 50 data points . The running time of RASP consists of three parts—the construction of the tree , spectral clustering on the reduced set , and the cluster membership recovery . The results for RASP are shown in Table 5 . Here we again see that accuracy does
Table 4 : Evaluation of KASP on the three large size data sets with different data reduction ratios . The values in each cell denote the data reduction ratio ( γ ) , the clustering accuracy , the running time and the memory usage .
Connect 4
USCI
Poker hand
γ = 144
γ = 136
γ = 207
65.72 107 0.14
63.27
78 0.14
63.95
67 0.13
γ = 170
γ = 267
γ = 516
92.99 1229 0.79
93.66 922 0.70
92.09 418 0.67
γ = 509
γ = 977
γ = 3906
50.11 1440 0.91
50.03 710 0.67
49.70 215 0.45
Table 5 : Evaluation of RASP on the three large size data sets with different data reduction ratios . The values in each cell denote the data reduction ratio ( γ ) , the clustering accuracy , the running time and the memory usage . not decrease over this range of data reduction values . Comparing Table 5 and Table 4 , we see that RASP is roughly comparable to KASP in terms of both speed and accuracy.3
In Table 6 we compare our methods ( using the largest values of the reduction ratio ) to k means , again using different initialization methods and parameter configurations for k means and reporting the best result as the third column of the table ( the complete results are documented in [ 36] ) . We again see the significant improvement in terms of accuracy over k means for two of the data sets . We also compared to Nyström , where the memory requirements of Nyström forced us to restrict our experiments to only the largest values of the data reduction ratios studied for KASP and RASP . We see that KASP and Nyström have comparable clustering accuracy . As for the running time , we see from Table 6 that KASP ( and RASP ) are 3 5 times faster than Nyström . ( Note also that KASP and RASP were implemented in R and Nyström runs in Matlab ; the slowness of R relative to Matlab suggests that we are underestimating the difference . ) Another difficulty with Nyström is the memory requirement , which is of order O(n2 ) . The actual memory usages were approximately 4GB , 12GB and 17GB , respectively , for the three large data sets , while the working memory required by KASP was less than 1GB .
Given the large size of these data sets we are not able to assess
3 Due to the random nature of RASP during the tree construction stage , we are not able to match the data reduction ratio in RASP to that of KASP . Hence only a rough comparison is possible between KASP and RASP .
Connect 4
RF 75.00
USCI
95.27
Poker Hand
60.63
65.33
3
0.19 63.47
11 0.65 35.56
35 0.42
K means Nyström KASP RASP 63.95
65.69
65.82 181 4.0 93.88 1603 12.0 50.24 1047 17.0
51 0.20 94.03 282 0.90 49.84 310 0.44
67 0.13 92.09 418 0.67 49.70 215 0.45
Table 6 : Comparison of Random Forests ( RF ) classification , k means , Nyström , KASP and RASP on the three large data sets . In the RF column the values denote the classification accuracy . For all other columns , the values in each cell denote the clustering accuracy , the running time and the memory usage . For RF classification , we set the training set sizes to be 7557 , 28578 and 25010 , and the test set sizes to be 60000 , 257201 , and 1000000 , respectively . the loss in clustering accuracy due to data reduction in KASP and RASP relative to the original data set ( because we are unable to run spectral clustering on the original data ) . Instead , to provide a rough upper bound , we treat the clustering problem as a classification problem and present results from a state of the art classification algorithm , the Random Forests ( RF ) algorithm [ 7 ] . These results suggest that the data reduction in KASP and RASP have not seriously degraded the clustering accuracy .
We also performed a further comparison of k means and our methods in which we increased the number of restarts and iterations for k means so that the running time matches that of KASP on the large data sets . For these experiments we used the BF implementation of k means . Our results , which are documented in [ 36 ] , showed that the longer runs of k means did not yield significant improvements in accuracy to the results we have reported here ; kmeans continued to fall significantly short of KASP and Nyström on USCI and Poker Hand .
6 . PERTURBATION ANALYSIS FOR SPEC
TRAL CLUSTERING
In this section we present a theoretical analysis of the effect on spectral clustering of a perturbation to the original data . Section 7 shows how this analysis applies to the specific KASP and RASP algorithms . Fig 1 summarizes the data processing procedure of our algorithms , and Fig 2 summarizes the underlying analysis . It is worth noting that our analysis is a general one , applicable to a variety of applications of spectral clustering . In particular , perturbations arise when the original data are truncated , compressed , filtered , quantized or distorted in some way . These degradations may be unavoidable consequences of a noisy channel , or they may arise from design decisions reflecting resource constraints , computational efficiency or privacy considerations .
We work with an additive noise model for the data perturbation analysis , due to its simplicity and its proven value in a number of problem areas such as data filtering , quantization and compression . We assume that the original data x1 , . . . , xn are independently and identically distributed ( iid ) according to a probability distribution G , and we treat data perturbation as adding a noise component ǫi to xi :
( 4 ) for each i = 1 , . . . , n , and we denote the distribution of ˜x by ˜G .
˜xi = xi + ǫi , n input points k means/ RP Tree
? k representatives
Algorithm 1
? m partitions
Lemma 5 Lemma 6
?
Data err . σ
6
6 Theorem 4 k ˜L − Lk2
6
Theorem 3 Lemma 2 k˜v2 − v2k2
6
Theorem 1
Theorem
8 , 9 m clusters of original points
Mis clustering ρ
Figure 1 : Data processing ( topdown ) .
Figure 2 : Algorithm analysis ( bottom up ) .
To make the analysis tractable , we further assume that : ( 1 ) ǫi is independent of xi , which is a good approximation for many real applications [ 13 ] ; ( 2 ) all components of all ǫ′ is are independent with a symmetric distribution with mean zero and bounded support ; ( 3 ) the variance of ǫi is small relative to that of the original data , a natural assumption in our setting in which we control the nature of the data transformation .
We aim to investigate the impact on the clustering performance of the perturbation . Specifically , we wish to assess the difference between the clustering obtained on the original x1 , . . . , xn and that obtained on the perturbed data ˜x1 , . . . , ˜xn . We quantify this difference by the mis clustering rate , which is defined as
ρ =
1 n n
Xi=1
I{Ii 6= ˜Ii} ,
( 5 ) where I is the indicator function , I = ( I1 , . . . , In ) being a vector indicating the cluster membership for x1 , . . . , xn , and ˜I = ( ˜I1 , . . . , ˜In ) for ˜x1 , . . . , ˜xn .
Our approach to quantify ( ie , to upper bound ) the mis clustering rate ρ consists of two components : ( 1 ) a bound that relates ρ to the perturbation of the eigenvector used in spectral clustering ( see Section 6.1 ) ; ( 2 ) a perturbation bound on the matrix norm of the Laplacian in terms of the amount of data perturbation ( see Section 62 ) 6.1 Mis clustering rate via the 2nd eigenvector Let ˜A and ˜L denote the affinity matrix and the Laplacian matrix , respectively , on the perturbed data . We wish to bound misclustering rate ρ in terms of the magnitude of the perturbation ǫ = ˜x − x . In our early work we derived such a bound for two class clustering problems [ 18 ] . The bound is expressed in terms of the perturbation of the second eigenvector of the Laplacian matrix . We begin by summarizing this result . Let v2 and ˜v2 denote the unitlength second eigenvectors of L and ˜L , respectively , then we can bound the mis clustering rate of a spectral bipartitioning algorithm ( a spectral clustering algorithm that forms two classes ) as follows .
THEOREM 1
( [18] ) . Under the assumptions discussed in [ 18 ] , the mis clustering rate ρ of a spectral bipartitioning algorithm on the perturbed data satisfies
ρ ≤ k˜v2 − v2k2 .
( 6 )
There are two limitations to this result that need to be overcome to be able to use the result in our design of a fast spectral clustering algorithm . First , the bound needs to be extended to the multiway clustering problem . We achieve that by considering recursive bipartitionings . Second , we need to estimate the amount of perturbation to the second eigenvector of the Laplacian matrix . In [ 18 ] this was done by assuming availability of the perturbed data , an assumption which is reasonable for applications that involve resource constraints in a distributed computing environment , but which is not appropriate here . We instead approach this problem via a modelbased statistical analysis , to be discussed in Section 62 That analysis allows us to bound the perturbation of the Laplacian matrix expressed in terms of a Frobenius norm . To connect that analysis to Theorem 1 , we make use of the following standard lemma .
LEMMA 2
( [33] ) . Let g denote the eigengap between the sec ond and the third eigenvalues of L . Then the following holds : k˜v2 − v2k ≤
1 g k ˜L − L|| + O “ k ˜L − L||2 ” .
With these links in the chain of the argument in place , we turn to a discussion of these two remaining problems , that of dealing with multiway clusterings and that of bounding the norm of the perturbation of the Laplacian matrix .
Our approach to obtaining theoretical bounds for multiway spectral clustering is a relatively simple one that is based on recursive bipartitioning . Although it may be possible to obtain a direct perturbation bound of the form of Theorem 1 for the multiway case , the problem is challenging , and in our current work we have opted for a simple approach .
THEOREM 3 . Assume that : 1 ) the assumptions of Theorem 1 hold throughout the recursive invocation of the Ncut algorithm , 2 ) the smallest eigengap g0 along the recursion is bounded away from zero , and 3 ) the Frobenius norm of the perturbation on Laplacian matrices along the recursion is bounded by c|| ˜L − L||2 F for some constant c ≥ 1 . Then the mis clustering rate for an m way spectral clustering solution can be bounded by ( ignoring the higher order term on the right hand side ) : m g2 0
· c|| ˜L − L||2 F .
ρ ≤
This theorem provides an upper bound on ρ via the perturbation of the Laplacian matrix . The proof is based on repeatedly applying Theorem 1 and Lemma 2 ; see [ 36 ] . 6.2 Perturbation on Laplacian matrix
In this section , we develop a bound for the Frobenius norm of the perturbation on the Laplacian matrix . Let ˜A = A + Λ and ˜D = D + ∆ . Based on the Taylor expansion and using standard properties of matrix Frobenius norm [ 33 ] , we have the following approximation for k ˜L − LkF ( see [ 18] ) : || ˜L − L||F ≤ ||D− 1 As reported in detail in [ 36 ] , we can work out the perturbation bounds for ||D− 1 2 ||F using Taylor series expansions , so that we can bound || ˜L − L||F . We summarize the results in the remainder of this section .
2 ||F + ( 1 + o(1))||∆D− 3
2 ||F and ||∆D− 3
2 AD− 1
2 ΛD− 1
2 AD− 1
2 ΛD− 1
2 ||F .
At this stage of our argument we need to introduce a statistical model for the original data . Specifically , we need to introduce a model for data that fall into two clusters . To obtain a tractable analysis , we have modeled distribution G as a two component mixture model :
G = ( 1 − π ) · G1 + π · G2 ,
( 7 ) where π ∈ {0 , 1} with P(π = 1 ) = η . The effect of data perturbation is to transform this model into a new mixture model specified by ˜G = ( 1 − π ) · ˜G1 + π · ˜G2 , where ˜G1 and ˜G2 are obtained through Eq ( 4 ) .
The perturbation to the affinity between xi and xj is given by
2σ2 kxi − xjk2 kxi + ǫi − xj − ǫj k2
We can simplify δij by a Taylor expansion of function f ( x ) =
δij = exp„− exp “ − ka+xk2
« − exp„−
« . 2σ2 ” around x = 0 , and after a lengthy calculation , we are then able to prove the following theorem for the perturbation bound on the Laplacian matrix ( see [ 36 ] for details ) :
2σ2
THEOREM 4 . Assume that : 1 ) x1 , , xn ∈ Rd are generated iid from ( 7 ) such that inf 1≤i≤n di/n > c0 holds in probability for some constant c0 > 0 , 2 ) the distribution of components in ǫ is symmetric about 0 with bounded support , and 3 ) ||∆D−1||2 = o(1 ) , then
|| ˜L − L||2
F ≤p c1σ(2 )
ǫ + c2σ(4 )
ǫ and denote the second and fourth moments of ǫ , respectively , and for some universal constants c1 and c2 as k → ∞ , where σ(2 ) σ(4 ) ǫ “ ≤p" indicates that inequality holds in probability .
ǫ
The result of Theorem 4 holds when there are more than two clusters . By combining Theorems 3 and 4 , we have obtained a perturbation bound for the mis clustering rate under suitable conditions . Remark . i ) The fourth moment is often negligible compared to the second moment . In such cases the main source of perturbation in the matrix norm comes from the second moment of ǫ . ii ) The assumption that di/n ’s are bounded away from 0 is a technical assumption that substantially simplifies our proof . We believe that the theorem holds more generally .
7 . ANALYSIS OF KASP AND RASP
In this section we show how the analysis described in the previous section can be applied to KASP and RASP . In this analysis the noise component models the difference between the original data and their corresponding representative points . With either k means or RP tree preprocessing , the variance of perturbation on original data can be made small according to Theorem 7 and Theorem 9 , which satisfies the requirement in the model .
In the rest of this section , we first present a set of embedding lemmas , which establish the connection between the cluster membership of the representative points and those of the original data . We then present a performance analysis for KASP and RASP . 7.1 The embedding lemmas
Let the set of representative data points ( with repetitions ) that correspond to each original data point be denoted by
S = {y1 , . . . , y1 , y2 , . . . , y2 , . . . , yk , . . . , yk} ,
( 8 ) representative point ) denoted by r1 , r2 , . . . , rk such thatPk with repetition counts ( ie , the number of points sharing the same i=1 ri = n . Let S1 = {y1 , y2 , . . . , yk} denote the set of unique representative points . We show that the second eigenvector of the Laplacian matrix corresponding to data set S can be computed from that corresponding to S1 . Since the Laplacian matrix of set S1 can be made much smaller than that of set S , a significant reduction in computational cost can be achieved .
LEMMA 5 . Let v2 denote the second eigenvector of the Laplacian matrix corresponding to data set S . Then v2 can be written in the following form : v2 = [ v1 , . . . , v1 , v2 , . . . , v2 , . . . , vk , . . . , vk]T ,
( 9 ) where the number of repetitions of each vi is exactly ri .
LEMMA 6 . Let the k × k matrix B have the form
B = [ r1 · a1 , r2 · a2 , . . . , rk · ak ] , where matrix [ a1 , a2 , . . . , ak ] is the affinity matrix computed from S1 , the set of unique representative points . Let λB and uB = [ u1 , u2 , . . . , uk]T be the second eigenvalue and eigenvector of the Laplacian matrix of B , respectively . Then the following equality holds ( up to scaling ) : v1 = u1 , v2 = u2 , . . . , vk = uk , where the vi are the components of v2 in Eq ( 9 ) .
The proofs of Lemma 5 and Lemma 6 are provided in [ 36 ] . Remark . Empirically we find that r1 , . . . , rk are not very different in data sets preprocessed by KASP and RASP , so in practice we do not perform the scaling ; ie , we set all r1 , . . . , rk in matrix B equal to 1 .
Based on Lemma 5 and Lemma 6 , the second eigenvector of the n × n Laplacian matrix LA corresponding to the large data set S = [ y1 , , . . . , y1 , y2 , . . . , y2 , . . . , yk , . . . , yk ] can be exactly computed from a reduced k × k Laplacian matrix LB , after proper scaling . In the case that k ≪ n ( which usually occurs in practice ) , a substantial computation speedup can be achieved ( as demonstrated in Section 5 ) . The remaining issue is how to approximate the original data set {x1 , x2 , . . . , xn} ( with small distortion ) using the reduced representative data set {y1 , y2 , . . . , yk} . With this achieved , Theorem 4 then ensures that the resulting mis clustering rate will be small , and will tend to zero in probability . In the remainder of this section , we show that the distortion can be made small if the representative points are computed by k means or by the RP tree quantization method . 7.2 Performance analysis for KASP
Existing work from vector quantization [ 38 , 13 ] allows us to characterize precisely the amount of distortion when the representative points are computed by k means clustering if the probability distribution of the original data is given .
Let a quantizer Q be defined as Q : Rd 7→ {y1 , . . . , yk} for yi ∈ Rd . For x generated from a random source in Rd , let the distortion of Q be defined as : D(Q ) = E(x − Q(x))s , which is the mean square error for s = 2 . Let R(Q ) = log2 k denote the rate of the quantizer . Define the distortion rate function δ(R ) as
δ(R ) = inf
Q : R(Q)≤R
D(Q ) .
Then δ(R ) can be characterized in terms of the source density of G and constants d , s by the following theorem .
THEOREM 7
( [38] ) . Let f be the density function for G ( defined in Eq ( 7 ) ) in Rd . Then , for large rates R , the distortion rate function of fixed rate quantization has the following form :
δd(R ) ∼= bs,d · ||f ||d/(d+s ) · k−s/d , where ∼= means the ratio of the two quantities tends to 1 , bs,d is a constant depending on s and d , and
||f ||d/(d+s ) =„Z f d/(d+s)(x)dx«(d+s)/d
.
Thus , by Theorems 3 and 4 , we arrive at the following characterization for the mis clustering rate of KASP .
THEOREM 8 . Let the data be generated from a distribution with density f . Let assumptions for Theorem 3 and Theorem 4 hold . Then the mis clustering rate ρ can be computed as :
ρ = c · b2,d · ||f ||d/(d+2 ) · k−2/d + O “ k−4/d ” ,
( 10 ) where c is a constant determined by the number of clusters , the variance of the original data , the bandwidth of the Gaussian kernel and the eigengap of Laplacian matrix ( or minimal eigengap of the Laplacian of all affinity matrices used in Ncut ) . 7.3 Performance analysis for RASP
We now briefly discuss the case of RASP , where the distortionminimizing transformation is given by an RP tree instead of by k means . By combining our perturbation analysis for spectral clustering with quantization results from [ 8 ] , we obtain an analysis for RASP . Define the average diameter of input data X = {x1 , . . . , xn} as [ 8 ]
∆2
A(X ) =
1
|X|2 Xx,y∈X
||x − y||2 .
A(X ) = 2
It is clear that if u(X ) is the center of mass for the data set X , then ∆2 said to have local covariance dimension ( d′ , ǫ , r ) if its restriction to any ball of radius r has a covariance matrix whose largest d′ eigenvalues satisfy
|X|Px∈X ||x − u(X)||2 . A set X ⊂ Rd is
σ2 1 + · · · + σ2 d′ ≥ ( 1 − ǫ ) · ( σ2
1 + · · · + σ2 d ) .
The quantization error of the RP tree is characterized in terms of the local covariance dimension as follows .
THEOREM 9
( [8] ) . Suppose an RP tree is built using data set X ⊂ Rd , then there exist constants 0 < c1 , c2 < 1 with the following property . Consider any cell C of radius r such that X ∩ C has local covariance dimension ( d′ , ǫ , r ) with ǫ < c1 . Pick a point x ∈ X ∩ C at random , and let C ′ be the cell that contains x at the next level down . Then
E[∆2
A(X ∩ C ′ ) ] ≤ “ 1 − c2 d′ ” ∆2
A(X ∩ C ) , where the expectation is taken over the randomization in splitting C and the choice of x ∈ X ∩ C .
Theorem 9 shows that the vector quantization error of RP tree behaves as e−O(h/d′ ) with h the depth of the tree and d′ the intrinsic dimension of the data . Thus the quantization error can be made small as the tree depth grows , and a result similar to Theorem 8 holds for RASP .
8 . CONCLUSION
We have proposed a general framework and presented two fast algorithms for approximate spectral clustering . Our algorithms leverage k means and RP tree methods to pre group neighboring points and produce a set of reduced representative points for spectral clustering . These algorithms significantly reduce the expense of the matrix computation in spectral clustering , while retaining good control on the clustering accuracy . Evaluation on a set of real data sets shows that a significant speedup for spectral clustering can be achieved with little degradation in clustering accuracy . Remarkably , our approximate algorithms enable a single machine to perform spectral clustering for a large dataset—the Poker Hand dataset— which consists of one million instances .
We also presented a theoretical analysis of our approximate spectral clustering algorithms using statistical perturbation theory . Our perturbation bound reveals that the mis clustering rate is closely related to the amount of data perturbation—one can make the misclustering rate small by reducing the amount of perturbation . We show that the mis clustering rate converges to zero as the number of representative points grows . These results provide a theoretical foundation for our algorithms and also have potentially wider applicability . In particular , a natural direction to pursue in future work is the use of other local data reduction methods ( eg , data squashing and condensation methods ) for preprocessing ; we believe that our bounds can be extended to these methods . We also plan to explore other methods for assigning clustering membership to the original data according to the membership of the representative data based on local optimization and edge swapping methods .
9 . REFERENCES [ 1 ] D . Arthur and S . Vassilvitskii . k means++ : The advantages of careful seeding . In Proceedings of the 18th Annual ACM SIAM Symposium on Discrete algorithms ( SODA ) , 2007 .
[ 2 ] S . Arya , D . Mount , N . Netanyahu , R . Silverman , and A . Wu .
An optimal algorithm for approximate nearest neighbor searching . Journal of the ACM , 45:891–923 , 1998 .
[ 3 ] A . Asuncion and D . Newman . UCI Machine Learning Repository , Information and Computer Science Dept . http://wwwicsuciedu/ mlearn/MLRepository.html , 2007 . [ 4 ] F . R . Bach and M . I . Jordan . Learning spectral clustering , with application to speech separation . Journal of Machine Learning Research , 7:1963–2001 , 2006 .
[ 5 ] M . B¯adoiu , S . Har Peled , and P . Indyk . Approximate clustering via core sets . In Proceedings of the 34th Annual ACM Symposium on Theory of Computing , 2002 .
[ 6 ] P . S . Bradley and U . M . Fayyad . Refining initial points for k means clustering . In Proceedings of the 15th International Conference on Machine Learning ( ICML ) , 1998 .
[ 7 ] L . Breiman . Random forests . Machine Learning , 45(1):5–32 ,
2001 .
[ 8 ] S . Dasgupta and Y . Freund . Random projection trees and low dimensional manifolds . In Fortieth ACM Symposium on Theory of Computing ( STOC ) , 2008 .
[ 9 ] I . Dhillon , Y . Guan , and B . Kulis . Weighted graph cuts without eigenvectors : A multilevel approach . IEEE Transactions on PAMI , 29(11):1944–1957 , 2007 .
[ 10 ] P . Drineas and M . W . Mahoney . On the Nystr¨om method for approximating a Gram matrix for improved kernel based learning . In Proceedings of COLT , pages 323–337 , 2005 . [ 11 ] S . Fine and K . Scheinberg . Efficient SVM training using low rank kernel representations . Journal of Machine Learning Research , 2:243–264 , 2001 .
[ 12 ] C . Fowlkes , S . Belongie , F . Chung , and J . Malik . Spectral grouping using the Nystr¨om method . IEEE Transactions on Pattern Analysis and Machine Intelligence , 26(2 ) , 2004 .
[ 13 ] R . M . Gray and D . L . Neuhoff . Quantization . IEEE
Transactions of Information Theory , 44(6):2325–2383 , 1998 .
[ 14 ] S . Gunter , N . N . Schraudolph , and A . V . N . Vishwanathan .
Fast iterative kernel principal component analysis . Journal of Machine Learning Research , 8:1893–1918 , 2007 .
[ 15 ] J . A . Hartigan . Clustering Algorithms . Wiley , New York ,
1975 .
[ 16 ] J . A . Hartigan and M . A . Wong . A k means clustering algorithm . Applied Statistics , 28(1):100–108 , 1979 .
[ 17 ] B . Hendrickson and R . Leland . A multilevel algorithm for partitioning graphs . In Proceedings of Supercomputing , 1995 .
[ 18 ] L . Huang , D . Yan , M . I . Jordan , and N . Taft . Spectral clustering with perturbed data . In Advances in Neural Information Processing Systems ( NIPS ) , December 2008 . [ 19 ] A . Jain , M . Murty , and P . Flynn . Data clustering : a review .
ACM Computing Surveys , 31(3):264–323 , 1999 .
[ 20 ] R . Kannan , S . Vempala , and A . Vetta . On clusterings : Good , bad and spectral . Journal of the ACM , 51(3):497–515 , 2004 .
[ 21 ] T . Kanungo , D . M . Mount , N . S . Netanyahu , C . D . Piatko ,
R . Silverman , and A . Y . Wu . An efficient k means clustering algorithm : analysis and implementation . IEEE Transactions on Pattern Analysis and Machine Intelligence , 24(7):881–892 , 2002 .
[ 22 ] G . Karypis and V . Kumar . A fast and high quality multilevel scheme for partitioning irregular graphs . SIAM Journal on Scientific Computing , 20:359–392 , 1999 .
[ 23 ] A . Kumar , Y . Sabbarwal , and S . Sen . A simple linear time
( 1 + ǫ ) approximation algorithm for k means clustering in any dimensions . In Proceedings of the IEEE Symposium on Foundations of Computer Science , 2004 .
[ 24 ] J . F . Lu , J . B . Tang , Z . M . Tang , and J . Y . Yang . Hierarchical initialization approach for k means clustering . Pattern Recognition Letters , 29:787–795 , 2008 .
[ 25 ] D . Madigan , I . Raghavan , W . Dumouchel , M . Nason ,
C . Posse , and G . Ridgeway . Likelihood based data squashing : a modeling approach to instance construction . Data Mining and Knowledge Discovery , 6(2):173–190 , 2002 .
[ 26 ] M . Meila and J . Shi . Learning segmentation with random walk . In Advances in Neural Information Processing Systems ( NIPS ) , 2001 .
[ 27 ] P . Mitra , C . A . Murthy , and S . K . Pal . Density based multiscale data condensation . IEEE Transactions on Pattern Analysis and Machine Intelligence , 24(6):1–14 , 2002 .
[ 28 ] A . Y . Ng , M . Jordan , and Y . Weiss . On spectral clustering :
Analysis and an algorithm . In Advances in Neural Information Processing Systems ( NIPS ) , 2002 .
[ 29 ] J . M . Pena , J . A . Lozano , and P . Larranaga . An empirical comparison of four initialization methods for the k means algorithm . Pattern Recognition Letters , 14(1):1027–1040 , 1999 .
[ 30 ] S . J . Redmond and C . Heneghen . A method for initialising the k means clustering algorithm using kd trees . Pattern Recognition Letters , 28:965–973 , 2007 .
[ 31 ] J . Shi and J . Malik . Normalized cuts and image segmentation . IEEE Transactions on Pattern Analysis and Machine Intelligence , 22(8):888–905 , 2000 .
[ 32 ] A . Smola and B . Scholkopf . Sparse greedy matrix approximation for machine learning . In Proceedings of the 17th International Conference on Machine Learning , 2000 . [ 33 ] G . Stewart . Introduction to Matrix Computation . Academic
Press , 1973 .
[ 34 ] U . von Luxburg , M . Belkin , and O . Bousquet . Consistency of spectral clustering . Annals of Statistics , 36(2):555–586 , 2008 .
[ 35 ] C . Williams and M . Seeger . Using the Nystr¨om method to speed up kernel machines . In Advances in Neural Information Processing Systems , 2001 .
[ 36 ] D . Yan , L . Huang , and M . I . Jordan . Fast approximate spectral clustering . Technical report , Department of Statistics , UC Berkeley , 2009 .
[ 37 ] S . Yu and J . B . Shi . Multiclass spectral clustering . In
Proceedings of ICCV , 2003 .
[ 38 ] P . L . Zador . Asymptotic quantization error of continuous signals and the quantization dimension . IEEE Transactions of Information Theory , 28:139–148 , 1982 .
