CoMine : E–cient Mining of Correlated Patterns ⁄
Young Koo Lee , Won Young Kim , Y . Dora Cai , and Jiawei Han
University of Illinois at Urbana Champaign , Illinois , USA fyklee , wykim , doracai , hanjg@uiuc.edu
Abstract
Association rule mining often generates a huge number of rules , but a majority of them either are redundant or do not re(cid:176)ect the true correlation relationship among data objects . In this paper , we re examine this problem and show that two interesting measures , all confldence ( denoted as fi ) and coherence ( denoted as ( cid:176) ) , both disclose genuine correlation relationships and can be computed e–ciently . Moreover , we propose two interesting algorithms , CoMine(fi ) and CoMine((cid:176) ) , based on extensions of a pattern growth methodology . Our performance study shows that the CoMine algorithms have high performance in comparison with their Apriori based counterpart algorithms .
1 . Introduction
Association rule mining is a widely studied topic in data mining research . Its popularity can be attributed to the simplicity of the problem statement and the e–ciency of its initial algorithms , such as Apriori [ 1 ] . Unfortunately , association mining with real data sets is not so simple . If the min support threshold is high , only commonsense \knowledge" will be found . However , when min support is set low , a huge number of association rules will usually be generated , a majority of which are redundant or noninformative . The true correlation relationships among data objects are buried deep among a large pile of useless rules .
To overcome this di–culty , correlation has been adopted as an interesting measures since most people are interested in not only association like cooccurrences but also the possible strong correlations
⁄The work was supported in part by National Science Foundation under Grant No . 02 09199 , the Univ . of Illinois , and an IBM Faculty Award . Any opinions , flndings , and conclusions or recommendations expressed in this material are those of the author(s ) and do not necessarily re(cid:176)ect the views of the funding agencies . implied by such co occurrences . Brin et al . [ 2 ] introduced lift ( called interest there ) and a ´2 correlation measure and developed methods for mining such correlations . However , since these measures based on sophisticated statistical computations do not have the downward closure property [ 1 ] , some approximate similarity measures has to be proposed to explore e–cient computation . Ma and Hellerstein [ 5 ] proposed a mutually dependent patterns and an Apriori based mining algorithm . Recently , Omiecinski [ 7 ] introduced two interesting measures , called all confldence and bond . Both have the downward closure property . Experimental results on some real data sets show that these measures are appealing since they reduce signiflcantly the number of patterns mined , and the patterns are coherent . In this study , we contribute to mining strongly correlated patterns in two aspects . First , several popularly used measures related to correlation mining are re examined . Our discussion shows that both all confldence ( denoted as fi ) and coherence ( called bond in [ 7 ] ) ( denoted as ( cid:176 ) here ) are good measures and in most cases are better than the popularly used lift and ´2 measures . Second , we develop two interesting algorithms , CoMine(fi ) and CoMine((cid:176) ) , by extension of a pattern growth mining methodology [ 3 ] . Our experimental and performance study shows that both CoMine algorithms generate truly interesting correlation patterns and have better performance over their Apriori based counterpart algorithms , Partition [ 7 ] .
2 What measures are good for mining correlated patterns ?
In this section , we examine which of these four measures : all confldence , coherence , lift , and ´2 , is more suitable at expressing correlations among items in a transactional database . We proceed by flrst introducing a few concepts .
Let I = fi1 ; i2 ; : : : ; img be a set of items , and DB be a database that consists of a set of transactions . Each transaction T consists of a set of items such that T ( cid:181 ) I . Each transaction is associated with an identifler , called TID . Let A be a set of items , referred to as an itemset . An itemset that contains k items is a k itemset . A transaction T is said to contain A if and only if A ( cid:181 ) T . The support of an itemset X in DB , denoted as sup(X ) , is the number of transactions in DB containing X . An itemset X is frequent if it occurs no less frequent than a user deflned min support threshold .
Deflnition 2.1 Given an itemset X = fi1 ; i2 ; : : : ; ikg , the universe , the max item sup , all confldence , and the coherence of X are deflned as , universe(X ) = fti 2 DBj9ij 2 X(ij 2 ti)g max item sup(X ) = maxfsup(ij)j8ij 2 Xg all conf ( X ) = sup(X ) max item sup(X ) coh(X ) = sup(X ) juniverse(X)j
( 1 )
( 2 )
( 3 )
( 4 )
Two other measures , lift and ´2 , have been popularly used . ´2 follows the standard deflnition in statistics [ 6 ] , whereas the lift of two itemsets A and B is deflned as [ 2 ] , lif t(AB ) = sup(AB ) sup(A)sup(B )
( 5 )
Given a transaction database DB , a minimum support threshold min support , a minimum all confldence threshold min fi , and a minimum coherence threshold min ( cid:176 ) , a frequent itemset X is all confldent if all conf ( X ) ‚ min fi ; and it is coherent if coh(X ) ‚ min ( cid:176 ) .
Example 1 The correlation relationships between the purchases of two items , milk and cofiee , can be examined by summarizing their purchase history in the form of Table 1 , a 2 £ 2 contingency table , where an entry such as mc represents the number of transactions containing both milk and cofiee . Table 1 shows the concrete contingency tables and the four measures for a set of transaction database A1 to A4 . From the table , one can see that m and c are strongly positively correlated in A1 but strongly negatively correlated in A2 . However , ‚ ( lift ) and ´2 are very poor indicators , whereas fi and ( cid:176 ) are very good ones . Similarly , A3 is negatively correlated , which cannot be shown by ‚ and ´2 but clearly shown by fi and ( cid:176 ) values . Finally , values in A4 are independent , which is correctly shown in ‚ , fi , and ´2 and approximated in ( cid:176 ) . The reason that ‚ and ´2 are so poor in many cases is because they are strongly in(cid:176)uenced by the value of mc which is usually big and across a wide range ( many people may buy neither m nor c ) . On the other hand , the deflnitions of fi and ( cid:176 ) remove the in(cid:176)uence of mc , playing a similar role as Jaccard coe–cient in cluster analysis [ 4 ] .
Our experiments using a real database called the CRIME data set1 show that mining for all confldent or coherent patterns generates a much smaller set but truly correlated patterns in real databases . We omit the details due to lack of space .
3 . Mining All Confldent Patterns set the and min fi ,
Given min support of all confldent patterns can be computed in the spirit of the Apriori algorithm . However , as many studies have shown [ 3 ] , Apriori may not be very e–cient when a database is large and/or when patterns to be mined are numerous and/or long because it may generate a huge set of candidate patterns . Therefore , we will examine how to develop more e–cient methods for evaluation of such measures . This leads to the development of CoMine algorithms by extension of the pattern growth methodology , represented by FP growth [ 3 ] .
Algorithm CoMine(fi ) is described brie(cid:176)y as follows . First , we build an FP tree , in which the labels on each path in FP tree and the entries in a header table of the tree are ordered in the f list order , the order of descending support counts [ 3 ] . Then , we perform tree mining by traversing down the header table . Algorithm 1 shows the tree mining algorithm for the fi conditional FP tree . For each item in the header of the tree , repeat the following . Examine the items in the header in a top down manner . In Algorithm 1 , Line 2 generates the all confldence pattern fl . Since the FP tree is constructed in such a way that every fl becomes an all confldence pattern , we do not need to check whether fl satisfles the conditions . Lines 3 and 4 compute count for each item in fl projected database . Lines 5{8 conduct pruning based on min support and min fi . Thus , fl ’s conditional database contains only the items bj ’s such that flbj satisfles both the minimum support and all confldence thresholds .
When computing count for each item in fl projected database , CoMine(fi ) reduces the search space using the properties of the all confldence measure . In the fl conditional database , for item x to be included in an all confldence pattern , the support of fix ( = the
1The CRIME data database report can set from a Web be obtained crime NIBRS ( http://wwwicpsrumichedu/NACJD/NIBRS )
Incident Based
( National
Reporting site related from a to System ) milk :milk cofiee mc :cofiee mc col sum m mc mc m row sum c c §
DB mc 1000 A1 100 A2 1000 A3 A4 1000 mc 100 1000 100 1000 mc 100 1000 10000 1000 mc
10,000 100,000 100,000
1000
‚
9.26 8.44 9.18
1 fi
0.91 0.09 0.09 0.5
( cid:176 )
0.83 0.05 0.09 0.33
´2 9055 670 8172
0
Table 1 . Contingency tables and a few measures .
Algorithm 1 CoMine(fi ) : Mining all confldence patterns by extending the FP growth method Procedure FP mine(Tree , fi )
Data set #Tuples #Items ATL/MTL gazelle pumsb
2.5/267 74/74
59602 49046
497 2113
1 : for each ai in the header of Tree do 2 : generate pattern fl = fi [ ai with all conf = sup(fl)=max item sup(fl ) ; fsup(fl ) = sup(ai ) in fi projected databaseg get a set Ifl of items to be included in fl projected database ; for each item in Ifl , compute its count in flprojected database ; for each bj in Ifl do if sup(flbj ) < min support , delete bj from Ifl ; fpruning based on minimum supportg if all conf ( flbj ) < min fi , delete bj from Ifl ; fpruning based on minimum all confldenceg end for construct fl conditional FP tree with items in Ifl Treefl ; if Treefl 6= ; then
3 :
4 :
5 : 6 :
7 :
8 :
9 :
10 : call FP mine(Treefl , fl )
11 : end if 12 : 13 : end for support of x in the fi conditional database ) should be no less than min fi £ max item sup(flx ) . With this pruning rule , we can reduce the set of items Ifl to be counted and , thus , reduce the number of nodes visited when traversing the FP tree to count each item in Ifl .
4 . Mining Coherent Patterns
In this section we present an e–cient coherent pattern mining algorithm , called CoMine((cid:176) ) . Unlike the extension of FP growth for mining all confldence patterns , the extension for mining coherent patterns has a challenging problem : computing the cardinalities of the universes for given itemsets using the FP tree .
We present a novel method for computing the cardinality values by exploiting the characteristics of the FP tree . Let X = a1a2 : : : an be an itemset and Ai be the TID set for item ai . We can compute juniverse(a1 ; a2 ; : : : ; an)j by computing
Table 2 . Characteristics of Real Data sets . juniverse(a1 ; a2 ; : : : ; an¡1)j + jAnj ¡ j(A1 [ A2 [ : : : [ An¡1 ) \ Anj . Here , juniverse(a1 ; a2 ; : : : ; an¡1)j has been computed in the previous step since we follow the jAnj can be obtained by maintop down approach . taining the support for each item . We can compute j(A1 [ A2 [ : : : [ An¡1 ) \ Anj by adding the values of the nodes of label an that has any of the item a1 ; a2 ; : : : an¡1 as an ancestor using node link and parent link of FP tree[3 ] .
Although we can compute the size of the universe using the FP tree , the cost is still non negligible . We can reduce the number of computations by flrst checkjuniverse(a1;a2;:::;an¡1)j ‚ ing the following condition : min ( cid:176 ) . If this condition fail , there is no need to compute the size of universe . sup(X )
5 . Experiments
In this section , we report our experimental results on the performance of CoMine in comparison with an e–cient Apriori based counterpart algorithm , Partition algorithm[7 ] . Our implementation of Partition algorithms also contains optimization techniques proposed in [ 5 , 8 ] . The result shows that CoMine outperforms Partition , and it is e–cient and scalable for mining correlated patterns in large databases . Experiments were performed on a 2.2GHz Pentium IV PC with 512MB of memory , running Windows 2000 . Algorithms were coded with Visual C++ .
Our experiments were performed on real data sets as shown in Table 2 . Gazelle comes from click stream data from Gazelle.com and pumsb is obtained from wwwalmadenibmcom The gazelle is rather sparse in comparison with pumsb , which is very dense so that it produces many long frequent itemsets even for very high values of support .
Let us compare the relatively e–ciency the Partition and CoMine methods on a transactional data set . Figure 1 shows the performance on the gazelle data set when min sup is flxed at 0.1 % and min conf varies . As we can see in these flgures , CoMine always outperforms counterpart Partition for the coherence and all confldence measures over the entire range of confldence threshold . This is because as the support or confldence threshold goes down , the number as well as the length of frequent itemsets increases and FP growthbased methods have better scalability than Aprioribased methods under these circumstances .
1
) c e s i l l i m
( e m i t n o i t u c e x E
400
300
200
100
0
60 g Partition( ) a Partition( ) g CoMine( ) a CoMine( )
50
40
30
20
10 min_conf( % ) g Partition( ) a Partition( ) g CoMine( ) a CoMine( )
1
) c e s ( e m i t n o i t u c e x E
1.E+05
1.E+04
1.E+03
1.E+02
1.E+01
1.E+00
90
80
70 min_conf( % )
60
50
Figure 2 . Pumsb when min sup = 5 % . all confldenent and coherent patterns respectively . For CoMine((cid:176) ) , the proposed method can compute the cardinality of the universe e–ciently using the FP tree structure only . Several pruning methods are also developed that reduce the search space . Our extensive performance study shows that CoMine generates desirable correlation patterns and outperforms the previously proposed Apriori based algorithms .
Figure 1 . Gazelle when min sup = 0:1 % .
References
Figure 2 shows the execution time on the pumsb data set using difierent confldence threshold when the min sup is flxed at 5 % . It also shows that CoMine algorithms always outperform Partition algorithms . When min conf is less than 75 % , Partition algorithms run out of memory and cannot flnish . At min conf 80 % , CoMine(fi ) can be more than 300 times faster than Partition(fi ) and CoMine((cid:176 ) ) can be more than 1000 times faster than Partition((cid:176) ) . Figure 2 indicates that the gaps between CoMine((cid:176 ) ) and CoMine(fi ) are quite small compared with that of Partition((cid:176 ) ) and Partition(fi ) ( Notice that the vertical axis is on a log scale ) . This is because CoMine((cid:176 ) ) uses the e–cient algorithm of computing cardinalities of universes and pruning rules .
6 . Conclusions
In this paper , we show that mining all confldence and coherent patterns generates highly correlated patterns and are better measures than association based confldence measure and two other claimed correlalift and ´2 . For e–cient mining of tion measures : the two kinds of correlation patterns , we proposed a new method , called CoMine , which consists of two algorithms CoMine(fi ) and CoMine((cid:176 ) ) for computing
[ 1 ] R . Agrawal and R . Srikant . Fast algorithms for In Proc . VLDB , Sept . mining association rules . 1994 .
[ 2 ] S . Brin , R . Motwani , and C . Silverstein . Beyond market basket : Generalizing association rules to correlations . In Proc . SIGMOD , May 1997 .
[ 3 ] J . Han , J . Pei , and Y . Yin . Mining frequent patterns without candidate generation . In Proc . SIGMOD , May 2000 .
[ 4 ] L . Kaufman and P . J . Rousseeuw . Finding Groups in Data : an Introduction to Cluster Analysis . John Wiley & Sons , 1990 .
[ 5 ] S . Ma and J . L . Hellerstein . Mining mutually de pendent patterns . In Proc . ICDM , Nov . 2001 .
[ 6 ] S . Morishita and J . Sese . Traversing itemset lattice with statistical metric pruning . In Proc . PODS , May 2001 .
[ 7 ] E . Omiecinski . Alternative interest measures for mining associations . IEEE Trans . Knowledge and Data Engineering , 15:57{69 , 2003 .
[ 8 ] H . Xiong , P N Tan , and V . Kumar . Mining hyperclique patterns with confldence pruning . In Tech . Report , Univ . of Minnesota , Minneapolis , March 2003 .
