Discriminatively Trained Markov Model for
Sequence Classification
Oksana Yakhnenko , Adrian Silvescu , Vasant Honavar
Artificial Intelligence Research Laboratory
Center for Computational Intelligence Learning and Discovery
Computer Science Department
Iowa State University Ames , Iowa 50010
Email : {oksayakh , silvescu , honavar}@csiastateedu
Abstract— In this paper , we propose a discriminative counterpart of the directed Markov Models of order k − 1 , or MM(k −1 ) for sequence classification . MM(k −1 ) models capture dependencies among neighboring elements of a sequence . The parameters of the classifiers are initialized to based on the maximum likelihood estimates for their generative counterparts . We derive gradient based update equations for the parameters of the sequence classifiers in order to maximize the conditional likelihood function . Results of our experiments with data sets drawn from biological sequence classification ( specifically protein function and subcellular localization ) and text classification applications show that the discriminatively trained sequence classifiers outperform their generative counterparts , confirming the benefits of discriminative training when the primary objective is classification . Our experiments also show that the discriminatively trained MM(k − 1 ) sequence classifiers are competitive with the computationally much more expensive Support Vector Machines trained using k gram representations of sequences .
I . INTRODUCTION
Sequence classification is an important problem that arises in many real world applications : protein function prediction , text classification , speech recognition , intrusion detection , among others . Given a sequence ( constructed from letters drawn from a finite alphabet ; for instance , 20 letter alphabet of amino acids in the case of protein function classification ; a vocabulary of English words in the case of text classification ) , the task of a sequence classifier is to assign a class label ( typically drawn from a finite set of mutually exclusive class labels ) to the sequence . Machine learning algorithms offer one of the most cost effective approaches to designing sequence classifiers when a training set of labeled sequences is available . Of particular interest are sequence classifiers based on probabilistic generative models of sequence data . Given a generative model , a new sequence can be assigned the most probable class label . A Na¨ıve Bayes sequence classifier is based on one of the simplest generative models of sequence data namely one that assumes that each element ( letter ) of the sequence is independent of other elements of the sequence given the class . Training a Na¨ıve Bayes sequence classifier from data simply involves estimating the probabilities for each letter of the alphabet conditioned on the class . Na¨ıve Bayes classifiers , because of their simplicity and low computation cost , are often used in applications ranging from text classification [ 14 ] to biological sequence classification [ 7 ] [ 24 ] with varying degrees of success ( as estimated by standard measures of classifier performance eg , classification accuracy ) . However , the independence assumption of Na¨ıve Bayes which is tantamount to ignoring the sequential nature of the data is often violated in practice . Hence , generative models of sequence data that relax the strong independence assumption of the Na¨ıve Bayes model , the associated sequence classifiers , and efficient algorithms for learning accurate sequence classifiers from data are of significant interest .
The dependencies among the neighbouring elements of a sequence can be modeled by using k grams [ 6 ] . One might consider a Na¨ıve Bayes classifier whose inputs consist of k grams as opposed to single letters . However , because successive k gram in a sequence have k − 1 elements in common , the use of k grams as input features for a Na¨ıve Bayes classifier consistently and systematically violates the Na¨ıve Bayes assumption that the inputs to the classifier are independent given the class . By exploiting the well known Hammersley Clifford theorem [ 8 ] , it is possible to construct a generative Markov Model of order k−1 , or Markov Model(k− 1 ) ( or MM(k −1 ) for short ) [ 16 ] or equivalently , the so called Na¨ıve Bayes(k ) ( or NB(k ) for short ) [ 1 ] that models the dependencies among k neighboring elements of a sequence . This model was shown to have consistent improvement in accuracy relative to Na¨ıve Bayes in sequence based protein function classification [ 1 ] , as well as text classification [ 16 ] with the performance of the classifier improving with increasing values of k ( when sufficient training data are available ) .
Generative models ( such as Na¨ıve Bayes or Na¨ıve Bayes(k ) ) model the probability distribution of the process generating the data from each class . Classification is performed by examining the likelihood of each class producing the observed features in the data ( eg , letters in the sequence ) and assigning the sequence to the most likely class ( ie , one with the largest likelihood ) . In contrast , discriminative models directly compute class membership probabilities ( or model class boundaries ) , without modeling the underlying class feature densities . For example , classifiers trained using logistic regression are the discriminative counterparts of the Na¨ıve Bayes generative models [ 21 ] . Discriminative models can often outperform generative models on classification tasks [ 21 ] [ 15 ] . One of the reasons for choosing discriminative models over generative models for classification was pointed out by Vapnik [ 23 ] : “ One should solve the [ classification ] problem directly and never solve a more general problem as an intermediate step ” ( such as modeling the probability distribution of features in the data for each class ) . Consequently , there has been significant recent in the training of discriminative counterparts of generative models for classification tasks . For example , Ng and Jordan [ 15 ] have compared Na¨ıve Bayes and Logistic regression classifiers ; Bouchard and Triggs [ 5 ] have explored the trade offs between generative and discriminative classifiers ; Raina et . al . [ 18 ] have studied a hybrid classifier that combines generative and discriminative models for text classification . interest
Against this background , in this paper , we explore the discriminative counterpart of the Na¨ıve Bayes(k ) generative model for sequence classification . We derive a gradient based learning algorithm for training sequence classifiers in a discriminative setting . Results of our experiments on data sets drawn from biomolecular sequences and text classification applications show that the discriminatively trained MM(k − 1 ) classifiers outperform their generative counterparts and compete favorably with Support Vector Machines trained using k gram representations of sequences .
The rest of the paper is organized as follows : Section 2 describes the preliminaries of a generative Markov Model , and shows how it can be trained discriminatively using gradient ascent . Section 3 presents the algorithm for discriminative training of MM(k−1 ) sequence classifiers . Section 4 describes experimental set up and results . Section 5 concludes with discussion of related work and an outline of some directions for further research on this topic .
II . GENERATIVE AND DISCRIMINATIVE MARKOV MODELS
We start by outlining the general classification strategy for the generative setup . We then present the Markov Model of order k − 1 and apply the general strategy to build a classifier from this model , and show how it can be trained in a discriminative setting .
A . Generative Probabilistic Model
A model α for sequences defined over some alphabet Σ specifies for any sequence S ∈ Σ∗ the probability Pα(S ) . Given a set of sequences , each instance is associated with a class from the set of mutually disjoint class labels C = {c1cn} A classifier can be constructed in the following fashion : First , a probabilistic model α(cj ) is trained for each class using the sequences belonging to cj ; and second , in order to predict a class for a novel sequence S′ Bayes rule is used to obtain class(S′ ) = arg max
Pα(cj )(S ′|cj )P ( cj )
Pα(cj )(S ′ )
B . MM(k − 1 ) : Markov Model of order k − 1
Markov Models for sequence classification have been used with success by many researchers in a variety of applications
[ 25 ]
[ 6 ] behind MM(k − 1 ) .
[ 1 ] . We start with a brief review of the basic ideas
Let S be a sequence , si be the value of an element of S at the position i , and Σ be the alphabet over which the sequence values range . it
A sequence can be modeled as a graph in which each sequence element is represented by a node , and a direct dependency between two neighboring elements is represented by an edge in the graph . Generally , is the case that two or more neighboring elements in the sequence will be dependent on each other . Figure 1 shows several directed dependency models for : a ) Na¨ıve Bayes which corresponds to assuming no dependence between neighboring elements of a sequence , b ) a dependency model of the first order ie , one that considers dependencies between pairs of neighboring elements of a sequence ( k = 2 ) and c ) a dependency model of the second order ie , one that considers dependencies among three adjacent elements of a sequence . More generally , Markov Models of order k − 1 , capture the dependency between the current element sk and its k−1 preceding elements [ sk−1s1 ] in a sequence . MM(k − 1 ) family of generative models offer the needed expressive power to model increasingly complex dependencies among neighboring elements of a sequence . a ) b ) c )
S1
S1
S1
S2
S2
S2
S3
S3
S3
S4
S4
S4
S5
S5
S5
Fig 1 . Markov Model representation of dependencies of order k − 1 dependency . a ) Na¨ıve Bayes model ; b ) Markov Model of order 1 c ) Markov Model of order 2
The joint probability distribution for the MM(k − 1 ) follows directly from the Junction Tree Theorem [ 8 ] and the definition of conditional probability : i=1 P ( S = sisi+k−1 , cj ) i=1 P ( S = sisi+k−2 , cj )
= P ( S = s1sk−1 , cj )
P ( S = s1s2sn , cj ) = Qn Qn Yi=k n
P ( S = si|si−1si−k+1 , cj )
The probabilities P ( S = si|si−1si−k+1 , cj ) can be readily estimated from data using the counts of the subsequences sisi−k+1 , cj and si−1si−k+1 , cj as sufficient statistics . in place , a sequence S to be With the generative model classified is assigned to the most likely class based on the generative models for each class . That is , class(S = i=k P ( S = si|si−1si−k+1 , cj ) . Markov Models of order k − 1 ( where k > 1 ) have been shown to have consistent improvement in accuracy over Na¨ıve Bayes ( which is equivalent to a Markov Model of order 0 ) , with the classification accuracy typically s1sn ) = arg maxcj ∈C P ( S = s1sk−1 , cj)Qn increasing with the increase in k ( until we run out of data to reliably estimate the increased number of parameters )
[ 1 ] .
C . DMM(k − 1 ) : Discriminatively Trained Markov Models of order k − 1
As noted earlier , when the primary objective is classification , discriminatively trained classifiers often outperform their generative counterparts . Discriminative training of classifiers entails maximizing the conditional likelihood function [ 21 ] . In the case of MM(k−1 ) , the conditional likelihood function for a sequence S = s1sn belonging to class c = cq is given by :
P ( c = cq|S = s1sn ) =
P ( S = s1sn , cq )
Pcj ∈C P ( S = s1sn , cj )
To minimize the notational clutter , we will use Pi1ik,cq to denote P ( S = si|si−1si−k+1 , cj ) , and Pi1ik−1,cq to denote P ( S = si , si−1si−k , cj ) . Note that the elements of the sequence take values from the alphabet Σ and class labels take values from C . These parameters collectively represent the corresponding model . We will use P to denote this collection of parameters that specify the model .
Consider a data set D = {d1dm} of labeled strings where the strings consist of elements from a finite alphabet Σ and the class labels are drawn from a finite set of class labels C . Thus , dl = ( Sl , cl ) , 1 ≤ l ≤ m ; nl = |Sl| is length of Sl and ( ∀l∀k ≤ nl ) sl k ∈ Σ and cl ∈ C .
Let CL(dl : P ) denote the conditional likelihood of the sequence dl under the model P . Let CL(D : P ) denote the conditional likelihood of the data set D under the model P . Assuming independently identically distributed samples , we have : m
CL(D : P ) = CL(D = {d1dm} : P ) =
CL(dl : P )
Yl=1
Letting CLL(dl : P ) denote log CL(dl : P ) and CLL(D : P ) denote log CL(D : P ) respectively , we can write :
CLL(D : P ) =
=
CLL(dl : P ) log P ( C l = cl|Sl = sl
1sl nl ) m m
Xl=1 Xl=1
Training the model P in the discriminative setting is equivalent to maximizing the conditional likelihood function CL(D : P ) , with respect to the parameters P which in turn is equivalent to maximizing the conditional log likelihood CLL(D : P ) . We use gradient ascent to find parameters that maximize CLL(D : P ) . We start with an initial estimate P ( 0 ) of P ( more on this initialization in Section 3 ) . Denoting by P ( t ) and P ( t + 1 ) the estimates of P at iterations t and t + 1 respectively , the update equation for each parameter Pi1ikcq at the iteration t is given by
Pi1ikcq ( t + 1 ) ← Pi1ikcq ( t ) + α
∂CLL(D : P )
∂Pi1ikcq fifififiP =P ( t ) where 0 < α ≤ 1 is the learning rate . Thus , all parameters in P are iteratively updated until a desired termination condition is satisfied .
It is convenient to reparametrize Pi1ik,cq wi1ik,cq by setting Pi1ik,cq = 1 Zw in terms of ewi1 ik ,cq , where Zw =
Pi1∈Σ ewi1 ik ,cq is the normalization factor for each parame ter . This reparameterization is needed in order to maintain the probabilities within the [ 0 , 1 ] interval . Note that since we are normalizing over the first entry in the k gram , the normalized result still corresponds to conditional probability of an element given its k − 1 predecessors P ( S = si|si−1si−k+1 , cq ) . The second parameter , Pi1ik−1,cq , is reparameterized in terms eui1 ik−1 ,cq and of ui1ik−1,cq by setting Pi1ik−1,cq = 1 Zu is the normalization
Zu = Pi1ik−1∈Σ;cq∈C eui1 ik−1 ,cq factor over all possible values of i1ik−1 , cq .
Let W denote the counterpart of P after this reparameteri zation . Now CLL(dl : W ) for a data point is given by :
CLL(cj|Sl ) = log
γj Zγ r=k
Qnl where γj = e u sl 1
sl k−1
,cj
Zu w sl r sl e r−k+1 Zw
,cj
, and Zγ =
∂wi1ik,cq
∂CLL(D : P ) above reparameterization is given by : wi1ik,cq ( t + 1 ) ← wi1ik,cq ( t ) + α
The update equation for the resulting parameters after the
Pcj ∈C γj corresponds to normalization over all classes . fifififiW =W ( t )
The parameters ui1ik−1,cq are updated in the similar fashion . In what follows , we present the formula for the gradient of the conditional log likelihood function for an individual instance dl in the data set D . Since the gradients commute with summation , we can compute the gradient for the entire dataset D by simply summing up the gradients for the individual samples from D . Furthermore , if online update is used , we can update the parameters based on individual samples from D .
Let count[i1ik : Sl ] be the number of times a subsequence s1sk appears in the sequence Sl , and let δ(cj , cq ) be 1 if cj = cq and be 0 otherwise . The update equation for wi1ik,cq is obtained by taking the derivative of CLL(dl : W ) with respect to wi1ik,cq :
∂CLL(dl : W )
∂wi1ik,cq
= count[i1 , , ik−1 : Sl ] count[i1 , , ik : Sl ] δ(cj , cq ) − count[i1 , , ik−1 : Sl ] 1 , , sl nl 1 , , sl
γ(sl Zγ(sl
−
, cq ) nl ) ! ewi1 ik ,cq
Zw
Similarly , the update equation for ui1ik−1,cq is obtained by taking the derivative of the CLL(dl : W ) with respect to ui1ik−1,cq :
∂CLL(dl : W ) ∂ui1ik−1,cq
= ( δ([i1 , , ik−1 ] , [ sl
1 , , sl k−1 ] )
− eui1 ik−1 ,cq
Zu
)
δ(cj , cq ) −
γ(sl Zγ(sl
1 , , sl nl 1 , , sl
, cq ) nl ) !
γ(sl Zγ(sl
1,,sl ,cq ) nl 1 , , sl nl )
A closer look at the update equations reveals that the term is the penalty for the parameters
δ(cj , cq ) − that are associated with a class that is not the true class of the sequence , or the reward for the parameters associated with the true class . Since at the maxima or minima , the derivative of a function is 0 , it follows that δ(cj , cq ) − γ(s1,,sn,cq ) should Zγ(s1 , , sn ) be 0 , which is the case when the probability of a sequence given its true class is 1 .
III . TRAINING PROCEDURE
Training of DMM(k − 1 ) ( discriminative Markov Model of order k − 1 ) proceeds as follows .
The parameters of MM(k − 1 ) , ie , each wi1ik,cj and each ui1ik−1,cj is initialized with the logarithm of counts of subsequences associated with the parameters . This corresponds to initializing P ( equivalently W ) , with the parameters of the generative MM(k − 1 ) . The parameters are then iteratively updated using the gradient ascent procedure until a desired termination criterion is satisfied ( more on this in the next section ) . The momentum modification was used to speed up convergence [ 17 ] . Once we have trained the model , we can classify an input sequence by assigning it to the most probable class under the model . The pseudocode for the algorithm is shown in Figure 2 .
IV . EXPERIMENTAL SETUP AND RESULTS
This section describes the datasets , experimental setup used to test our model and provides direct comparison of a DMM(k−1 ) with its generative counterpart MM(k−1 ) , as well as with a Support Vector Machine using a data representation with the same representational power as that of MM(k−1 ) models . A . Datasets
The experiments were conducted on data sets drawn from two application domains : biomolecular sequence classification and text classification . In the case of biomolecular sequence classification , we have experimented with data sets used in the protein function and in the subcellular localization studies . In the case of text classification , we have experimented with the widely used Reuters Text Categorization data set .
1 ) Protein Function Data : The first biomolecular sequence dataset is based on the families of human kinases . The Kinase dataset contains a total of 290 protein sequences belonging to four functional classes containing 1 , 10 , 69 , 210 sequences respectively . The goal is to assign a given kinase sequence to one of the four kinase subfamilies . This dataset was previously used in the protein function studies by Andorf et . al
[ 1 ] .
Training Input : training data D = {d1dm} model order k , learning rate α , momentum λ
Output : W ( parameters of the trained model ) 1 . Initialize wi1ik,cq ← log count[i1ik , cq ] 2 . Initialize ui1ik−1,cq ← log count[i1ik−1 , cq ] 3 . For each dl = ( Sl , cl ) ∈ D 4 . do until termination criterion is met
{
For each v ∈ Σ
5 . For each i1ik−1 ∈ Sl 6 . 7 . 8 .
For each cj ∈ C wv,i1ik−1,cj ← wv,i1ik−1,cj + α ∂CLL(dl:W ) ∂wv,i1 ik−1 ,cj +λwv,i1ik−1,cj
For each cj ∈ C
10 . 11 . ui1ik−1,cj ← ui1ik−1,cj + α ∂CLL(dl:W ) ∂ui1 ik−1 ,cj +λui1ik−1,cj
}
Output(W )
Classification Input : model order k , sequence to be classified S = s1s2sn 1 . c ← arg maxcj ∈C 2 . output c u1k−1,cj wii−k,cj i=k
Zw e
Zu Qn
Fig 2 . DMM(k − 1 ) : Training and Classification
[ 4 ] and Hua et . al .
2 ) Subcellular Localization Data :
In the subcellular localization task [ 19 ] , the goal is to predict the subcellular localization of a protein from its sequence . The data sets used in our experiments are the same as those explored in the previous studies on predicting cellular localization of protiens by Bhasin et . al . [ 11 ] . These data sets are based on localization data for prokaryotic and eukaryotic proteins derived from Swiss Prot database ( release 33.0 ) [ 2 ] . The first dataset comprises a total of 997 prokaryotic proteins . It includes the proteins from the following three different subcellular locations : cytoplasmic , periplasmic , and extracellular . The second data set consists of a total of 2427 eukaryotic proteins . It includes proteins from four different subcellular locations : nuclear , cytoplasmic , mitochondrial , and extracellular . Sequence identity within a class is below 90 % . No transmembrane proteins were included . Table I summarizes some characteristics of these two datasets .
3 ) Text Data : We used the Reuters 21578 Text Categorization datasets1 with the 10 categories ( acquisition , corn , crude , earn , grain , interest , money fx , ship , trade and wheat ) that have the highest number of positive training examples . However , because of the large size of the vocabulary , we performed feature selection based on mutual information [ 9 ] to reduce the vocabulary size to 300 words . Even with this reduced vocabulary , the estimation of parameters MM(k − 1 ) or SVM classifiers becomes infeasible for values of k greater
1http://wwwdaviddlewiscom/resources/testcollections/reuters21578/
TABLE I
NUMBER OF SEQUENCES FOR EACH SUBCELLULAR LOCALIZATION
CATEGORIES OF THE DATASETS
Species
Prokaryotic
Eukaryotic
Subcellural localization Cytoplasmic Periplasmic Extracellular
Nuclear
Cytoplasmic Mitochondrial Extracellular
Number of sequences
688 202 107 1097 684 321 325 than 2 because of the sparsity of the data as well as memory requirements unless additional steps are taken to reduce the size of the models . Hence , we limit the experiments reported in this paper experiments to values of k no greater than 2 .
B . Experiments Exploring the Conditional Log Likelihood vs . Accuracy on Training and Validation Sets
Dicriminatively trained classifiers have been reported to be more susceptible to overfitting than their generative counterparts [ 15 ] . It is therefore interesting to explore whether the DMM(k − 1 ) models suffer from overfitting . Hence , we start with an examination of the behavior of the DMM(k−1 ) model by observing the relationship between maximizing conditional likelihood versus accuracy on a validation set ( data not used in training of the classifier ) . We show the behavior of the class conditional log likelihood , accuracy on the training data , and accuracy on the previously unseen data in the case of the Eukaryotic subcellular localization datasets ( Figure 3 ) . The datasets were split into training set and validation set in the ratio 90% 10 % . The values of the negative conditional loglikelihood function and the accuracies on the training set and on the validation set were recorded at each iteration of the algorithm , and repeated for the values of k = 2 , 3 , 4 . The values of the negative CLL are plotted on the right y axis , and the values of accuracy were plotted on the left y axis , with the number of iterations plotted on the x axis .
In the case of the Eukaryotic dataset , when k=2 for Cytoplasmic and Nuclear classes , accuracy on training data goes from 80 % to 89 % and 82 % to 92 % respectively after which the training accuracy begins to drop even though negative CLL continutes to decrease . Accuracy on the validation data grows from 78 % to 82 % and 80 % to 87 % respectively in several iterations and then starts to decrease suggesting the possibility that the model is overfitting the parameters . For Extracellualar and Mitochondrial classes , the accuracy on the training data increases with the number of iterations of the algorithm , and so does the accuracy on the validation data for Extracellular class . For the Mitochondrial class we again observe increase in accuracy after the first several iterations , followed by a decrease in accuracy even though negative CLL continues to decrease . For k = 3 in Cytoplasmic , Mitochondrial and Nuclear classes , the accuracy on validation set decreases and then increases to its starting value , even though accuracy on the training set increases . In the case of the Extracellular class ,
Fig 3 . Negative Conditional Log Likelihood versus accuracy on training and validation set for Eukaryotic set for classes Cytoplasmic , Extracellular , Mitochondrial and Nuclear for k=2 ; Cytoplasmic , Mitochondrial and Nuclear for k=3 ; Mitochondrial for k=4 the plots are not shown for k = 3 because the negative CLL was found to be close to 0 at initialization . Finally , for k = 4 even though the negative CLL decreases from 50 to almost 0 , the accuracy on training and validation sets fail to show improvement as training progresses .
The observation that in a few instances , accuracy on the training data drops as the the conditional log likelihood score continues to increase , at first glance , is somewhat puzzling . Once possible explanation is that the conditional log likelihood tends to favor short sequences over longer sequences ( by virtue of the fact that probabilities associated with k grams get multiplied in computing likelihood ) whereas classification accuracy measures the percentage of sequences in the data set that are correctly labeled , regardless of their length . This suggests a possible direction for improving our current algorithm normalizing the conditional likelihood score for each sequence by the length of the sequence
It is clear that the gradient achieves the highest accuracy on the validation data within several iterations , and most of the time with maximization of the likelihood function , the accuracy on the unseen data drops , which suggests overfitting . Therefore , in our experiments we choose the parameters when the accuracy on the validation set was at its highest value in the first 30 iterations .
C . Experimental Comparison of DMM(k − 1 ) model with MM(k − 1 ) and SVM
For all the experiments we have used 10 fold crossvalidation to evaluate our approach and to compare it with generatively trained model and the SVM . Furthermore , 10 % of the training data during each round of cross validation was withheld for the validation purposes . After 30 iterations the parameters that yield the highest accuracy on the validation set were used in the resulting classifier . Note that the classifier is tested on the data not used for training or validation . The parameters α and λ were set to those that yield the fastest
TABLE II
TABLE IV
ACCURACY ON KINASE DATASET OBTAINED BY 10 FOLD
CROSS VALIDATION , DMM(k − 1 ) , MM(k − 1 ) k = 2 , 3 , 4 , AND SVM
ACCURACY , SENSITIVITY , SPECIFICITY AND CORRELATION COEFFICIENT ON EUKARYOTIC DATASET OBTAINED BY 10 FOLD CROSS VALIDATION ,
FOR k = 2 , 3 ( k = 4 IS COMPUTATIONALLY INFEASIBLE FOR SVM )
OF THE DISCRIMINATIVE , GENERATIVE AND SVM APPROACHES k 2 3 4
DMM
8901±589 9155±582 7848±65
MM
8711±72 9113±55 7832±88
SVM 90.7 90.3 x
TABLE III
ACCURACY , SENSITIVITY , SPECIFICITY AND CORRELATION COEFFICIENT
FOR DMM(k − 1 ) , MM(k − 1 ) , AND SVM ON THE PROKARYOTIC
DATASET OBTAINED BY 10 FOLD CROSS VALIDATION
Accuracy
Specificity
Accuracy
Specificity
Class Ctpl
Extr
Mit
Nclr
Ctpl
Extr
Mit
Nclr k 2 3 4 2 3 4 2 3 4 2 3 4 k 2 3 4 2 3 4 2 3 4 2 3 4
86
DMM MM 77.72 73.84 85.9 88.96 89.7 94.15 95.67 75.44 89.67 90.56 83.48 87.97 88.13
89.29 92.13 94.19 95.59 82.37 89.74 90.44 80.55 87.52 88.55
Sensitivity
DMM MM 84.21 78.94 73.68 72.51 67.4 67.69 63.08 49.23 57.53 56.92 69.54 70.77 73.2 66.36 33.01 34.27 36.76 37.69 91.07 75.23 82.5 81.59 90.33 88.61 x x x x
85.74 89.25
92.45 95.49
88.46 91.14
77.22 91.28 97.76 98.76 99.95 99.8 83.76 98.2 98.6 71.88 92.4 87.07
SVM DMM MM 81.87 69.76 88.01 90.76 97.41 93.82 99.8 99.7 76.83 98.2 98.6 90.45 92.48 87.7 CC SVM DMM MM 0.49 58.63 0.65 73.78 0.72 0.45 0.72 0.8 0.32 0.45 0.51 0.67 0.75 0.76
0.52 0.65 0.73 0.56 0.72 0.81 0.45 0.46 0.5 0.63 0.75 0.77
80.04 85.87
53.54 70.77
26.79 47.04 x x x x
SVM 90.99 93.2 x
98.47 99.33 x
97.86 97.86 x
90.45 92.03 x
SVM 0.53 0.69 x
0.63 0.79 x
0.37 0.56 x
0.71 0.71 x
MM(k−1 ) , and 1.5 % gain in accuracy over the SVM 2 grams . In other cases the performance of DMM(k−1 ) is similar to that of the SVM with respect to different performance measures . In the case of Eukaryotic data set , DMM(k − 1 ) substantially outperforms MM(k−1 ) : For k = 2 , DMM(k−1 ) has 4 % , 2.5 % and 7 % higher accuracy ( respectively ) than MM(k − 1 ) on Cytoplasmic , Extracellular and Mitochondrial classes . In the case of the Cytoplasmic class , SVM outperforms DMM(k−1 ) by about 4 % in accuracy . However the correlation coefficient is similar in both cases ( 0.52 and 0.53 ) and MM(k −1 ) has better sensitivity than both DMM(k−1 ) and SVM . In the case of Extracellular class , the accuracy and specificity of both SVM and DMM(k − 1 ) are comparable , with MM(k − 1 ) having higher sensitivity and SVM higher correlation coefficient . On the Mitochondrial class , the accuracy of SVM is 6 % higher that that of the DMM(k − 1 ) , however DMM(k − 1 ) substantially outperforms SVM in terms of correlation coefficient ( 0.45 versus 0.37 ) and sensitivity ( 73.2 % versus 2679 % ) Finally , on the Nuclear class , SVM has higher accuracy by 2 % , and higher correlation coefficient ( 0.71 versus 0.63 for the DMM(k−1 ) model ) . In summary , on the subcellualr localization task , the DMM(k − 1 ) model shows better overall performance relative MM(k − 1 ) and DMM(k − 1 ) is competitive with SVM .
3 ) Reuters data : The results of generative and discriminative MM(k − 1 ) are presented in Table V for k = 2 . ( We have not included the results for the SVM with k = 2 since the number of 2 gram counts needed to be input to SVM is 3002 which makes both space and run time needs of
Class Peri
Extr
Ctpl
Peri
Extr
Ctpl k 2 3 4 2 3 4 2 3 4 k 2 3 4 2 3 4 2 3 4 x x x x
97.64 99.44
93.68 94.88
90.17 92.47
90.17 88.26
84.07 87.2 82.13 94.01 94.88 86.44 90.59 91.21 86.02
87.67 97.61 85.1 96.09 99.08 87.78 76.89 75.92 81.36
DMM MM SVM DMM MM SVM 92.7 82.91 86.78 97.23 82.57 95.05 94.78 86.84 90.01 91.35 86.36
87.77 97.74 85.56 98.52 99.17 88.4 70.61 75.47 81.36 x Correlation Coefficient DMM MM SVM DMM MM SVM 0.76 63.76 0.6 43.66 70.79 x 66.17 58.32 73.84 98.78 98.49 88.6
0.54 0.55 0.51 0.71 0.7 0.5 0.77 0.79 0.68
0.5 0.54 0.52 0.72 0.7 0.5 0.77 0.79 0.68
69.99 46.23 70.36 78.5 60
75.33 96.74 98.08 88.1
0.64 0.7 x
94.04 62.97
81.55 79.94
94.04 91.11
60.74 57.01
Sensitivity
0.77 0.82 x x x x x convergence of the gradient and were set ( based on some exploratory runs ) to 0.01 and 0.5 respectively . When training the SVM , we have used the counts of the k grams of the sequences as the input featues and linear kernel , which is equivalent to using the sequence kernel proposed by Leslie et . al . [ 12 ] . The results for SVM 4 grams are not presented because in this case we need 204 input features leading to excessively slow run times .
1 ) Kinase dataset : The results for the Kinase dataset are summarized in Table II .
For k = 2 there is a 2 % gain in accuracy for the DMM(k−1 ) model over MM(k − 1 ) , with neither outperforming the other for k = 3 , 4 . The performance of DMM(k − 1 ) in this case is comparable with that of the SVM , and for k = 3 , both DMM(k−1 ) and MM(k − 1 ) outperform the SVM .
2 ) Subcellular Localization dataset :
In our experiments with the subcellular localization classification task , to facilitate direct comparisons with previous studies [ 4 ] [ 11 ] the task is set up as that of learning a set of binary classifiers ( one for each class ) .
Tables
III and
IV summarize the performance of the generative and discriminative models and the SVM .
With k = 2 , for DMM(k − 1 ) , we observe a small ( 1 % ) improvement in accuracy for Extracellular class over
TABLE V
ACCURACY , SENSITIVITY , SPECIFICITY AND CORRELATION COEFFICIENT
ON REUTERS 10 CATEGORIES FOR MM(k − 1 ) AND DMM(k − 1 )
Accuracy
Sensitivity data acq corn crude earn grain interest money fx ship trade wheat data acq corn crude earn grain interest money fx ship trade wheat
DMM MM DMM 89.53 95.27 98.21 64.29 90.86 97.35 97.87 96.59 89.86 97.49 51.1 97.5 82.12 97.07 85.06 98.86 80.17 97.5 70.42 98.13 Correlation Coefficient
MM 88.01 67.86 89.24 95.83 85.81 47.32 79.89 79.31 75.86 76.06
95.82 98.21 97.13 97.86 97.5 97.4 97.34 98.9 98.01 98.25
Specificity
DMM MM DMM 96.87 0.86 0.55 98.91 0.79 97.75 0.92 95.96 0.76 97.85 0.63 99.4 0.74 97.93 0.8 99.24 0.69 98.13 98.75 0.62
98 98.7 97.6 98.87 98.1 99.5 98.35 99.49 98.8 98.75
MM 0.87 0.56 0.77 0.95 0.75 0.61 0.75 0.8 0.72 0.65 our current SVM implementation rather prohibitive ) . As seen from Table V , the accuracies of DMM(k − 1 ) and MM(k − 1 ) are comparable , with the MM(k − 1 ) slightly outperforming the DMM(k − 1 ) . However , in terms of other performance measures eg , sensitivity , we observe that for most of the categories DMM(k − 1 ) outperforms MM(k−1 ) , and that for categories “ interest ” and “ grain ” DMM(k − 1 ) has a higher correlation coefficient as well .
V . SUMMARY AND DISCUSSION
A . Summary and Conclusion
In this paper , we have described a discriminative approach to the training of sequence classifiers and provided empirical exploration of generative and discriminative approaches for classification in biological and text domains . The proposed classifier – DMM(k − 1 ) – is trained to maximize the conditional likelihood function of the data based on the likelihood function of Markov Model of order k − 1 . The algorithm for training a DMM(k − 1 ) classifier initializes the parameters of the model based on the parameters of its generative counterpart – MM(k − 1 ) – and iteratively updates the parameters using gradient ascent to maximize the conditional likelihood . We compared the performance of DMM(k − 1 ) , MM(k − 1 ) , and SVM sequence classifiers on protein function prediction , subcellular localization prediction , and text categorization tasks . As the experimental results show , DMM(k − 1 ) marginally outperforms MM(k − 1 ) in the human kinase data set in terms of accuracy . On the Eukaryotic protein cellular localization task , DMM(k − 1 ) outperforms MM(k − 1 ) by a much wider margin ( 2.4 % to 7 % ) in terms of accuracy on several classes . In these cases , the performance of the DMM(k − 1 ) is comparable to that of SVM . We have also observed cases in which MM(k − 1 ) outperforms DMM(k − 1 ) ( eg , for Nuclear class ) or SVM outperforms DMM(k − 1 ) ( eg , for the Mitochondrial class ) . However , SVM is outperformed by DMM(k − 1 ) in terms of sensitivity by a wide margin on the Mitochondrial class . In summary , on the subcellualr localization task , the DMM(k − 1 ) shows better overall performance relative MM(k − 1 ) and DMM(k − 1 ) is competitive with SVM . On the text classification task , generative and discriminative MM(k − 1 ) models had similar accuracy . But it is worth noting that the discriminative model exhibited higher sensitivity , whereas the generative model had higher specificity . In complex classification tasks , no single performance measure captures all relevant aspects of classifier performance . Hence it is useful to consider multiple performance criteria in evaluating learning algorithms [ 3 ] . Furthermore , in specific applications , there often arises a need to trade off some performance measures against others .
MM(k − 1 ) model has the advantage of training a classifier in one pass through the training data . It also lends itself to incremental update as new training data become available without the need to revisit previously processed training data . In contrast , DMM(k − 1 ) requires several passes through the training data and is less amenable to incremental update although in an online mode of training , incremental update of parameters is feasible although optimality of the parameter estimates ( with respect to correspondence with local maximum of the conditional likelihood function ) cannot be guaranteed without the ability to revisit previously processed training data . SVM algorithm relies on computationally expensive optimization that does not lend itself to incremental update without revisiting previously processed training data . On the other hand , SVM is more sophisticated than MM(k−1 ) model in terms of controlling the complexity of the classifier to avoid overfitting . The results presented in this paper suggest that a relatively small number of iterations in discriminative training of DMM(k − 1 ) model initialized with the parameters of the corresponding MM(k − 1 ) can often result in performance that is comparable to that of SVM on several sequence classification tasks .
B . Related Work
The sequence classifiers introduced in this paper are the discriminative counterparts of generative models namely , Markov Model(k − 1 ) introduced by Peng et . al . [ 16 ] which are equivalent to Na¨ıve Bayes(k ) model introduced by Andorf et . al . [ 1 ] and shown to outperform Na¨ıve Bayes in sequencebased protein function classification [ 1 ] , as well as text classification [ 16 ] , when sufficient training data are available . Rubinstein and Hastie [ 21 ] presented a general approach for obtaining a discriminative model given a generative model . They have also analyzed Na¨ıve Bayes and its discriminative counterpart Generalized Additive Model .
Ng and Jordan [ 15 ] analyzed the dependence between the performance of generative and discriminative model and the size of the data used for training . They used Na¨ıve Bayes and Linear Regression to support the results obtained by theoretical analysis . They have observed that with limited data , the discriminative models may have lower accuracy than the generative models .
McCallum [ 13 ] described discriminative probabilistic graphical models in the form of Conditional Random Fields ( CRFs ) for speech recognition . Taskar et . al . [ 22 ] presented Discriminative Probabilistic Models for relational data by using conditional Markov network built over relational data . Grossman and Domingos [ 10 ] have described an approach for learning parameters that maximize conditional likelihood function in Bayesian Networks instead of the likelihood function . They showed that the resulting model is more accurate than its generative counterpart . They noted that optimization of the conditional likelihood function is computationally infeasible due to the complexity of structure search .
Roose et . al . [ 20 ] have recently shown that for special cases of network structures , the discriminative training of Bayesian Networks is equivalent to logistic regression problem . Markov Model of order k − 1 examined in this paper is a special case of a Bayesian Network , with additional topological structure . This eliminates the need for structure search , yielding gradient based algorithm for optimizing the parameters of the resulting sequence classifier introduced in this paper . The discriminative sequence classifier is initialized with the parameters obtained from the generative model ( which can be estimated in a single pass through the training data ) . Further training tunes the parameters to improve the conditional likelihood .
Finally , there is a growing interest in hybrid models . Hybrid models are the models which combine generative and discriminative learning . Bouchard and Triggs [ 5 ] have proposed a Generative Discriminative Trade off method ( GTD ) as a way of combining general classes of generative and discriminative classifiers . Raina et . al . [ 18 ] proposed a model that combines Na¨ıve Bayes Multinomial model and Logistic Regression , and showed that their hybrid model has lower error rate than either Na¨ıve Bayes or Logistic Regression .
C . Future Work
Ongoing research is aimed at : 1 ) Development of sophisticated regularization methods ( eg , maximizing the margin of separation between classes ) to avoid overfitting on the training data in discriminative training .
2 ) Exploration of ways to synergistically exploit the strengths of discriminative as well as generative models for sequence classification .
3 ) Exploration of extensions of the algorithms proposed in this paper to higher dimensional dependency structures ( eg 2 dimensional images as opposed to 1 dimensional strings ) .
4 ) Applications of the resulting sequence classification methods in bioinformatics and related applications .
ACKNOWLEDGMENT
Research supported in part by grant from the National
Institutes of Health ( GM 066387 ) to Vasant Honavar .
REFERENCES
[ 1 ] C . Andorf , A . Silvescu , D . Dobbs , and V . Honavar . Learning classifiers for assigning protein sequences to gene ontology ( GO ) functional families . In Proceedings of the Fifth International Conference On Knowledge Based Computer Systems ( KBCS ) , 2004 .
[ 2 ] R . D . Appel , A . Bairoch , and D . F . Hochstrasser . A new generation of information retrieval tools for biologists : the new example of ExPASy www server . Trenchs Biochem . Sci , 19:258–260 , 1994 .
[ 3 ] P . Baldi and S . Brunak . Bioinformatics : The Machine Learning Ap proach . MIT Press , Cambridge , MA , 1998 .
[ 4 ] M . Bhasin and G . P . S . Raghava . ESLpred : SVM based method for subcellular localization of eukaryotic proteins using dipeptide composition and PSI BLAST . Nucleic Acids Research , 32 , 2004 .
[ 5 ] G . Bouchard and B . Triggs . The trade off between generative and discriminative classifiers . In Proceedings to IASC International Symposium on Computational Statistics ( CompStat ) , 2004 .
[ 6 ] E . Charniak . Statistical Language Learning ( Language , Speech , and
Communication ) . MIT Press , 1996 .
[ 7 ] B . Y . M . Cheng , J . G . Carbonell , and J . Klein Seetharaman . Protein classification based on text document classification techniques . Proteins , 1(58):955–70 , 2005 .
[ 8 ] R . G . Cowell , A . P . Dawid , S . L . Lauritzen , and D . J . Spiegelhalter .
Probabilistic networks and expert systems . Springer , 1999 .
[ 9 ] S . Dumais , J . Platt , D . Heckerman , and M . Sahami . Inductive learning algorithms and representations for text categorization . In CIKM ’98 : Proceedings of the seventh international conference on Information and knowledge management , pages 148–155 . ACM Press , 1998 .
[ 10 ] D . Grossman and P . Domingos . Learning bayesian network classifiers In Proceedings to the 21st by maximizing conditional International Conference On Machine Learning ( ICML ) , 2004 . likelihood .
[ 11 ] S . Hua and Z . Sun . Support vector machine approach for protein subcellular localization prediction . Bioinformatics , 17(8):721–8 , 2001 . [ 12 ] C . Leslie , E . Eskin , J . Weston , and W . Noble . Mismatch string kernels In Advances in Neural Information for SVM protein classification . Processing Systems ( NIPS ) 15 , 2002 .
[ 13 ] A . McCallum . Efficiently inducing features of conditional random fields . In Proc . of Conference on Uncertainty in Artificial Intelligence ( UAI ) , 2003 .
[ 14 ] A . McCallum and K . Nigam . A comparison of event models for naive bayes text classification . In AAAI 98 Workshop on ” Learning for Text Categorization ” , 1998 .
[ 15 ] A . Ng and M . Jordan . On discriminative vs . generative classifiers : A comparison of logistic regression and naive bayes . 2002 .
[ 16 ] F . Peng , D . Shuurmans , and S . Wang . Augmenting naive bayes classifier using statistical n gram language modeling . Information Retrieval , 7(34):317–345 , 2004 .
[ 17 ] N . Qian . On the momentum term in gradient descent learning algorithms .
Neural Networks , 12:145–151 , 1999 .
[ 18 ] R . Raina , Y . Shen , A . Ng , and A . McCallum . Classificatin with hybrid In Advances in Neural Information generatve/discriminative models . Processing Systems ( NIPS ) 16 , 2004 .
[ 19 ] A . Reinhardt and T . Hubbard . Using neural networks for prediction of the subcellular location of proteins . Nucleic Acids Research , 26(9):2230– 2236 , May 1998 .
[ 20 ] T . Roos , H . Wettig , P . Gr¨unwald , P . Mullym¨aki , and H . Tirri . On discriminative bayesian network classifiers and logistic regression . Machine Learning , ( 59):267–296 , June , 2005 .
[ 21 ] D . Rubinstein and T . Hastie . Discriminative vs informative learning . In Proceedings of Knowledge Discovery and Data Mining ( KDD ) , 1997 . [ 22 ] B . Taskar , P . Abbeel , and D . Koller . Discriminative probabilistic models for relational data . In Proc . of Eighteenth Conference On Uncertainty in Artificial Intelligence ( UAI02 ) , Edmonton , Canada , 2003 .
[ 23 ] V . N . Vapnik . The Nature of Statistical Learning Theory . Springer
Verlag , New York , New York , 1995 .
[ 24 ] C . Yan , D . Dobbs , V . Honavar , and D . Dobbs . A two stage classifier for identification of proteinprotein interface residues . Bioinfromatics , 20(S1):i371–i378 , 2004 .
[ 25 ] Z . Yuan . Prediction of protein subcellular locations using Markov chain models . FEBS Letters , 451(1):23–6 , 1999 .
