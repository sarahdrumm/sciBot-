Template Based Privacy Preservation in Classification Problems ∗
Ke Wang
Simon Fraser University BC , Canada V5A 1S6 wangk@cssfuca
Benjamin C . M . Fung Simon Fraser University BC , Canada V5A 1S6 bfung@cssfuca
Philip S . Yu
IBM T . J . Watson Research Center
Hawthorne , NY 10532 psyu@usibmcom
Job Cook Artist Doctor Trader Trader Trader Clerk Clerk
Job Cook Artist Doctor ⊥Job ⊥Job
US
France
US UK UK
Current Current Never
Country Child Bankruptcy Rating 0G/4B 1G/3B 4G/2B 4G/0B 1G/0B 1G/0B 3G/0B 1G/0B Total :
No No Yes No No No No No
Canada Canada Canada
Never Never Never
Discharged
Discharged
Table 1 . The initial table
US
Country Child Bankruptcy Rating 0G/4B 1G/3B 4G/2B 5G/0B 5G/0B Total :
France US ⊥Country ⊥Country
Current Current Never Never
No No Yes No No
Discharged
#Rec
4 4 6 4 1 1 3 1 24
#Rec
4 4 6 5 5 24
Table 2 . The suppressed table
Example 1 ( Running Example ) . Table 1 contains records about bank customers . After removing irrelevant attributes , each row represents the duplicate records and the count . The class attribute Rating contains the class frequency of credit rating . For example , 0G/4B represents 0 Good and 4 Bad . Suppose that the bank ( the data owner ) wants to release the data to a data mining firm for classification analysis on Rating , but does not want the data mining firm to infer the bankruptcy state Discharged using the attributes Job and Country . For example , out of the 5 individuals with Job = T rader and Country = U K , 4 has the Discharged status . Therefore , the rule {T rader , U K} → Discharged has support 5 and confidence 80 % . If the data owner tolerates no more than 75 % confidence for this inference , the data is not safe for release . In general , currently bankrupted customers have a bad rating and simply removing the Bankruptcy column loses too much information for the classification analysis .
Abstract
In this paper , we present a template based privacy preservation to protect against the threats caused by data mining abilities . The problem has dual goals : preserve the information for a wanted classification analysis and limit the usefulness of unwanted sensitive inferences that may be derived from the data . Sensitive inferences are specified by a set of “ privacy templates ” . Each template specifies the sensitive information to be protected , a set of identifying attributes , and the maximum association between the two . We show that suppressing the domain values is an effective way to eliminate sensitive inferences . For a large data set , finding an optimal suppression is hard , since it requires optimization over all suppressions . We present an approximate but scalable solution . We demonstrate the effectiveness of this approach on real life data sets .
1 . Introduction
Knowledge Discovery in Databases ( KDD ) or data mining aims at finding out new knowledge about an application domain using collected data on the domain , typically data on individual entities like persons , companies , transactions . Naturally , the general concerns over data security and individual privacy are relevant for data mining . The first concern relates to the input of data mining methods due to data access . Many techniques have been proposed [ 4 , 6 , 8 , 10 , 12 , 15 , 18 ] to address this problem while preserving the benefits of data mining . The second concern is related to the output of data mining methods . Although the output of data mining methods are aggregate patterns , not intended to identify single individuals , they can be used to infer sensitive information about individuals . In this paper , we consider the privacy threats caused by such “ data mining abilities ” . Let us first consider an example .
∗Research was supported in part by a research grant from Emerging Opportunity Fund of IRIS , and a research grant from the Natural Sciences and Engineering Research Council of Canada .
Proceedings of the Fifth IEEE International Conference on Data Mining ( ICDM’05 )
1550 4786/05 $20.00 © 2005 IEEE problem area in the data to minimize unnecessary information loss .
Given that the classification task is known in advance , one may ask why not releasing a classifier , which likely contains less information , instead of the data . This could be an option if the data owner knows exactly how the data recipient may analyze the data . Often , this information is unknown . For example , in visual data mining , the data miner has to visualize data records in a certain way to guide the search , and in this case releasing data records is essential . Some classifiers such as the k nearest neighbor are actually the data itself , and some are better in accuracy whereas others are better in interpretability . The data owner may not have the expertise to make such decisions because sophisticated data analysis is not part of its normal business .
The contributions of this work can be summarized as follows . First , we formulate a template based privacy preservation problem . Second , we show that suppression is an effective way to eliminate sensitive inferences . However , finding an optimal suppression is a hard problem since it requires optimization over all possible suppressions . For a table with a total of q distinct values on masking attributes , there are 2q possible suppressed tables . We present an approximate solution based on a search that iteratively improves the solution and prunes the search whenever no better solution is possible . We evaluate this method on real life data sets .
2 . Related Work
Most works on privacy preservation address the concern related to the input of data mining tools where private information is revealed directly by inspection of the data without sophisticated analysis [ 4 , 6 , 8 , 10 , 12 , 15 , 18 ] . Our work is more related to the concern over the output of data mining methods , where the threats are caused by what data mining tools can discover . We focus on this group of works .
Kloesgen [ 13 ] pointed out the problem of group discrimination where the discovered group behavior is attached to all members in a group , which is a form of inferences . Clifton [ 3 ] suggested to eliminate sensitive inferences by limiting the data size . Recently , Kantarcioglu et al . [ 11 ] defined an evaluation method to measure the loss of privacy due to releasing data mining results . However , they did not propose a solution to prevent the adversary from getting data mining results that violate privacy .
Verykios et al . [ 17 ] proposed several algorithms for hiding association rules in a transaction database with minimal modification to the data . The general idea is to hide one rule at a time by either decreasing its support or its confidence ; this is achieved by removing items from transactions . They need to assume that frequent itemsets of rules are disjoint in order to avoid high time complexity . We consider the
The private information illustrated in this example has the form “ if x then y ” , where x identifies a group of individuals and y is a sensitive value . We consider this inference “ private ” if its confidence is high , in which case an individual in the group identified by x tends to be linked to y . The higher the confidence , the stronger the linking . In the context of data mining , association or classification rules [ 1 , 14 ] are used to capture general patterns of large populations for summarization and prediction , where a low support means the lack of statistical significance . In the context of privacy protection , however , inference rules are used to infer sensitive information about the existing individuals , and it is important to eliminate sensitive inferences of any support , large or small . In fact , a sensitive inference in a small group could present even more threats than in a large group because individuals in a small group are more identifiable [ 16 ] .
The problem considered in this paper can be described as follow . The data owner wants to release a version of data in the format
T ( M1,··· , Mm , Π1,··· , Πn , Θ ) to achieve two goals . The classification goal is to preserve as much information as possible for modeling the class attribute Θ . The privacy goal is to limit the ability of data mining tools to derive inferences about sensitive attributes Π1 , . . . , Πn . This requirement is specified using one or more templates of the form , 'IC → π , hff , where π is a value from some Πi , inference channel IC is a set of attributes not containing Πi , and h is a threshold on confidence . The data satisfies 'IC → π , hff if every matching inference has a confidence no more than h . The privacy goal can be achieved by suppressing some values on masking attributes M1 , . . . , Mm . We are interested in a suppression of values for M1 , . . . , Mm that achieves both goals . the inference {T rader , U K} →
In Example 1 ,
Discharged violates the template
'{Job , Country} → Discharged , 75%ff .
To eliminate this inference , we can suppress Trader and Clerk to a special value ⊥Job , and suppress UK and Canada to a special value ⊥Country , see Table 2 . Now , the new inference {⊥Job,⊥Country} → Discharged has confidence 50 % , less than the specified 75 % . No information is lost since Rating does not depend on the distinction of the suppressed values .
The use of templates provides several flexibilities for specifying the notion of privacy : selectively protecting certain values π while not protecting other values ; specifying a different threshold h for a different template IC → π ; specifying multiple inference channels IC ( even for the same π ) ; specifying templates for multiple sensitive attributes Π . These flexibilities provide not only a powerful representation of privacy requirements , but also a way to focus on the
Proceedings of the Fifth IEEE International Conference on Data Mining ( ICDM’05 )
1550 4786/05 $20.00 © 2005 IEEE
'IC → π , hff if Conf(IC → π ) ≤ h . T satisfies a set of templates if T satisfies every template in the set .
.
. , h ≥ h
Some template may be “ redundant ” once we have some other template . The next lemma considers one such case , which can be used to remove “ redundant ” templates . Lemma 31 Consider two templates 'IC → π , hff and . , and IC ⊆ IC . → π ff If π = π 'IC . , then , h . ) ≥ Conf(IC → π ) , and ( 2 ) if T . → π ( 1 ) Conf(IC satisfies 'IC . → π .ff , T satisfies 'IC → π , hff . . , h To see ( 1 ) , consider the partition {P1,··· , Pk} of the records matching ic according to the values x1,··· , xk on X = IC If the partitioning decreases the confidence of ic → π in some Pi , it must increase the confidence in some other Pj . Therefore , the partitioning does not decrease the maximum confidence in Pi ’s . We omit the detailed proof . ( 2 ) follows immediately from ( 1 ) .
. − IC .
If T violates a set of templates , ( under certain conditions ) we can suppress some values on masking attributes Mj to make it satisfy the templates . The suppression of a value on Mj means replacing all occurrences of the value with the special value ⊥j . Thus , all suppressed values on Mj are represented by the same ⊥j . One question is what makes us believe that suppression can reduce the confidence of sensitive inference . Indeed , if suppression actually increases the confidence , we are not getting any closer to the privacy goal but losing information for the classification goal . Below , we show that suppression never increases Conf(IC → π ) . Consider suppressing a value v in Mj to ⊥j . The suppression affects only the records that contain v or ⊥j before j denote ⊥j before and after the suppression . Let ⊥j and ⊥ . j covers v but ⊥j the suppression . The difference is that ⊥ . does not . After the suppression , two inferences {ic , v} → π and {ic,⊥j} → π become one inference {ic,⊥ . j} → π . We have the next lemma , which has a similar proof as that of Lemma 31 Lemma 32 max{conf(ic , v → π ) , conf(ic,⊥j → π)} ≥ conf(ic,⊥ . j → π ) . The lemma says that , by suppressing a value , Conf(IC → π ) does not go up . This property provides the basis for employing suppression to reduce Conf(IC → π ) . Corollary 31 Conf(IC → π ) is non increasing with respect to suppression . From Corollary 3.1 , the most suppressed T , where all values for Mj are suppressed to ⊥j for every Mj in ∪IC , has the minimum Conf(IC → π ) . Therefore , if this table does not satisfy the templates , no suppressed T does . Lemma 33 Given a set of templates , there exists a suppressed table T that satisfies the templates if and only if the most suppressed T satisfies the templates . use of the data for classification analysis . Instead of minimizing pure syntax changes to the data , we minimize the information lose for this analysis and eliminate all sensitive inferences including those with a low support . We can efficiently handle overlapping inference rules .
Suppression of domain values was employed in [ 2 , 10 , 15 ] for achieving k anonymity . The k anonymity requirement states that no identifying attributes identify a group of size smaller than k . Therefore , if such identifying attributes are used to link the data to an external table , all the records in each group ( at least k ) will behave in the same way and are difficult to be distinguished . However , this notion does not address sensitive inference on the identified groups .
In database security , Farkas et al . [ 7 ] conducted a survey on inference control . In multilevel secure databases , the focus is detecting and removing inference channels by combining meta data with data . For example , it is possible for a user to use a series of unsuspicious queries to infer sensitive data in the database . [ 19 ] proposed a method to detect such queries using functional dependencies . This type of inferences is different from ours .
In statistical databases , the focus is limiting the ability of inferring confidential information by correlating different statistics . For example , Cox [ 5 ] proposed the k% dominance rule which suppresses a sensitive cell if the attribute values of two or three entities in the cell contribute more than k % of the corresponding SUM statistic . Such “ cell suppression ” suppresses the count or other statistics stored in a cell of a statistical table , which is very different from the “ value suppression ” considered in our work .
3 . The Problem
Consider a table T ( M1 , . . . , Mm , Π1 , . . . , Πn , Θ ) . Mj are called masking attributes . Πi are called sensitive attributes . Θ is called the class attribute . All attributes have a categorical domain . For each Mj , we add the special value ⊥j to its domain . For a domain value v , att(v ) denotes the attribute of v . Mj and Πi are disjoint . The data owner specifies sensitive inferences using templates . A template has the form 'IC → π , hff . π is sensitive value from some Πi . IC , called an inference channel , is some set of attributes not containing Πi . h is a confidence threshold . An inference for 'IC → π , hff has the form ic → π , where ic contains values from the attributes in IC . The confidence of ic → π , written conf(ic → π ) , is the percentage of the records that contain π among those that contain the values in ic , that is , s(ic , π)/s(ic ) , where s(V ) denotes the number of records containing the values in V . Conf(IC → π ) denotes the maximum conf(ic → π ) for all ic over IC .
Definition 3.1 ( Privacy Templates ) . T satisfies a template
Proceedings of the Fifth IEEE International Conference on Data Mining ( ICDM’05 )
1550 4786/05 $20.00 © 2005 IEEE the most suppressed , or the least disclosed , state .
41 Find the Winner ( Line 4 )
This step finds the winner w , ie , the valid and beneficial candidate from ∪Supj that has the highest Score . Since disclosing a value v gains information and loses privacy , Score(v ) measures the information gain [ 14 ] per unit of privacy loss , defined as
Score(v ) = Inf oGain(v )
P rivLoss(v ) + 1 .
( 1 )
Consider the set of suppressed records that currently contain ⊥j , denoted T [ ⊥j ] . Disclosing v from Supj means replacing ⊥j with v in all records in T [ ⊥j ] that originally contain v . Let Tv denote the set of such records , and let T [ v ] denote Tv after replacing ⊥j with v . The disclosure of v is to replace T [ ⊥j ] with T [ v ] and T [ ⊥j ] − Tv . Inf oGain(v ) is the information gain of this replacement . Inf oGain(v ) depends only on the class frequency and count statistics on the single attribute att(v ) in T [ ⊥j ] , T [ v ] and T [ ⊥j ] − Tv . P rivLoss(v ) measures the privacy loss , defined as the average increase of Conf(IC → π ) over all affected IC → π , ie , those IC such that att(v ) is contained in IC , avg{Confv(IC → π ) − Conf(IC → π )
| att(v ) ∈ IC} , where Conf and Confv represent the confidence before and after disclosing v .
Computing Confv efficiently is a challenge since it may involve count statistics on a combination of several attributes . It is inefficient to perform the disclosure of v in order to compute Confv . The key to the scalability of our algorithm is incrementally updating Score(v ) in each iteration for valid/benefical candidates v in ∪Supj . We will present this update algorithm in Section 43
42 Disclose the Winner ( Line 5 )
This step discloses the winner w and replaces ⊥j with w in the suppressed records in T [ ⊥j ] that originally contain w . It requires accessing the raw records of these suppressed records . The following data structure facilitates the direct access to such raw records . The idea is to partition raw records according to their suppressed records on ∪IC . Definition 4.1 ( VIP ) . Value Indexed Partitions ( VIP ) contains the set of suppressed records over ∪IC . Each suppressed record represents the set of raw records from which it comes , called a partition . Each raw record is in exactly one partition . For each disclosed value x ( including ⊥ ) on an attribute in ∪IC , P [ x ] denotes a partition represented by a suppressed record containing x . Link[x ] links up all P [ x ] ’s , with the head stored with the value x .
Definition 3.2 ( Inference Problem ) . Given a table T and a set of templates , the inference problem is to ( 1 ) decide whether there exists a suppressed T that satisfies the set of templates , and if yes , ( 2 ) produce a satisfying suppressed T that preserves as much information as possible for modeling the class attribute .
4 . The Algorithm
Given a table T and a set of templates {'IC → π , hff} , our algorithm iteratively “ discloses ” the domain values starting from the most suppressed T in which each masking attribute Mj in ∪IC contains only ⊥j , ie , the set of suppressed values , Supj , contains all domain values in Mj . At any time , we have a set of suppressed records , with duplicates being collapsed into a single record with a count . In each iteration , we disclose one value from some Supj . To disclose a value v from Supj , we do exactly the opposite of suppressing v , ie , replace ⊥j with v in all suppressed records that currently contain ⊥j and originally contain v before suppression . This process repeats until no disclosure is possible without violating the set of templates . From Corollary 3.1 , any further disclosure leads to no solution .
Algorithm 1 Progressive Disclosure Algorithm ( PDA ) 1 : suppress every value of Mj to ⊥j where Mj ∈ ∪IC ; 2 : every Supj contains all domain values of Mj ∈ ∪IC ; 3 : while there is a valid/beneficial candidate in ∪Supj do find the winner w of highest Score(w ) from ∪Supj ; disclose w on T and remove w from ∪Supj ; update Score(x ) and the valid/beneficial status for x in ∪Supj ;
4 : 5 : 6 :
7 : end while 8 : output the suppressed T and ∪Supj ;
The above algorithm , called Progressive Disclosure Algorithm ( PDA ) , is presented in Algorithm 1 . At each iteration , if some Supj contains a “ valid ” and “ beneficial ” candidate for disclosure , the algorithm chooses the winner candidate w that maximizes the score function denoted Score . A disclosure is valid if it leads to a table satisfying the set of templates . A disclosure from Supj is beneficial if more than one class is involved in the records containing ⊥j . Next , the algorithm discloses w , and updates the Score and status of every affected candidate . We focus on the three key steps ( Lines 4 to 6 ) in the rest of this section .
Example 2 . Consider the templates :
'{Job , Country} → Discharged , 50%ff , '{Job , Child} → Discharged , 50%ff .
Initially , the values of Job , Country and Child in Table 1 are suppressed to ⊥Job , ⊥Country and ⊥Child , and ∪Supj contains all domain values in Job , Country , and Child . This is
Proceedings of the Fifth IEEE International Conference on Data Mining ( ICDM’05 )
1550 4786/05 $20.00 © 2005 IEEE
Initial
After Disclosure Clerk
After Disclosure Canada
Job
Country
Child
# of Recs .
Total 5
24
Job
Country
Child
# of Recs .
Total 4
20
Head of Link[
Job ]
Clerk
Country
Child
1
4
Job
Country
Child
Job
Canada
Child
Clerk
Canada
Child
# of Recs .
Total 4
19
0
1
1
4
IC1 Tree
Job
Country s(ic , ) s(ic )
Initial
Root
Job
Country
5 24
Conf(IC
)
20.83 %
IC2 Tree
Job
Child s(ic , s(ic )
)
Conf(IC
)
Root
Job
Child
5 24
20.83 %
Head of Link[ Country ]
Figure 1 . Evolution of VIP ( π = Discharged )
Head of Link[Canada ]
After Disclosure Clerk
After Disclosure Canada
Root
Root
Job
Country
4 20
Job
Child
4 20
Clerk
Country
1 4
25 %
Clerk
Child
1 4
25 %
Figure 2 . Evolution of IC trees
Job
Root
Job
Clerk
Country
Canada
Canada
4 19
0 1
Root
Job
Child
4 20
1 4
25 %
Clerk
Child
1 4
25 %
To disclose the winner w , we follow the link Link[⊥w ] and find all suppressed records that contain ⊥w , and through these suppressed records , access the represented raw records . Let ⊥w denote the special ⊥ value for the attribute of w . The following example illustrates the procedure of disclosing w in VIP .
Example 3 . Consider the templates in Example 2 . In Figure 1 , the left most VIP has the most suppressed record '⊥Job , ⊥Country , ⊥Childff on three links : Link[⊥Job ] , Link[⊥Country ] , Link[⊥Child ] . The shaded fields “ Total ” and “ π ” contain the number of raw records suppressed |P| ) and the number of those records containing ( ie , Discharged . Suppose the winner is Clerk . We create a new suppressed record 'Clerk , ⊥Country , ⊥Childff , as shown in the middle VIP , to represent 4 raw records . We add this new suppressed record to Link[⊥Country ] , Link[⊥Child ] , and to the new Link[Clerk ] . Finally , we remove Clerk from Supj . The next winner , Canada , refines the two partitions on Link[⊥Country ] , resulting in the right most VIP . The overhead of maintaining these links is proportional to the length of Link[⊥w ] and is negligible .
For the purpose of updating Score(x ) efficiently , we also maintain the following count statistics for each partition P in the VIP : for every class θ and sensitive value π , ( 1 ) |P| , s(θ ) and s(π ) , ( 2 ) for each masking attribute Mj on which P has the value ⊥j , for every value v in Supj , s(v ) , s({v , θ} ) and s({v , π} ) . All s( ) refer to the partition P . These count statistics are stored together with the partition P and , on disclosing w , are updated as we scan the partitions on Link[⊥w ] .
We should mention that this step ( Line 5 ) is the only time that raw records are accessed in our algorithm .
43 Update Score and Status ( Line 6 )
This step updates Score(x ) and the valid/beneficial status for x in ∪Supj . Inf oGain(x ) is affected only if x and w are from the same attribute . Inf oGain(x ) can be updated using the count statistics stored at the partitions on Link[⊥w ] , in the same scan as maintaining the count statistics in the previous step . Mark x as beneficial if there is more than one class in these partitions . To update P rivLoss(x ) , for every IC → π , we first update Conf(IC → π ) using Confw(IC → π ) that was computed in the previous iteration . Next , we update Confx(IC → π ) for x in ∪Supj . Observe that if att(x )
Proceedings of the Fifth IEEE International Conference on Data Mining ( ICDM’05 )
1550 4786/05 $20.00 © 2005 IEEE is not in IC , Confx(IC → π ) = Conf(IC → π ) ; if att(w ) is not in IC , Confx(IC → π ) is not affected by the disclosure of w . Therefore , we need to update Confx(IC → π ) only if both att(x ) and att(w ) are contained in IC . We propose the following IC tree structure to maintain Conf(IC → π ) . Definition 4.2 ( IC trees ) . For each IC = {A1 , . . . , Au} , the IC tree is a tree of u levels , where level i > 0 represents the values for Aj . A root to leaf path represents an existing ic on IC in the suppressed T , with s(ic ) and s(ic , π ) stored at the leaf node .
Recall that conf(ic → π ) = s(ic , π)/s(ic ) . Conf(IC → π ) is given by max{conf(ic → π)} for all ic in the IC tree . All templates 'IC → π , hff with the same IC can share a single IC tree by keeping s(ic , π ) separately for different π . We update IC trees on disclosing w . Here is an example . Example 4 . Figure 2 shows the initial IC1 tree and IC2tree on the left , where IC1 = {Job , Country} and IC2 = {Job , Child} . On disclosing Clerk , {Clerk,⊥Country} and {Clerk,⊥Child} are created in IC1 tree and IC2 tree . Next , on disclosing Canada , {Clerk,⊥Country} is refined into {Clerk , Canada} in IC1 tree , and a new {⊥Job , Canada} is split from {⊥Job,⊥Country} . To compute s(ic ) and s(ic , π ) for these ic ’s , we access all partitions P [ Canada ] in one scan of Link[Canada ] in the VIP : s(⊥Job , Canada ) = 1 , s(⊥Job , Canada , π ) = 0 , s(⊥Job,⊥Country ) = 20 − 1 = 19 , s(⊥Job,⊥Country , π ) = 4 − 0 = 4 . As discussed above , for x ∈ ∪Supj , if both att(x ) and att(w ) are in IC , we need to update Confx(IC → π ) . Recall that Confx(IC → π ) is the maximum conf(ic → π ) after disclosing x . Therefore , we can treat x as if it were disclosed , and computing s(ic , x ) , s(ic , x , π ) , s(ic,⊥x ) and s(ic,⊥x , π ) as we did for w . The only difference is that we perform these computations on a copy because we do not actually update the VIP and IC trees for x . Confx(IC → π ) is the new maximum conf(ic → π ) in the IC tree . If Confx(IC → π ) ≤ h , mark x as valid .
5 . Experimental Evaluation
We evaluated how well the proposed method can preserve the usefulness for classification for some highly restrictive limiting requirements . We also evaluated the efficiency of this method . We adopted two widely used benchmarks from the UCI repository [ 9 ] : Japanese Credit Screening and Adult . We removed all continuous attributes since our method focuses on only categorical attributes . We used the C4.5 classifier [ 14 ] for classification modeling . All experiments were conducted on an Intel Pentium IV 3GHz PC with 1GB RAM .
Templates . We chose the best N attributes for the classification analysis , denoted TopN , as the sensitive attributes Π1 , . . . , ΠN . Simply removing such sensitive attributes will compromise the classification goal . The top most attribute is the attribute at the top of the C4.5 decision tree . Then we removed this attribute and repeated this process to determine the rank of other attributes . The remaining attributes were chosen as the masking attributes M1 , . . . , Mm . For each Πi , we choose the 50 % least frequent values as sensitive values . The rationale is that less frequent values are more vulnerable to inference attacks . Let {π1 , . . . , πk} denote the union of such values for all Πi . The template is 'IC → {π1 , . . . , πk} , hff , where IC contains all masking attributes . From Lemma 3.1 , this template is more restrictive than a set of multiple templates with each being a subset of IC ( for the same threshold h ) .
Errors to measure . The base error ( BE ) refers to the error for the original data without suppression . The suppression error ( SE ) refers to the error for the data suppressed by our method . The suppression was performed before splitting the data into the training set and the testing set . SE− BE measures the quality loss due to suppression , the smaller the better . We also compared with the error caused by simply removing all sensitive attributes , which is denoted by removal error ( RE ) . RE − SE measures the benefit of suppression over this simple method , and the larger the better . Finally , RE − BE measures the importance of sensitive attributes on classification . All errors are collected on the testing set .
44 The Cost Analysis
51 Japanese Credit Screening
The cost at each iteration can be summarized as two operations . The first operation scans the partitions on Link[⊥w ] for disclosing the winner w in VIP and maintaining some count statistics . The second operation simply makes use of the count statistics to update the score and status of every affected candidate without accessing data records . Thus , each iteration accesses only the records suppressed to ⊥w . The number of iterations is bounded by the number of distinct values in the masking attributes .
The Japanese Credit Screening data set , also known as CRX , is based on credit card application . There are 9 categorical attributes and a binary class attribute representing the application status succeeded or failed . After removing records with missing values , there are 465 and 188 records for the pre split training and testing respectively . In the UCI repository , all values and attribute names in CRX have been changed to meaningless symbols , eg , A1 . . . A15 . We consider the four template requirements : Top1 , Top2 , Top3
Proceedings of the Fifth IEEE International Conference on Data Mining ( ICDM’05 )
1550 4786/05 $20.00 © 2005 IEEE
Average SE RE
Average SE
RE
BE = 15.4 %
)
%
( r o r r E
50
45
40
35
30
25
20
15
10
BE = 17.6 %
)
%
( r o r r E
26
24
22
20
18
16
14
12
10
Reading Suppression
Writing Total
) s d n o c e s ( e m T i
250
200
150
100
50
0
Top1
Top2
Top3
Top4
Top1
Top2
Top3
Top4
TopN Sensitive Attributes ( a ) Classification error on CRX
TopN Sensitive Attributes ( b ) Classification error on Adult Figure 3 . Experimental results
0
200
400
600
800
1000
# of Records ( in thousands )
( c ) Scalability ( h=90 % ) and Top4 . BE = 154 % Table 3 shows the number of inferences above different confidence thresholds h in the original data . For example , the number of inferences that have a confidence larger than 90 % is 6 in CRX for Top4 .
4 . Having more sensitive attributes ( ie , a larger N in TopN ) implies that the removal of these attributes has a larger impact to classification . This is reflected by the increasing RE in Figure 3a .
5 . The algorithm took less than 2 seconds , including disk
I/O operations , for all the above experiments .
Let us take a closer look at the suppressed data for Top4 with h = 70 % . Some values of attributes A4 and A5 are suppressed , and the entire A13 is suppressed . Despite such vigorous suppression , SE = 15.4 % is equal to BE . In fact , there exist multiple classification structures in the data . When suppression eliminates some of them , other structures emerge to take over the classification . Our method makes use of such “ rooms ” to eliminate sensitive inferences while preserving the quality of classification .
52 Adult
The Adult data set is a census data previously used in [ 2 , 8 , 10 , 18 ] . There are 8 categorical attributes and a binary class attribute representing the income levels ≤50K or >50K . There are 30,162 and 15,060 records without missing values for the pre split training and testing respectively . Table 4 describes each categorical attribute . Top4 attributes are M , Re , E , S in that order . BE = 176 %
Attribute
Education ( E ) Occupation ( O ) Race ( Ra ) Sex ( S )
# of Values
16 14 5 2
Attribute
Marital status ( M ) Native country ( N ) Relationship ( Re ) Work class ( W )
# of Values
7 40 6 8
Table 4 . Attributes for the Adult data set
Threshold h CRX ( Top4 ) Adult ( Top4 )
10 % 30 % 50 % 70 % 90 % 40 1333
15 365
27 786
8 324
6 318
Table 3 . Number of inferences above h
Figure 3a depicts SE and RE for TopN averaged over h = 50 % , 70 % , 90 % . The dashed line represents BE . We summarize the results as follows :
1 . SE spans narrowly between 15.4 % and 16.5 % across different TopN . SE − BE is less than 1.1 % for all sets of templates considered . These results support that inference limiting and accurate classification can coexist . For example , from Table 3 , 15 inferences with a confidence higher than 50 % were eliminated for Top4 . Often , different ic ’s share some common values , and suppressing a few common values simultaneously eliminates multiple inferences .
2 . The minimum RE − SE is 10.1 % for Top1 , and the maximum RE − SE is 31.3 % for Top4 . These large gaps show a significant benefit of suppression over the removal of sensitive attributes .
3 . For all templates tested , the variance of SE is less than 0.6 % , suggesting that suppression is robust . It also suggests that protecting more sensitive attributes ( ie , a larger N in TopN ) or having a lower threshold h does not necessarily compromise the classification quality . In fact , as N increases , more sensitive attributes can help the classification .
Proceedings of the Fifth IEEE International Conference on Data Mining ( ICDM’05 )
1550 4786/05 $20.00 © 2005 IEEE real life data sets showed that the proposed approach preserves the information for classification modeling even for very restrictive privacy requirements .
References
[ 1 ] R . Agrawal , T . Imielinski , and A . N . Swami . Mining association rules between sets of items in large datasets . In Proc . of the 1993 ACM SIGMOD , pages 207–216 , 1993 .
[ 2 ] R . J . Bayardo and R . Agrawal . Data privacy through optimal In Proc . of the 21st IEEE ICDE , pages k anonymization . 217–228 , 2005 .
[ 3 ] C . Clifton . Using sample size to limit exposure to data min ing . Journal of Computer Security , 8(4):281–307 , 2000 .
[ 4 ] C . Clifton , M . Kantarcioglu , J . Vaidya , X . Lin , and M . Y . Zhu . Tools for privacy preserving data mining . SIGKDD Explorations , 4(2 ) , 2002 .
[ 5 ] L . H . Cox . Suppression methodology and statistical disclosure control . Journal of the American Statistics Association , Theory and Method Section , 75:377–385 , 1980 .
[ 6 ] A . Evfimievski , R . Srikant , R . Agrawal , and J . Gehrke . Privacy preserving mining of association rules . In Proc . of the 8th ACM SIGKDD , pages 217–228 , 2002 .
[ 7 ] C . Farkas and S . Jajodia . The inference problem : A survey .
SIGKDD Explorations , 4(2):6–11 , 2003 .
[ 8 ] B . C . M . Fung , K . Wang , and P . S . Yu . Top down specialization for information and privacy preservation . In Proc . of the 21st IEEE ICDE , pages 205–216 , Tokyo , Japan , 2005 .
[ 9 ] S . Hettich and S . D . Bay . The UCI KDD Archive , 1999 . http://kddicsuciedu
[ 10 ] V . S . Iyengar . Transforming data to satisfy privacy con straints . In Proc . of the 8th ACM SIGKDD , 2002 .
[ 11 ] M . Kantarcioglu , J . Jin , and C . Clifton . When do data minIn Proc . of the 2004 ACM ing results violate privacy ? SIGKDD , pages 599–604 , 2004 .
[ 12 ] J . Kim and W . Winkler . Masking microdata files . In ASA
Proc . of the Section on Survey Research Methods , 1995 .
[ 13 ] W . Kloesgen . Knowledge discovery in databases and data privacy . In IEEE Expert Symposium : Knowledge Discovery in Databases , 1995 .
[ 14 ] J . R . Quinlan . C4.5 : Programs for Machine Learning . Mor gan Kaufmann , 1993 .
[ 15 ] L . Sweeney . Datafly : A system for providing anonymity in medical data . In Proc . of the 11th International Conference on Database Security , pages 356–381 , 1998 .
[ 16 ] L . Sweeney . Achieving k anonymity privacy protection using generalization and suppression . International Journal on Uncertainty , Fuzziness , and Knowledge based Systems , 10(5):571–588 , 2002 .
[ 17 ] V . S . Verykios , A . K . Elmagarmid , E . Bertino , Y . Saygin , IEEE TKDE , and E . Dasseni . Association rule hiding . 16(4):434–447 , 2004 .
[ 18 ] K . Wang , P . S . Yu , and S . Chakraborty . Bottom up generalization : a data mining solution to privacy protection . In Proc . of the 4th IEEE ICDM , 2004 .
[ 19 ] R . W . Yip and K . N . Levitt . The design and implementation of a data level database inference detection system . In Proc . of the 12th International Working Conference on Database Security XII , pages 253–266 , 1999 .
Figure 3b shows the errors for TopN , averaged over h = 10 % , 30 % , 50 % , 70 % , 90 % . We summarize the results as follows : ( 1 ) SE − BE is less than 0.8 % in all cases . This is amazing considering that hundreds of inferences were eliminated according to Table 3 . ( 2 ) The largest RE− SE is approximately 6 % for Top4 . ( 3 ) The difference between maximum and minimum SE is less than 1 % . ( 4 ) For Top1 , RE is slightly lower than SE , implying that removing the top attribute does not affect the classification . However , as more sensitive attributes were removed ( ie , Top2 , Top3 , Top4 ) , RE picked up . ( 5 ) The algorithm spent at most 14 seconds for all experiments on Adult , of which approximately 10 seconds were spent on suppressing the 45,222 data records .
53 Scalability
The purpose of this experiment is to see how scalable our method is for large data sets . We evaluated the scalability on an expanded version of Adult . We first combined the training and testing sets , giving 45,222 records . Then for each original record r in the combined set , we created α−1 “ variations ” of r , where α > 1 is the expansion scale . For each variation of r , we randomly and uniformly selected y attributes from ∪IC , selected some random values for these y attributes , and inherited the values of r on the remaining attributes , including the class and sensitive attributes . Together with original records , the expanded data set has α × 45 , 222 records . Figure 3c depicts the runtime of our suppression method for 200K to 1M data records based on the templates 'IC → {π1 , . . . , πk} , 90%ff , where {π1 , . . . , πk} is the set of 50 % least frequent values in the Top1 attribute M , and IC contains the other 7 attributes . This is one of the most time consuming settings because of the largest number of disclosure candidates to consider at each iteration , and a larger h requires more iterations to reach a solution . Our method spent 192 seconds to suppress 1M records , of which 150 seconds were spent on suppression , and the rest was spent on disk I/O operations .
6 . Conclusions
We studied the problem of eliminating the sensitive inferences that are made possible by data mining tools , while preserving the classification value of the data . A sensitive inference has a high confidence in linking a group of individuals to sensitive values . We eliminated sensitive inferences by letting the user specify the templates and maximum confidence for such inferences . We used suppression of domain values as a way to achieve this goal . We presented a progressive disclosure algorithm that iteratively searches for a better suppression and prunes the search whenever no better alternative is possible . Experiments on
Proceedings of the Fifth IEEE International Conference on Data Mining ( ICDM’05 )
1550 4786/05 $20.00 © 2005 IEEE
