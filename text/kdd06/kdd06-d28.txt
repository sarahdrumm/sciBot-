Coherent Closed Quasi Clique Discovery from Large
Dense Graph Databases ∗
Zhiping Zeng† , Jianyong Wang† , Lizhu Zhou† , George Karypis‡
†
‡
Tsinghua University , Beijing , 100084 , PRChina
University of Minnesota , Minneapolis , MN 55455 , USA clipsezeng@gmailcom , {jianyong,dcszlz}@tsinghuaeducn , karypis@csumnedu
ABSTRACT Frequent coherent subgraphscan provide valuable knowledge about the underlying internal structure of a graph database , and mining frequently occurring coherent subgraphs from large dense graph databaseshas been witnessed several applications and received considerable attention in the graph mining community recently . In this paper , we study how to efficiently mine the complete set of coherent closed quasi cliques from large dense graph databases , which is an especially challenging task due to the downward closure property no longer holds . By fully exploring some properties of quasicliques , we propose several novel optimization techniques , which can prune the unpromising and redundant sub search spaces effectively . Meanwhile , we devise an efficient closure checking scheme to facilitate the discovery of only closed quasi cliques . We also develop a coherent closed quasi clique mining algorithm , Cocain 1 . Thorough performance study shows that Cocain is very efficient and scalable for large dense graph databases . Categories and Subject Descriptors : H28 [ Database Management ] : Data Mining General Terms : Algorithms Keywords : Graph mining , Quasi clique , Coherent subgraph .
1 .
INTRODUCTION
Recently several studies have shown that mining frequent coherent subgraphs is especially useful , where a coherent subgraph can be informally defined as a subgraph that satisfies a minimum cut bound ( and the formal definition can be found in Section 2.1 ) , as the set of frequent coherent subgraphs mined from a graph database usually reflects the density distribution of the relationships among the objects in the database , and can provide valuable knowledge about the internal structure of the graph database . Coherent subgraph mining has also been witnessed several applications such as ∗ This work was supported by National Natural Science Foundation of China ( NSFC ) under Grant No . 60573061 and Basic Research Foundation of Tsinghua National Laboratory for Information Science and Technology(TNList ) . 1Cocain stands for Coherent closed quasi clique mining . highly correlated stock discovery[5 ] , gene function annotation and functional module discovery[3 ] .
Several coherent subgraph discovery algorithms have been recently developed [ 3 , 4 , 6 , 5 ] . However , each of the previously proposed algorithms has its own limitations . For example , the algorithm proposed in [ 4 ] can only mine quasi cliques with exact 100 % support threshold ; the algorithms proposed in [ 6 ] can only work on relational subgraphs , where vertex labels are distinct in each graph ; similarly , the CLAN algorithm [ 5 ] mines fully connected frequent subgraphs ( ie , frequent cliques ) . In this paper , we study a more general problem formulation : mining frequent quasi cliques from large dense graph databases , that is , we neither limit the minimum support to be 100 % nor require the input graphs to be relational .
While the problem becomes more general , it gets more tough . As we will see later , the downward closure property[1 ] no longer holds , devising some effective search space pruning techniques is especially challenging . By fully exploring some properties of quasicliques , we propose several novel optimization techniques , meanwhile , we devise an efficient closure checking scheme to facilitate the discovery of only closed quasi cliques . We also develop an efficient coherent closed quasi clique mining algorithm , Cocain .
The remaining of this paper is organized as follows . Section 2 introduces the problem formulation . In Section 3 , we present algorithm Cocain by focusing on several optimization techniques . The empirical results are examined in Section 4 . Finally , we conclude our study in Section 5 .
2 . PROBLEM FORMULATION
In this section , we introduce some preliminary concepts , notations , and terms in order to simplify our discussion . We also formulate the problem we study . Table 1 summarizes the notations we use in this paper and their meanings .
Notations
V E L F G |G| G(S ) N G(v ) degG(v ) disG(u , v )
Description V = {v1 , v2 , , vk} , the set of vertices E ⊆ V × V , the set of edges the set of vertex labels F :V →L , the mapping function from labels to vertices G = ( V , E , L , F ) , an undirected vertex labeled graph |G| = |V | , the cardinality of G the induced subgraph on S from G , S⊆V ( G ) N G(v ) = {u|(v , u ) ∈ E(G)} degG(v ) = |N G(v)| the number of edges in the shortest path between u and v
Table 1 : Notations used in this paper
2.1 Preliminaries
In this paper , we consider simple graph only , which does not contain self loops , multi edges , and edge labels . An undirected vertex labeled graph transaction , G , can be represented by a 4tuple , G=(V , E , L , F ) . An induced subgraph of a graph G is a subset of the vertices of V ( G ) together with any edges whose endpoints are all in this subset . In the following discussions , the term “ graph ” means the undirected vertex labeled graph , unless otherwise stated .
DEFINITION 21 ( γ Quasi clique ) A k graph(k≥1 ) G is a γ quasi clique ( 0≤γ≤1 ) if ∀v∈V ( G ) , degG(v)≥γ·(k−1 ) .
From the definition we can see that quasi cliques are subgraphs that satisfy a user specifiedminimum vertex degree bound , γ·(k−1 ) . Apparently , a γ quasi clique must be a fully connected graph when γ = 1 , and singleton graphs are considered as γ quasi cliques . If ∃v∈V ( G ) such that degG(v)=γ·(k−1 ) and γ·(k−1))=γ·k , v is called a critical vertex of G wrt γ .
Most of the existing frequent subgraph mining algorithms are based on the downward closure property . Unfortunately , this property does not hold for quasi clique patterns . An induced subgraph of a γ quasi clique may not be a γ quasi clique . For instance , in Figure 1 , G2({v1,v3,v4,v5,u6} ) is a 0.5 quasi clique , but one of its induced subgraphs , G 2({v1,v3,v5,u6} ) is not a 05 quasi clique DEFINITION 22 ( Edge Cut and Edge Connectivity ) Given a connected graph G = ( V , E ) , an edge cut is a set of edges E c such fi=(V ,E−Ec ) is disconnected . A minimum cut is the smallthat G est set among all edge cuts . The edge connectivity of G , denoted by κ(G ) , is the size of the minimum cut .
As shown in [ 6 ] , the minimum vertex degree can reflect the level of connectivity to some extent in a graph , but they cannot guarantee the graph is connected in a balanced way . However , the following lemma gives a lower bound on the minimum cut when γ≥0.5 , which guarantees the coherency of γ quasi cliques .
2
2
2 ff . ff must hold . ff , ie , κ(Q)≥ n
LEMMA 21 ( Minimum Edge Connectivity ) Let n graph Q = ( V , E ) be a γ quasi clique ( 05≤γ≤1,n≥2 ) The edge connectivity of Q must be no smaller than n PROOF . Let us divide V into two sets , V 1 and V2 , and suppose V1 ≤ V2 and |V1|=k , 1≤k≤ n Since Q is a γ quasi clique , ∀v∈V1 , degQ(v)≥γ·(n−1 ) . However , v is at most adjacent to other k−1 vertices in V 1 , and k−1≤ n 2 − 1< γ(n−1 ) . Therefore , v must be adjacent to vertices belonging to V2 , and the number of edges which connect v and vertices in V 2 must be no smaller than γ·(n−1)−(k−1 ) . There are k vertices in V1 , so there exist at least k·(γ·(n−1)−(k−1 ) ) edges between V1 and V2 . Let f ( k)=k·(γ·(n−1)−(k−1) ) , then 2 + k · ( γ · ( n − 1 ) + 1 )
( 1 ) dk2 =−2 ) is negative , f ( k ) achieves the maximum at its sole stationary point k = 'γ·(n−1)ff+1 . As there exists only one stationary point for quadratic polynomial function f ( k ) and 1≤k ≤ n ff , f ( k ) must get its minimum either at k=1 or at k= n 2 ff . When k=1 , f ( 1)=γ·(n−1)≥ 2 ff , each vertex in V1 must be adn−1 jacent to at least one vertices in V 2 , thus f ( n ff . From the above result , we can get that ∀k∈[1 , n ff . According to the definition of edge connectivity , κ(Q)≥ n ff)≥ n ff ] , f ( k)≥ n ff .
The second order derivative of f ( k ) ( ie , d
2 ff . While when k= n f ( k ) = −k
2 = n f ( k )
2
2
2
2
2
2
2
2
Because we are more interested in mining tightly connected subgraphs , we do not expect that the edge connectivity of a subgraph is too small in comparison with the minimum vertex degree . From Lemma 2.1 , if γ≥0.5 the vertices in the γ quasi clique are connected tightly and relatively evenly . In this paper , a γ quasi clique is said to be coherent if γ≥0.5 , and if not explicitly stated γ by default has a value no smaller than 05
DEFINITION 23 ( γ Isomorphism ) A graph G 1={V1,E1,L1,F1} is γ isomorphic to another graph G 2 = {V2 , E2 , L2 , F2} iff both of them are γ quasi cliques , |G1|=|G2| , and there exists a bijection f :V1→V2 such that ∀v∈V1,F1(v)= F2(f ( v) ) .
According to the above definition , we know that the γ isomorphism is quite different from the graph isomorphism in graph theory , which is defined as a bijection f :V ( G 1)→V ( G2 ) from a graph G1 to another graph G2 , such that ( u , v)∈E(G1 ) iff ( f ( u),f ( v))∈E(G2 ) . While the γ isomorphism between two γ quasi cliques does not imply an exact bijection edge mapping . fi fi
For two γ quasi clique Q and Q fi , while Q
A multiset is defined as a bag of vertex labels in which the order is ignored , but multiplicity is explicitly significant . Let M ( G ) indicate the multiset of G . From the γ isomorphism definition , we can derive the following lemma directly : two γ quasi cliques , G 1 and G2 , are γ isomorphic to each other iff M ( G1)=M ( G2 ) . , if M ( Q)⊆M ( Q fi ) , Q is called is called a superquasi clique of but Q)=Q fi ) to denote the a subquasi clique of Q Q . We use QffiQ subquasi clique or proper subquasi clique relationship . 2.2 Problem Definition A graph transaction database , D , consists of a set of input graphs , and the cardinality of D is denoted by |D| . Figure 1 shows an example of graph transaction database D , which consists of two input graphs , G1 and G2 .
( ie QffiQ fi fi or Q<Q fi
1u a
4u b
4v c
2v b
5u d
3u b
3v d c
5v
2u c e
6u
1v a b
6v
G raph G 1
G raph G 2
Figure 1 : An example of graph database D fi
For two graphs G and G fi ) , we call g an instance of G
, let g be an induced subgraph of G , if M ( g)=M ( G in G . If there exists in G , we say that graph G roughly at least one instance of G fi supports G . Meanwhile , if g is γ isomorphic to another γ quasiclique Q , we call g an embedding of Q in G . If there exists at least one embedding of Q in G , G is said to strictly support Q . fi fi
The number of input graphs in graph database D that strictly ( or roughly ) support a γ quasi clique Q ( or a graph G ) is called the absolute strict support ( or absolute rough support ) of Q ( or G ) in r ( G) ) , while the relative strictD , denoted by supD r ( G ) ) is desupport rsupD fined as rsupD s ( Q ) ( or relative rough support rsup D s ( Q)=supD s ( Q)/|D|(and rsupD s ( Q ) ( or supD r ( G)=supD r ( G)/|D| ) . fi such that Q < Q
Given an absolute support threshold min sup and a graph transaction database D , a quasi clique Q ( or a subgraph g ) is called s ( Q ) ≥ a frequent quasi clique ( or a vice frequent graph ) if sup D r ( g ) ≥ min sup ) . If there does not exist any anmin sup ( or supD s ( Q ) ≤ supD fi ) , fi s ( Q other quasi clique Q Q is called a closed quasi clique in D 2 . 2Here the definition of a ‘closed’ pattern is a little different from the traditional one , due to the absence of the downward closure property for quasi clique patterns , and it is possible that a quasiclique ’s strict support is greater than that of its subquasi cliques . fi fi ) , we say Q Also , in the case that Q<Q can subsume Q . s ( Q)≤supD and supD and supD s ( Q fi
In this paper , given D and min sup , we study the problem of mining the complete set of γ quasi cliques in D that are frequent , closed , and also coherent ( ie , γ ≥ 05 )
3 . Cocain : EFFICIENTLY MINING CLOSED
COHERENT QUASI CLIQUES
In this section , we describe our comprehensive solution to frequent closed coherent quasi clique mining , including an efficient canonical representation of a coherent quasi clique , a subgraph enumeration framework , several search space pruning techniques , and a quasi clique closure checking scheme . We also present the integrated algorithm , Cocain . 3.1 Canonical Representation of Subgraphs
One of the key issues in graph mining is how to choose an efficient canonical form that can uniquely represent a graph and has low computational complexity in order to facilitate the graph isomorphism testing . Some previously proposed solutions to this problem are designed for a general graph and may not be the most efficient representation for a quasi clique . According to the Section 2.1 , we can see that a multiset preserves much information for a quasi clique . Given a k graph g , we call any sequence of all elements in M ( g ) a graph string . Assume there is a total order on the vertex labels , we define the following total order of any two strings p and q with size |p| and |q| respectively . Let p i denote the i th vertex label in string p , we define p<q if either of the following two conditions holds : ( 1 ) ∃t ( 0<t≤min{|p| , |q|} ) such that ∀ i ∈[1 , t − 1 ] , pi=qi and pt<qt , ( 2 ) ( |p|<|q| ) and ∀ i ∈[1,|p| ] , pi=qi ; otherwise p≥q . A string Sa=a1a2an is called a substring of another string Sb=b1b2bm , denoted by SaffiSb ( or Sa<Sb if m>n ) , if there exist n integers 1≤i1<i2< in≤m such that a1=bi1 ,a2=bi2 , , an=bin .
DEFINITION 31 The canonical form of a graph G is defined as the minimum string among all its strings and denoted by CF ( G ) .
As we ignore the exact topology of a quasi clique , it is evident that the above definition is a unique representation of a quasiclique . However , we note that it does not hold for a general graph . After giving the definition of the canonical form of a graph and the substring relationship , we can derive the following two lemmas to facilitate γ isomorphism checking and subquasi clique relationship checking .
LEMMA 31 Two γ quasi cliques Q 1 and Q2 are γ isomorphic to each other iff CF ( Q1 ) = CF ( Q2 ) .
LEMMA 32 Given two γ quasi cliques Q 1 and Q2 , Q1 ffi Q2 ( or Q1 < Q2 ) iff CF ( Q1 ) ffi CF ( Q2 ) ( or CF ( Q1 ) < CF ( Q2) ) . The above two lemmas can be derived easily from the definition of γ isomorphism and subquasi clique relationship respectively , here we omit the proof . 3.2 Vice Frequent Subgraph Enumeration
According to the definition of a vice frequent graph , it is evident that any induced subgraph of a vice frequent graph must be also vice frequent . Thus , the downward closure property can be exploited for vice frequent subgraph enumeration .
Based on the definition of embedding and instance of a subgraph , we can see that the embedding is a special type of the instance , an embedding of a quasi clique q must be an instance of q . Given r ( Q ) holds , if Q is frea γ quasi clique Q , as supD quent , Q must be vice frequent . Consequently , we can discover s ( Q)≤supD the complete set of frequent γ quasi cliques from the set of vicefrequent subgraphs . By conceptually organizing the vice frequent subgraphs into a lattice like structure in the way we used in [ 5 ] , the problem of mining frequent quasi cliques becomes how to traverse the lattice like structure to enumerate vice frequent subgraphs and discover frequent γ quasi cliques . In our running example in Figure 1 , assume the total order among vertex labels is a≤b≤c≤d≤e , all the vice frequent subgraphs are organized into a structure as shown in Figure 2 . Note that here we use ‘canonical form:rough support:strict support’ to represent a subgraph . In addition , all nodes with yellow color are vicefrequent subgraphs but not frequent quasi cliques , nodes with blue color are non closed frequent quasi cliques , and nodes with orange color are closed quasi cliques . Figure 2 shows that among all the vice frequent subgraphs , only abd:2:2 and bcd:2:2 are closed quasicliques . We also adopt the DFS search strategy as we used in [ 5 ] to traverse the lattice like structure . In this way , we can get a rudimentary algorithm to discover frequent closed γ quasi cliques . However , due to a great deal of redundancy during the enumeration , this rudimentary algorithm is too expensive and costs too much space and runtime .
φ a:2:2 b:2:2 c:2:2 d:2:2 ab:2:1 ac:2:1 ad:2:1 bb:2:0 bc:2:1 bd:2:2 cd:2:2 abb:2:1 abc:2:1 abd:2:2 acd:2:1 bbc:2:0 bbd:2:0 bcd:2:2 abbc:2:0 abbd:2:0 abcd:2:0 bbcd:2:0
5.0=γ min_sup=2 abbcd:2:0
Level
1
2
3
4
5
Figure 2 : A lattice like structure built from the vice frequent subgraphs of our running example
Structural Redundancy Pruning . As shown in [ 5 ] , much redundancy exists if we just simply use the DFS search strategy . In order to eliminate the structural redundancy while maintaining the completeness of the result set , we propose an efficient vicefrequent subgraph enumeration method . Given an m graph G and CF ( G)= a0a1am , we require G can only be generated by growing the subgraph g with canonical form CF ( g)=a 0a1am−1 In this way , except the node φ , each node in the lattice like structure has only one parent , and this lattice like structure would turn to a tree structure . Let LAS(g ) be the last element in CF ( g ) ( ie , LAS(g)=am ) , obviously , in the enumeration tree structure all descendants of the node g would be in the form of CF ( g ) ffl b 0b1bk , where b0 ≥ LAS(g ) and ∀ i ∈ [ 1 , k ] , bi−1 ≤ bi . 3.3 Search Space Pruning
In this subsection , we propose several novel optimization techniques to prune futile search subspaces based on some nice properties of quasi cliques .
331 Preliminaries
Before we elaborate on the pruning techniques , let us first introduce the following two important lemmas which form the foundation of several pruning techniques .
LEMMA 33 If m+u<γ · ( k + u ) ( where m , u , k≥0 , and 0.5≤γ≤1 ) , then m <γ · k and ∀i∈[0 , u ] , m + i<γ · ( k + i ) . PROOF . First , we assume m ≥ γ · k , then m + u ≥ γ · k + u ≥ γ · k + γ · u ≥ γ · ( k + u ) , which contradicts with the fact m+u<γ · ( k + u ) . Thus , m < γ · k holds . Second , let t=u−i , then m+i=m+u−t < γ · ( k + u)−t ≤ γ · ( k + u)−γ · t ≤ γ · ( (k + u ) − t ) = γ · ( k + i ) . clique , then ∀u , v ∈ V ( Q ) , disQ(u , v ) ≤ 2 .
LEMMA 34 ( Maximal Diameter ) If a graph Q is a γ quasiPROOF . Let |Q|=n ( n≥2 ) . ∀u , v∈ V ( Q ) , if u and v are adjacent to each other , then dis Q(u , v)=1 . While if u and v are not adjacent , then |N Q(u)∪N Q(v)|≤(n − 2 ) . Furthermore , as Q is a γ quasi clique , |N Q(u)|≥γ·(n−1 ) and |N Q(v)|≥γ·(n−1 ) hold . Therefore , N Q(u)∩N Q(v))=φ , otherwise|N Q(u)∪N Q(v)|= |N Q(u)|+|N Q(v)|≥2γ · ( n − 1 ) . Also , since γ≥0.5 , we have 2γ · ( n − 1)≥(n − 1 ) . Thus , |N Q(u)∪N Q(v)|≥(n − 1 ) holds , which contradicts with the fact |N Q(u)∪N Q(v)|≤(n − 2 ) . As a result , there must exist at least one vertex which is adjacent to both u and v , and disQ(u , v)=2 must hold . Therefore , from the above analysis , we can get ∀u , v∈V ( Q ) , dis Q(u , v)≤2 . 332 Pruning Methods
From Lemma 3.4 , we can derive the following lemma to help us prune some futile branches .
LEMMA 35 ( Diameter Pruning ) Let G be a graph and S ⊆ V ( G ) , if G(S ) is a γ quasi clique , then ∀ u,v ∈ S , disG(u , v)≤2 . PROOF . As G(S ) is a subgraph of G , dis G(S)(u , v)≥disG(u , v ) holds . In addition , according to Lemma 3.4 , we have dis G(S)(u , v ) ≤ 2 . Therefore , disG(u , v ) ≤ 2 must hold .
Given a graph G , let S⊂V ( G ) and v∈V ( G)−S , from Lemma 3.5 we know that if G(S ) and v can form a “ bigger ” quasi clique , ∀ u ∈ S , disG(v , u ) ≤ 2 must hold . Accordingly , a straightforward and reasonable application of Lemma 3.5 is to discover the extensible vertices of a subgraph which can be used to form quasicliques later . First , we calculate the extensible vertex set E(u ) for each vertex u in G(S ) , then conjoin all E(u ) ’s to obtain the global extensible vertex set . Obviously , E(u ) can be divided into two subsets . One is denoted by D(u ) , which consists of the vertices that are adjacent to u , ie , D(u ) = {v|disG(u , v ) = 1} ; another subset is denoted by I(u ) , where I(u ) = {v|∃u , v ) = 1 and v /∈ D(u)} . The set D(u ) can be obtained easily , and I(u ) can be computed from D(u ) in the way of discovering vertices which are adjacent to at least one vertex in D(u ) . In this way , we can discover extensible vertex set for an instance of a subgraph G(S ) and can prune some unpromising vertices . fi ∈ D(u ) , disG(u fi
Combination Pruning . We can combine the structural redundancy pruning with Diameter Pruning to further shrink the the extensible vertex set . As stated in structural redundancy pruning , only those vertices whose labels are no smaller than LAS(g ) can be used to grow g , where g is the current prefix subgraph . Therefore , when calculating E(u ) we can remove the vertices whose labels are smaller than LAS(g ) , and the removal of some vertices in E(u ) may make some vertices left in E(u ) violate the condition of an extensible vertex introduced in Lemma 34 For example , suppose ∃v 0 ∈ I(u ) and there exists only one vertex v such that fi∈ D(u ) and disG(v0 , v fi)=1 , if v is v smaller than LAS(g ) , then v will never appear in all descendants fi of g , thus the descendant g of g which contains vertex v 0 cannot . ( u , v0)>2 must hold . Therefore , we can be a quasi clique , as dis g
/∈ V ( g ) and the label of v fi fi fi fi remove the vertex v0 from E(u ) safely . In order to eliminate these vertices efficiently , after getting D(u ) , we remove the vertices in D(u ) whose labels are smaller than LAS(g ) and in the meantime do not belong to V ( g ) . After we compute the final set of extensible vertices , E(u ) , for each vertex u in subgraph g , we can then conjoin all the E(u ) ’s to get the global extensible vertex set wrt g . We call an element in the global extensible vertex set an extensible ( g ) to denote the set of extensible candidate wrt g , and use V G cad candidates wrt g in G .
For v ∈ V G
In the following , we propose other three optimization techniques based on Lemma 3.3 which can be used to prune the unpromising search space effectively . ( v)=N G(v)∩V ( g ) cad(g ) , we define the internal set V g ( v)| and external set V g ex| be the extern debe the inner degree of v , and exdeg g(v)=|V g gree of v . Take Figure 1 for an example , assume g=G 2({v5} ) , ( g)={v3 , v4 } ( note v1 and v6 have been pruned by CombiV G2 cad nation Pruning ) , indegg ( v3)=0 , exdegg(v3)=1 .
( g ) . Let indegg(v)=|V g ex(v)=N G(v)∩V G cad in in cad cad
LEMMA 36 ( Vertex Connectivity Pruning ) Suppose g is a k subgraph of G , if ∃ v ∈ V G ( g ) such that indeg(v ) < γ · k and indegg ( v ) + exdegg(v)< γ · ( k + exdegg(v) ) , there does not exist a quasi clique Q in G such that V ( Q ) ⊇ V ( g)∪{v} . PROOF . Assume there exists a quasi clique Q such that V ( Q ) ⊇ V ( g ) ∪ {v} , and let |Q|=l . Since Q is a quasi clique , V ( Q ) ex(v ) and denote |R| ⊆ V ( g ) ∪ V G by m , then l−k−1 ≥ m and m ≤ |V g ex(v)|=exdegg(v ) . Because indegg ( v ) < γ · k and indegg ( v ) + exdegg(v)< γ · ( k + exdegg(v) ) , according to the Lemma 3.3 , we can get that ∀ i ∈ [ 0 , exdegg(v) ] , indegg ( v)+i<γ · ( k + i ) . Thus , degQ(v)= indegg ( v)+m<γ · ( k + m)≤ γ · ( l − 1 ) , ie degQ(v)< γ · ( |Q| − 1 ) . This contradicts with the assumption that Q is a quasi clique .
( g ) . We define R=V ( Q ) ∩ V g
In the case of indegg ( v ) + exdegg ( v)< γ · ( k + exdegg(v) ) , v is called an invalid extensible candidate , otherwise it is called a valid extensible candidate . Obviously , the invalid extensible candidates do not make any contribution to the generation of “ bigger ” quasi cliques . Therefore , after getting the extensible candidate set ( g ) , we could remove all invalid extensible candidates from V G cad ( g ) . Due to the removal of these vertices , some originally valid V G cad extensible candidates may turn to be invalid , so we can do this prun(g ) . We ing iteratively until no vertex can be removed from V G cad ( g ) . Hence , if G(S ) is a quasidenote the remaining set by V G clique in G and S ⊃ V ( g ) , S ⊆ V ( g ) ∪ V G vad ( g ) . Accordingly,we ( g ) to grow g , which can furonly need to use the vertices in V G vad ther improve the algorithm ’s efficiency . Assume g is a subgraph of a graph G , for a vertex u∈ V ( g ) , let V g vad(g ) , and the extensible degree be the ( u)| . If there exists ext cardinality of V g ext a critical vertex v in g such that extdegg(v ) = 0 , we call v a failed vertex of g .
( u ) , ie , extdegg(u)=|V g
( u)=N G(u ) ∩ V G vad ext
LEMMA 37 ( Critical Connectivity Pruning ) If there exists a failed vertex v in a k subgraph g of G , there will be no such an induced subgraph Q of G that V ( Q)⊃V ( g ) and Q is a quasiclique . PROOF . We prove this by contradiction . Let Q be such an induced subgraph of G and |Q| = m . Obviously m > k and V ( Q ) ⊆ V ( g)∪V G ( g ) . Since v is a critical vertex in g , degg(v ) = γ · ( k − 1 ) and γ · ( k − 1 ) < γ · k . Furthermore , because deg Q(v ) ≤ degg(v ) + extdegg(v ) and extdegg(v ) = 0 , degQ(v ) < γ · k ≤ γ · ( m− 1 ) , which contradicts with the assumption . Thus , there must exist no such an induced subgraph . vad
Given a k subgraph g of a graph G , if ∃u ∈ V ( g ) such that degg ( u ) < γ · ( k − 1 ) and degg(u ) + extdegg(u ) < γ · ( k − 1 + extdegg(u) ) , we call u an unpromising vertex in g .
LEMMA 38 ( Subgraph Connectivity Pruning ) If a k subgraph g of G contains an unpromising vertex u , there will be no induced subgraph Q of G such that V ( Q ) ⊃ V ( g ) and Q is a quasi clique . PROOF . Let Q be such an induced subgraph and |Q| = l . Since Q is a γ quasi clique , V ( Q ) ⊆ V ( g ) ∪ V G fi = V ( Q ) ∩ V g fi| = m , then l ≥ m+|V ( g)|=m+k . Because deg g(u ) < γ · ( k − 1 ) and degg ( u ) + extdegg(u ) < γ · ( k − 1 + exdegg ( u) ) , from Lemma 3.3 we can get that ∀i ∈ [ 0 , exdegg(u) ] , degg(u ) + i < γ · ( k − 1 + i ) . Thus , degQ(u ) = degg(u)+|V fi| = degg(u)+m < γ·(k−1+m ) ≤ γ · ( l − 1 ) , that is , degQ(u ) < γ · ( |Q| − 1 ) . This contradicts with the assumption that Q is a γ quasi clique .
( u ) and |V
( g ) holds . Let V vad ext
According to Lemma 3.7 and Lemma 3.8 , if a subgraph contains a failed vertex or an unpromising vertex , it does not make any contribution to the generation of quasi cliques . Thereby , after getting ( g ) , once we inspect the exthe valid extensible candidate set V G vad istence of failed vertices or unpromising vertices in g , then there is no hope to grow instance g to generate quasi cliques , and thus we can stop growing g . 3.4 Closure Checking Scheme
By integrating the pruning techniques proposed in this paper with the vice frequent subgraph enumeration framework , we can discover the complete set of frequent quasi cliques . How do we discover the closed quasi cliques ? A straightforward approach is to store all the frequent quasi cliques that we have found , and when inserting a quasi clique q to the result , we do super clique detecting which checks whether there already exists an element q such that can subsume the current q and sub clique detecting which checks that can be subif there exists any already mined quasi clique q sumed by q . Obviously , this na¨ıve approach is very costly , we will introduce a more efficient closure checking scheme . fi fi
Given two subgraphs , G 1 and G2 , with canonical forms CF ( G1 ) = a1a2an and CF ( G2)=b1b2bm ( where n<m ) respectively , if CF ( G1)<CF ( G2 ) , there must exist n integers 1≤i1<i2<< in≤m such that a1=bi1 , a2=bi2 , , an=bin . If in=n , the relationship of CF ( G1 ) and CF ( G2 ) in the enumeration tree can be illustrated in Figure 3(a ) , that is , the node corresponding to CF ( G 1 ) is an ancestor of the node corresponding to CF ( G 2 ) . Otherwise , let k = min{j | ij)=j} , then CF ( G1 ) and CF ( G2 ) have the same prefix a1a2ak−1(if k=1 , the prefix is empty ) and ak>bk ( as ak=bik ,ik>k , and bk<bik hold ) , thus CF ( G1)>CF ( G2 ) holds , and this relationship in the enumeration tree is shown in Figure 3(b ) .
aa 1
2
na
CF(G 1 )
aa 1
2
−ka _
1
aa 1
2
nba
+n
1 aa 1
2
a k b _ − 1 k aa 1
2
a k a _ − 1 k
aa 1
2
ba nn b
+
1
+ n
2
b m aa 1
2
a b k
−
1 k
b m
CF(G 2 )
CF(G 2 ) aa 1
2
na
CF(G 1 )
( a ) Descendant
( b ) Non descendant
Figure 3 : Two Cases of CF ( G 1 ) < CF ( G2 ) in Vice Frequent Subgraph Enumeration Tree
One strategy to speed up the pattern closure checking is that we postpone the closure checking for G 1 until all its descendants have been processed . In this way , G 2 must be discovered before G 1 for the first case shown in Figure 3(a ) , as the node CF ( G 2 ) is a descendant of CF ( G1 ) . In the second case as shown in Figure 3(b ) , it is evident that G2 is also discovered before G 1 according to the DFS traverse strategy . In summary , if the current quasi clique G 1 can be subsumed by another frequent closed γ quasi clique G 2 ( ie , CF ( G1 ) < CF ( G2 ) and supD s ( G2) ) , the insertion of G2 into the result set will occur before the closure checking of G1 . Accordingly , when we check if a frequent quasi clique q is closed or not , there is no need to perform sub clique detecting , as there does not exist any quasi clique q in the result set such that s ( q ) . CF ( q fi ) < CF ( q ) and supD s ( G1 ) ≤ supD fi fi ) ≤ supD s ( q
Although there is no need for sub clique detecting , we still have to perform super clique detecting . As shown in Figure 3 , there are two cases for super clique detecting . In the first case , we need to check if there exists a descendant quasi clique G 2 of the current quasi clique G1 that can subsume G 1 in the enumeration tree . According to our strategy described above , we know G 1 must be mined after all its descendants , the super clique detecting in this case becomes relatively simple . After the processing of all descendants of G 1 , we let the recursive mining procedure return the maximum strict support ( denoted by r ) of all frequent quasi clique nodes under the subtree rooted with CF ( G 1 ) ( if there does not exs ( G1 ) ist any frequent quasi clique , then it returns value zero ) . If supD ≤ r , we know G1 is non closed and will not insert G1 into the res ( G1)>r , we still need to check if there sult set . However , if supD exists any non descendant super clique of G 1 that can subsume G 1 ( ie , the second case shown in Figure 3(b) ) .
In order to accelerate the non descendant super clique detecting process , we divide the elements in the result set into different groups according to their absolute strict support . In each group , we first order them by the size of the quasi cliques in descending order , and among the quasi cliques with the same size in the same group , we then order them by their canonical form in descending order . This processing can accelerate the comparison steps .
3.5 The Algorithm
In the following we describe the Cocain algorithm by integrating various techniques discussed earlier . Let us first introduce the SUBALGORITHM 1:Valid , which is called by Cocain in order to compute the valid extensible candidates for an instance subgraph . For each vertex u in current instance g , we scan the graph G in which g resides to find the set D(u ) ( line 06 ) , and refine D(u ) based on the combination pruning technique ( line 07 ) . Then we generate the set I(u ) from D(u ) , obtain the extensible candidate set T of u ( lines 08 10 ) , and conjoin each discovered extensible candidate set to get the global extensible candidates rs ( line 11 ) . Finally , we apply the vertex connectivity pruning ( line 12 ) , critical connectivity pruning , and subgraph connectivity pruning ( lines 13 14 ) to rs to generate the final set of valid extensible candidates wrt g .
Before running Cocain as shown in ALGORITHM 1 , we first compute the set of vice frequent vertex labels and their corresponding instances by scanning the original database , and remove from the graph database the vertices with non vice frequent vertex labels . This procedure can reduce the size of input graphs significantly , especially when min sup is high . After this preprocessing , we use Cocain to mine the complete set of frequent closed coherent quasi cliques . For the current prefix vice frequent subgraph g , we first use procedure Valid to get the set of valid extensible candidates Vvad for each instance of g ( lines 17 18 ) , from which we can further calculate the vice frequent extensible labels ( line 19 ) . For each vice frequent extensible label , we invoke Cocain to discover descendants of g ( lines 21 23 ) . After all recursive invo cations have returned , we can use the closure checking scheme to determine whether or not to insert g to the final result set according to the strict support of g and the returned values of the recursive invocations ( lines 24 25 ) .
SUBALGORITHM 1 : Valid(g )
INPUT :
( 1 ) g : an instance subgraph .
OUTPUT :
( 1 ) rs : the set of valid extensible candidates wrt g . break ;
If rs is empty set T = D = I = φ ;
BEGIN 01 . set rs = V ( G)(G is the graph in which g resides ) ; 02 . For each vertex u in V ( g ) 03 . 04 . 05 . 06 . D = {v|disG(u , v ) = 1} ; 07 . 08 . 09 . 10 . 11 . 12 . Remove invalid extensible candidates from rs ; 13 . If there exists a failed or an unpromising vertex in g 14 . 15 . return rs ; END
Refine D using combination pruning ; I = {v | ∃ t ∈ D , dis T = D ∪ I ; Remove each element v rs = rs ∩ T ;
G(t , v ) = 1 and v /∈ D} ; .∈T which satisfies L(v rs = φ ;
. ) < LAS(g ) ;
ALGORITHM 1 : Cocain(D , CF ( g),INS(g),min sup,γ )
INPUT :
( 1 ) D : the input graph database , ( 2 ) CF ( g ) : the canonical form of g , ( 3 ) INS(g ) : the set of instances of g in the database D , ( 4 ) min sup : the minimum support threshold , ( 5 ) γ : the edge density coefficient .
OUTPUT :
( 1 ) rs : the set of frequent closed γ quasicliques , ( 2 ) max : the maximum strict support of all descendant quasi cliques of g .
BEGIN 16 . glbsup=0 , rv=0 ; 17 . For each instance ins ∈ INS(g ) 18 . 19 . Calculate vice frequent valid candidate label set V EX(g ) according to each
Vvad(ins ) = Valid(ins ) ;
Vvad(ins ) ; rv = Cocain(D , CF ( g ) l , INS(g l ) , min sup , γ ) ; glbsup = max{glbsup , rv} ;
20 . Sort the labels in V EX(g ) in a certain order ; 21 . For each label l ∈ V EX(g ) 22 . 23 . 24 . If ( sups(g ) ≥ min sup ) and ( sups(g ) > glbsup ) 25 . 26 . return max{sups(g ) , glbsup} ; END
Insert CF ( g ) into RS if g passes the non descendant super clique detecting ;
4 . EMPIRICAL RESULTS
We conducted an extensive performance study to evaluate various aspects of the algorithm . We implemented the algorithm in C++ , and all experiments were performed on a PC running FC 4 Linux and with 1.8GHz AMD Sempron CPU and 1GB memory . In the experiments , we used the US stock market series database [ 2 ] , which was converted to a set of graphs based on the same method of [ 5 ] . Due to limited space , here we only report the results wrt a correlation coefficient of 099 Efficiency Test . We implemented one baseline algorithm , Raw , which excludes three pruning techniques , combination pruning , critical connectivity pruning , and subgraph connectivity pruning . By comparing the runtime efficiency between Cocain and Raw , we can get an idea about the effectiveness of the pruning techniques proposed in this paper . Figure 4 shows the runtime comparison between Cocain and Raw by fixing γ at 1.0 and varying min sup , and fixing min sup at 40 % and varying γ respectively . We see that Cocain is always faster than Raw . The high performance of Co cain in comparison with Raw also demonstrates that the pruning techniques proposed for Cocain are extremely effective .
10000.000
1000.000
) c e s ( e m i t n u R
100.000
10.000
1.000
0.100
0.010
0.001
0.000
30
Cocain Raw
50
60
70
40
90 Relative Strict Support Threshold ( % )
80
100 a ) γ = 1.0
1000.000
100.000
) c e s ( e m i t n u R
10.000
1.000
0.100
0.010
0.001
Cocain Raw
0.95
1.00
0.70
0.85
0.80
0.75
0.90 Edge Density Coefficient b ) min sup=40 %
Figure 4 : Efficiency Comparison ( stock market data )
Scalability Test . Meanwhile , a comprehensive scalability study was conducted in terms of the base size . The results show that Cocain has linear scalability in runtime against the number of input graphs in database .
5 . CONCLUSION
In this paper we proposed a novel algorithm , Cocain , to mine fre quent closed coherent quasi cliques from large dense graph databases . By focusing on vertex labels , we first introduced a simple canonical form to uniquely represent a quasi clique pattern . By exploring some nice properties of quasi clique patterns , we proposed several effective search space pruning techniques , diameter pruning , combination pruning , vertex connectivity pruning , critical connectivity pruning , and subgraph connectivity pruning , which could be used to accelerate the mining process . We also introduced an efficient pattern closure checking scheme to speed up the discovery of closed quasi cliques . An extensive performance study with both real and synthetic databases has demonstrated that Cocain is very efficient and scalable .
6 . ACKNOWLEDGEMENT
The authors are grateful to Vladimir L . Boginski , Panos M . Parda los , and Sergiy Butenko for providing us the US stock market database . We thank Jasmine Zhou and Haiyan Hu for sending us the yeast microarray database and Michihiro Kuramochi for sending us the KEGG database . Thanks also go to Beng Chin Ooi , Anthony K . H . Tung and Xifeng Yan for their kind help .
7 . REFERENCES [ 1 ] R . Agrawal , R . Srikant . Fast Algorithms for Mining
Association Rules in Large Databases . VLDB’94 .
[ 2 ] V . Boginski , S . Butenko , PM Pardalos . On structural properties of the market graph . In A . Nagurney ( editor ) , Innovations in Financial and Economic Networks , Edward Elgar Publishers , Apr . 2004 .
[ 3 ] H . Hu , X . Yan , Y . Hang , J . Han , X . Zhou . Mining coherent dense subgraphs across massive biological network for functional discovery . Bioinformatics , Vol . 21 , Suppl . 1 , 2005 .
[ 4 ] J . Pei , D . Jiang , A . Zhang . On mining cross graph quasi cliques . SIGKDD’05 .
[ 5 ] J . Wang , Z . Zeng , L . Zhou . CLAN:An Algorithm for Mining
Closed Cliques From Large Dense Graph Databases . ICDE’06 .
[ 6 ] X . Yan , X . Zhou , J . Han . Mining closed relational graphs with connectivity constraints . SIGKDD’05 .
