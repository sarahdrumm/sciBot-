Algorithmic Cartography :
Placing Points of Interest and Ads on Maps
Mohammad Mahdian Okke Schrijvers Sergei Vassilvitskii
{mahdian , sergeiv}@google.com okkes@csstanfordedu
Google
Stanford University
Google
ABSTRACT We study the problem of selecting a set of points of interest ( POIs ) to show on a map . We begin with a formal model of the setting , noting that the utility of a POI may be discounted by ( i ) the presence of competing businesses nearby as well as ( ii ) its position in the set of establishments ordered by distance from the user . We present simple , approximately optimal selection algorithms , coupled with incentive compatible pricing schemes in case of advertiser supplied points of interest . Finally , we evaluate our algorithms on real data sets and show that they outperform simple baselines .
1 .
INTRODUCTION
Accurate maps used to be treated as state secrets , but high quality geographic data is now readily available at our fingertips , and online mapping services boast a large user base , both on mobile and desktop . Google Maps alone claimed 150 million mobile users in 2011 [ 20 ] and more than one billion monthly active users in total in 2012 [ 19 ] .
One of the challenges in algorithmic cartography is sifting through all of the data available and deciding what to place on the map ( at a given zoom level ) . One must decide which natural features , like rivers , lakes , and mountains should be labeled , which roads should be rendered , which political features , such as city and neighborhood names , should appear , and , finally , which points of interest ( POIs ) , such as restaurants , schools , and museums , should be highlighted .
In addition to the organic results , one may wish to place advertisements on the map as well . Both the quantity and the quality of page views on online map services make them an attractive target for advertising , since an online map user reveals the location she is interested in , and sometimes the type of business she is looking for . These are valuable pieces of information that can be used to target relevant advertisements . In short , many of the same dynamics that make sponsored search advertising a lucrative business are at play here as well . Furthermore , advertising on maps enables local and small business advertisers that might not be able to compete on platforms like search advertising where larger advertisers are present [ 6 ] .
In this work we focus on the POI selection problem , taking into account both organic and sponsored POIs . We must balance many competing objectives : the overall utility of the map , density and diversity of results , as well as the overall aesthetics . We will discuss the critical parameters that need to be taken into account for this problem , propose models that capture some of these issues , give optimization algorithms , and , for the case of ads , pricing mechanisms for these models . An additional consideration that we do not consider here is that of zoom stability , see , for example , [ 18 ] for complex optimizations that emerge with this constraint . We distinguish between two distinct and important scenarios in our models : the location aware case , where the location of the user is known ( eg , when the map is used on a mobile app with access to GPS data ) , and the locationunaware case , where only the boundaries of the map viewport are known and the POIs need to be placed without reference to a specific user location ( eg , when the map is used on a desktop computer with no GPS ) . We define these models in the next two sections , and then study the locationunaware problem followed by the location aware one .
2 . CONSIDERATIONS FOR POI
SELECTI ON ON MAPS
Map making is an ancient tradition : one of the oldest known maps comes from Babylon , and is dated to 5th century BC [ 21 ] ; in addition , there is some indication that maps may be even older [ 15 ] . Although maps today look nothing like the ornate hand drawn maps from the Middle Ages , they are also not purely utilitarian and design continues to play a large role in annual map making competitions [ 7 ] . Similar design , aesthetic , and pragmatism considerations are important factors for the placement of POIs on maps , as we will discuss in this section .
Aesthetics . One desire that is often repeated is that of being selective in choosing items that should appear on the map , thereby avoiding clutter . In many cases , less is more : for example , one need not label every business in a commercial area , or every museum in a city . By discriminating , the map maker accentuates the relevant parts of the area , and gives the viewer the right information to make his or her decision .
755 Capturing the overall aesthetics formally is a challenging task well beyond the scope of this work.1 We begin by formalizing what is probably the most obvious form of clutter : placing POIs too close to each other , versus optimizing for geographic diversity . As it turns out , this is well aligned with another constraint motivated by negative externalities that POIs and advertisements impose on each other .
Negative Externalities . It is well understood that content , as well as ads , delivered simultaneously to a user compete for the user ’s attention . Therefore , placing an additional POI on a page decreases the value of other POIs on the same page.2 In economics terminology , POIs impose negative externalities on each other . This phenomenon is well studied in the literature for enforcing diversity among search results [ 2 , 10 ] , as well as among various forms of advertising [ 1 , 8 , 9 , 11 , 12 , 13 ] .
In the specific context of advertising , externalities are probably stronger , since a search for restaurants in downtown Palo Alto is a strong indication that the user is looking to pick one restaurant in that neighborhood to visit in a not too distant future , and the value of ads is mostly based on their immediate influence on this one decision . Furthermore , the externality effect for ads on a map is clearly a location dependent effect : both the distance between potentially competing businesses , as well as the distance from the user play a large effect in valuation of the ad .
3 . MODEL
We model negative externalities differently depending on whether the user ’s location is known or not . In the locationunaware model , we discount the utility gained from a POI by a factor dependent on the distance to the nearest establishment ( of a similar type ) also placed on the map . Such an establishment is in direct competition , and the closer it is , the likelier that both are in the consideration set of the user . As mentioned above , this is also well aligned with our aesthetic preference to avoid clutter in the map .
When the precise user location is known , which we will refer to as the location aware setting , previous work on geographic choice [ 14 , 17 ] has shown the rank of the establishment in a list ordered by distance to the user plays a large role on the user ’s final choice . That is , all else being equal , the fact that one business is closest and the other is second closest , leads to the former getting a larger number of engagements than the latter . We adapt the empirical findings to define an economically grounded model for negative externalities in this setting . In both models , we are given a number of candidate POIs , A = {a1 , a2 , . . . , an} , each associated with the location where it should be shown , if selected . Throughout this paper we will assume that candidate POIs correspond to a single point on the map . This assumption is reasonable when they are relatively small markers . We will use this assumption in our algorithms , but the model is well defined if each POI is allowed to be a geometric shape ( eg , a rectangle ) that occupies a non trivial area .
Each POI ai has a standalone value vi . For organic results this is the predicted utility of the POI to the user .
1See Section 8 for a discussion of various aspects of aesthetics not covered here . 2Other models , where different POIs might complement each other , are not considered in the present work .
For ads , this represents the value of the ad to the advertiser , if this were the only ad being shown . This value takes into account all of the features associated with the user session , such as the POI ’s relevance , quality , and the distance between the location of the POI and the “ focal area ” of the map ( eg , points closer to the user ’s location in the locationaware model have higher value , or when the user has asked for a route between two points on the map , points that are closer to this route have higher value , everything else being the same ) .
The final value of placing a POI ai is the product of vi and a discount term δi(S ) that depends on the set S of other POIs that are displayed and captures the effect of negative externalities . This part is modeled differently depending on whether the location of the user is known or not , as described below . In either case , the final objective of the optimization problem is to select a set S of POIs with the maximum total value .
We now state the problem formally :
Definition 1
( POI Selection Problem ) . Given a set of POIs A = {a1 , a2 , . . . , an} , where each POI ai has an associated value vi ; and a discount function δi , find a set S ⊆ A that maximizes the total utility : ai∈S viδi(S ) .
3.1 Location unaware model
In this model , we focus on a discount function defined as the minimum of pairwise discount factors between ai and other POIs in S , ie , δi(S ) = minaj∈S\{ai}{δij} where for aj ∈ S \ {ai} , δij is the pairwise discount factor between ai and aj.3
The pairwise discount factors are , in general , functions of the similarity of the two POIs as well as the distance between their corresponding locations , ie ,
δij = f ( wij , dij ) , where wij is the relative similarity of POIs ai and aj ( eg , it has a high value if both ai and aj are sushi places , moderately high value if one is a sushi place and the other is a burger joint , and low value if one is a sushi place and the other is a car mechanic ) , and dij is the distance between the locations associated with ai and aj . The discount function , f ( w , d ) , is a decreasing function of w and an increasing function of d , and is always between 0 and 1 . In this work , we first focus on the uniform relevance case , where wij ’s are all the same and δij = f ( dij ) for an increasing function f . This is a reasonable assumption in cases where the candidates considered are similar , for example , when we want to only display restaurant markers . We will then turn to the more complex case of general similarity functions . tions , eg ,
Well behaved discount functions . Not all discount functions are appropriate for modeling the map POI selection problem : as we show below , under some functions the optimal solution may get arbitrarily dense . 3We also considered a number of alternative discount funcj δij , but settled on the minimum function because of its simplicity as well as a number of desirable properties it exhibits . For example , the minimum function is local , and therefore is not affected by factors such as the screen size that affect the total number of POIs that can be displayed .
756 Consider an instance of the POI selection problem with infinitely many candidates , one at each position in the unit square [ 0 , 1]2 , and each having a value of 1 . We call the discount function f a bounded solution function , if the POI selection problem on this instance , using f as the discount function , has an optimal solution of bounded value . For example , for f ( x ) = 1−e−x , the solution that consists of ( k + 1)2 points {i/k : 0 ≤ i ≤ k}2 has a value of
( k + 1)2 · ( 1 − e
−1/k ) ≥ ( k + 1)2 · 1 2k
> k 2
, which is unbounded . Such functions are obviously undesirable for modeling the POI selection problem .
To exclude these functions , we introduce the notion of planar density of f , denoted by λ(f ) , and show that bounded planar density implies that f is bounded solution .
Lemma 1 . Call
λ(f ) = sup x>0 f ( x ) x2 , the planar density of f . For every bounded solution function f , the planar density , λ(f ) , is finite .
Proof . Assume this is not the case . This means that for every constant B , there is a value of x such that f ( x ) x2 > B . Using this , we construct a solution for an instance in [ 0 , 1]2 as follows : the solution selects POIs at locations {ix : 0 ≤ i < 1/x}2 . This is a collection of precisely ( cid:100)1/x2 points , with the distance between each points and its nearest neighbor exactly x . Therefore , the value of this solution is ( cid:100)1/x2f ( x ) ≥ f ( x ) x2 > B . Since B can be arbitrarily large , this contradicts the assumption that f is boundedsolution . 3.2 Location aware model .
To model the discounts in the location aware setting , we adapt the findings in [ 14 , 17 ] which showed , that , given a set of choices to a user , the probability that a user chooses an establishment can be explained by the rank of the establishment among the alternatives ( controlling for other factors that depend on the individual establishment and not the set of alternatives , like the quality of the establishment or its distance to the user ) . For example , the attractiveness of a cafe decreases if there is a different cafe that is strictly closer . To formalize the model , let π denote a permutation of all candidates in increasing order of their distance to the user . In this model , we assume the location of the user is known , either deterministically , or as a distribution . If the location of the user is known as a distribution , π will be a random variable selected from a distribution P over the set of permutations . Let π(i , S ) denote the rank of ai in S under π , ie , π(i , S ) = 1 if ai is the element of S that is closest to the user . The rank discounts are specified by a non increasing sequence γ1 , γ2 , . . . of discount values . The discount of POI ai in the set of displayed ads S is given by δi(S ) = γπ(i,S ) . We assume without loss of generality that γ1 = 1 .
In the case that the user location and therefore the ordering π is uncertain , we can represent the location information as a distribution over a set of permutations Π = {π1 , π2 , . . . , πk} , with permutation πi occurring pi fraction of the time . It is easy to show that the total number of possible orderings of a set of n points in R2 in increasing order of their distance to a reference point is bounded by n4 , and therefore a compact representation of the input in the above form always exists . The aim in the non deterministic case is to select a set S that maximizes the expected ( over π drawn from P ) value of the objective function .
4 . LOCATION UNAWARE SELECTION 4.1 The Optimization Problem
Below we give an algorithm for the optimization problem for location unaware POI selection . At a high level we show that a large family of discount functions can be approximated by a parametrized step function that jumps from 0 ( full discount ) to 1 ( no discount ) at a specific distance R . Using this simpler discount function , we compute an allocation that approximately maximizes the social welfare ( for a judicious choice of R ) , but is much easier to optimize . In fact , with this choice of discount function , the maximization problem is equivalent to finding a maximum weight independent set in unit disk graphs.4 This means that the objective is to select a set of points with the maximum total weight subject to the constraint that no two selected points are within distance R of each other . A simple approximation algorithm for this problem is the greedy algorithm that iteratively picks the point of maximum weight and eliminates all of the candidates within distance R of the selected point . We call the algorithm PickAndRemove and show its pseudocode in Algorithm 1 .
Algorithm 1 Map POI Selection Algorithm 1 : function PickAndRemove(R ) C ← Set of candidate POIs , A 2 : S ← ∅ 3 : while C = ∅ do 4 : Let ai ← arg maxai∈C vi 5 : S ← S ∪ {ai} 6 : C ← C \ {aj : dij < R} 7 : 8 : 9 : 10 : end function end while return set S of
To analyze the algorithm , we define the following function for a set S of points on the plane : ai∈S h(S ) = f ( min aj∈S\{ai}
{dij} ) .
Here , if S \ {ai} is empty , f ( minaj∈S\{i}{dij} ) is defined as 1 . The core of our proof is the next lemma , which gives an upper bound on the value of h(S ) for any set of points contained in a ball of given radius . To state the lemma , we need to restrict f to a class of “ well behaved ” functions as defined below .
Definition 2 . We say the function f is well behaved if : • f is an increasing function with f ( 0 ) = 0 and f ( ∞ ) =
1 .
4This also places the problem in the realm of geometric set packing , eg [ 4 ] . We express the approximation with respect to the original discount function differentiating it from traditional set packing problems .
757 • f has a bounded planar density , λ(f ) . √ • There is a threshold value θf ≥ 0 such that f ( x ) is a convex function of x for x ≤ θf and a concave function of x for x ≥ θf .
The last requirement intuitively states that the discount function is S shaped , with the value of δ rising slowly at first , then sharply , and then slowly again . One example of such function is the double logistic function , f ( x ) = 1−exp(−x2 ) . For every well behaved function we can bound the value of h(S ) for any set S of points in a ball of radius R .
Lemma 2 . Assume f is a well behaved function . For every set S contained in a ball of radius R , h(S ) ≤ 16R2λ(f )+ 1 .
Given the above lemma , the approximation factor of the algorithm can be bounded as follows :
Theorem 1 . Assume f is a well behaved function . Then , the approximation ratio of PickAndRemove(R ) is at most ( 16R2λ(f ) + 1)/f ( R ) = O(1 ) .
Proof . Fix an instance of the problem and an optimal solution OP T for this instance . We use a charging argument to show that the value of OP T is at most c times the value of the solution ALG produced by PickAndRemove(R ) . Consider any point p in OP T . The algorithm PickAndRemove(R ) terminates when the set C is empty , and therefore the point p must be removed from C during the execution of the algorithm . Assume p is removed in an iteration where the point ai is added to ALG . We charge p to ai . By definition of the algorithm , it is clear that vp ≤ vi . We now argue that for every ai ∈ ALG , the total value that OP T gets from the points charged to ai is at most ( 1 + 16R2λ(f ))/f ( R ) times the value that ALG gets from ai . It is clear that the value that ALG derives from ai is at least vi · f ( R ) . Since vp ≤ vi for every point p charged to ai , the total value that OP T derives from such points is at most vi · h(S ) , where S is the set of points in OP T charged to ai . Since every such point is within distance R of ai , by Lemma 2 , h(S ) ≤ 16R2λ(f ) + 1 . Moreover , since f is well behaved , there is a finite value of R such that f ( R ) ≥ 1/2 , which implies that the approximation ratio is always bounded by a constant .
All that remains is to prove Lemma 2 . Proof of Lemma 2 . Assume S is a set of points contained in a ball of radius R that maximizes the value of h(S ) . If S is a singleton , then h(S ) = 1 and we are done . So , assume |S| ≥ 2 . For every ai ∈ S , ri := minaj∈S\{ai}{dij} is well defined and finite . For each ai ∈ S , consider a ball Bi of radius ri/2 around ai . These balls are all disjoint , since if two balls Bi and Bj intersect , the distance between i and j must be less than ri/2 + rj/2 ≤ max(ri , rj ) , which contradicts the definition of ri ’s . Furthermore , since ri ≤ 2R for all i , all Bi ’s are contained in a ball of radius 2R . This means that the total volume of Bi ’s cannot exceed the volume of a ball of radius 2R . In other words , or
π(ri/2)2 ≤ π(2R)2 i ≤ 16R2 . On the other hand , h(S ) = i i f ( ri ) . Therefore , h(S ) is bounded from above by the maximum of i r2
√ xi ) subject to i f ( ri ) subject to reduces to the maximum of i r2 i f ( i ≤ 16R2 . Denoting xi := r2 i , this i xi ≤ 16R2 . Consider the optimal solution of this maximization program . For any two i and j where xi , xj ≥ θf , xi and xj must be equal , since otherwise we can increase the objective function by increasing the smaller one and decreasing the larger one ( due to the concavity of f in this range ) . Therefore , all xi ’s such that xi ≥ θf are equal . Similarly , there can be at most one xi in ( 0 , θf ) , since if there are two , the objective function can be increased by increasing the larger one and decreasing the smaller one ( due to the convexity of f in this range ) . Let k denote the number of xi ’s that are non zero and at least θf . The total value of these xi ’s is at most 16R2/k . The value of the xi that is less than θf ( if any ) is also bounded by the same value . Therefore , the total value
√ xi ) is at most i f ( √ √ k)+f ( 4R/ k ) = kf ( 4R/
( k+1)f ( 4R/
√ k ) ≤ 16R2λ(f )+1 .
Theorem 1 implies that the approximation factor of the algorithm depends on the function f . As an example , we compute this approximation factor with the discount function f ( x ) = 1 − e−x2 , also known as the double logistic function .
Corollary 1 . The map selection problem with a double is approximable logistic discounting function f ( x ) = 1−e−x2 within a factor of 2235
Proof . For every x , we have e−x2 ≥ 1 − x2 . Therefore ,
λ(f ) = f ( x ) x2 =
1 − e−x2 x2
≤ 1 .
Hence , the approximation factor can be bounded as :
α
∗ ≤ min
R
16R2 + 1 f ( R )
Numerical calculation shows that the above expression achieves its minimum at R ≈ 0.578 , achieving a value of α∗ ≈ 22342 4.2 Pricing for Ads
The optimization algorithm in the previous section is agnostic to the provenance of the candidate POIs : they can be organic results , or potential ads . In the latter case , an important part of the overall system is the pricing scheme : we want to set the prices such that each advertiser has an incentive to truthfully reveal the value of the ad .
We show how the algorithm in the previous section can be coupled with an efficient pricing scheme to obtain such an incentive compatible mechanism . In general , the key point that determines if an approximation algorithm can be turned into an incentive compatible mechanism is whether the allocation function is monotone [ 3 ] . In the case of our problem , the allocation function is the function that for a fixed set of bids v−i of advertisers other than i , maps the bid vi of bidder i to δi(S ) , where S is the solution computed with the bid vector ( vi , v−i ) . If this function is monotonically nondecreasing , then there is a payment function that is incentive compatible . In general , computing this payment function involves integrating over the allocation function , which can
758 be algorithmically inefficient . We show not only that the allocation rule is monotone , but also that there is a simple algorithm for computing truthful payments that has the same asymptotic running time as the allocation algorithm . The pricing algorithm is presented in Algorithm 2 . The algorithm proceeds as in the last section , processing points in decreasing order of their values , and , for each ad ai , picks it unless another point within distance R is picked before . In addition , whenever the latter event occurs , it attributes the fact that ad ai is blocked to the unique picked point aj that is within distance R of ai ( if such a unique ad exists ; if it does not , the event is not attributed to any ad ) . The price for a picked ad ai is set to the maximum of the values of the ads that are blocked because of ai , times the appropriate discounting coefficient . number of other ads blocking aj
Sort candidate ads so that v1 ≥ v2 ≥ . . . ≥ vn for i = 1 → n do b ← 0 for k = 1 → j − 1 do pi ← 0 end for S ← ∅ for j = 1 → n do
Algorithm 2 Map Ad Pricing Algorithm 1 : function PickAndRemoveAndPrice(R ) 2 : 3 : 4 : 5 : 6 : 7 : 8 : 9 : 10 : 11 : 12 : 13 : 14 : 15 : 16 : 17 : 18 : 19 : 20 : 21 :
S ← S ∪ {aj} pi ← max{pi , vj} if ak ∈ S and dkj < R then end if end for if b = 0 then i ← k b ← b + 1 end if for i . aj is not blocked by any ad else if b = 1 then aj is blocked by unique ad end for return set S of winners , price pi·f ( minaj∈S\ai{dij} )
22 : end function
Theorem 2 . The mechanism defined by Algorithm 2 is incentive compatible .
Proof Sketch . The main insight behind the proof is the following : For each ad ai that is picked by the algorithm PickAndRemove(R ) , if we compare the execution of this algorithm with the execution of the same algorithm when ad ai is removed , the two executions look exactly the same up until the point where the execution without ai picks an ad aj that is within distance R of ai . This means that if we change the value of ad ai to v and run the algorithm , for v > vj , the algorithm picks the exact same set of ads ( except that it picks ai later if v is smaller ) , and if v < vj , it will pick the ad aj , and after that , cannot pick ai . Therefore , the value vj is the threshold value above which ad ai will be picked in the solution , and the discount factor f ( minaj∈S\ai{dij} ) is the same when ai is picked .
What remains is to prove that the threshold value vj described above is equal to the pi computed by the algorithm . Note that since the algorithm initially sorts ads in decreasing order of values , the value pi at the end of the algorithm is either zero ( if we never reach line 18 with this value of i ) , or is equal to the first vj for which line 18 is reached . We argue that this j is the same as the j defined above . To clarify the notation , let j1 denote the first value of j for which line 18 is reached with i and j , and j2 denote the first j so that aj is within distance R of ai that is picked by PickAndRemoveAndPrice(R ) on an input without ai . By definition the condition in line 10 is satisfied for j = j2 and k = i . Furthermore , this condition should not be satisfied for j = j2 and any other value of k , since if it is , j2 would not be picked by PickAndRemoveAndPrice(R ) on the instance without ai . Thus , line 18 must be reached with this value of i and j = j2 . Next , we prove that this line is not reached for any j < j2 ( and the same value of i ) . Assume , for contradiction , that it is reached for one such j . Consider the execution of PickAndRemoveAndPrice(R ) on the instance without ai . It is easy to see that in this scenario the algorithm must pick aj , since the only selected ad blocking it is ai , which is removed . This contradicts with j2 being the first ad within distance R of ai picked in this scenario . 4.3 Non Uniform Weights
The algorithms we presented so far work in the regime where the discount function is indifferent to the similarity between the POIs . This is equivalent to assuming wij = 1 for all pairs ( i , j ) . In this section we explore the setting of non homogenous weights . We show that in general the optimization problem is NP complete , and very hard to approximate . We then turn our attention to a more limited setting and show that the optimization algorithm presented before remains approximately welfare optimizing . We consider the special family of discount functions {g} , which multiply the effects of similarity and distance , namely : f ( wij , dij ) = g(dij/wij ) . Note that just like f , g is increasing in distance and decreasing in similarity . We prove that even for this special class of discount functions , and even fixing any set of pairwise distances dij , the problem of finding the optimal set of POIs given the weights wij is NPcomplete .
For this result , we need the discount function g to satisfy a mild non triviality condition : For every n , there has to be a c > 0 and 0 < tmin < tmax such that g(x ) < c/n for x ∈ ( 0 , tmin ] and g(x ) > c for x ∈ [ tmax,∞ ) . Roughly speaking the condition requires the function g to make full use of the input range . We say a function g is non trivial if it satisfies the above condition .
Theorem 3 . For any non trivial discount function g and every set of distances {dij} , the problem of optimal POI selection given the weights wij is NP complete .
Proof . We reduce from the maximum independent set problem . Given a graph G = ( V , E ) with n vertices , we construct a set of weights {wij} such that the resulting instance of the POI selection problem ( with vertex i corresponding to POI ai ) captures the independent set problem in G .
Let n be the number of vertices in G . By non triviality of g , there are c > 0 and 0 < tmin < tmax such that g(x ) < c/n for x ∈ ( 0 , tmin ] and g(x ) > c for x ∈ [ tmax,∞ ) . Associate each node vi ∈ V with POI ai with value 1 . For any two points ai and aj , let fl dij/tmin , dij/tmax , wij = if ( vi , vj ) ∈ E otherwise .
759 Now consider any optimal solution to the welfare optimization problem , S∗ . We show that the nodes of G corresponding to S∗ must be an independent set . Assume , for contradiction , that a node v in S∗ has an edge to another node u ∈ S∗ . We construct another solution by removing all such u ’s . By the definition of wij ’s , g(dij/wij ) is less than c/n for ( i , j ) ∈ E and is greater than c otherwise . Therefore , removing all nodes u that have an edge to v removes at most n terms of value less than c/n and adds a term of value greater than c . This means that the resulting set has higher total value than S∗ , contradicting the optimality of S∗ . This means that solving the POI selection problem on this instance is equivalent to solving the independent set problem on G .
The lower bound presented above may seem limiting , but the similarity weights wij usually have additional structure . For example , consider the following simple model , where we partition the points into k distinct classes A = A1 ∪ A2 ∪ . . . ∪ Ak . In this setting , A1 may represent restaurants , A2 , mechanics , A3 , dentists , and so on . We impose a binary structure on the similarity weights : any two POIs in the same class have a high similarity of wH , whereas any two POIs in different classes have a low similarity of wL < wH . Now consider the intuition behind Algorithm 1 . When the weights are identical , upon selecting a POI , the algorithm removes all of the other competing advertisers within radius R . When the similarity weights are not uniform , we adapt the algorithm as follows . There are two radii to consider : RH for points in the same cluster , and RL for points across clusters . The algorithm then iteratively picks POIs of maximum value , and every time a POI is picked , it removes all points in the same class within radius RH , and all points in other classes within radius RL .
Proposition 1 . Assume f is a well behaved function , and wH > wL as above . Then the approximation ratio of the modified PickAndRemove algorithm is at most twice the ratio of the algorithm with uniform weights .
Proof Sketch . We proceed as before , charging every point a in OPT to the POI selected by the algorithm that resulted in the removal of a from consideration . There are now two sets of points that are removed , those from the same class and those from a different class . By the same logic as in Theorem 1 , we can bound the total value of points in the same class to 16R2 H ( λf ) + 1 . Moreover , since RL ≤ RH , the total value of points in the different class is at most 16R2 H ( λf ) + 1 and the Proposition follows .
L(λf ) + 1 < 16R2
5 . LOCATION AWARE SELECTION
We now turn to the POI selection problem in the locationaware model , where we have either exact or approximate information on the user ’s location . As we observe in Section 5.1 , if the user location is known without any uncertainty , corresponding to the case of a single ranking π of the POIs based on their distance to the user , the problem can be solved exactly using a dynamic programming algorithm . The more technically challenging case is when the user location is uncertain , requiring an optimization with respect to a convex combination of multiple permutations . We study this case in Section 5.2 , where we first give a general O(log n)approximation algorithm , and then improve this factor to
O(1 ) for important special cases such as geometric and concave discount functions . 5.1 Known User Location
When the user location is known exactly , the distances between the user location and POI locations induce a single ordering π on the items . We give a simple dynamic program that solves the optimization problem .
Order the POIs according to π , ( ie , a1 is the POI closest to the user , and so on ) . Let U [ i , j ] be the value of the optimal solution that only picks points from among those in i , . . . , n and allocates them to slots j , . . . , n in the permutation ( ie , getting discounts γj , . . . , γn ) . The base case has U [ · , n+1 ] = U [ n + 1,· ] = 0 . The recursive definition considers whether POI ai should be allocated to slot j :
U [ i , j ] = max(U [ i + 1 , j ] ,
γj · vi + U [ i + 1 , j + 1] ) .
The value of the optimal solution is the value in cell U [ 1 , 1 ] . In case of advertisements , this algorithm yields a simple mechanism : for the payments of each winner , we run the dynamic program without that winner to determine their VCG payment . 5.2 Uncertain User Location
If the location of the user is uncertain , and we are only given a prior over possible locations , we can phrase the optimization problem as that of finding the maximum expected social welfare , where the expectation is over the prior . We recall the notation below .
Each possible user location induces a permutation π over the points of interest ordered by distance to the user . Let Π = {π1 , π2 , . . . , πk} be the set of possible permutations , with permutation πi occurring pi fraction of the time . For a set of selected POIs S , and a set of permutations Π , let U ( Π , S ) denote the expected social welfare , k i=1 j∈S
U ( Π , S ) = pi vjγπi(j,S ) .
We first give a simple greedy algorithm that achieves an O(log n ) approximation to the optimum solution for general non increasing discounts γ . We show in Section 5.4 that the same algorithm gives a constant approximation ratio when the discounts are linear , concave , or geometric . 521 The LargestValuePrefix Algorithm Algorithm LargestValuePrefix first orders the POIs in order of decreasing value v1 ≥ v2 ≥ . . . ≥ vn . Let ai be the POI corresponding to the value vi . Define the prefix sets , X1 = {a1} , X2 = {a1 , a2} , and generally Xi = {a1 , a2 , . . . , ai} . The algorithm returns the best set among all of these , S = arg maxXi
U ( Π , Xi ) .
Lemma 3 . LargestValuePrefix gives an Hn = O(log n ) approximation to the optimal solution .
Proof . Let ALG be the value returned by the algorithm , and OP T be the value of the optimal solution . We first show a simple upper bound on OP T , denoted by OP T . When the POIs are ordered in order of non increasing values , v1 ≥ v2 ≥ . . . ≥ vn , a simple swapping argument shows that :
OP T ≤ v1γ1 + v2γ2 + . . . + vnγn = viγi = OP T n i=1
760 The value of the set selected by the algorithm can be lower bounded as follows :
ALG ≥ γ1 · v1 ALG ≥ γ2 · ( v1 + v2 ) ≥ 2 · γ2 · v2
ALG ≥ γn · ( v1 + . . . + vn ) ≥ n · γn · vn .
So for every i : viγi ≤ ALG/i . Therefore : n viγi ≤ n i=1 i=1
OP T ≤ OP T =
ALG = Hn · ALG
1 i where Hn = O(log n ) is the nth harmonic number .
The analysis presented above is almost tight . Lemma 4 . There exist instances where the solution relog log n ) approxi turned by LargestValuePrefix is an Ω( log n mation to the optimum .
Proof . The hard instance applies even when there is a single permutation π . Let k be a constant that we fix later . For a schematic depiction of the following description , refer to Figure 1 . The POIs come in a set of 2k blocks . Block 2i has Mi POIs , each of value vi . Block 2i − 1 has Mi − Mi−1 POIs , each with value v+ i = vi + η for some small value of η . Finally , we fix an , and set values with vi = i−1 , and the block size M0 = 0 , M1 = 1 , and Mi = −2(i−1 ) for i > 1 . To set the discounts , let γ1 = 1 , γi = for i ∈ ( M1 , M1 + M2 ] , γi = 2 for i ∈ ( M1 + M2 , M1 + M2 + M3 ] , and more generally γi = for i ∈ ( j=1 Mi,+1 k all of the blocks with value v+ k
One solution is to pick the blocks of value vi , and leave i . This solution has value : j=1 Mi ] .
1 = k ≤ OP T .
Miγivi = i=1 i=1
The LargestValuePrefix algorithm takes all of the elements . For the sake of analysis , we can increase all discounts to be at least k−1 . Then the utility achieved by the algorithm is at most : i−1γi + ( Mi − Mi−1)γivi+1 fi + Mkγkvk k
.Mi−1v+ i=2
2 +
γ1v+ ≤ ( 1 + η)( + ( k − 1 ) · 2 ) + 1 ≤ 3k + 1
Therefore , the approximation ratio is at least
3k +1 . We set = 1/k , therefore the numerator is exactly 4 . To compute the total number of POIs , k k k−1 n =
Mi = k2i . i=1 i=0
Therefore we have that kk ≤ n ≤ k2k . Then , 1
2 log n ≤
2 log k . Combining that , we have k log k ≤ log n and k ≥ log n · · k ≥ 1 4
3k + 1
1 log n 2 log k
≥ log n
8 log log n
Therefore , the LargestValuePrefix algorithm will give an Ω( log n log log n ) approximation ratio on the instance .
Figure 1 : The lower bound example for LargestValuePrefix . We have vi = i−1 and Mi = 1/ 2(i−1 ) . v+ is just barely larger than vi and therefore LargestValuePrefix will pick it earlier . At each discount level γi there can be Mi POIs . i
5.3 Pricing
Again , for the case of advertisement selection , we give a pricing scheme that leads to an incentive compatible mechanism . While the welfare maximizing allocation is always monotone , this is not generally true for approximately maximizing allocation rules . However , the following Lemma shows that in the case of the LargestValuePrefix algorithm , the monotonicity property holds . ( Due to space constraints , we defer the proof to the full version of the paper . )
Lemma 5 . LargestValuePrefix is a monotone alloca tion rule .
For mechanisms with a monotone allocation rule , there is a unique payment rule ( where losers pay nothing ) that makes the mechanism dominant strategy incentive compatible [ 3 , 16 ] . The payment is in terms of critical values zj where the allocation jumps ( as the value of the bidder changes ) , and the magnitude of those jumps . It is easy to see that there are polynomially many such critical points and they can be computed in polynomial time . This gives us a polynomialtime dominant strategy incentive compatible mechanism . 5.4 Better Bounds for Special Discount Func tions
We now consider some important special cases of discount functions for which LargestValuePrefix is a constantfactor approximation . The general proof structure is as follows : for the special discount functions we focus on a particular set Xj that the algorithm will consider . By using information on the discount function , we show that picking Xj gives a constant factor approximation to the optimal social welfare . Since LargestValuePrefix yields an solution that is at least as good as Xj , this shows that LargestValuePrefix performs well for these discount functions . Note that we do not need to change the algorithm ; the same algorithm will provably perform better through a better analysis . Geometric Discounts . We define geometric discounts to be those of the form γi = αi−1 with α ∈ ( 0 , 1 ) .
Lemma 6 . Let γ be a geometric discount function , and 2 . Then Xj is a let j be the largest index such that γj ≥ 1 3 approximation to OP T . an optimal value of
Proof . Recall that OP T ≥ OP T selects all POIs A for ai∈A viγi where vi is in decreasing order . We split up the value of OP T into that which is v1v+2v2M211M2−1M3−M2M3v3v+4v+3761 gained from POIs in Xj , and that which is gained from the remaining POIs A\Xj . Let ALG denote the value of picking Xj as solution . Let U∗(Xj ) be the contribution of elements in Xj to OP T For the elements that are in Xj , their discount is at least 1/2 hence their contribution to ALG is at least half of that in OP T : U∗(Xj ) ≤ 2 · ALG . For the remaining elements we show that U∗(A\Xj ) ≤ ALG . In the following let vj be the value of the smallest i=0 αi = 2 , we have : element of Xj . Recall that for any α ∈ ( 0 , 1 ) : j−1 1−α and∞ i=j αi = αj
1−αj
1−α . Using this and γj ≥ 1 ∞ j
γi ≤ vj ·
γi ≤ ALG
∗
U
( A\Xj ) ≤ vj · i=j+1 i=1 where the first inequality comes from vj being a lower bound on values of POIs in A\Xj , the second inequality from the bounds on geometric sequences and γj ≥ 1/2 , and the last inequality because vj is a lower bound on all values of POIs in ALG . Combining this we get :
OP T ≤ OP T = U
∗
∗
( A\Xj )
( Xj ) + U
≤ 2 · ALG + ALG = 3 · ALG .
Since LargestValuePrefix performs at least as well as picking Xj , this completes the proof .
Linear and Concave Discounts . We define concave discount functions as follows : for a number 0 < k ≤ n a concave discount function satisfies : γi−1 + γi+1 − 2γi ≤ 0 , for all i ∈ [ 2 , k − 1 ] and γi = 0 for i ≥ k . When the above inequality is tight , the function is linear and has γi = 1 − i−1 k . We will prove the bound for linear discounts first , and then extend it to all concave discounts . We defer both proofs to the full version of the paper .
Lemma 7 . Let γ be a linear discount function , and let j be ( cid:100)(k + 1)/2 such that j is the largest index with γj ≥ 1 2 . Xj is a 7
3 approximation to OP T
This result holds more generally for concave discount func tions ( of which linear discounts are a special case ) .
Lemma 8 . Let γ be a concave discount function , and let j
2 . Then Xj is a 7
3 approximation be the largest index with γj ≥ 1 to OP T
6 . COMBINATION OF THE TWO MODELS In this section we give a natural algorithm for the model which combines the pairwise discounts described in Section 4 and the rank based discounts described in Section 5 . This captures the situation where we know the location of the user , but would still like to spread out markers for aesthetic reasons . In the combined model the discount function is the product of the discounts in the two models . More specifically , for an POI ai in a set S of displayed establishments , we have
δi(S ) = min j∈S\ai
{δij} · γπ(i,S ) ,
( 1 ) where δij = f ( wij , dij ) is a function of the relevance wij of POIs ai and aj and their distance dij , and π(i , S ) is the ranking of ai in the ordering of S according to the distance to the user location . The goal is again to pick the set S that maximizes the total discounted value . 6.1 Algorithm
To select such a set S , we first run PickAndRemove without the rank discounts . Intuitively , the resulting set is “ well separated ” in that any two POIs are far apart from each other . We then run the LargestValuePrefix algorithm on this set of POIs , further pruning down the list of POIs to show on the map . Call this algorithm LargestPrunedPrefix .
For the setting of the problem let α be the approximation ratio of the PickAndRemove algorithm , recall that this ratio depends on the planar density λ of the pairwise discount function f , as well as the choice of R used by the algorithm . Similarly , let β be the approximation ratio of LargestValuePrefix . The value of β depends on the shape of the rank discount function γ , and ranges from constant to O(log n ) .
Theorem 4 . LargestPrunedPrefix has an approximation ratio of α · β , for α , β as defined above . For pairwise discount functions f with bounded planar density , and geometric or concave rank discount functions γ , this is a constant competitive algorithm .
Proof . Let A be the full set of POIs , T be the set of POIs that are returned by the call to PickAndRemove , and let S be the set that is returned by calling LargestValuePrefix on T . Order the POIs in descending order of value , vi . Let OP Ti be the set of elements in OP T that are charged to ai , as in the proof of Theorem 1 . Let δ(i , S ) = minaj∈S\ai{dij} the discount due to competition in S . Let cf ( R ) = 16R2λ(f )+1 from the proof of Theorem 1 . Then :
OP T = vj · δ(j , OP T ) · γπ(j,OP T )
 · max aj∈OP Ti vj · δ(j , OP T )
γπ(j,OP T )
( 2 )
( 3 )
( 4 )
( 5 ) ai∈T ai∈T aj∈OP Ti aj∈OP Ti
 ≤ ≤ ≤ cf ( R ) · ≤ cf ( R ) · ≤ cf ( R ) · β · · β ·
≤ cf ( R ) f ( R ) ai∈S ai∈T ai∈T ai∈T
= α · β · ALG . ai∈S cf ( R ) · vi · max aj∈OP Ti vi · max aj∈OP Ti
γπ(j,OP T )
γπ(j,OP T ) vi · γi vi · γπ(i,S ) vi · δ(i , S ) · γπ(i,S )
Here ( 2 ) follows from the proof of Theorem 1 . For ( 3 ) , let i be the rank of ai in T in descending order by values , the statement then follows because the sum is maximized when the ith highest POI in T has the ith largest discount . Line ( 4 ) follows from the analysis of LargestValuePrefix ; and finally ( 5 ) follows from all POIs being spaced at least R from each other .
762 Lemma 9 . LargestPrunePrefix yields a monotone al location rule .
Proof Sketch . The proof relies on two main ideas : first , if a POI is selected by PickAndRemove , it will always be selected as part of the same set T , hence the input to LargestValuePrefix is always the same . We can then extend the monotonicity proof of LargestValuePrefix with respect to ( 1 ) . We defer the formal proof to the full version of the paper .
Corollary 2 . LargestPrunedPrefix is a dominantstrategy incentive compatible mechanism that obtains an α·β approximation of the social welfare , with α the approximation ratio of PickAndRemove and β the approximation ratio of LargestValuePrefix .
7 . EXPERIMENTAL EVALUATION
In this section , we present experimental evaluation of the algorithms presented and analyzed theoretically in previous sections , and show that they also perform well on real data . We start by describing the data sets we use to evaluate the algorithms . 7.1 Data
We use a dataset of restaurants publicly available from the crawl done by [ 5 ] . From this dataset , we have extracted the list of restaurants in six cities , ranging from large to suburban : Berkeley , Brooklyn , Chicago , Mountain View , Palo Alto , and San Francisco . The number of restaurants in these data sets are 340 , 1894 , 3047 , 304 , 171 , and 2705 . These restaurants will be our POIs . We take the value of each POI to be its rating , which is a number between 1 and 10 . To avoid ranking restaurants with a single good review higher than the ones with many reviews , we calculate the rating of each restaurant as ( avg . rating · num . reviews + 10 ) divided by ( number of reviews + 2 ) . This corresponds to assuming prior with a beta distribution with parameters α = β = 10 . 7.2 Location unaware model
For the discount function , we use the double logistic function f ( x ) = 1 − e−x2 discussed in Corollary 1 . This function discounts a POI at distance 0.8km from another by roughly a factor of 1 2 . As a baseline , we run two simple algorithms that keep a subset of POIs of a certain target size , either uniformly at random ( RandomThinning ) or with probabilities proportional to the value of the POI ( PropRandomThinning ) . The algorithms we intend to evaluate are PickAndRemove(R ) for R ranging from 0.1 to 2 Km , and a greedy algorithm ( Greedy ) that sorts POIs in decreasing order of their values , and iteratively picks points from this list if the marginal value of the point is positive . While the Greedy algorithm may seem appealing , it is possible to construct examples that show that in the worst case its approximation ratio is unbounded . Moreover , while Greedy performs comparably to PickAndRemove , our approach is more efficient as Greedy requires updating all of the marginal values at every iteration .
The value of the objective function on the solution given by PickAndRemove(R ) is plotted as a function of R in Figure 2 ( all values are scaled to fit on the same plot ) . As can be seen in this figure , the optimal value of R ranges from 0.6 to 105 Curiously , this is not far from the value of R that optimizes the worst case performance ( 0578 )
Figure 2 : PickAndRemove(R ) as a function of R
City
Berkeley Brooklyn Chicago
Mountain View
Palo Alto
San Francisco
PickRem Greedy 71.08 271.19 239.31 64.72 60.72 370.26
77.52 272.83 244.96 73.62 62.38 372.58
Rand 23.39 90.84 70.22 23.55 20.12 111.22
Prop 23.62 92.53 73.29 23.04 22.57 109.04
Table 1 : Value in the location unaware model
Table 1 shows the value of the solutions computed by various algorithms on the different data sets . For PickAndRemove , RandomThinning , and PropRandomThinning , the values shown correspond to the value obtained from the best choice of R or the target size . As can be seen in this table , PickAndRemove is the winner in all cases , and Greedy is a close second . The value achieved by these algorithms is close to 3 times higher than the baselines . Interestingly , PropRandomThinning does not perform significantly better than RandomThinning and sometimes even performs worse . We believe the reason for this effect is that good restaurants tend to be located close to each other , and therefore PropRandomThinning is more likely to pick POIs that are close to each other .
7.3 Location aware model
For the discount function in this model , we use exponential discounts γr = 08r−1 For the user location , we pick a random location in the corresponding city and add a number of random perturbations of this point to model uncertainty . We use the same baselines , RandomThinning and PropRandomThinning , and the algorithm we evaluate is LargestValuePrefix .
The results are presented in Table 2 . As can be seen in this table , LargestValuePrefix performs significantly better than both baselines , although the margin is not as large as it was in the case of the location unaware model . The size of the solutions picked by LargestValuePrefix for these data sets are 18 , 30 , 35 , 20 , 24 , and 35 , respectively .
●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●R ( Km)Value of PickAndRemove(R)05101520●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●BerkeleyBrooklynChicagoMountain ViewPalo AltoSan Francisco763 City
Berkeley Brooklyn Chicago
Mountain View
Palo Alto
San Francisco
LargestValuePrefix Rand 34.92 35.27 70.12 35.83 34.78 35.97
46.12 48.35 97.83 45.68 43.64 49.18
Prop 36.04 36.73 74.11 37.02 36.02 37.15
Table 2 : Value in the location aware model
8 . CONCLUSION AND OPEN PROBLEMS In this paper , we initiated the study of the problem of selecting the set of points of interest to place on the map , and finding incentive compatible mechanisms in the case some of these are advertisements . We studied two scenarios , those where the user location is unknown , with a focus on externalities due to competing POIs , and those with known user location , with a focus on rank based externalities . For both problems , as well as the combination of the two information models , we give simple greedy approximation algorithms coupled with incentive compatible pricing schemes . There are still many open questions remaining . In particular , it would be useful to be able to accommodate additional constraints , such as explicit density restrictions ( ie , upper bound on the number of POIs that can be placed on each tile of the map ) , consistency constraint on the set of selected POIs at different zoom levels ( see [ 18 ] for a treatment of this constraint ) , or POIs that have positive externalities on each other . Finally , improving the approximation ratio of our algorithms ( or coming up with other practical algorithms with better ratios ) is an interesting open problem .
9 . REFERENCES [ 1 ] Gagan Aggarwal , Jon Feldman , S . Muthukrishnan , and Martin P˜A al . Sponsored search auctions with markovian users . In Christos Papadimitriou and Shuzhong Zhang , editors , Internet and Network Economics , volume 5385 of Lecture Notes in Computer Science , pages 621–628 . Springer Berlin Heidelberg , 2008 .
[ 2 ] Rakesh Agrawal , Sreenivas Gollapudi , Alan Halverson , and Samuel Ieong . Diversifying search results . In Proceedings of the Second ACM International Conference on Web Search and Data Mining , WSDM ’09 , pages 5–14 , 2009 .
[ 3 ] Aaron Archer and ´Eva Tardos . Truthful mechanisms for one parameter agents . Proceedings of 42th Annual Symposium on Foundations of Computer Science ( FOCS ) , pages 482–491 , 2001 .
[ 4 ] Moshe Babaioff and Liad Blumrosen .
Computationally feasible truthful auctions for convex bundles . Games and Economic Behavior , 63(2):588–620 , 2008 .
[ 5 ] Saeideh Bakhshi , Partha Kanuparthy , and Eric Gilbert . Demographics , weather and online reviews : A study of restaurant recommendations . In Proceedings of the 23rd International Conference on World Wide Web , WWW ’14 , pages 443–454 , New York , NY , USA , 2014 . ACM .
[ 6 ] Tony Bradley . Google maps ads are a big opportunity for local businesses . PC World ( August 9 , 2013 ) . wwwpcworldcom/article/2046292/google maps adsare a big opportunity for local businesseshtml
[ 7 ] Cartography and Geographic Information Society . Cagis map design competition . http://wwwcartogisorg/awards/contestphp , 2013 .
[ 8 ] Arpita Ghosh and Mohammad Mahdian . Externalities in online advertising . In Proceedings of the 17th international conference on World Wide Web , pages 161–168 . ACM , 2008 .
[ 9 ] Arpita Ghosh and Amin Sayedi . Expressive auctions for externalities in online advertising . In Proceedings of the 19th international conference on World wide web , pages 371–380 . ACM , 2010 .
[ 10 ] Sreenivas Gollapudi and Aneesh Sharma . An axiomatic approach for result diversification . In WWW ’09 : Proceedings of the 18th international conference on World wide web , pages 381–390 , New York , NY , USA , 2009 . ACM . [ 11 ] Renato Gomes , Nicole Immorlica , and Evangelos Markakis .
Externalities in keyword auctions : An empirical and theoretical assessment . In Stefano Leonardi , editor , Internet and Network Economics , volume 5929 of Lecture Notes in Computer Science , pages 172–183 . Springer Berlin Heidelberg , 2009 .
[ 12 ] Samuel Ieong , Mohammad Mahdian , and Sergei
Vassilvitskii . Advertising in a stream . In Proceedings of the 23rd International Conference on World Wide Web , WWW ’14 , pages 29–38 , New York , NY , USA , 2014 . ACM .
[ 13 ] David Kempe and Mohammad Mahdian . A cascade model for externalities in sponsored search . In Internet and Network Economics , pages 585–596 . Springer , 2008 .
[ 14 ] Ravi Kumar , Mohammad Mahdian , Bo Pang , Andrew Tomkins , and Sergei Vassilvitskii . Modeling geographic choice . In Proceedings of the 8th International Conference on Web Search and Data Mining ( WSDM ) , 2015 .
[ 15 ] Stephanie Meece . A bird ’s eye view of a leopard ’s spots . the
¸Catalh¨oy¨uk ‘map’ and the development of cartographic representation in prehistory . https://wwwrepositorycamacuk/handle/1810/195777 , 2008 .
[ 16 ] Roger Myerson . Optimal auction design . Mathematics of
Operations Research , 6(1):58–73 , 1981 .
[ 17 ] Anastasios Noulas , Salvatore Scellato , Renaud Lambiotte , Massimiliano Pontil , and Cecilia Mascolo . A tale of many cities : Universal patterns in human urban mobility . PLoS ONE , 7(5):e37027 , 05 2012 .
[ 18 ] Anish Das Sarma , Hongrae Lee , Hector Gonzalez , Jayant Madhavan , and Alon Halevy . Consistent thinning of large geographical data for map visualization . ACM Trans . Database Syst . , 38(4):22:1–22:35 , December 2013 .
[ 19 ] Greg Sterling . Google introduces offline maps for mobile , claims a billion users globally for maps , earth . Search Engine Land weblog ( June 6 , 2012 ) . http://searchengineland.com/live blogging thegoogle maps next dimension event 123617 , 2012 .
[ 20 ] Jennifer van Grove . Marissa Mayer : Google will connect the digital and physical worlds through mobile . Mashable weblog ( March 11 , 2011 ) . http://mashable.com/2011/03/11/mayer sxsw talk/ , 2011 .
[ 21 ] Wikipedia . Babylonian map of the world . http :
//enwikipediaorg/wiki/Babylonian_Map_of_the_World , 2014 .
764
