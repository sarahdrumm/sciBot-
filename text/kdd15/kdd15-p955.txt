SCRAM : A Sharing Considered Route Assignment Mechanism for Fair Taxi Route Recommendations
Shiyou Qian
Department of Computer Science and Engineering ,
Shanghai Jiao Tong University qshiyou@sjtueducn fi
Jian Cao
Department of Computer Science and Engineering ,
Shanghai Jiao Tong University cao jian@sjtueducn
Frédéric Le Mouël
University of Lyon , INSA Lyon , frederic.le mouel@insa
CITI INRIA Lab lyon.fr
Issam Sahel
University of Lyon , INSA Lyon , issamsahel@insa lyonfr
CITI INRIA Lab
ABSTRACT Recommending routes for a group of competing taxi drivers is almost untouched in most route recommender systems . For this kind of problem , recommendation fairness and driving efficiency are two fundamental aspects . In the paper , we propose SCRAM , a sharing considered route assignment mechanism for fair taxi route recommendations . SCRAM aims to provide recommendation fairness for a group of competing taxi drivers , without sacrificing driving efficiency . By designing a concise route assignment mechanism , SCRAM achieves better recommendation fairness for competing taxis . By considering the sharing of road sections to avoid unnecessary competition , SCRAM is more efficient in terms of driving cost per customer ( DCC ) . We test SCRAM based on a large number of historical taxi trajectories and validate the recommendation fairness and driving efficiency of SCRAM with extensive evaluations . Experimental results show that SCRAM achieves better recommendation fairness and higher driving efficiency than three compared approaches .
Categories and Subject Descriptors H28 [ Information Systems ] : Database applications Data Mining
Keywords Recommender Systems ; Assignment Mechanism ; Fairness ; Taxis
1 .
INTRODUCTION
Taxi drivers need to find customers when their taxis are vacant . Meanwhile , customers expect to find a taxi as quickly as possible . With the help of route recommender systems , on one hand , taxi fi
Corresponding author .
Minglu Li
Department of Computer Science and Engineering ,
Shanghai Jiao Tong University mlli@sjtueducn drivers can more quickly find customers , increasing their revenues ; on the other hand , customers can find a taxi in a shorter time , saving waiting time . Therefore , route recommender systems for taxi drivers are of great social and economic importance because these systems aim at providing personalized and context aware route recommendations [ 12 , 3 ] .
Recommender systems focused on public transportation service have been studied extensively [ 6 , 16 , 11 , 15 , 17 ] . The common objective of these systems is to minimize the driving costs ( in terms of time or distance ) of taxi drivers while maximizing the revenues which are expressed as success probabilities of picking up customers . However , existing recommender systems have several limitations . First , these systems seldom address the route recommendation fairness problem involving a group of competing taxi drivers . Without a fair route assignment mechanism , recommendation fairness is not guaranteed for competing taxi drivers . Second , the sharing of road sections existing in the recommended routes is not considered when providing route recommendations , resulting in poor driving efficiency due to the unnecessary competition of taxi drivers . Third , precisely speaking , most systems , such as [ 6 , 11 , 15 ] , are coarse grained because a route recommended by these systems is just a driving direction in nature , rather than an actual driving route composed of consecutive road sections .
In the paper , we propose SCRAM , a sharing considered route assignment mechanism for fair taxi route recommendations . SCRAM aims to provide fair and efficient route recommendations for a group of competing taxi drivers . The primary objective of SCRAM is to guarantee recommendation fairness for a group of competing taxi drivers . The by product of SCRAM is the improved driving efficiency of taxi drivers by considering the sharing of road sections existing in the recommended routes . In addition , SCRAM is capable of providing taxi drivers with actual driving routes , rather than rough driving directions .
SCRAM differs from most existing route recommender systems in four aspects . First , SCRAM considers the sharing degree of road sections in the process of computing recommended routes . The consideration of sharing is the basis on which to provide recommendation fairness for competing taxi drivers . Second , the success probability of picking up customers has priority over driving cost in the route evaluation function employed by SCRAM . This principle naturally conforms to the reality that the goal of taxi drivers is to minimize driving cost under the premise of finding customers . Third , the success probabilities of road sections
955 contained in a route are weighted decreasingly with the distances from the starting intersection to the road sections because potential customers at far road sections are more likely to be picked up by other taxis . Fourth , neither success probability nor driving cost is sufficient to represent the recommendation fairness and driving efficiency of taxi drivers . We present a new metric , called driving cost per customer ( DCC ) which combines both driving cost and success probability .
We evaluate the recommendation fairness and driving efficiency of SCRAM based on historical taxi trajectories which were collected in Shanghai , China . The trajectories contain the GPS data of more than 4000 taxi drivers operating in a period of 126 days . Experimental results show that SCRAM outperforms its counterparts to a large degree in terms of both recommendation fairness and driving efficiency .
The main contributions of the paper are as follows : ffl By identifying three route evaluation principles , we define an evaluation function which complies with the demands of taxi drivers . ffl We design a concise route assignment mechanism to guarantee the recommendation fairness of competing taxi drivers and prove the properties of the assignment mechanism by three theorems . ffl Based on real trajectory data , extensive experiments are conducted to evaluate the recommendation fairness and driving efficiency of SCRAM .
The rest of the paper is organized as follows . Section 2 discusses related work , highlighting the difference between our proposed approach and the existing ones . Section 3 formulates the fair route recommendation problem . Section 4 defines the route evaluation function which incorporates three evaluation principles . Section 5 presents the route assignment mechanism and the proof of three theorems which theoretically describe the properties of SCRAM . Section 6 illustrates experimental results . We conclude the paper in section 7 .
2 . RELATED WORK
Route recommendation for taxi drivers has drawn much attention from researchers [ 6 , 16 , 11 , 8 , 14 , 15 , 17 , 4 , 18 , 19 , 9 ] . Most existing recommender systems are designed based on real world GPS trajectories which were collected through a large number of probing taxis . These recommender systems can be roughly divided into two categories : macroscopic recommender systems and microscopic ones .
For macroscopic recommender systems , such as [ 6 , 16 , 8 , 15 , 19 ] , only driving directions are provided for taxi drivers rather than actual driving routes . Generally , customer locations are extracted from GPS trajectories by these systems and the locations are clustered into multiple representative small areas , which are the recommended driving directions for taxi drivers . For example , in the LCP approach proposed in [ 6 ] , these small areas are referred to as pick up points which are learned from the trajectories of high profit taxi drivers . A taxi driver who requests a route recommendation is provided with a sequence of pick up points as driving directions .
Compared with macroscopic recommender systems , microscopic ones provide taxi drivers with actual driving routes . T Finder proposed in [ 17 ] uses the same method as LCP [ 6 ] to extract the representative small areas from the trajectories , but these small areas are termed as parking places . Instead of just telling taxi drivers where to go , T Finder goes one step further than LCP by providing taxi drivers with detailed driving routes connecting parking places . SCRAM belongs to the microscopic category .
However , SCRAM differs from existing microscopic recommender systems , such as T Finder , in two aspects . First , SCRAM addresses the route recommendation problem for a group of competing taxi drivers , rather than a single one . We design a concise route assignment mechanism to guarantee the recommendation fairness for taxi drivers . Second , we consider the sharing of road sections occurring in the recommended routes , which exists in reality and is ignored in most recommender systems . The combination of these two aspects results in a fair and efficient route recommender system for competing taxi drivers .
To the best of our knowledge , the problem of recommending routes for a group of competing taxi drivers is seldom studied in the existing route recommender systems . In [ 6 ] and [ 17 ] , the round robin mechanism is used to assign recommended routes to multiple requesting taxi drivers , without guaranteeing the recommendation fairness . The route recommender system proposed in [ 11 ] mainly serves a single novice by providing an optimal driving direction connecting multiple small areas . In essence , the core of recommending routes for multiple competing taxi drivers can be regarded as a load balance problem . As for load balance , recommendation fairness and driving efficiency are two contradicting factors . Therefore , the challenge of designing a load balance policy is to guarantee the recommendation fairness without sacrificing the driving efficiency of competing taxi drivers . In the paper , we propose SCRAM to address this challenge .
3 . PROBLEM FORMULATION
In reality , the road network of a city , such as Shanghai , is characterized by a set of intersections and a set of road sections . Thus , a road network can be represented by a graph G = ( I ; R ) , where I = fI1 ; I2 ; :: : ; Ing is a finite set of n intersections and R = fR1 ; R2 ; :: : ; Rmg is a finite set of m road sections . A road section is determined by two intersections , Ri = ( Ij ; Ik ) . A road section Ri is associated with five properties , the direction ( oneway or bidirectional ) Ri:dir , the speed constraint Ri:speed , the length Ri:length , the starting intersection Ri:s , and the ending intersection Ri:e . Furthermore , by mining the real trajectories generated by a large number of taxis , each road section has a success probability P ( Ri ) which represents the chance of picking up customers for taxi drivers , P ( Ri ) 2 [ 0 ; 1:0 ] for 1 6 i 6 m . A route is a directed sequence of L road sections , Wi = fR1 ; R2 ; :: : ; RLg , where Wi:s = R1:s , Wi:e = RL:e and Rj:e = Rj+1:s for 1 6 j < L which means that consecutive road sections contained in a route should share an intersection . Let D be a group of N competing taxi drivers that request route recommendations , D = fD1 ; D2 ; :: : ; DNg . Based on the above definitions and notations , we can formally define the problem of fair taxi route recommendation as :
DEFINITION 1 . The fair taxi route recommendation problem . Given : a road network G = ( I ; R ) , a probability set P = fP ( R1 ) ; P ( R2 ) ; :: : ; P ( Rm)g , a cost matrix T representing the driving cost between two neighboring intersections , a group of N competing taxi drivers D = fD1 ; D2 ; :: : ; DNg located near an intersection . Objective : Finding a set of N routes W = fW1 ; W2 ; :: : ; WNg from the candidate routes and assigning a route to each requesting driver ( Di ; Wj ) while satisfying the following condition .
CONDITION 1 . When assigning routes to drivers , the assignment mechanism must guarantee recommendation fairness for competing taxi drivers from a long term perspective . The driving cost per customer ( DCC ) should be a constant for all competing
956 ( a )
( b )
Figure 1 : Distribution and CDF of driving distances taxi drivers . In other words , the standard deviation of DCC should be minimized .
The objective of SCRAM is to address the recommendation fairness problem for a group of competing taxis . If taxis are far away from each other without competition , route recommendations can be provided independently . Thus , in the paper , it is assumed that a group of competing taxi drivers is located near an intersection which is used as the starting point to generate candidate routes . This situation is observable in reality . For example , taxis tend to wait for customers at certain places , such as subway exits or shopping centers , but sometimes the queue is too long , so some taxis are reluctant to continue waiting .
In this case ,
The assumption can be released to a more common case where taxis are scattered in a small area . the nearest intersection from the center of the area could be selected as the starting point . Since all recommended routes are generated from the starting point , some taxis need to go there to follow the recommended routes . Superficially , this may affect the recommendation fairness of competing taxi drivers . Due to the sharing of road sections existing in the recommended routes , in fact , the impact is negligible . We discuss this case in detail in Section 5 . n
When recommending driving routes for taxi drivers , the length of routes is usually restricted . Note the length of a route is the number of road sections that are contained in the route . Let be the maximum number of road sections that are connected to ∑ intersections in a road network . In a general case with no restriction on the length of recommended routes , the number of candidate i=1 ( ,1)i,1 , where n is the number of intersections routes is appearing in the road network . As proved in [ 6 ] , the complexity of computing N recommended routes is O(n! ) . When the length of recommended routes is limited to a constant number L , the number of candidate routes is reduced to ( , 1)L,1 . For the fair taxi route recommendation problem , a length constrained case is more realistic , which complies with the traffic patterns extracted from the real trajectories generated by a large number of taxis .
By analyzing the taxi trajectories collected in Shanghai , China , we find that taxi drivers usually travel along a small number of road sections to pick up customers . The distribution and cumulative distribution function ( CDF ) of driving distances are depicted in Figure 1 . As shown in the figure , more than 40 % of taxi drivers pick up customers in less than 1 km . This observation is called locality driving behavior of taxi drivers , which is used to determine the length of recommended routes . The distribution and CDF of driving times taken by taxi drivers are shown in Figure 2 , which also confirms the locality driving behavior of taxi drivers . It is observed that almost 40 % of taxi drivers find a customer in less than 5 minutes . Further details on the trajectory data are given in Section 6 .
4 . EVALUATION FUNCTION
The way to evaluate routes is critical to selecting recommended routes from the candidate ones . Generally , a route can be measured
( a )
( b )
Figure 2 : Distribution and CDF of driving times by its success probability of picking up customers or driving cost . When recommending routes to taxis , success probability and driving cost should be considered simultaneously . The definition of an evaluation function should comply with the demands of taxi drivers . 4.1 Evaluation Principles
411 Priority Principle The most important aspect of defining a route evaluation function is to determine the goal of taxi drivers . If taxi drivers solely choose energy saving as their purpose , the best choice for them is just to stay in the same place . However , each taxi driver needs to pay a certain amount of money as a management fee even if he/she does nothing each day . Therefore , the goal of taxi drivers is to minimize driving cost under the premise of finding customers . Naturally , the first principle of evaluation is that success probability should have higher priority than driving cost .
412 Decaying Principle The success probabilities of road sections contained in a route should not be weighted equally . The driving distance from the starting point to a road section is crucial for taxi drivers to succeed in finding customers . Generally , taxi drivers more easily find potential customers at near road sections , while potential customers at far road sections are more likely to be picked up by other taxi drivers . Therefore , the second principle of evaluation is that the success probabilities of road sections contained in a route should be weighted decreasingly with the driving distances from the starting intersection to the road sections .
Sharing Principle
413 Given a road section with a high success probability , if only one taxi cruises on it , the taxi driver is more likely to find a customer . If there are multiple taxis traversing the road section , the chance of picking up customers is substantially decreased . To guarantee recommendation fairness and driving efficiency , taxis should be prevented from all driving towards a route which has high success probability . Thus , the third principle of evaluation is that when multiple routes contain a road section , no matter its place in each route , it is reasonable to share the success probability of the road section .
To effectively evaluate routes , we propose the expected driving cost ( EDC ) function which incorporates the three evaluation principles mentioned above . 4.2 EDC without Sharing
To simplify the discussion , we illustrate the EDC function via an example . Figure 3 shows a route composed of L road sections , R1 ! R2 ! : : : ! RL,1 ! RL . P ( Ri ) and T ( Ri ) are the success probability and driving cost of road section Ri ( 1 6 i 6 L ) , respectively . Let Ei be the event that a taxi driver picks up a customer at road section Ri . When a taxi driver follows this
0102030050100150Distance ( km)Frequency ( x10000)01020300020406081Distance ( km)CDF0102030400100200300Time ( min)Frequency(x1000)0102030400020406081Time ( min)CDF957 Figure 3 : An example of a route
T ( R1 )
2 3 2 8 3 3
W1 W2 W3 W4 W5 W6
T ( R2 ) P ( R1 ) P ( R2 ) EDC 6.13 5.54 3.90 3.63 9.13 8.04
0.2 0.3 0.4 0.7 0.1 0.2
0.2 0.2 0.2 0.2 0.2 0.1
4 4 4 4 2 2 route , he/she may pick up a customer at road section Ri with a probability P ( Ei ) . Let E1 be the event that a pick up event never happens . Ω = fEigi2[1;L ] [ E1 defines the universe of events i=1 P ( Ei ) + P ( E1 ) = 1 . We define the EDC and P ( Ω ) = function as :
L
EDC =
T ( Ei )
( 2P ( Ei ) , 1 ) i
+ T ( E1 )
( 2P ( E1 ) , 1 )
L + 1
; ( 1 )
∑ L∑ i=1 where the events probabilities are :
 i,1∏
P ( R1 )
P ( Ri )
L∏ j=1
( 1 , P ( Rj ) )
( 1 , P ( Rj ) ) i = 1 i 2 [ 2 ; L ] i = 1
( 2 )
P ( Ei ) = j=1 and the driving costs are :
 i,1∑ T ( R1)(1 , P ( R1 ) ) L∑ j=1
T ( Rj)=P ( Rj )
T ( Rj ) + T ( Ri)(1 , P ( Ri ) )
T ( Ei ) = i = 1 i 2 [ 2 ; L ] i = 1 j=1
( 3 ) In Equation ( 1 ) , the exponential processing of P ( Ei ) realizes the priority principle , which highlights the priority of success probability over driving cost . An illustration is given in Table 1 . Routes W1 and W2 are composed of two road sections . The first road section of W1 has a lower success probability and driving cost , while the first road section of W2 has a higher success probability and driving cost . The second road sections of W1 and W2 have the same success probability and driving cost . In this case , according to the priority principle , W2 should be superior to W1 in terms of EDC . Due to the exponential processing , the priority of success probability over driving cost is exacerbated with higher success probability values . For example , as listed in Table 1 , due to the high success probability of W4 ’s first road section , even the driving cost of W4 ’s first road section is four times that of W3 , and W4 is still better than W3 in terms of EDC .
The denominators in Equation ( 1 ) , i and L+1 , fulfil the decaying principle . For example , routes W5 and W6 listed in Table 1 both contain two road sections with the same driving cost . W5 ’s first road section has a larger success probability , and the second road section has a smaller success probability . On the contrary , W6 ’s first road section has a smaller success probability , while the second road section has a larger success probability . In this case , due to the decaying principle , W6 is superior to W5 in terms of EDC . 4.3 EDC with Sharing
The sharing of road sections occurring in routes makes the evaluation of routes more complicated and costly . According to
Table 1 : Example routes used to explain the evaluation principles
Figure 4 : An illustration of routes sharing a common road section
Road Sections ID R1 ! R2 ! R3 W1 R1 ! R4 ! R5 W2 R1 ! R6 ! R7 W3 R8 ! R9 ! R10 W4 W5 R11 ! R12 ! R13 W6 R14 ! R15 ! R16
Table 2 : List of candidate routes the sharing principle , if a road section is contained in multiple routes , the success probability of the road section should be shared by these routes . The problem of implementing the sharing principle is that when a road section is shared by multiple routes , it is non trivial to compute the recommended routes from the candidate ones since the shared times of the road section is conditional . Therefore , conditional EDC should be computed for routes containing common road sections .
An example is given to illustrate the definition of conditional EDC . As shown in Figure 4 , there are six candidate routes listed in Table 2 . Of these routes , W4 , W5 and W6 are independent routes , while W1 , W2 and W3 share a common road section R1 . Three taxi drivers located at intersection I8 request route recommendations . Therefore , three recommended routes should be selected from the set of candidate routes fW1 ; :: : ; W6g in terms of EDC . Concerning the sharing times of R1 , three situations may appear , which are listed in the following .
1 . The sharing principle is applied by simply dividing the success probability of R1 by the number of routes that contain R1 . In this example , the success probability of R1 is divided by 3 . Due to the division of R1 ’s success probability , W4 , W5 and W6 may be selected as the three optimal routes . 2 . R1 is assumed to be shared by only two routes . Since the success probability of R1 is just divided by two , the possibility of W1 and W2 being optimal is promoted . So , W1 , W2 and W5 may be selected as the three optimal routes . 3 . If the principle of sharing success probability is not applied in the computation of EDC values , W1 , W2 and W3 may be selected as the three optimal routes for recommendation .
However , statically determining the sharing times , such as the above three policies , is not correct , because the above three situations maybe occur simultaneously . The shared times of R1 ffiflfl958 should be determined conditionally in a combination that selects three routes from the candidate set . For the example shown there are C(6 ; 3 ) = 20 combinations to select in Figure 4 , three routes from the six candidate ones . In each combination , the sharing times of a road section is deterministic . Therefore , conditional EDC should be computed for each route according to the actual shared times of R1 in the combination . The combination with the minimum summed conditional EDC value is the solution which contains the three optimal routes .
Let S(Ri ; c ) be the number of routes that share the road section Ri in a combination c , the conditional events probabilities are defined as : i,1∏ j=1
P ( R1 ) S(R1;c ) P ( Ri ) S(Ri ; c )
L∏
( 1 , P ( Rj ) S(Rj ; c )
) j=1
( 1 , P ( Rj ) S(Rj ; c )
) i = 1 i 2 [ 2 ; L ] i = 1
( 4 )
P ( Ei ; c ) =

L∑ i=1
The conditional EDC of a route in the combination c is defined as : ( 2P ( E1 ) , 1 )
( 2P ( Ei;c ) , 1 )
EDC =
T ( Ei ) i
+ T ( E1 )
L + 1
( 5 ) The division of P ( Ri ) by S(Ri ; c ) realizes the sharing principle established for route evaluation , preventing taxis from all driving towards a route with high success probability . The success probability of a road section is an expectation used in the evaluation function . Actually , the arrival time of taxis may affect the sharing of success probabilities , but the arrival order cannot be taken into account in advance . It would be too complicated to model the arrival order in the evaluation function . To simplify the model , the time relations are not considered in the evaluation function . 4.4 Computation
According to the definition of EDC , optimal route computation is a combinatorial optimization problem in nature . Even though the number of candidate routes is small , the number of combinations is very large . Therefore , the computation performance should be considered seriously . We deal with this problem from three aspects . First , the computation of candidate routes can be done offline . Second , to reduce computation cost , it is acceptable to obtain an approximate solution rather than the exact one . Third , the divideand conquer idea can be utilized to decrease the computation complexity by dividing a map into multiple overlapping areas .
Actually , the computation of candidate routes can be done offline . The information that is needed to compute candidate routes consists of the road network , the route length and the traffic patterns ( success probabilities and driving costs of road sections ) , which are all available in advance . With the availability of the road network and the route length , all candidate routes can be generated by using the depth first search algorithm which considers the restrictions in the road network , such as one way streets or noturn right intersections . It is not necessary to generate candidate routes for all intersections , just for part of the popular intersections which can be extracted from the trajectories .
Since computing optimal routes is a combinatorial optimization problem in nature , multiple optimization algorithms can be utilized to solve the problem . In the experiments , we use Genetic Algorithm ( GA ) [ 7 ] to compute recommended routes by obtaining an approximate solution . In the initialization stage , N routes are selected from the candidate set , where N is also the number of taxi drivers requesting route recommendations . The EDC function is used as
Figure 5 : Overlapping division of a map the fitness function to evaluate the solution domain . By iterating a certain number of rounds , GA produces an approximate solution which contains the recommended routes .
For big cities , such as New York or Shanghai , there are a large number of intersections and road sections . It is challenging to compute recommended routes by using only one server . This challenge can be addressed by dividing a road network into multiple overlapping areas . An area corresponds to a server which is responsible for processing requests from the area . Since a route may span more than one area , overlapping division is used to deal with this situation . The degree of overlapping increases with route length . An example shown in Figure 5 is given to illustrate the overlapping division . In the example , a map is divided into four areas , denoted by A1 ; A2 ; A3 and A4 . The blue and green dashed lines represent the overlapping area of A1 and A2 , respectively . Four servers are deployed to provide the route recommendation service , each serving an area . Through the divide and conquer method , the computation performance can be significantly improved , fully satisfying the performance requirement of real applications . The computational resources can be provided by cloud computing platforms , such as EC2 .
5 . ROUTE ASSIGNMENT MECHANISM The goal of designing a route assignment mechanism is to propose an assignment function f : Di ! Wj that assigns each taxi driver a route . The assignment problem has been addressed largely by mechanism designers [ 5 ] [ 2 ] . Assignment mechanisms can be classified into two families . Money mechanisms [ 10 ] allow the exchange of currency during the assignment and non money mechanisms [ 13 ] do not allow it . The route assignment problem belongs to the family of money mechanisms .
A fair route assignment mechanism for taxi drivers should meet the following conditions . First , it should guarantee recommendation fairness from a long term perspective . Some taxi drivers may seldom request route recommendations while others may frequently do so . The assignment mechanism should be able to guarantee recommendation fairness for taxi drivers who frequently request route recommendations . Second , the assigned routes cannot be predicted by taxi drivers , even given the set of recommended routes . For example , when a driver is assigned the worst route at the previous stage , it should not be guaranteed that the best route will be assigned to him in the current stage . Therefore , the mechanism should make the assignment decision based on multiple historical assignment records , not just one . Third , the assignment mechanism should prevent violent vibration when consecutively
( cid:36)(cid:36)(cid:36)(cid:36)(cid:85)(cid:92)959 assigning routes to a taxi driver . By considering all these aspects , we design a fair route assignment mechanism ( SCRAM ) which works through the following steps :
1 . At the beginning of the assignment , the balance of each driver Di 2 D is set to b0 i = 0 .
2 . At stage k , the routes are sorted on their EDC values in ascending order and the drivers are sorted on their balances in descending order . Then , the jth driver in the driver list is assigned the jth route in the route list . i = j=k,s,1 bj
3 . After the assignment at stage k , the balances are recomputed i , mk is the as bk+1 amount charged to driver Di . mk is the mean value of the routes’ EDC values and V k is the EDC value of the route i assigned to driver Di at stage k . i , where ck i = V k
+ ck
∑ s k i
In SCRAM , the driver with the highest balance receives the best route . This mechanism makes the standard deviation of drivers’ balances at each stage reach its minimum . Experimental results also verify that SCRAM is capable of guaranteeing recommendation fairness for a group of competing taxi drivers .
As mentioned in Section 3 , a group of competing taxis may be scattered in a small area , and the nearest intersection from the center of the area is selected as the starting point to generate candidate routes . So , some taxis that are not located at the intersection need to get there to follow the recommend routes . This situation may affect the performance of SCRAM , but the impact is negligible due to two facts . First , since the road sections near the starting intersection are originally intensely shared , the gathering of taxis would not greatly exacerbate the competition . Second , in addition to the intra group competition arising from the taxi drivers who request route recommendations , taxi drivers also face intergroup competition coming from taxi drivers who do not request route recommendations . The sharing principle considers the intragroup competition , while the decaying principle takes into account the inter group competition . The combination of the two principles well models reality .
5.1 Properties of SCRAM
THEOREM 1 . In SCRAM , the expected balance of drivers at each stage is zero , i = 0 ; k 2 N + .
N i=1 bk
PROOF . We will prove that the assignment problem is a zeroi is 0 sum game which means that the sum of drivers’ balances bk for 8k 2 N + . This means that
= 0;8k 2 N + : bk i N
( 6 )
We can show by induction that for 8k 2 N + , the following proposition is true i = 0;8k 2 N + : bk
( 7 )
∑
N∑ i=1
N∑ i=1
The game starts with zero balance for all drivers , b0 [ 1 ; N ] , therefore i = 0 ; i 2
N∑ b0 i = 0 ;
( 8 ) so the proposition ( 7 ) is true for k = 0 . i=1
So
N∑ i=1 bk+1 i
=
=
V k i N mk = i=1
N∑ N∑ i , N∑ N∑ i=1 i=1
+ s
+ i=1
V k bk,s,1 i s bk,s,1 i i=1
N∑ N∑ N∑ N∑ i=1 i=1
+ mk
:
( 10 )
N∑ i=1
N∑ i=1 bk i s bk i s
( 11 ) bk,s s i
+ : : : + bk,s s i
+ : : : +
∑
= : : : =
N i=1 bk i = 0 and
Suppose that the proposition ( 7 ) is true for k , then for stage k + 1
) k j=k,s,1 bj i
+ ck i
N∑ i=1 bk+1 i
=
=
( ∑ (
N∑ N∑ i=1 i=1 s bk,s,1 i
+ bk,s i + : : : + bk s i i , mk
+ V k
)
;
( 9 ) where mk is the mean of the routes’ EDC values ,
∑
Since N i=1 V k
+ i=1 i , N mk ∑ ∑ V k i=1 bk,s i=1 bk,s,1 N∑ i , N mk = 0 , so
=
N
N i i bk+1 i = 0 :
( 12 ) i=1
Therefore , the proposition ( 7 ) is true for k + 1 . By the principle of induction , the proposition ( 7 ) is true for 8k 2 N + .
THEOREM 2 . In SCRAM , the driver with the highest balance This mechanism makes the standard receives the best route . deviation of drivers’ balances at each stage reach its minimum , min(
∑
( bk i )
2
N i=1
PROOF . As proved in Theorem 1 , the mean of drivers’ balances at each stage is zero . The standard deviation of drivers’ balances at stage k + 1 is
N )1=2;8k 2 N + : ( N∑
)
1=2
;
( 13 )
= i=1
2 ) i
( bk+1 N
∑ s k j=k,s,1 bj i s j=k,s,1 bj k i
) where bk+1 xi denote i =
∑ ( N∑
= i=1
+ ck i . For presentation simplicity , let and yi represent ck i at stage k , then
)
( xi + yi)2
N
1=2
= x2 i + 2xiyi + y2 i
N
1=2
:
( N∑ i=1
( 14 ) As mentioned above , the problem of route assignment is to propose a function f : Di ! Wj for 1 6 i 6 N and 1 6 j 6 N . Given the order of drivers , route assignment is to get a permutation of f1 ; 2 ; :: : ; Ng which realizes the map from drivers to routes . Let SN be the set of all permutations of f1 ; 2 ; :: : ; Ng and is a permutation in SN . ( i ) denotes the ith element in . The problem of minimizing is equivalent to
N∑ fi
= arg min 2SN i=1 xiy(i )
( 15 )
960 Without loss of generality , we suppose that xi is sorted in ascending order and yi is sorted in descending order . This is enough to find a permutation 2 SN which minimizes where AN +1 =
( );8 2 SN +1
( 24 )
∑ ∑
∑
N +1(Id ) . We have ( Id ) 6 Aj 6
N +1
N +1
∑
Therefore , Formula ( 17 ) is true for N + 1 . By the principle of induction , Formula ( 17 ) is true for all N > 2 .
N k=1 bk lim N!1 converged to a constant C ,
THEOREM 3 . In SCRAM , the sum of each driver ’s balance is i = C for all Di 2 D . PROOF . As designed in SCRAM , the balance of driver Di at i , mk . i , we get stage k + 1 is bk+1 For the sake of simplicity , set s=1 . Then bk+1 the series of bN i , where ck = bk i = V k i + ck j=k,s,1 bj i =
+ ck
∑ s k i i i as b0 i = 0 b1 i = b0 b2 i = b1 bN i = k=1 ck i =
N k=1(V k i , mk i ) i = c1 i i = c1 i + c2 i
∑ i + c1 i + c2 :::: : : N
∑ k∑
N∑ bk i =
N∑ k=1 k=1 j=1
, mj i )
( V j i
( 25 )
( 26 )
The sum of Di balance is
When s = 1 , the priority at stage k + 1 is determined by the priority at stage k . If the driver Di gets a higher priority at stage k , then he will receive a relatively lower priority at stage k + 1 . This relationship can be expressed by a function f
( V k+1 i
Therefore , the value of ck stage , but fluctuant , either positive or negative . So , i
) = f ( V k i , mk i ) :
, mk+1 i is not monotonically increased with the N∑
( 27 ) lim N!1 k=1 bk i = C :
( 28 ) i=1 xiy(i )
N∑ ∑ ∑ ( );8 2 SN ;
N
( Id ) 6
N
N
( 16 )
∑
( 17 )
In the following , the notation N ( ) . We will prove by induction that for N > 2 the following formula is true i=1 xiy(i ) is simplified by
∑
N ( 2 ) ,∑ ∑ where Id is the identity permutation applied in SCRAM .
For N = 2 , S2 = f1 ; 2g where 1 = Id and 2 is defined as ∑
2(1 ) = 2 and 2(2 ) = 1 . So
N ( Id ) = x1y2 + x2y1 , x1y1 , x2y2
Since xi is in ascending order and yi is in descending order ,
∑ N ( Id ) 6 Suppose that Formula ( 17 ) is true for N > 2 . Let x ; y 2 RN +1 , such that xi is sorted in ascending order and yi is sorted in descending order . We need to prove
N ( 2 ) . Formula ( 17 ) is true for N = 2 .
= ( y2 , y1)(x1 , x2 ) :
( 18 )
∑
( Id ) 6
∑
N +1
( );8 2 SN +1 : N∑
N +1
For all 2 SN +1,∑
N +1∑
{
¯(i ) =
( ) = xiy(i ) = xi ¯y ( i ) + xN +1yj ;
N +1 i=1 i=1 where j = ( N + 1 ) , ¯y = ( y1 ; :: : ; yj,1 ; yj+1 ; :: : ; yN +1 ) and ¯ 2 SN is defined as
Since xi is in ascending order and ¯yi is in descending order , the induction assumption implies if ( i ) 2 f1 ; :: : ; j , 1g
( i ) ( i ) , 1 if ( i ) 2 fj + 1 ; :: : ; N + 1g ∑ xi ¯yi + xN +1yj = Aj :
N +1
Let ’s compute the difference Aj , AN +1 for j 2 f1 ; :: : ; Ng , Aj , AN +1 = xi ¯yi + xN +1yj ,
( N∑ xiyi + xN +1yN +1
( 19 )
( 20 )
( 21 ) i=1 i=1
( ) > N∑ N∑ j,1∑ , N∑ = , N∑ N∑ > N∑ i=1 i=1 i=j i=j
=
= i=1 xiyi + xiyi+1 + xN +1yj i=j xiyi , xN +1yN +1
N∑
N∑ i=j xiyi + xiyi+1 + xN +1(yj , yN +1 ) xi(yi+1 , yi ) + xN +1(yj , yN +1 ) xN +1(yi+1 , yi ) + xN +1(yj , yN +1 ) = xN +1(yN +1 , yj ) + xN +1(yj , yN +1 ) = 0 ( 23 ) i=j
( 22 )
6 . SIMULATION RESULTS
)
We evaluate the recommendation fairness and driving efficiency of SCRAM through simulations which are conducted based on real world trajectories . Two parameters are used in the experiments , where N is the number of competing drivers and L is the length of recommended routes . 6.1 Setting
611 Road Network The simulation is based on the road network of Shanghai which contains about 22,420 intersections and 32,919 road sections . The average length of road sections is 0.45 km . 612 Trajectories The taxi trajectories were collected in Shanghai , China from approximately 4000 probe taxis operating over a period of 126 days [ 1 ] . A trajectory consists of a sequence of points . Each point contains seven fields : ID , timestamp , longitude , latitude , speed , angle , and status . The meaning of the first six fields is well understood . The last field is the current status of a taxi , “ 0 ” indicating vacant and “ 1 ” for occupied .
961 613 Traffic Patterns Traffic patterns , such as success probabilities of road sections , are extracted from the trajectories . These patterns are time dependent . A common way to compute time dependent pattern knowledge is to partition a day into a certain number of fixed time slots ( eg , 30 minutes a slot ) , as utilized in [ 6 ] . In the experiments , we also employ this approach . Given a road section , the number of vacant taxis passing the road section is counted , and the number of taxis that succeed in finding customers at the road section is also summed in each time slot . The two numbers are used to compute the success probability of the road section . Traffic patterns are usually updated periodically ( weekly or monthly ) with new taxi trajectories . The success probabilities of road sections and the distribution of customers are extracted in the time slot 8:00AM 8:30AM . 6.2 Compared Methods
SCRAM is compared with three approaches . The first one is RAN which is used as a baseline . In RAN , recommended routes are randomly selected from the candidate set and then routes are randomly assigned to drivers . The second approach is LCP , which was proposed in [ 6 ] . The route length of LCP is set to three in the experiments . Please note the route length of LCP is the number of pick up points , rather than the number of road sections . In the experiments , we utilize the shortest path algorithm to determine the actual route connecting two pick up points for LCP . The roundrobin mechanism is used to assign routes to taxis in LCP . The third approach is a version of SCRAM without considering the sharing of road sections , denoted by SCRAM W/O . By comparing SCRAM with SCRAM W/O , we highlight the effect of road section sharing on recommendation fairness and driving efficiency .
To provide a fair comparison , the number of road sections contained in recommended routes should be the same for the four approaches . For RAN , SCRAM W/O , and SCRAM , the length of recommended routes is equal . Since LCP recommends longdistance routes and uses the round robin mechanism to assign routes , the number of recommended routes should be determined by the number of road sections contained in the routes of SCRAM . For example , there are 10 taxi drivers requesting route recommendations , and the route length of SCRAM and LCP is 8 and 16 , respectively . For SCRAM , 10 routes are recommended and assigned to taxi drivers . For LCP , only 5 routes are selected as the recommended routes , which are assigned to taxi drivers by the round robin mechanism .
Both LCP and T Finder [ 17 ] extract small popular areas from the trajectories of high profit taxi drivers . These areas are called pick up points in LCP , while they are termed as parking places in T Finder . A route recommended by LCP is simply a sequence of pick up points without actual routes to connect these points . TFinder goes one step further by giving the actual route connecting two parking places . The shortest path algorithm is used by TFinder to generate actual routes . In the experiments , we adopt the same algorithm to generate the actual route connecting two pick up points for LCP . Therefore , LCP is extremely similar to T Finder , which is not compared in the experiments to avoid duplication . 6.3 Evaluation Results
When a taxi driver is provided with a recommended route , if there are customers distributed on the route and the taxi driver reaches a customer earlier than other competing taxis by following the route , the taxi driver succeeds in picking up a customer . In our simulations , each experiment is conducted for ten rounds with different starting intersections that are randomly selected from the
Figure 6 : Customers picked up by taxi drivers .
RAN LCP
Min Max Avg 5.91 4.30 7.53 6.70 SCRAM W/O 5.40 5.96 6.86 6.20
6.70 8.40 6.30 7.50
SCRAM
Std 0.72 0.56 0.35 0.50
Table 3 : Statistics of picked up customers set of all intersections . In each round , a taxi driver is recommended a route and is marked as to whether the taxi driver picks up a customer or not . If the taxi driver succeeds in picking up a customer , he stops cruising on the route , and the distance from the departing location to the place of the customer is calculated as the driving cost . Otherwise , the distance from the departing location to the end of the recommended route is computed . We use the speed constrained on road sections as the driving speed in the experiments .
631 The Number of Picked up Customers In the experiment , the number of competing taxi drivers N is ten and the length of recommended routes L is set to L = 8 . The number of picked up customers is summed for each taxi driver . The results are depicted in Figure 6 . Two observations can be made from the figure . First , LCP is able to find more customers than RAN , SCRAM W/O and SCRAM , by , on average , 27 % , 24 % and 11 % , respectively . This is attributable to the fact that the recommended routes of LCP have longer distance than the ones of the other three approaches . Therefore , the sharing degree of road sections is correspondingly less intense for LCP . Second , although the set of candidate routes is the same for RAN , SCRAMW/O and SCRAM , SCRAM finds 14 % and 12 % more customers than RAN and SCRAM W/O , respectively . The reason is that SCRAM considers the sharing of road sections when computing recommended routes , alleviating unnecessary competition . The minimum , maximum , average and standard deviation are listed in Table 3 . It is observed that there is no obvious difference in the standard deviations .
632 Driving Distance The setting of the experiment is the same as the previous one . For each taxi driver , the driving distance is summed for ten rounds . The results are plotted in Figure 7 . LCP finds the largest number of customers at the highest driving cost . On average , LCP incurs 137 % , 134 % and 223 % more driving cost than RAN , SCRAMW/O and SCRAM , respectively . SCRAM incurs the least driving cost to find customers and the driving distances of taxi drivers are more stable . The minimum , maximum , average and standard deviation of driving distances are listed in Table 4 . It is observed that the standard deviation increases with driving distances . LCP fluctuates more intensely than the other three approaches .
1234567891045678910DriverNum of CustomersRANLCPSCRAM−W/OSCRAM962 RAN LCP
Min Max Avg 1.56 1.14 2.14 2.68 1.45 SCRAM W/O 1.18 0.74 0.86
2.49 3.32 1.75 1.06
SCRAM
Std 0.38 0.34 0.16 0.09
Table 5 : Statistics of DCC
Figure 9 : The effect of taxi drivers .
N=5 N=10 N=15 N=20 N=25 0.87 0.15 0.60 0.30 0.99 SCRAM W/O 0.10 0.04 0.38
0.49 0.63 0.70 0.29
0.31 0.45 0.43 0.14
0.38 0.34 0.16 0.09
RAN LCP
SCRAM
Table 6 : Standard deviation of DCC
Therefore , the area covered by the routes of SCRAM is smaller than that of LCP . A route recommended by LCP is longer and has more chance of finding customers , compared with SCRAM . However , smaller is not necessarily bad . As demonstrated by the experimental results , SCRAM is fairer and more efficient than LCP in terms of driving cost per customer .
6.4 Scalability
More insights of scalability are presented for the four approaches in this section . The recommendation fairness and driving efficiency of SCRAM are evaluated by changing the number of taxi drivers and the length of recommended routes .
641 The Number of Taxi Drivers Under the same conditions , increasing the number of taxis aggravates the competition , which correspondingly leads to the growth of DCC . As shown in Figure 9 , DCC increases with the number of taxi drivers for the four approaches . For RAN and LCP , the superiority of SCRAM gradually diminishes with the increase of taxis due to the aggravated competition . For example , when N = 5 , SCRAM is 164 % and 240 % more efficient than RAN and LCP , respectively . When N = 25 , SCRAM is only 19 % and 77 % more efficient than RAN and LCP , respectively . However , the superiority of SCRAM over SCRAM W/O increases with taxis . For example , when N = 5 , SCRAM is 44 % more efficient than SCRAM W/O , but when N = 25 , SCRAM is 74 % more efficient than SCRAM W/O . This demonstrates that SCRAM W/O is more affected by the number of taxis than other approaches . The standard deviations of DCC are listed in Table 6 . Overall , the standard deviation of DCC increases with the number of taxi drivers . When N = 25 , SCRAM still achieves 127 % , 56 % and 160 % better recommendation fairness than RAN , LCP and SCRAM W/O , respectively , even under intense competition .
Figure 7 : Driving distance of taxi drivers .
RAN LCP
SCRAM W/O
SCRAM
Min Max 9.50 7.63 22.23 17.95 7.67 9.45 6.55 5.56
Avg 8.62 20.48 8.80 5.99
Std 0.72 1.36 0.55 0.35
Table 4 : Statistics of driving distances
633 Driving Cost per Customer Neither the number of customers nor the driving distance is sufficient to represent the recommendation fairness and driving efficiency of taxi drivers . It is meaningless to consider only one metric . In order to compare the recommendation fairness and driving efficiency of taxi drivers , we propose a new metric called driving cost per customer ( DCC ) , which is defined as :
DCC = driving cost number of customers
:
( 29 )
DCC represents the average driving cost to find a customer , reflecting the driving efficiency of taxi drivers . Meanwhile , the standard deviation of DCC indicates the recommendation fairness of competing taxi drivers .
The DCC values of the four approaches are shown in Figure 8 . On average , SCRAM is 56 % , 189 % and 55 % more efficient than RAN , LCP , and SCRAM W/O , respectively . The minimum , maximum , average , and standard deviation of DCC are listed in Table 5 . It is obvious that the standard deviation of DCC increases with the values of DCC . RAN , LCP and SCRAM W/O fluctuate intensely . On the contrary , SCRAM is much more stable due to the consideration of road section sharing in the computation of optimal routes and the design of an assignment mechanism to guarantee recommendation fairness . SCRAM achieves 322 % , 278 % and 77 % better recommendation fairness than RAN , LCP and SCRAMW/O , respectively .
Overall , LCP provides taxis with long distance routes to traverse , while SCRAM suggests taxis cruise in the local area .
Figure 8 : DCC of taxi drivers .
12345678910051015202530DriverDriving distance ( km)RANLCPSCRAM−W/OSCRAM1234567891001234DriverDCCRANLCPSCRAM−W/OSCRAMRANLCPSCRAM−W/OSCRAM012345MethodsDCCN=5N=10N=15N=20N=25963 ( 14511107702 ) . Frédéric Le Mouël ’s work is funded by a grant from Rhone Alpes Region , France .
9 . REFERENCES [ 1 ] Suvnet trace data . http://wirelesslabsjtueducn [ 2 ] A . Abdulkadiroglu and T . Sonmez . School choice : A mechanism design approach . The American Economic Review , 93(3):729–747 , 2003 .
[ 3 ] G . Adomavicius and A . Tuzhilin . Toward the next generation of recommender systems : A survey of the state of the art and possible extensions . Knowledge and Data Engineering , IEEE Transactions on , 17(6):734–749 , 2005 .
[ 4 ] Y . Ding , S . Liu , J . Pu , and L . M . Ni . Hunts : A trajectory recommendation system for effective and efficient hunting of taxi passengers . In MDM , pages 107–116 . IEEE , 2013 .
[ 5 ] A . G . Erdman and G . N . Sandor . Mechanism design : analysis and synthesis ( Vol . 1 ) . Prentice Hall , Inc . , 1997 . [ 6 ] Y . Ge , H . Xiong , A . Tuzhilin , K . Xiao , M . Gruteser , and
M . Pazzani . An energy efficient mobile recommender system . In SIGKDD , pages 899–908 . ACM , 2010 . [ 7 ] D . E . Goldberg et al . Genetic algorithms in search , optimization , and machine learning , volume 412 . Addison wesley Reading Menlo Park , 1989 .
[ 8 ] H . Hu , Z . Wu , B . Mao , Y . Zhuang , J . Cao , and J . Pan .
Pick up tree based route recommendation from taxi trajectories . In Web Age Information Management , pages 471–483 . Springer , 2012 .
[ 9 ] J . Lee , I . Shin , and G L Park . Analysis of the passenger pick up pattern for taxi location recommendation . In NCM , pages 199–204 . IEEE , 2008 .
[ 10 ] N . Nisan and A . Ronen . Algorithmic mechanism design . In
Proceedings of the thirty first annual ACM symposium on Theory of computing , pages 129–140 . ACM , 1999 .
[ 11 ] S . Qian , Y . Zhu , and M . Li . Smart recommendation by mining large scale gps traces . In WCNC , pages 3267–3272 . IEEE , 2012 .
[ 12 ] P . Resnick and H . R . Varian . Recommender systems .
Communications of the ACM , 40(3):56–58 , 1997 .
[ 13 ] J . Schummer and R . V . Vohra . Mechanism design without money . Algorithmic Game Theory , 10:243–299 , 2007 .
[ 14 ] L Y Wei , Y . Zheng , and W C Peng . Constructing popular routes from uncertain trajectories . In SIGKDD , pages 195–203 . ACM , 2012 .
[ 15 ] J . Yuan , Y . Zheng , C . Zhang , W . Xie , X . Xie , G . Sun , and
Y . Huang . T drive : driving directions based on taxi trajectories . In SIGSPATIAL , pages 99–108 . ACM , 2010 .
[ 16 ] J . Yuan , Y . Zheng , L . Zhang , X . Xie , and G . Sun . Where to find my next passenger . In UbiComp , pages 109–118 . ACM , 2011 .
[ 17 ] N . J . Yuan , Y . Zheng , L . Zhang , and X . Xie . T finder : A recommender system for finding passengers and vacant taxis . Knowledge and Data Engineering , IEEE Transactions on , 25(10):2390–2403 , 2013 .
[ 18 ] D . Zhang , T . He , Y . Liu , and J . A . Stankovic . Callcab : A unified recommendation system for carpooling and regular taxicab services . In Big Data , International Conference on , pages 439–447 . IEEE , 2013 .
[ 19 ] M . Zhang , J . Liu , Y . Liu , Z . Hu , and L . Yi . Recommending pick up points for taxi drivers based on spatio temporal clustering . In CGC ) , pages 67–72 . IEEE , 2012 .
Figure 10 : The effect of route length .
RAN LCP
L=6 0.15 0.34 SCRAM W/O 0.14 0.10
SCRAM
L=8 0.23 0.22 0.16 0.09
L=10 L=12 L=14 0.33 0.24 0.39 0.44 0.41 0.37 0.12 0.20
0.25 0.29 0.36 0.11
Table 7 : Standard deviation of DCC
642 The Length of Recommended Routes The effect of route length on DCC is depicted in Figure 10 . According to the locality driving behavior discovered in Figure 1 , it is not necessary to test large numbers of road sections in the experiment . For RAN , route length has almost no effect on DCC . The DCC of LCP decreases with route length . As mentioned above , the number of road sections contained in the recommended routes of the four approaches should be equal for the sake of fair comparison . Increasing the route length of SCRAM causes more routes to be selected for the round robin assignment in LCP , which indirectly alleviates the competition . Increasing the route length of SCRAM indeed results in finding more customers but at the cost of driving longer distances . The increasing growth of driving distance is far larger than the increasing growth of customers , causing an increase of DCC . Without considering the sharing of road sections , the DCC of SCRAM W/O is more easily affected by the length of routes than SCRAM . The standard deviations of DCC are listed in Table 7 . On average , SCRAM achieves almost 100 % better recommendation fairness than other three approaches .
7 . CONCLUSION
Route recommendation for taxi drivers is of great economic and social importance . On one hand , customers can quickly find taxis , saving waiting time ; on the other hand , taxi drivers can find customers in a shorter time by following the recommended routes , increasing their revenues . In this paper , we propose SCRAM , a sharing considered route assignment mechanism for fair taxi route recommendations . In SCRAM , the sharing of road sections existing in the recommended routes is considered in the process of computing optimal routes . Then , recommended routes are assigned to taxi drivers from a long term perspective to guarantee recommendation fairness . In comparison with three approaches , SCRAM is capable of providing taxi drivers with more efficient routes that have the least DCC . Furthermore , SCRAM achieves better recommendation fairness for competing taxi drivers , which is verified by the standard deviations of DCC .
8 . ACKNOWLEDGMENTS
This work is supported by National 863 Program ( 2015AA01A202 ) .
This work is also partially supported by China National Science Foundation ( 61272438 , 61472253 , 61420106010 ) , Research Funds of Science and Technology Commission of Shanghai Municipality
RANLCPSCRAM−W/OSCRAM005115225335MethodsDCCL=6L=8L=10L=12L=14964
