Bayesian Discovery of Multiple Bayesian Networks via Transfer Learning
Diane Oyen
University of New Mexico doyen@csunmedu
Terran Lane Google , Inc terranlane@gmailcom
3 1 0 2 l u J
9
] L M
. t a t s [
1 v 2 1 3 2
.
7 0 3 1 : v i X r a
Abstract—Bayesian network structure learning algorithms with limited data are being used in domains such as systems biology and neuroscience to gain insight into the underlying processes that produce observed data . Learning reliable networks from limited data is difficult , therefore transfer learning can improve the robustness of learned networks by leveraging data from related tasks . Existing transfer learning algorithms for Bayesian network structure learning give a single maximum a posteriori estimate of network models . Yet , many other models may be equally likely , and so a more informative result is provided by Bayesian structure discovery . Bayesian structure discovery algorithms estimate posterior probabilities of structural features , such as edges . We present transfer learning for Bayesian structure discovery which allows us to explore the shared and unique structural features among related tasks . Efficient computation requires that our transfer learning objective factors into local calculations , which we prove is given by a broad class of transfer biases . Theoretically , we show the efficiency of our approach . Empirically , we show that compared to single task learning , transfer learning is better able to positively identify true edges . We apply the method to whole brain neuroimaging data .
I .
INTRODUCTION
The discovery of structural features in Bayesian networks is of great interest in scientific domains such as bioinformatics and neuroscience . The goal is to understand the relationships among variables in a system , such as genes in a gene expression network or activity levels of regions of the brain in functional brain networks . However , the data collected is often done in several separate but related experiments . Therefore , the full data set is actually composed of several distinct , but related , subsets of data — called tasks in transfer learning . For each task there may not be enough samples to learn a robust model . Transfer learning leverages information among tasks to smooth learned models [ 1 ] , [ 2 ] . These smoothed models tend to be more robust to sample noise and generalize to holdout data better than models learned without transfer . Furthermore , the set of models learned among tasks will share many features in common , easing interpretation of the models . Differences among the learned task specific models are more likely to be due to real differences in the generating distribution of the data rather than spurious differences [ 3 ] , [ 4 ] . in unsupervised learning ,
Existing transfer Bayesian network learning algorithms have two major limitations : 1 ) they use heuristic search over the space of sets of graphs ; and 2 ) produce a single point maximum a posteriori model . Yet , there may be many other solutions of similar likelihood and therefore a point solution will not give a full picture of likely relationships among variables . A point solution can perform well at predicting future data , but it is misleading to present such a solution to the domain expert as the only model that explains the data . Instead , we would like to learn a posterior distribution over solutions and extract meaningful summary statistics about features of interest . Such algorithms exist for learning individual Bayesian networks and are referred to as network discovery [ 5 ] , [ 6 ] . Extending these algorithms for transfer network learning is not trivial , as we explain in the next paragraph .
Algorithms for estimating the posterior probability distribution for a single network generally fall into two categories : those that search over structure space and those that search over order space . Structure space algorithms make small local changes to the learned graph structure ( typically , the addition , removal or reversal of a single edge ) . For these small changes , updating the likelihood of the graph , and therefore the posterior distribution , is fast but covering the full space of structures can be slow and can get stuck in local maxima [ 7 ] , [ 8 ] . Extending those structure search algorithms to multiple tasks would explode the model search space exponentially , exacerbating convergence issues . On the other hand , order search algorithms exploit the tractability of calculating posteriors given a fixed ordering of the variables ( described in more detail later ) . Node order dictates which nodes are allowed to be parents to any given node , and therefore changes in node order are more global than structure space changes . There are relatively efficient algorithms for calculating exact posteriors of structural features [ 6 ] , [ 9 ] or approximate posteriors [ 5 ] , [ 10 ] that have been shown to be faster than structure search . However , there is no structural prior provided in these orderspace formulations ; instead there is a prior over orders . We do not want to impose transfer at the level of orders , but rather at the level of structures ( a particular edge appearing in one task will be preferred in other tasks ) .
Our main challenge , therefore , is to incorporate a structural bias term into the order search formulation . With such a bias term , we can impose a transfer bias to learn more robust networks , while leveraging the most efficient Bayesian discovery algorithms that currently exist . Our major contribution is proving that structural bias can be efficiently incorporated into the order conditioned network discovery formulation . We prove that our transfer formulation factors into local calculations . Thus , we provide the first transfer algorithm that can calculate exact posteriors for multiple networks of moderate size . We are also the first to show how transfer can incorporated into stateof the art order search approximation algorithms for larger networks .
Our contribution is a proof that structure bias can be efficiently incorporated into order conditioned Bayesian structure discovery : a necessary requirement for using the efficient algorithms of network discovery [ 5 ] , [ 6 ] . This is a finding that can impact many structure discovery problems . We give a specific formulation of multitask Bayesian network discovery that uses the structure bias to transfer information among tasks . We further show that we can take a Bayesian approach to average over all possible settings of the transfer parameter rather than needing to select this parameter . Empirical results on networks , of size 8 variables and 37 variables , indicate that our transfer approach learns posterior probabilities that are closer to the optimal values than single task learning algorithms . We apply our multitask algorithm to neuroimaging data with 150 variables and demonstrate that the multitask algorithm produces fewer spurious edges than the non multitask algorithm while providing more knowledge discovery information than the standard point solution .
II . RELATED WORK
Network structure discovery in the face of limited data is an extensively studied problem . With limited data , the posterior probability of even the optimal network may be quite small , however Friedman and Koller ( 2003 ) show that the marginal posterior probabilities over subgraphs or structural features can be quite high given the same data [ 5 ] . They propose the so called order MCMC algorithm for estimating such posterior probabilities . Koivisto and Sood ( 2004 ) give a dynamic programming method for calculating exact posterior probabilities of network features conditioned on orders [ 6 ] . Further improvements are made to make the approach more memory efficient [ 9 ] and to produce partial order MCMC [ 10 ] . We show how to extend these single task learning approaches to the transfer learning problem .
Transfer and multitask learning leverage information among related problems called tasks [ 1 ] , [ 2 ] . Formulations for multitask learning of Bayesian networks exist [ 3 ] , [ 11 ] . Starting from these , we derive an inductive bias toward similar structures among related tasks . However , the solutions to the multitask problems in these papers are found through heuristic search , producing a point estimate rather than a posterior distribution , which we desire . They also require a parameter that determines the strength of transfer bias .
Another approach to learning Bayesian networks from limited data uses the concept of network discovery with a prior over structures obtained from domain knowledge [ 8 ] , [ 12 ] . However , these approaches resort to using MCMC in structure space ( rather than order space ) to avoid the difficulties in assigning priors conditioned on orders . Furthermore , they do not solve the problem considered here of multiask learning .
III . PRELIMINARIES
First , we introduce background information about Bayesian structure discovery for learning a single task and then describe MAP multitask Bayesian network objectives . We combine ideas from both of these approaches to produce Bayesian structure discovery of multitask Bayesian networks . joint probability distribution over n random variables X = [ X1 , X2 , . . . , Xn ] , where G is a directed acyclic graph ( DAG ) and the conditional probability distributions are parameterized by θ [ 13 ] . An edge ( Xi , Xj ) in G means that the child Xj is conditionally independent of all non descendants given its parent Xi . The structure of the network , G , is of particular interest in many domains as it is easy to interpret and gives valuable information about the interaction of variables .
A . Structural Feature Discovery
Given a limited amount of data , the posterior probability of any network may be quite small . However , summary statistics regarding structural features of networks may have high posterior even with limited data [ 5 ] . Structural features ( such as an edge ) can be described by an indicator function f such that for f ( G ) = 1 the feature exists in graph G , otherwise f ( G ) = 0 . The posterior probability of the feature is equivalent to the G P ( G|D)f ( G ) . However , this sum can be intractable , as the number of DAGs is super exponential in the number of variables . expectation of its indicator , P ( f|D ) =
An important insight to making this sum tractable is that we could fix the order of the variables . An order , ≺ , is a permutation on the indices of the variables X≺(1 ) , X≺(2 ) , . . . , X≺(n ) such that parents must precede children in the order , ie Xj cannot be a parent of Xi if ≺ ( j ) ≥ ≺ ( i ) . Given an order , learning optimal parents for each child factors into local calculations , and summing over DAGs consistent with the order is tractable [ 14 ] , [ 15 ] . [ 5 ] condition on a node order , and then obtain the unconditional posterior by summing over orders :
G⊆≺
P ( f|D ) =
1
P ( D )
≺
P ( ≺ )
P ( D|G)P ( G|≺)f ( G )
Note that these two formulations for P ( f|D ) are not the same , as most DAGs , G , will be consistent with multiple orders , ≺ . Typically , this formulation produces an acceptable bias in favor of simpler structures .
[ 6 ] give an efficient method for calculating this sum . The approach is rather involved , so we summarize only the key points here . They make several reasonable assumptions , then break the calculation into three steps . First , we describe the modularity assumptions :
1 )
2 )
3 ) the also and
Parameter modularity : Modularity Bayesian hold , n of must i=1 P ( θi,πi|πi )
P ( θ|G ) network
= parameters i=1 P ( xi|xπi , θi,πi ) .
P ( X = x|G ) =n cn f ( G ) =n
Structure prior modularity : The network model so that P ( G,≺ ) = prior must be modular i=1 P ( Ui)P ( π(Xi) ) , where Ui is the set of variables preceding Xi in the order ≺ ( potential parents of Xi ) and c is a normalization constant . Feature modularity : The features must be modular , i=1 fi(π(Xi ) ) where π(Xi ) is the parent set of variable i .
Bayesian networks compactly describe joint probability distributions by encoding conditional independencies in multivariate data . A Bayesian network B = {G , θ} describes the
The most common feature to look for is a directed edge u → v st f = 1 if Xu ∈ πv , which is clearly modular . If these modularity assumptions hold , then the likelihood over order space factors into local calculations as shown in Eq 1 [ 6 ] . prior over structures can be described by pairwise sharing of information among tasks as in Eq 3 .
K k−1 k=1
P ( G|λ ) P ( D )
P ( G(k ) )
K k=1 i=1
PMTL(G|D , λ ) =
P ( G|λ ) =
1 Z
P ( D(k)|G(k ) )
λ(1 − λ)∆(G(k),G(i ) )
( 3 ) where Z is a normalization constant and ∆ is any graph distance metric , such as edit distance , that measures the number of structural differences between graphs G(k ) and G(i ) .
IV . MULTITASK FEATURE DISCOVERY
In this section , we present our novel Bayesian approach to structure discovery in multitask Bayesian networks . The challenge is finding a way to bias structures to be similar among tasks , like Eq 3 , while maintaining the efficiency of calculating feature posteriors that factor into local calculations , like Eq 1 . First we formulate the problem , describe structural bias terms that are order modular , provide a Bayesian approach for handling the strength of the bias , and finally describe practical implementation issues .
A . Problem Formulation
Instead of learning the feature posteriors from a single task specific data set , we have K tasks from which we will leverage data . We define the indicator f ( k ) = f ( G(k) ) . Our goal is to learn a feature for each task P ( f ( k)|D(1 ) , . . . , D(K ) ) ∀k ∈ {1 , . . . , K} . Again , all formulations are written for a single feature ( eg a directed edge ) , but calculating them simultaneously ( eg all edges in a network ) takes the same time . To simplify the development of the objective , we will consider , without loss of generality , the case where K = 2 . P ( f ( 1)|D(1 ) , D(2 ) ) =
P ( G(1)|D(1 ) , D(2))f ( G(1 ) )
G(1)⊆≺
P ( ≺ ) f ( G(1 ) ) ×
≺
G(1)⊆≺
1

G(2)⊆≺
P ( D(1 ) , D(2 ) )
≺
G(1)⊆≺
≺
=
=

=
G(2)⊆≺
P ( D(2)|G(2))P ( G(1 ) , G(2 ) )

For the purpose of calculating the transfer bias , we impose the same order , ≺ , on both tasks , and then marginalize over orders . This restriction makes computation more efficient , and it seems reasonable to bias a feature contingent on a particular ordering toward the evidence from other tasks while they are restricted to the same set of possible graph structures . Rewriting Eq 4 as a joint probability conditioned on an order ,
P ( f , D|≺ ) =
P ( f|D ) =
P ( πi|Ui)P ( xi|πi)fi(πi )
P ( ≺)P ( f , D|≺ )
( 1 ) n
πi⊆Ui i=1 1
P ( D )
≺ where πi = π(Xi ) is the parent set of variable i . The unconditional posterior for the features is obtained by summing over orders , using the following steps :
1 )
2 )
3 )
βi(πi ) family scores :
Calculate = P ( πi)P ( xi|πi)fi(πi ) for each node i and potential set of parents πi . The computational complexity of each of these is some function C(m ) of the number of samples m . The maximum number of parents allowed for any node is typically fixed to a small natural number , r . Therefore , there are O(N r+1 ) of these functions to calculate for a total complexity of O(N r+1C(m) ) .
Calculate local contribution of each subset U ⊆ V − {i} of potential parents of i : αi(U ) = πi⊆U P ( πi)P ( xi|πi)fi(πi ) . Using a truncated fast M¨obius transform and pre computed β ’s , all of the α functions are computed in O(n2n ) time . Sum over the subset lattice of the various Ui to obtain the sum over orders ≺ . Using dynamic programming , this sum takes time O(n2n ) .
The total computational complexity for a single task is O(n2n + nr+1C(m) ) . This is the exact calculation of the posterior . For large networks , roughly n > 30 , the exponential T term is intractible . In these cases , MCMC simulations give an approximation to the posterior probability , so that P ( f|D ) ≈ t=1 P ( ≺t)P ( f|D,≺t ) for ≺t sampled from order space
1 T [ 5 ] or partial orders [ 10 ] .
B . Multitask Bayesian Networks
Multitask Bayesian network learning leverages knowledge among a set of related tasks by applying a bias toward learning similar networks among the tasks . The underlying assumption is that much of the network is shared among tasks , yet a few differences may exist . By leveraging information among tasks , we can learn more robust networks than would be possible from a single small sample [ 3 ] . We will apply a similar bias mechanism for network discovery . First we describe the objective function of existing MAP estimate algorithms , which has been shown to be effective at leveraging information . A set of tasks with data sets D(k ) and networks G(k ) for k ∈ {1 , . . . , K} can be learned by optimizing :
P ( G|D ) = P ( G(1 ) , . . . , G(K)|D(1 ) , . . . , D(K ) ) = P ( D(1 ) , . . . , D(K)|G(1 ) , . . . , G(K ) )
P ( G ) P ( D )
( 2 )
In existing multitask network learning formulations , the joint structure prior , P ( G ) , is used to encode a bias toward similar structures by penalizing differences in network structure among tasks [ 3 ] , [ 11 ] . We can assume that P ( D(k)|G(k ) ) is independent of all other G(i ) so Eq 2 simplifies and the joint
P ( G(1 ) , G(2)|D(1 ) , D(2 ) ) f ( G(1))P ( D(1)|G(1))×

( 4 ) we get the following :
P ( f ( 1 ) , D(1 ) , D(2)|≺ ) = f ( G(1))P ( D(1)|G(1))×
G(1)⊆≺
P ( D(2)|G(2))P ( G(1 ) , G(2)|≺ )


G(2)⊆≺
( 5 )
Our formulation imposes a transfer bias at the level of structure , P ( G(1 ) , G(2)|≺ ) , which is more intuitive than at the level of orders . To calculate this sum efficiently , it is necessary to factor it into a product over local sums . We prove that this is indeed possible , for appropriately chosen structure priors . In addition to the modularity assumptions already stated , we impose an additional modularity assumption , which we call Assumption 4 ) Transfer prior modularity : P ( G(1 ) , G(2)| ≺ |Ui ) . Examples of priors that obey this assumption are graph distance measures that count the number of edge additions and deletions , so this is a reasonable requirement . Theorem 1 . If G(1 ) , . . . , G(K ) obey the four assumptions of modularity , then
) = n i=1 P ( π(1 )
, π(2 ) i i
P ( f ( 1),D|≺ ) = fi(π(1 ) i
)P ( x(1 ) i
|π(1 ) i
)× i ⊆Ui π(1 )
 i∈V i ⊆Ui π(2 )
P ( x(2 ) i
|π(2 ) i
)P ( π(1 ) i
, π(2 ) i
|Ui )

Proof Sketch : Apply the chain rule and marginalize over graph structure to get Eq 5 . Use the modularity properties on each term in the product , and notice that the result factors into the desired form .
P ( f ( 1),D|≺ ) = f ( G(1))P ( D(1)|G(1))×
G(1)⊆≺
P ( D(2)|G(2))P ( G(1 ) , G(2)|≺ )

×
)
G(2)⊆≺


1 ⊆U1 π(1 )
=
··· ··· n ⊆Un π(1 ) n n i=1
1 ⊆U1 π(2 ) n ⊆Un π(2 ) i=1 fi(π(1 ) i
)P ( x(1 ) i
|π(1 ) i
P ( x(2 ) i
|π(2 ) i
)P ( π(1 ) i
, π(2 ) i
|Ui )

The details of the proof are straightforward , yet space consuming , and so are omitted . See [ 6 ] for a similar proof .
B . Computational Complexity
The power of Theorem 1 is the computational savings that we gain . Using the factored posterior , we only need to change Step 1 of the order space algorithm outlined in Section III A , the calculation of the family scores . The transfer biased family scores are calculated as : βki(πi ) = fi(π(k ) = fi(π(k ) i
)P ( x(k ) )P ( x(k ) i i
|π(k ) |π(k ) i i
, π(j ) i
)
)P ( π(k ) )× i

)
( 6 )
P ( x(j ) i
|π(j ) i
)P ( π(k ) i
, π(j ) i
 j=k i i ⊆Ui π(j )
There are now Knr+1 of these families to calculate and each one has a sum over O(Knr ) terms . The computational complexity increases from the single task time of O(nr+1C(m ) ) to O(K 2n2r+1C(m) ) . Steps 2 and 3 remain unchanged with an exponential complexity that can be reduced through MCMC approximation . i i
|π(j )
Even the polynomial
) are exponentially larger for some π(j ) term becomes unmanageable for networks with more than 30 or so nodes and must be approximated . We note that in many cases the family scores i ⊆ Ui P ( x(j ) than others . Therefore , we can use a simple approximation by summing over only the most likely parent sets . While calculating the family scores , we create a set of the highestscoring families , called set H(k ) for each node in each task . To populate this set , we simply include h parent sets that give the highest P ( x(k ) ) , for some constant h . Then we use the approximate structural prior : P ( x(j )
) ≈
)P ( π(k )
|π(k )
|π(j )
, π(j )
Pi(π(k )
|Ui ) i i i i i i i i i ∈H(j ) π(j ) i
C . Transfer via Structure Bias
Now that we know we can incorporate transfer bias , we need to select a modular bias term that transfers knowledge among tasks . The MAP multitask algorithms use a penalty on the number of differences between tasks using a graph distance function . In that case , the number of edges that must be added , deleted , or reversed to edit one graph into the other is penalized . Due to our modularity constraint , our transfer bias must be defined as a function on pairs of parent sets ( π(k ) ) , rather than graphs . We choose to penalize the number of edge additions which breaks down into local calculations : the number of parents present in π(k ) that are not present in π(j ) . In other words , the size of the set difference ∆ikj = |π(k ) \ π(j ) | will be biased toward small values . To encourage the number of differences to be small , we apply a penalty in the form of a geometric distribution , ( 1 − λ)∆ikj
|Ui , λ ) =
P ( π(k )
, π(j )
, π(j )
( 7 ) i i i i i i i i
1 Z i i
, π(j )
Calculation of the normalization constant requires summing over an exponential number of possible combinations of parent sets ( π(k ) ) . However , we found show how to simplify the sum into an easy closed form . We employ a shortcut by noting that there are a finite number of values that ∆ikj can take and we find a closed form for calculating the number of parent set combinations that produce each value of ∆ikj . ( 1 − λ)∆ikj
Z = i ⊆Ui π(k ) i ⊆Ui π(j ) = ( 4 − λ)|Ui|
( 8 ) i i i will give ∆ikj = 0 ( π(2 ) i } but none from π(1 ) i will give ∆ikj = 1 ( π(2 )
Here we give a sketch of the derivation of Eq 8 . First , we simplify the inner sum by fixing parent set π(1 ) and counting how many parent sets π(2 ) can contain any parents from the set {Ui \ π(1 ) ) ; then how many π(2 ) can contain any i } and exactly one from π(1 ) parents from the set {Ui \ π(1 ) ) ; | . This sum turns out etc , up to the maximum of ∆ikj = |π(1 ) to be a binomial expansion , and so we can write it in closed form . Next , we perform a similar expansion of the outer sum | = 1 , over parent sets π(1 ) etc up to the maximum |π(1 ) | = |Ui| . This sum also turns out to be a binomial expansion and therefore can be simplified into a closed form.1 that have size |π(1 )
| = 0 , and |π(1 ) i i i i i i i i
Plugging Eq 8 into Eq 7 gives the structure prior :
( 1 − λ)∆ikj ( 4 − λ)|Ui|
|Ui , λ ) = i i
, π(j )
P ( π(k )
( 9 ) The parameter λ , 0 ≤ λ ≤ 1 , controls the strength of transfer bias . When λ = 0 , the prior becomes uniform and therefore there is no transfer . When λ = 1 , the prior is non zero only when no edge additions occur , and therefore the only parents that are allowed are those that are likely in the other tasks .
D . Bayesian Model Averaging
We have just introduced an additional parameter , λ , which is a bit of a nuisance . Existing MAP algorithms cannot avoid dealing with this , and they typically estimate λ by optimizing over a held out validation set . This is computationally expensive and reduces the amount of available data for training . Rather than selecting a fixed value for λ , we perform Bayesian model averaging over all possible values of λ . This Bayesian approach is compelling as the true amount of similarity among tasks is unknown , and the “ true ” value of λ is only incidental to our objective of learning the structure likelihoods . Furthermore , it saves us the computation of running the algorithm for several values of λ , and we do not need to hold out data for tuning .
We set an uninformative uniform prior , p(λ|Ui ) = 1 for i i
, π(j )
P ( π(k )
|Ui ) =
0 ≤ λ ≤ 1 , and marginalize over λ .
1 1 = 2F1(|Ui| , 1 ; ∆ikj + 2 ; 1/4 ) where 2F1 is the ordinary hypergeometric function :
P ( π(k ) , π(j ) ( 1 − λ)∆ikj ( 4 − λ)|Ui| dλ
4|Ui|(∆ikj + 1 )
=
0
0 i i
|Ui , λ)p(λ|Ui)dλ
∞
2F1(|Ui| , 1 ; ∆ikj + 2 ; 1/4 ) = · Γ(|Ui| + n ) Γ(|Ui| )
Γ(1 + n )
Γ(1 ) n=0
·
Γ(∆ikj + 2 )
Γ(∆ikj + 2 + n )
·
1
4nn!
The last step in Eq 10 is obtained by applying an identity given by Euler in 1748 [ 16 ] . If β is the beta function and 2F1
1Algebraic details of this calculation are space consuming and can be supplied in an online supplement .
Fig 1 : Posterior probability estimate for each edge in the asia network from various large sample sets ( means calculated from 20 sample sets ) . Blue curves are true edges , green are reverse of a true edge , pink are non edges . ( Best viewed in color . )
1 is the ordinary hypergeometric function , then xb−1(1 − x)c−b−1(1 − zx)−adx =
0
β(b , c − b)2F1(a , b ; c ; z ) for ( c ) > ( b ) > 0 . We let x = λ , a = |Ui| , b = 1 , c = ∆ikj + 2 , and z = 1/4 . Then the condition , ∆ikj + 2 > 1 > 0 , holds for any ∆ikj ≥ 0 which is the valid range for ∆ikj . Plugging these values into the identity gives the solution to the integral as :
β(1 , ∆ikj + 1)2F1(|Ui| , 1 ; ∆ikj + 2 ; 1/4 ) which simplies to the solution given in Eq 10 .
We are only interested in calculating 2F1 for combinations of integer values of ∆ikj and |Ui| for 0 ≤ ∆ikj ≤ |Ui| < n . For these values , 2F1 is convergent and efficient solvers exist . Thus , we can plug the result of Eq 10 into the equation of Theorem 1 .
Bayesian model averaging is made possible by conditioning on orders . Existing multitask network learning algorithms that search in DAG space [ 3 ] , [ 11 ] would be required to calculate a normalization constant like that in Eq 8 but with sums over all possible DAGs , and no closed form has been found for such a sum .
( 10 )
V . EXPERIMENTS
Multitask learning should be able to identify true edges and non edges with less data than is possible with traditional single task learning . We compare our MTL structure discovery algorithm against two baselines . The first baseline is singletask learning ( STL ) , where each network is learned independently of the other tasks . The other baseline ( POOL ) takes the opposite extreme by pooling data from all tasks together and treating it as a single task . POOL uses the strongest leveraging of data among tasks possible and so it should perform best if the separate tasks are actually the same distribution . For all approaches , we use the BeanDisco implementation for exact and approximate network discovery [ 10 ] . For MTL , the scoring function of BeanDisco is modified as described above . For POOL , the data are merged before applying the algorithm .
100020003000400050000020406081Training set sizep(f|D ) ( a ) STL
( b ) MTL
( c ) POOL
Fig 2 : Example posterior probability estimate for each edge in a modified asia network from various small sample sets ( means calculated from 20 sample sets ) . Up is good for blue and cyan curves . Down is good for red and green curves .
A . Benchmark Data
Synthetic data is generated from benchmark Bayesian networks , asia which has 8 variables [ 17 ] and alarm which has 37 variables [ 18 ] . Even when the generative model is known , it is not obvious how to measure the performance of a network discovery algorithm . To give a clear picture of our objective , see Figure 1 . On the small asia network we can calculate the true posterior likelihoods of structural features given the data . Sample noise affects the true posterior likelihood of structural features but the posteriors appear to stabilize for large training sets . Even so , one edge has been consistently identified in the reverse direction of the true edge and another true edge represents such a subtle dependency that it is not discernible from this amount of data . Therefore , we use the posterior estimates from large training sets as our ground truth P ∗(f|D ) . In the case of asia , P ∗(f|D ) = ˆPSTL(f|D5000 ) .
We need a set of related networks and so we modify some structures of the given benchmark network to create similar but different networks . We delete each edge with some probability pdel and vary pdel from 0.1 to 0.5 to create sets of networks with more or less features in common for various experiments . If an edge is deleted , the conditional probability table for the child of the deleted edge is updated by marginalizing over the deleted parent . In our experiments , the full generative model is repeated 10 times to produce 10 different sets of K networks each for a given pdel .
B . Benchmark Results
The goal of transfer learning is to accelerate the learning curve at smaller training set sizes by leveraging data among similar tasks . If we look closely at the results for one particular modified asia network , we can see what effect multitask learning has . Figure 2a shows the estimated posteriors from STL at smaller sample sizes . Even at these small sample sizes , the posteriors of the true edges tend to be higher than those of non edges . However , compared to the estimates from large samples , these posteriors exhibit high variance and many are quite far from the large sample posterior value ( in the figure , error bars omitted for readability ) . The question is whether multitask learning can produce a steeper learning curve .
TABLE I : Performance increase for asia in terms of AUC given by MTL vs STL and MTL vs POOL
Training samples
5 10 20 30 40 50 100 200 400 500
MTL vs STL % incr pair t 3.06 9.02 MTL 4.90 MTL 4.98 MTL 7.60 MTL 3.00 MTL 1.97 MTL 0.53 0.14 0.03
MTL vs POOL % incr pair t 10.72 MTL 4.10 0.34 0.85 3.66 3.08 MTL 2.96 MTL 2.82 MTL 4.14 MTL 3.72 MTL
Figure 2b shows the learning curve achieved by MTL on the same network , using data leveraged from one other task , where some but not all edges are in common between the two tasks . This learning curve shows a wider gap between the estimated values of true edges and non edges . In that sense , the learning curve is better than STL because it is better at separating the true edges from the non edges at smaller training set sizes . In particular , this gain is achieved through the lower estimates of non edges . In other words , non edges are more quickly identified as such through transfer learning than without . On the other hand , the raw estimates of true edges tend to have such high variance ( both with STL and with MTL ) that it is not possible to say that one algorithm is doing better than the other in terms of converging on the actual P ∗(f|D ) .
Figure 2c shows the learning curve obtained by POOL on the same modified asia network . POOL combined the data from two modified networks with some edges in common . The algorithm effectively has twice as much data to work with as STL , therefore the learning curves are steeper . Yet there are quite a few non edges with high posterior values .
To quantify these results , we measure how well the estimates for true edges separate from the estimates for nonedges . There is potentially a directed edge between each ordered pair of nodes . We call this set of potential edges E . We quantify the ground truth using the P ∗(f|D ) values
1002003004005000020406081Training set sizep(f|D)1002003004005000020406081Training set sizep(f|D)01002003004005000020406081 true shared edgetrue edgereverse edgenon−edge1002003004005000020406081Training set sizep(f|D ) TABLE II : Performance increase on alarm for AUC given by MTL versus STL and MTL versus POOL
Training samples
25 50 75 100 200 300 400 500
MTL vs STL % incr pair t 0.12 0.29 MTL 0.43 MTL 0.67 MTL 0.05 0.07 0.03 0.46
STL
MTL vs POOL % incr pair t 0.04 1.76 MTL 3.63 MTL 4.49 MTL 5.19 MTL 8.68 MTL 8.85 MTL 10.45 MTL
( a ) 50 samples per task
( b ) 100 samples per task
Fig 5 : Example ROC curves for alarm data . Each point represents the ( FP rate , TP rate ) aggregated over 2 tasks and 10 trials of the generative model , for a particular value of τ . samples , larger sub sample interval , and longer burn in ) and found that they give nearly the same results . We also use the transfer approximation described in Section IV B , with h = 1000 . For the ground truth alarm network , we use 10,000 training samples to estimate the true posterior of each feature , P ∗(f|D ) = ˆPSTL(f|D10,000 ) .
The alarm network contains 37 variables , therefore there are 1,332 ordered pairs of nodes or potential edges in the set E . Of these , only 46 are true edges . We see again that on this data set , MTL estimates lower posteriors for the nonedges than STL or POOL ( see Figure 4 ) . The ROC curves in Figure 5 show that POOL routinely identifies many false positives . The curves for MTL and STL are closer , but again MTL is better at reducing the number of false positives . This makes differentiating the true edges from the false edges easier at small training set sizes , see Table II for AUC results . MTL dominates STL for small training sets . MTL dominates POOL at all training set sizes .
VI . APPLICATION TO NEUROIMAGING
Our goal is to find functional brain networks associated with schizophrenia . We start with functional magnetic resonance image ( fMRI ) data that measure the activity levels in regions of interest ( ROI ) in the brain . The activity level for each ROI is de trended using a sliding window mean and then discretized into four levels representing Very Low , Low , High and Very High activity levels ( relative to the mean activity level of that ROI ) . The functional brain network is modeled as a Bayesian network of information sharing using a multinomial of discretized activity level among ROIs . Data has been collected from 86 healthy control subjects ( controls ) and
( a ) 10 samples per task
( b ) 50 samples per task
Fig 3 : ROC curves for asia . Each point is the ( FP rate , TP rate ) aggregated over 2 tasks and 10 trials of the generative model , for a particular value of τ . Arrow indicates where STL and POOL curves cross . obtained from large samples and identify the set of “ true ” edges E∗ = {f ∈ E | P ∗(f|D ) > 05}
To differentiate learned edges from learned non edges , we assign a threshold τ and call any feature an edge if its posterior is greater than the threshold , ˆE = {f ∈ E| ˆP ( f|D ) > τ} . By varying τ , 0 ≤ τ ≤ 1 , we can investigate the tradeoff between the rates of true positives ( TP ) and false positives ( FP ) in ˆE by constructing an ROC curve ( Figure 3 ) . The TP rate is | ˆE ∩ E∗|/| ˆE| . The FP rate is | ˆE \ E∗|/(|E| − | ˆE| ) .
Figure 3 shows that various algorithms have different strengths along the ROC curve . The ROC shows that the patterns indicated in Figure 2 are borne out more generally ; that is , STL is slowest to positively identify true edges , while POOL has difficulty eliminating false positives . MTL achieves the greatest overall separation of true edges and non edges . Initially , at the left end of the ROC curve , with low false positive rates both MTL and STL perform best , finding more true positives than POOL . However , the performance of STL falls off as the false positive rate increases : STL is missing some true positives that both MTL and POOL are able to identify . MTL gives us the best of both worlds , giving the best overall performance .
Area under the curve ( AUC ) summarizes the overall performance along the ROC curve . We report AUC for various amounts of training data in Table I across 30 trials of the generative model . With these small training sets , the difficulty of the problem presented by each trial can vary quite a bit , therefore , the performance of each algorithm is compared directly on each trial by looking at how much greater the AUC is for MTL than the other algorithm . This increase in AUC score per trial is then averaged over all trials to give the numbers in Table I . Furthermore , a paired T test is performed to determine whether this increase in performance is significant at the 5 % confidence level . The winner of the paired T test is given in Table I .
Similar experiments are performed on the larger alarm network . This network is too large for exact posterior computation , therefore we use MCMC approximation . We set MCMC hyper parameters as recommended by [ 10 ] , specifically , bucket size = 10 , burn in samples = 1000 , sub sample interval = 10 and total samples = 100 . We tried other values ( notably more
00204060810020406081FP rateTP rate MTLSTLPOOL00204060810020406081FP rateTP rate MTLSTLPOOL00204060810020406081FP rateTP rate MTLSTLPOOL00204060810020406081FP rateTP rate MTLSTLPOOL ( a ) STL
( b ) MTL
( c ) POOL
Fig 4 : Example posterior probability estimate for each edge in a modified alarm network from various small sample sets ( means calculated from 20 sample sets ) . Blue curves are true edges shared by both tasks , cyan curves are true edges unique to this task , green are reverse of a true edge , red are non edges . Up is good for blue and cyan curves . Down is good for red and green curves .
74 schizophrenia patients ( patients ) . For each subject , there are 384 full brain scans which are the samples in our training data . Brain images are parcellated using the Talaraich atlas giving 150 ROIs . Therefore , for each subject , we have a 150 × 384 data matrix . We concatenate the data from several subjects to create the training data for each task . We apply both our MTL algorithm and the standard STL Bayesian structure discovery algorithm . As our goal is to identify different structures between tasks , we do not use the POOL method that learns identical structures for both tasks .
The number of subjects in this study is much larger than in many other studies that we are interested in . We would like to learn reliable networks from small studies , and so we subsample the subjects in this study to see how consistent our results are across subsets of subjects . For evaluation purposes , we use the full set of data ( 86 controls and 74 patients ) to learn a large sample model and use this learned model as the ground truth to measure the small sample results against . The results show how well learned models over various subsets of subjects are representative of the larger control and patient populations .
We limit the size of the parent sets to r = 2 . With this setting , the time to calculate family scores is approximately 3 hours . For MTL family score calculation , we use the approximation method described in Section IV B with h =10,000 . MCMC approximation is used to estimate the posterior likelihood of edges [ 10 ] , with hyper parameters bucket size = 10 , burn in samples = 5000 , sub sample interval = 10 and total samples = 1000 .
A . Small Samples
MTL estimates significantly lower posterior likelihoods on non edges compared to STL . Evaluating results on real data is complicated by the fact that we do not have ground truth of known networks . Thereroe , we looked at the trend of estimates on smaller subset of the subjects and compare the results against the STL estimate from the full set of data . Figure 6a shows that for edges that are not determined to have real dependencies in the full data set ( ie non edges ) , the posterior estimate is significantly lower for MTL than STL . Significance
( a ) Non edges
( b ) True edges
Fig 6 : Estimated posterior of features from small subsets of subjects . Points are perturbed horizontally for visibility . was determined via a paired t test at the 95 % confidence level over various subsets of subjects selected . Figure 6b shows that there is no difference between MTL and STL in terms of the posterior estimate of true edges ( according to paired t test at 95 % confidence ) . Therefore , MTL is able to eliminate the nonedges with less data than STL , corroborating results from the benchmark ( asia and alarm ) networks .
B . Learned Dependencies
In practice , rather than giving a complete network as a solution to the neuroscientists , the solution is presented as a list of likely dependencies or visualized using network layout software with edge thicknesses proportional to the probability of the dependency . The functional brain networks learned in this paper are large enough the static images are difficult to read . In this paper , we are more concerned with the robustness of learned models rather than the brain networks themselves ; therefore , we display the edge likelihoods as an adjacency matrix . Figure 7 shows the mean of the posterior likelihoods across the 10 bootstrap samples of sets of subjects . High probability edges are black squares in the heatmaps . In this experiment , we see that overall the edge likelihoods learned are sparse and they are fairly consistent across subsets of subjects . The likelihoods become “ sharper ” ( closer to 0 or 1 ) as the amount of data increases , as expected . However , even for small
51015202555665775x 10−3# subjects per taskmean p(f|D)510152025050550606507075mean p(f|D)# subjects per task MTLSTL ( a ) Patient , 5 subjects
( b ) Patient , 20 subjects
( c ) Patient , 74 subjects
( d ) Control , 5 subjects
( e ) Control , 20 subjects
( f ) Control , 86 subjects
Fig 7 : Posterior probability estimates for each edge learned from neuroimage data . Means calculated from 10 sample sets . numbers of subjects , we find clear patterns emerging . We also see that many dependencies are common to both the control and patient groups of subjects , while a few distinct differences are also visible . Through this type of visualization , a domain expert can gain insight into the possible interactions among variables in the system . The weight of the likelihood of each edge is important information to the domain scientist , which is not available from maximum a posterior multitask learning algorithms .
VII . DISCUSSION
Our structure bias in the order modular framework for Bayesian network structure discovery can be applied to many other problems currently being researched . In this paper , we demonstrate the application of structural bias to the problem of multitask learning . We find promising results from our approach and expect that further improvements can be made by tailoring the bias term to the application . Additionally , more sophisticated methods for approximating the transfer bias on large networks could be explored .
Implementation of a structural bias in Bayesian structure discovery is critical for solving other problems as well . [ 8 ] propose incorporating prior knowledge about biological networks in the form of a structural feature bias . Rather than using the exact calculation of posteriors that are possible when conditioning on orders , they attempt to find a different MCMC method for approximation . Their motivation was that it is inconvenient to define priors in the space of orders rather than structure . Our Theorem 1 shows that it is indeed possible to define structural priors at the structure level to use the efficient algorithms that rely on conditioning on orders .
This structural bias term could also be used to transfer knowledge about the direction of Bayesian network edges from interventional experiments [ 19 ] . Active learning of Bayesian network structure has been shown to significantly speed the learning of edges , particularly for getting directionality [ 20 ] . Multitask active learning algorithms would be useful for transferring knowledge from an experiment where interventions are possible to a similar domain where such interventions may be more expensive or impossible . Recent work proposes principled methods for the transfer of causal relationships between domains [ 21 ] . Our paper provides a critical algorithmic mechanism to implement such transfer of knowledge .
VIII . CONCLUSIONS
We have presented a multitask Bayesian network structure algorithm . This algorithm is able to successfully leverage data from related tasks to improve the estimate of network structure features given limited amounts of data . The primary contribution is determining that structural priors that are order modular can be used to impose inductive bias among tasks . By using local structural priors , we achieve three goals simultaneously : 1 ) an intuitive inductive bias at the level of structures rather than orders ; 2 ) take advantage of the most efficient structure discovery algorithms ; and 3 ) closed form Bayesian model averaging over the transfer strength parameter . Empirical evidence suggests that multitask learning of Bayesian networks reduces the number of spurious dependencies learned , particularly at small sample set sizes .
[ 21 ]
J . Pearl and E . Bareinboim , “ Transportability of causal and statistical relations : A formal approach , ” in Proceedings of the Twenty Fifth National Conference on Artificial Intelligence . AAAI Press , 2011 , pp . 247—254 .
Acknowledgments : Thanks to Vincent Clark and the Mind Research Network for providing data and interesting data mining problems . Also , thanks to Eric Eaton and Paul Ruvolo for helpful discussions . Work funded by a grant from ONR N000141110139 .
REFERENCES
[ 1 ] S . Thrun , “ Is learning the n th thing any easier than learning the first ? ” Advances in Neural Information Processing Systems , pp . 640– 646 , 1996 .
[ 2 ] R . Caruana , “ Multitask learning , ” Machine Learning , vol . 28 , no . 1 , pp .
41–75 , Jul . 1997 .
[ 3 ] A . Niculescu Mizil and R . Caruana , “ Inductive transfer for Bayesian network structure learning , ” in Eleventh International Conference on Artificial Intelligence and Statistics ( AISTATS 07 ) , 2007 . J . Zhang and C . Zhang , “ Multitask Bregman clustering , ” in TwentyFourth AAAI Conference on Artificial Intelligence , 2010 .
[ 4 ]
[ 5 ] N . Friedman and D . Koller , “ Being Bayesian about network structure : A Bayesian approach to structure discovery in Bayesian networks , ” Machine Learning , vol . 50 , no . 1 , pp . 95–125 , 2003 .
[ 6 ] M . Koivisto and K . Sood , “ Exact Bayesian structure discovery in Bayesian networks , ” J . Mach . Learn . Res . , vol . 5 , pp . 549–573 , 2004 . [ 7 ] D . Madigan , J . York , and D . Allard , “ Bayesian graphical models for discrete data , ” International Statistical Review , pp . 215–232 , 1995 .
[ 8 ] M . Grzegorczyk and D . Husmeier , “ Improving the structure MCMC sampler for Bayesian networks by introducing a new edge reversal move , ” Machine Learning , vol . 71 , no . 2 3 , pp . 265–305 , 2008 .
[ 9 ] P . Parviainen and M . Koivisto , “ Exact structure discovery in Bayesian networks with less space , ” in Proceedings of the Twenty Fifth Conference on Uncertainty in Artificial Intelligence , ser . UAI ’09 , 2009 , pp . 436–443 .
[ 10 ] T . Niinimaki , P . Parviainen , and M . Koivisto , “ Partial order MCMC for structure discovery in Bayesian networks , ” in Proceedings of the Twenty Seventh Conference Annual Conference on Uncertainty in Artificial Intelligence ( UAI 11 ) , 2011 , pp . 557–564 .
[ 11 ] D . Oyen and T . Lane , “ Leveraging domain knowledge in multitask Bayesian network structure learning , ” in Proceedings of the TwentySixth Conference on Artificial Intelligence , 2012 .
[ 12 ] A . Werhli and D . Husmeier , “ Reconstructing gene regulatory networks with Bayesian networks by combining expression data with multiple sources of prior knowledge , ” Statistical applications in genetics and molecular biology , vol . 6 , no . 1 , p . 15 , 2007 .
[ 13 ] D . Heckerman , D . Geiger , and D . M . Chickering , “ Learning Bayesian networks : The combination of knowledge and statistical data , ” Machine Learning , vol . 20 , no . 3 , pp . 197–243 , 1995 .
[ 14 ] W . Buntine , “ Theory refinement on Bayesian networks , ” in Proceedings of the Seventh Conference on Uncertainty in Artificial Intelligence , 1991 , pp . 52–60 .
[ 15 ] G . F . Cooper and E . Herskovits , “ A Bayesian method for the induction of probabilistic networks from data , ” Machine Learning , vol . 9 , pp . 309–347 , 1992 .
[ 16 ] W . N . Bailey , Generalised Hypergeometric Series . Cambridge , Eng land : University Press , 1935 .
[ 17 ] S . Lauritzen and D . Spiegelhalter , “ Local computations with probabilities on graphical structures and their application to expert systems , ” Journal of the Royal Statistical Society . Series B ( Methodological ) , pp . 157–224 , 1988 . I . A . Beinlich , H . J . Suermondt , R . M . Chavez , and G . F . Cooper , “ The ALARM monitoring system : A case study with two probabilistic inference techniques for belief networks , ” in Second European Conference on Artificial Intelligence in Medicine , vol . 38 , 1989 , pp . 247–256 .
[ 18 ]
[ 19 ] G . Cooper and C . Yoo , “ Causal discovery from a mixture of experimental and observational data , ” in Proc . Fifthteenth Conference on Uncertainty in Artificial Intelligence ( UAI’99 ) , 1999 , pp . 116–125 .
[ 20 ] S . Tong and D . Koller , “ Active learning for structure in Bayesian networks , ” in International Joint Conference on Artificial Intelligence , vol . 17 , 2001 , pp . 863–869 .
