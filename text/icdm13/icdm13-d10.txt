Blocking Simple and Complex Contagion By Edge Removal
Chris J . Kuhlman , Gaurav Tuli ,
Samarth Swarup , Madhav V . Marathe
Virginia Bioinformatics Institute
Virginia Tech
{ckuhlman,gtuli,swarup,mmarathe}@vbivtedu
Blacksburg , VA , USA
S . S . Ravi
Department of Computer Science
University at Albany—SUNY
Albany , NY , USA ravi@csalbanyedu
Abstract—Eliminating interactions among individuals is an important means of blocking contagion spread ; eg , closing schools during an epidemic or shutting down electronic communication channels during social unrest . We study contagion blocking in networked populations by identifying edges to remove from a network , thus blocking contagion transmission pathways . We formulate various problems to minimize contagion spread and show that some are efficiently solvable while others are formally hard . We also compare our hardness results to those from node blocking problems and show interesting differences between the two . Our main problem is not only hard , but also has no approximation guarantee , unless P = NP . Therefore , we devise a heuristic for the problem and compare its performance to state of the art heuristics from the literature . We show , through results of 12 ( network , heuristic ) combinations on three real social networks , that our method offers considerable improvement in the ability to block contagions in weighted and unweighted networks . We also conduct a parametric study to understand the limitations of our approach .
Keywords contagion blocking ; simple contagion ; complex contagion
I . INTRODUCTION
A . Background and Motivation
Controlling contagions , such as false rumors , leaked information , or social unrest , by limiting their spread is a well motivated and important problem [ 1 ] , [ 2 ] . The majority of early work ( eg , [ 3 ] ) used node removal techniques to block contagion transmission in network representations of populations . Deleting nodes from a network removes pathways through which a contagion can travel , thus inhibiting its diffusion . More recently ( eg , [ 4] ) , edge removal methods have been studied , and edge based blocking is the focus of this work .
There are many situations in which edge removal is a more pragmatic alternative than node removal . For example , in Twitter , person 𝐴1 may stop following person 𝐴2 , thereby removing that tie of interaction ; it is most often unrealistic to remove 𝐴1 from Twitter . Similarly , political regimes may have the resources to remove or isolate individuals [ 5 ] , but this approach has costs [ 6 ] and may not be politically viable . Recent work [ 7 ] describes how two opposing countries , 𝐶1 and 𝐶2 , intervene to influence leaders of a third country 𝐶3 . This is , in effect , an attempt by each of 𝐶1 and 𝐶2 to sever the opposing country ’s ties to 𝐶3 . From network considerations alone , edge removal is a more surgical approach than node removal : removing one node 𝑣 results in deleting 𝑑(𝑣 ) edges , where 𝑑(𝑣 ) is the degree of 𝑣 .
B . Related Work
Table I provides a perspective on node and edge based classes of methods for stymieing contagion propagation . Each class provides schemes based on graph structure , and on dynamics models . However , to our knowledge , no work exists on edge blocking techniques that use both dynamics models and information on contagion outbreak locations to block diffusion . This work fills that void .
SAMPLE STUDIES ON BLOCKING CONTAGIONS , SHOWING HOW OUR
WORK FILLS A VOID IN EDGE BASED BLOCKING METHODS .
Table I
Basis of Blocking Method Graph Structure Dynamics Models Dynamics and Initial Conditions
Blocking Nodes [ 3 ] [ 9 ] [ 10 ]
Blocking Edges [ 8 ] [ 4 ] Our work . incorporate , for example ,
Most edge blocking studies focus on simple contagions , using models that independent cascade ( IC ) and variants of susceptible infected recovered ( SIR ) dynamics [ 8 ] , [ 9 ] , [ 4 ] . ( A node [ person ] may contract a simple contagion through one interaction with a person who already possesses it ; this is a 1 threshold model . A complex contagion requires interactions with at least two such people . ) An exception is a study [ 11 ] of the linear threshold ( LT ) model ; however , that work contains no evaluation of the blocking method in terms of how its deleted edges reduce contagion spread . Here , we focus on threshold based models , which are well motivated in the social science literature [ 12 ] , [ 13 ] , [ 14 ] . Evidence for the existence of progressive complex contagions—which is the type we model here—continues to mount ; eg , through data mining of people ’s behavior and evaluation of social movements [ 15 ] , [ 16 ] . ( A progressive model [ 17 ] means that once a node contracts a contagion , it remains with the node . ) We study both simple and complex contagions , and show interesting differences between the two . We cite other references in relation to our results , in subsequent sections .
C . Contributions
Below , we summarize our main contributions .
Theoretical results . We provide theoretical results for a set of problems where the goal is to identify a minimum cost subset of edges whose deletion minimizes the contagion spread ( see Section III for formal problem statements ) . We show interesting similarities and differences in the computational complexities of solving these edge based blocking problems , compared to node based problem formulations . We show that for complex contagions , the basic problem of edge based blocking to minimize the contagion spread subject to a budget on the blocking cost cannot be approximated to within any factor 𝜌 ≥ 1 , unless P = NP . ( The NP completeness of this problem for simple contagions was shown in [ 18] . ) A similar non approximability result is known for node based blocking [ 10 ] . We also show that the edge based blocking problem of saving all salvageable nodes ( ie , all nodes which can be prevented from being affected ) is efficiently solvable for both simple and complex contagions ; in contrast , for node based blocking , the simple contagion problem is efficiently solvable but the complex contagion variant is computationally hard [ 10 ] . We also consider an edge based blocking problem where the set of edges to be deleted is specified ( indirectly ) as a set of intervention actions by public health officials . An example of such an action is to close schools ; this deletes all edges representing child child interactions . We show that the problem of saving all salvageable nodes by choosing a subset of actions of minimum cost can be efficiently solved for simple contagions ; however , the same problem for complex contagions cannot be approximated to within an 𝑜(log 𝑛 ) factor , unless P = NP . Heuristics . In view of the non approximability result for the basic edge based blocking problem , we develop a practical edge covering heuristic to block both simple and complex contagions for directed , weighted and unweighted graphs . We also introduce a straight forward heuristic for weighted graphs . To evaluate our main heuristic , we perform computational experiments of contagion propagation on social networks from the literature that are at least five times greater in terms of numbers of nodes and an order of magnitude greater in numbers of edges than those used in previous studies . These networks are a detailed human contact network of Montgomery County , Virginia and two Facebook networks . We compute the numbers of nodes that contract a contagion ( we call this the spread size ) with and without blocking edges . We provide what we believe are the first comparisons of state of the art edge based blocking methods by comparing our results with those of other methods . In total , we evaluate 12 combinations of networks and blocking heuristics , which to our knowledge is the biggest study of its kind . Results show that our edge covering method is more effective in blocking simple and complex contagions , for both unweighted and weighted graphs . Experiments . We provide a small set of experimental results to understand the behavior and limitations of our edge covering heuristic . For example , we demonstrate how increasing the number of seed nodes ( ie , nodes initially possessing a contagion ) can increase the probability of cascade ( ie , widespread diffusion ) in the presence of blocking edges . We also illustrate a somewhat surprising result of network structure effects : it can be much more difficult to block contagions in a network with a far less average degree and a far less average clustering coefficient . Generalizability . Finally , the models we employ in this study are deterministic . However , all theoretical and experimental results are also directly applicable to stochastic progressive threshold models , where a node 𝑖 contracts a contagion with some probability 𝑝𝑖 > 0 once its threshold 𝜃𝑖 is met .
II . MODEL
We model the propagation of complex contagions over a social network using discrete dynamical systems [ 19 ] . We begin with the necessary definitions . Let 𝔹 denote the Boolean domain {0,1} . A Synchronous Dynamical System ( SyDS ) 𝒮 over 𝔹 is specified as a pair 𝒮 = ( 𝐺,ℱ ) , where
1 ) 𝐺(𝑉 , 𝐸 ) , an undirected graph with 𝑛 nodes , represents the underlying social network over which the contagion propagates , and 2 ) ℱ = {𝑓1 , 𝑓2 , . . . , 𝑓𝑛} is a collection of functions , with 𝑓𝑖 denoting the local transition function associated with node 𝑣𝑖 , 1 ≤ 𝑖 ≤ 𝑛 .
Each function 𝑓𝑖 specifies the local interaction between node 𝑣𝑖 and its neighbors in 𝐺 . To provide additional details regarding these functions , we note that each node of 𝐺 has a state value from 𝔹 . To encompass various types of social contagions described in Section I , nodes in state 0 ( 1 ) are said to be unaffected ( affected ) . Thus , in the case of information flow , for example , an affected node has received the information and will pass it on . It is assumed that once a node reaches state 1 , it cannot return to state 0 . We refer to a discrete dynamical system with this property as a ratcheted dynamical system . ( Other names such as “ progressive systems ” [ 17 ] and “ irreversible systems ” [ 20 ] have also been used . )
We can now formally describe the local transition functions . The inputs to function 𝑓𝑖 are the state of 𝑣𝑖 and those of the neighbors of 𝑣𝑖 in 𝐺 ; function 𝑓𝑖 maps each combination of inputs to a value in 𝔹 . For the propagation of contagions in social networks , it is natural to model each function 𝑓𝑖 ( 1 ≤ 𝑖 ≤ 𝑛 ) as a 𝜃𝑖 threshold function [ 18 ] , [ 21 ] , [ 20 ] , [ 22 ] , [ 14 ] , [ 17 ] for an appropriate nonnegative integer 𝜃𝑖 . Such a threshold function ( taking into account the ratcheted nature of the dynamical system ) is defined as follows . ( a ) If the state of 𝑣𝑖 is 1 , then the value of 𝑓𝑖 is 1 , regardless of the values of the other inputs to 𝑓𝑖 . ( b ) If the state of 𝑣𝑖 is 0 , then the value of 𝑓𝑖 is 1 if at least 𝜃𝑖 of the inputs are 1 ; otherwise , the value of 𝑓𝑖 is 0 . A configuration 𝒞 of a SyDS at any time is an 𝑛 vector ( 𝑠1 , 𝑠2 , . . . , 𝑠𝑛 ) , where 𝑠𝑖 ∈ 𝔹 is the value of the state of node 𝑣𝑖 ( 1 ≤ 𝑖 ≤ 𝑛 ) . A single SyDS transition from one configuration to another can be expressed by the following pseudocode . for each node 𝑣𝑖 do in parallel 1 ) Compute the value of 𝑓𝑖 . Let 𝑠′ 2 ) Update the state of 𝑣𝑖 to 𝑠′ 𝑖 . end for value .
𝑖 denote this
, we say that 𝒞′
Thus , in a SyDS , nodes update their state synchronously . Other update disciplines ( eg sequential updates ) for discrete dynamical systems have also been considered in the literature [ 23 ] , [ 19 ] . If a SyDS has a transition from configuration 𝒞 to is the successor of 𝒞 and configuration 𝒞′ . A configuration 𝒞 is called a that 𝒞 is a predecessor of 𝒞′ fixed point if the successor of 𝒞 is 𝒞 itself . Example : Consider the graph shown in Figure 1 . Suppose the local interaction function at each node is the 2 threshold function . Initially , let 𝑎 and 𝑏 be in state 1 and all other nodes be in state 0 . During the first time step , the state of node 𝑑 changes to 1 since two of its neighbors ( namely 𝑎 and 𝑏 ) are in state 1 ; 𝑐 remains in state 0 . In the second time step , the state of node 𝑐 changes to 1 since two of its neighbors ( namely 𝑏 and 𝑑 ) are in state 1 . The resulting configuration ( 1 , 1 , 1 , 1 ) is a fixed point for this system . Note that if the single edge {𝑏 , 𝑑} is removed , then neither 𝑐 nor 𝑑 changes to state 1 .
The SyDS in the above example reached a fixed point . This is not a coincidence . It is easy to show that every ratcheted dynamical system over 𝔹 reaches a fixed point .
III . PROBLEM FORMULATION
In formulating the problems considered in this paper , we use terminology from the context of information propagation in social networks . The problem statements can be readily extended to other contexts . As mentioned earlier , we say that a node is affected if its final state is 1 ; otherwise , the node is unaffected . We provide two formulations of the problem of blocking a contagion through edge removals . a b c
Initial Configuration : Configuration at time 1 : Configuration at time 2 :
( 1 , 1 , 0 , 0 ) ( 1 , 1 , 0 , 1 ) ( 1 , 1 , 1 , 1 ) d
Note : Each configuration has the form ( 𝑠𝑎 , 𝑠𝑏 , 𝑠𝑐 , 𝑠𝑑 ) , giving the states of nodes 𝑎 , 𝑏 , 𝑐 , and 𝑑 , respectively . The threshold for each node is 2 . The configuration at time 2 is a fixed point .
Figure 1 . An example of a synchronous dynamical system .
A . Weighted Edge Blocking Problem
∑
In this formulation , we assume that each edge 𝑒 has a nonnegative cost 𝑐𝑒 . If a set 𝐵 of edges is chosen as the blocking set , then the total cost 𝑐𝐵 of the blocking set is given by 𝑐𝐵 = 𝑒∈𝐵 𝑐𝑒 . This leads to the following problem where we seek to minimize the number of new affected nodes subject to a budget on the blocking cost . Small Weighted Critical Edge Set ( SWCES ) Instance : A social network represented by the SyDS 𝒮 = ( 𝐺(𝑉 , 𝐸),ℱ ) over 𝔹 , with each function 𝑓 ∈ ℱ being a threshold function ; the set 𝐼 of nodes which are initially in state 1 ( ie , the set of seed nodes ) ; an upper bound 𝛽 on the cost of the blocking set . Requirement : A critical set 𝐵 of edges with 𝑐𝐵 ≤ 𝛽 such that among all edge subsets with cost at most 𝛽 , the removal of 𝐵 leads to the smallest number of new affected nodes .
The SWCES problem was first formulated in [ 18 ] for the case of simple contagions , where each node computes a 1threshold function . They showed that the problem is NP hard and presented a bicriteria approximation that violates the budget by a constant factor and approximates the number of new affected nodes by another constant factor . We consider the problem for complex contagions where one or more nodes may have threshold values of 2 or more . We show that , if the budget constraint cannot be violated , the problem cannot be approximated to within any factor 𝜌 ≥ 1 , unless P = NP .
B . Saving All Salvageable Nodes by Edge Blocking
The notion of salvageable nodes was introduced in [ 10 ] in the context of blocking contagions by node removals . As defined in [ 10 ] , a node 𝑣 is salvageable if there is some subset of nodes ( not including any seed nodes ) whose removal ensures that 𝑣 is not affected . With edge based blocking , we may define a node 𝑣 to be salvageable if there is some subset of edges whose removal ensures that 𝑣 is not affected . We will assume throughout this paper that the threshold values for all the nodes are strictly positive . ( Nodes with threshold value zero are not salvageable . ) With that assumption , it is easy to see that , for edge based blocking , every node which is not a seed node is salvageable . Thus , one formulation of the problem of saving all salvageable nodes while minimizing the cost of the blocking set is as follows . Saving All Salvageable Nodes by Edge Based Blocking ( SASN EDGE ) Instance : A social network represented by the SyDS 𝒮 = ( 𝐺(𝑉 , 𝐸),ℱ ) over 𝔹 , with each function 𝑓 ∈ ℱ being a threshold function ; the set 𝐼 of seed nodes . Requirement : Find a critical set 𝐵 of edges such that the removal of 𝐵 ensures that ( i ) no node in 𝑉 − 𝐼 is affected and ( ii ) the cost of 𝐵 is the smallest among all the critical sets that satisfy ( i ) .
For the case of node based blocking , it was shown in [ 10 ] that the problem of saving all salvageable nodes can be efficiently solved for simple contagions but is computationally intractable for complex contagions . In contrast , we show that the SASN EDGE problem is efficiently solvable for both simple and complex contagions .
We also consider another version of the problem of saving all salvageable nodes , motivated by the intervention steps used by public health officials . Examples of intervention steps used to reduce the spread of a disease include closing one or more schools , closing one or more roads , quarantining a community , etc . Each of these actions eliminates interactions between some pairs of individuals , and this can be modeled by the deletion of appropriate edges in the underlying social network . More precisely , given a set 𝐴 = {𝑎1 , 𝑎2 , . . . , 𝑎𝑟} of actions , one may label each edge of a social network by an action from 𝐴 . The idea is that when public health officials use a certain action 𝑎𝑗 , all the edges labeled with 𝑎𝑗 get deleted from the underlying social network . Since each action incurs a cost , one may formulate the problem of saving all salvageable nodes by choosing a minimum cost subset of actions . A precise formulation of the problem is as follows . Saving All Salvageable Nodes by Action Based Blocking ( SASN ACTION ) Instance : A social network represented by the SyDS 𝒮 = ( 𝐺(𝑉 , 𝐸),ℱ ) over 𝔹 , with each function 𝑓 ∈ ℱ being a threshold function ; the set 𝐼 of seed nodes ; a set 𝐴 = {𝑎1 , 𝑎2 , . . . , 𝑎𝑟} of actions ; a cost 𝑝𝑗 for each action 𝑎𝑗 ∈ 𝐴 ; a mapping 𝐸 → 𝐴 that specifies an action for each edge . Requirement : Find a subset 𝐴′ of actions such that ( i ) implementing all the actions in 𝐴′ ensures that no node in 𝑉 −𝐼 is affected and ( ii ) the cost of 𝐴′ is the smallest among all the action subsets that satisfy ( i ) .
We show that SASN ACTION is efficiently solvable for simple contagions . We also show that for complex contagions , it NP hard and that it cannot be approximated to within a factor 𝑜(log ∣𝐴∣ ) even when all actions have the same cost .
IV . THEORETICAL RESULTS
Here , we present theoretical results for the edge blocking problems formulated in Section III . Throughout this section , we use the terms “ blocking set ” and ” critical set ” synonymously .
A . Complexity of Weighted Edge Blocking for
We start with a non approximability result the weighted edge blocking problem SWCES for complex contagions . As mentioned earlier , the problem was shown to be NP hard for simple contagions in [ 18 ] . However , that proof relies on the fact that any blocking set of edges for simple contagions must disconnect the graph . It is not difficult to see that the condition does not hold for complex contagions . Therefore , the proof in [ 18 ] cannot be directly extended to the complex contagion case . Theorem IV1 Assuming that the bound 𝛽 on the cost of the critical set cannot be violated , for any 𝜌 ≥ 1 , there is no polynomial time 𝜌 approximation algorithm for the SWCES problem for complex contagions , unless P = NP . Proof Sketch : Suppose 𝒜 is a 𝜌 approximation algorithm for the SWCES problem for complex contagions for some 𝜌 ≥ 1 . Without loss of generality , we can assume that 𝜌 is a positive integer . We will show that 𝒜 can be used to efficiently solve 3SAT , which is known to be NP hard [ 24 ] . Given an instance 𝐼 of 3SAT , we construct an instance of SWCES as follows . We first describe how the the node and edge sets of the underlying graph 𝐺(𝑉 , 𝐸 ) are constructed .
Description of the node set 𝑉 :
1 ) 𝑉 has two special nodes 𝑎 and 𝑏 , which are the seed 2 ) For each variable 𝑥𝑖 ∈ 𝑋 , nodes ; the initial states of all other nodes are 0 . a ) there are two nodes 𝑝𝑖 and 𝑞𝑖 , corresponding to the literals 𝑥𝑖 and 𝑥𝑖 respectively ; and b ) there is a set 𝑅𝑖 of 𝜌𝑛 nodes .
3 ) For each clause 𝐶𝑗 ∈ 𝐶 , a ) there is a node 𝑤𝑗 in 𝑉 ; and b ) there is a set 𝑇𝑗 of 𝜌𝑛 nodes .
Thus , 𝑉 has a total of 2 + 𝑛(2 + 𝜌𝑛 ) + 𝑚(1 + 𝜌𝑛 ) = 𝜌𝑛2 + 𝜌𝑚𝑛 + 2𝑛 + 𝑚 + 2 nodes .
Description of the edge set 𝐸 :
1 ) For each 𝑖 , 1 ≤ 𝑖 ≤ 𝑛 , the four edges {𝑎 , 𝑝𝑖} , {𝑎 , 𝑞𝑖} , {𝑏 , 𝑝𝑖} and {𝑏 , 𝑞𝑖} are in 𝐸 . The weight of each of these 4𝑛 edges is 1 . 2 ) For each 𝑖 , 1 ≤ 𝑖 ≤ 𝑛 , nodes 𝑝𝑖 and 𝑞𝑖 are joined to all the 𝜌𝑛 nodes in 𝑅𝑖 . The weight of all these edges is 𝑛 + 1 . 3 ) Consider each clause 𝐶𝑗 ( 1 ≤ 𝑗 ≤ 𝑚 ) . Suppose 𝐶𝑗 contains the three literals 𝑙1 , 𝑙2 and 𝑙3 . Then node 𝑤𝑗 ( corresponding to 𝐶𝑗 ) is joined to the nodes corresponding to the three literals of 𝐶𝑗 ; further , 𝑤𝑗 is also joined to all the nodes of 𝑇𝑗 . The weights of all the edges introduced in this step is also 𝑛 + 1 .
The threshold for each of the nodes 𝑤1 , 𝑤2 , . . . , 𝑤𝑚 𝑗=1 𝑇𝑗 is 1 . The is 3 . The threshold for each node in thresholds for all other nodes are 2 . ( Thus , the system models a complex contagion . ) The budget on the cost of the blocking set is chosen as 𝑛 .
∪𝑚
This completes the construction . It is easy to see that the construction can be carried out in polynomial time . Using this construction it is possible to prove that Algorithm 𝒜 produces a blocking set of cost at most 𝑛 leading to at most 𝜌𝑛 new affected nodes if and only if there is a solution to the given instance of 3SAT . The first step is to show that when there is a satisfying assignment for the 3SAT instance , there is a blocking set of cost 𝑛 , which ensures that the number of new affected nodes is 𝑛 . Second , we show that when the 3SAT instance is not satisfiable , then regardless of which blocking set 𝐵 of cost at most 𝑛 is chosen , the number of new affected nodes exceeds 𝜌𝑛 . The detailed proof of both steps is available in the longer version [ 25 ] . Therefore , by running 𝒜 on the resulting instance of SWCES , and checking the number of new affected nodes , we can decide whether or not the given instance of 3SAT is satisfiable . Since 𝒜 runs in polynomial time , the theorem follows .
B . Saving All Salvageable Nodes by Edge Blocking : An Efficient Algorithm
We now consider the SASN EDGE problem , where the goal is to save all salvageable nodes through a critical set of minimum total cost . We show that this problem can be solved efficiently for both simple and complex contagions . As mentioned in Section III , we assume that each node has a strictly positive threshold value .
The idea behind the algorithm is straightforward . Let 𝐺(𝑉 , 𝐸 ) denote the underlying graph and let 𝐼 denote the set of seed nodes . Let 𝑋 denote the set of nodes such that each node 𝑥 ∈ 𝑋 will be affected in the first time step when no blocking edge is chosen . ( Thus , each node 𝑥 ∈ 𝑋 , with threshold 𝜃𝑥 , is adjacent to at least 𝜃𝑥 nodes of 𝐼 . ) Once each node in 𝑋 is saved , all the nodes in 𝑉 − 𝐼 − 𝑋 are automatically saved . The key observation is that for any node 𝑥 ∈ 𝑋 , deleting a set of edges to save 𝑥 has no effect on any of the other nodes in 𝑋 . The details of this algorithm are shown in Figure 2 .
Proposition IV1 The algorithm for the SASN EDGE problem shown in Figure 2 can be implemented to run in 𝑂(∣𝑉 ∣ + ∣𝐸∣ ) time .
The proof of the above proposition is available in the longer version [ 25 ] .
Input : A SyDS 𝒮 given by the underlying graph 𝐺(𝑉 , 𝐸 ) , a threshold value for each node in 𝑉 , a cost for each edge in 𝐸 and the set 𝐼 of seed nodes . Output : A minimum cost subset 𝐵 of edges whose removal ensures that none of the nodes in 𝑉 − 𝐼 is affected . Steps of the Algorithm : 1 ) Initialize 𝐵 to ∅ . 2 ) Find the set 𝑋 ⊆ 𝑉 of nodes such that each node 𝑥 ∈ 𝑋 , with threshold 𝜃𝑥 , is adjacent to at least 𝜃𝑥 nodes in 𝐼 . ( The set 𝑋 consists of all the nodes that will be affected in the first time step if no blocking edges are chosen . ) a ) Find the set 𝑄𝑥 ⊆ 𝐼 of nodes such that 𝑥 is b ) Let 𝜂𝑥 = ∣𝑄𝑥∣−𝜃𝑥 +1 , where 𝜃𝑥 is the threshold
3 ) for each node 𝑥 ∈ 𝑋 do adjacent to each node in 𝑄𝑥 . of 𝑥 . c ) By examining the edges between 𝑥 and the nodes in 𝑄𝑥 , choose the 𝜂𝑥 edges of the lowest cost and add those edges to 𝐵 .
4 ) Output 𝐵 .
Figure 2 . Details of the algorithm for the SASN EDGE problem .
C . Saving All Salvageable Nodes by Action Based Blocking We now consider the SASN ACTION problem , where the goal is to save all salvageable nodes through a minimum cost subset of intervention actions . We show that the problem can be efficiently solved for simple contagions while it is computationally intractable for complex contagions .
For simple contagions , the intuition for the SASNACTION problem is very similar to the idea for the SASNEDGE problem . Therefore we defer discussion and proof of the running time ( stated below ) to the longer version [ 25 ] , and simply present the algorithm in Figure 3 .
Proposition IV2 For simple contagions , the solution to the SASN ACTION problem is unique . Moreover , the solution can be computed in 𝑂(∣𝑉 ∣ + ∣𝐸∣ ) time .
In contrast to the above result , we now show that for complex contagions , the SASN ACTION problem is computationally intractable .
Theorem IV2 The SASN ACTION problem for complex contagions is NP complete . Moreover , unless P = NP , the problem cannot be approximated to within a factor 𝑜(log 𝑛 ) , where 𝑛 is the number of nodes in the underlying graph .
Proof Sketch : It is easy to verify that the SASN ACTION problem for complex contagions is in NP . We prove NPhardness ( and the non approximability result ) through a reduction from the Minimum Set Cover ( MSC ) problem
Input : A SyDS 𝒮 given by the underlying graph 𝐺(𝑉 , 𝐸 ) , a set 𝐴 = {𝑎1 , 𝑎2 , . . . , 𝑎𝑟} of actions , a cost 𝑐𝑖 for each action 𝑎𝑖 ∈ 𝐴 , a mapping that assigns an action for each edge 𝑒 ∈ 𝐸 , and the set 𝐼 of seed nodes . The threshold of each node of 𝐺 is 1 . Output : A minimum cost subset 𝐴′ ⊆ 𝐴 of actions whose implementation ensures that none of the nodes in 𝑉 − 𝐼 is affected . Steps of the Algorithm : to ∅ .
1 ) Initialize 𝐴′ 2 ) Find the set 𝑋 ⊆ 𝑉 of nodes such that each node in 𝑋 is adjacent to at least one node in 𝐼 . ( Thus , each node in 𝑋 will get affected in the first time step , if no blocking edges are chosen . ) Let 𝐸′ denote the set of edges that join a node in 𝐼 to a node in 𝑋 . a ) Add the action label of 𝑒 to 𝐴′
3 ) for each edge 𝑒 ∈ 𝐸′ do
4 ) Output 𝐴′
.
.
Figure 3 . Details of the algorithm for the SASN ACTION problem .
[ 24 ] . An instance of MSC consists of a base set 𝑄 = {𝑞1 , 𝑞2 , . . . , 𝑞𝑛} , a collection 𝐶 = {𝐶1 , 𝐶2 , . . . , 𝐶𝑚} of subsets of 𝑄 and an integer 𝐾 ≤ 𝑚 . The question is whether of 𝐶 such that ∣𝐶′∣ ≤ 𝐾 and there is a subcollection 𝐶′ union of all the sets in 𝐶′ is equal to 𝑄 . It is known that MSC is hard when each element appears in two or more sets [ 24 ] . We will assume this condition in the remainder of the proof . Given an instance of MSC , we produce an instance of SASN ACTION for complex contagions as follows . ( a ) First , the graph 𝐺(𝑉 , 𝐸 ) is constructed . Let 𝑉 = 𝑉1∪𝑉2 , where 𝑉1 is in one to one correspondence with the collection 𝐶 and 𝑉2 with the set 𝑄 . ( Thus , ∣𝑉1∣ = 𝑚 and ∣𝑉2∣ = 𝑛 . ) For the edges , consider each 𝑞𝑖 ∈ 𝑄 . If 𝑞𝑖 appears in sets 𝐶𝑗1 , . . . , 𝐶𝑗𝑟 , then the corresponding node in 𝑉2 is joined to the nodes corresponding to sets 𝐶𝑗1 , . . . , 𝐶𝑗𝑟 in 𝑉1 . ( b ) All the nodes in 𝑉1 are initially in state 1 . All the nodes in 𝑉2 are initially in state 0 . Consider each node 𝑣𝑖 ∈ 𝑉2 . Suppose the element 𝑞𝑖 corresponding to 𝑣𝑖 appears in 𝜃𝑖 sets in 𝐶 . Then , the threshold of 𝑣𝑖 is chosen as 𝜃𝑖 . Since each element 𝑞𝑖 appears in two or more sets , the threshold for each node in 𝑉2 is at least 2 . Thus , the system models a complex contagion . ( We don’t need to specify threshold values for nodes in 𝑉1 since their states are 1 . ) ( c ) The set of actions 𝐴 = {𝑎1 , 𝑎2 , . . . , 𝑎𝑚} , where action 𝑎𝑗 corresponds to set 𝐶𝑗 , 1 ≤ 𝑗 ≤ 𝑚 . All the edges in 𝐸 incident on a node in 𝑉2 corresponding to set 𝐶𝑗 are labeled with the action 𝑎𝑗 . The cost of each action is chosen as 1 . The budget on the cost of all actions is set to 𝐾 , the bound specified in the MSC instance .
This completes the construction . It can be seen that the construction can be carried out in polynomial time . We can now show that there is a solution to the SASN ACTION instance with cost 𝐾 if and only if there is a solution to the MSC instance with at most 𝐾 sets . Details of the proof are in the longer version [ 25 ] .
It is well known that unless P = NP , no polynomial approximation algorithm can provide a performance guarantee of 𝑜(log 𝑛 ) for MSC , where 𝑛 is the size of the base set . Since the above reduction preserves approximations ( ie , there is a solution of cost 𝑟 for SASN ACTION if and only if there is a solution of cost 𝑟 for MSC ) , it follows that the same non approximability result holds for the SASNACTION problem .
V . HEURISTICS
In the experimental investigations of contagion blocking , the goal is to ( approximately ) solve the SWCES Problem of Section III A . As described above , this problem is formally hard , and no approximation algorithm possesses a nontrivial performance guarantee unless P = NP . Therefore , we formulate a heuristic—the edge covering heuristic ( ECH)— to solve the problem , and its implementation is used in Section VI .
The heuristic consists of two parts . In the first part , the dynamics are simulated on the network , up to and including time 𝑇 , according to the model of Section II . The times at which nodes become affected are recorded . Let 𝑆𝑖 be the set of all nodes that are affected at time 𝑖 , with 𝑆0 = 𝐼 . These data , along with edge costs and blocking budget 𝛽 , are used to compute the blocking set 𝐵 , subject to the cost constraint 𝑐𝐵 ≤ 𝛽 , as described next .
The algorithm marches through the simulation time steps , and at each time 𝑖 performs the following computations in seeking a solution . First , it determines whether the total cost of all edges used to transport contagion to affected nodes 𝑣𝑗 ∈ 𝑆𝑖 is less than 𝛽 . If so , then these edges constitute 𝐵 . Otherwise , the necessary number of least cost edges required to save each affected node is computed . This total cost is a node property , and nodes are arranged in increasing order of these costs . These nodes are saved , in order , by removing the identified minimum cost edges . At each time , either all nodes in 𝑆𝑖 are saved , or they are not . The former eventuality is a solution . If the latter holds , the algorithm moves to the next time 𝑖 + 1 and repeats the computations . If no solution is found over all 𝑖 , the solution at the time with the least number of remaining affected nodes is chosen for 𝐵 . The algorithm is presented in Figure 4 .
VI . EXPERIMENTAL RESULTS
A . Networks
Giant components of the networks of this study are summarized in Table II . These were chosen for their ranges in traits ; eg , there is a 6× variation in average degree and an order of magnitude difference in numbers of edges . They
Input : A SyDS 𝒮 including the underlying graph 𝐺(𝑉 , 𝐸 ) and a threshold 𝜃𝑗 for each node 𝑣𝑗 ∈ 𝑉 ; a set 𝐼 ⊂ 𝑉 of seed nodes ; a cost 𝑤𝑒 for each edge 𝑒 ∈ 𝐸 ; and a cost budget 𝛽 for blocking edges . Output : A set 𝐵 ⊆ 𝐸 of edges such that the total cost 𝑐𝐵 of 𝐵 is 𝑐𝐵 ≤ 𝛽 , and whose removal from 𝐸 leads to a small number of affected nodes . Steps of the Algorithm :
1 ) Simulate 𝒮 for 𝑇 time steps and store the computed sets 𝑆𝑖 of newly affected nodes at time 𝑖 ; 1 ≤ 𝑖 ≤ 𝑇 . 2 ) For 𝑖 = 1 to 𝑇 − 1 do a ) For each 𝑣𝑗 ∈ 𝑆𝑖 , compute 𝑅𝑗𝑖 , the set of all edges used to transmit contagion to 𝑣𝑗 . Let 𝛼𝑗 be the total cost of all edges in 𝑅𝑗𝑖 . 𝛼𝑗 ≤ 𝛽 , then set 𝐵 =
∑
∪
∑𝜂𝑗
𝑣𝑗∈𝑆𝑖
𝑣𝑗∈𝑆𝑖
𝑅𝑗𝑖 b ) If and return the solution 𝐵 . c ) For each 𝑣𝑗 ∈ 𝑆𝑖 do the following . Compute 𝜂𝑗 = max{∣𝑅𝑗𝑖∣−𝜃𝑗 +1 , 0} , the number of edges incident on 𝑣𝑗 to block . Order the edges 𝑒 ∈ 𝑅𝑗𝑖 in increasing cost 𝑤𝑒 order . Compute the cost 𝑐𝑗 = 𝑘=1 𝑤𝑘 of the 𝜂𝑗 least cost edges . Let 𝐶𝑗 be the ordered set of the 𝜂𝑗 low cost edges . d ) Order the 𝐶𝑗 ⊂ 𝐸 , for all 𝑣𝑗 ∈ 𝑆𝑖 , in increasing cost 𝑐𝑗 order . Break ties by giving priority to greater degree nodes . e ) Set 𝐵 = ∅ ; set 𝑐𝐵 = 0 ; set the solution flag 𝑠 = 1 ; set 𝑙𝑠 = 0 ( the number of saved nodes ) . f ) For each 𝐶𝑗 in increasing cost order do the following . If 𝑐𝑗 + 𝑐𝐵 ≤ 𝛽 , set 𝑐𝐵 = 𝑐𝐵 + 𝑐𝑗 ; set 𝐶𝑗 ; and increment 𝑙𝑠 . Else continue to 𝐵 = 𝐵 add the next least cost edge 𝑒 ∈ 𝐶𝑗 to 𝐵 and add 𝑤𝑒 to 𝑐𝐵 until 𝑐𝐵 > 𝛽 ; reset the solution flag 𝑠 = 0 ; break out of the for loop of ( 2f ) . ℎ𝑖 = ∣𝑆𝑖∣ − 𝑙𝑠 ; set 𝐻𝑖 = 𝐵 . g ) If 𝑠 == 1 then return 𝐵 . Else set the remainder
∪
3 ) Determine the earliest time 𝑖 at which ℎ𝑖 is minimum ; set 𝐵 = 𝐻𝑖 ; and return 𝐵 . at particular times and locations . Edge weights are durations of pairwise interactions , in seconds .
FB 1 and FB 2 are two networks constructed using the Facebook data made available by [ 28 ] . FB 1 is a friendship network of a subset of Facebook users , ie , there is an edge between two users if they are friends . This network is unweighted and undirected . FB 2 is an interaction network that shows which user pair from FB 1 interacts via wall posts ( during the period Sep . 26 , 2006 to Jan 22 , 2009 ) . It is also an undirected network but has the count of wall posts between user pairs as edge weights .
Table II
NETWORK CHARACTERISTICS .
Network
𝑛
𝑚
𝑑𝑎𝑣𝑒
𝐶𝑎𝑣𝑒
MONT VA 77,528 63,392 43,953
FB 1 FB 2
1,967,714 816,886 182,384
50.8 25.8 8.30
0.395 0.222 0.111 k core for seeds 20 20 10
● ●
●
●
●●
● ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●● ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●● ● ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●
●
●
●
FB−1 FB−2 MONT−VA
●●●●●●●●●●● ●●●●●●●●●●●●●●●●●●●●●● ●●●● ●●●●●●●●●●●●● ●●●●●● ● ●●●● ●● ●● ●●● ●● ●●●●● ●● ●●● ●● ●● ●●●●●●●●●●●●●●●●● ●●●● ● ●●●●●●●●● ● ●● ● ● ● ● ●● ● ● ●● ● ● ● ●●●● ●●●●●●● ●●● ●●● ● ● ●● ●●● ●● ●●● ●●●● ● ● ●●● ● ● ●● ● ●●●● ●●●● ●●● ● ● ●● ●●● ● ● ●●● ● ● ● ●●● ●● ● ● ●● ● ●●● ●● ●●●● ● ● ● ● ●● ●●● ● ●● ● ● ● ● ●● ● ● ● ● ●● ● ●● ● ● ● ● ●● ● ● ● ● ● ● ●● ● ● ● ● ● ●●●●● ● ● ●● ● ● ● ● ● ● ●● ● ● ●●● ● ● ●● ● ●●●● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ●● ●● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ● ●●● ● ● ● ● ● ● ● ● ● ● ● ●● ●● ● ● ●● ● ●● ●● ● ● ● ●● ● ● ● ● ●●● ●● ●● ●●● ●● ●●● ●● ● ● ● ● ● ● ● ●●● ●● ● ● ● ●● ●● ●●● ● ●● ● ● ● ● ● ● ● ● ● ● ● ● ● ●● ● ● ● ● ●● ● ●● ●● ● ● ●● ● ●● ● ● ● ●●●● ●●●●●●●●●● ●● ● ● ● ● ● ● ● ●● ● ● ● ● ●●● ● ●● ●●●● ●● ● ●●● ● ●●● ● ●● ● ●● ●●●●●● ●●● ●●● ●● ●●●●●●●●●●● ● ●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●●● s e d o N f o r e b m u N
105 104 103 102 101 100
100
101
102
103
104
Node Degree
Figure 5 . Degree distributions of the three networks .
B . Experimental Procedures
Table III contains the parameters of our test procedures . We focus on small numbers 𝑛𝑠 of seed nodes , small thresholds 𝜃 , and small values 𝛽 of blocking edges because , as will be demonstrated , unit changes in values can cause significant changes in results . Numbers of blocking edges vary with networks , and hence we give a range .
Figure 4 . Details of the edge covering heuristic ( ECH ) for the SWCES problem .
Table III
EXPERIMENTAL PARAMETERS . are also bigger by at least 5× in numbers 𝑛 of nodes , and more so in the numbers 𝑚 of edges , compared to networks evaluated in other edge blocking studies [ 26 ] , [ 11 ] , [ 8 ] , [ 4 ] . All networks are taken as undirected to foster greater diffusion and hence to more stringently evaluate the blocking methods . Degree distributions are given in Figure 5 .
Network MONT VA is a social contact network for Montgomery County , Virginia , which is constructed from detailed data ( including Census data , activity surveys , and geo spatial data ) and models [ 27 ] . Individual agent movements are computed , from which are generated pairwise interactions
Networks MONT VA , FB 1 , FB 2
𝑛𝑠 2 , 3 , 5 , 10 , 20
𝜃 1 , 2 , 3 , 5
𝛽 {0 , . . . , 1500}
Following [ 10 ] , we take seed nodes from a high 𝑘 core subgraph of each network ( which is the subgraph in which all nodes have degree at least 𝑘 ) such that each seed set induces a connected subgraph on the original network . An anchor seed node is first selected at random , and the seed set is randomly grown by adding nodes adjacent to current seeds . Where possible , we select seeds from the 20 core to foster greater diffusion and thereby tax the heuristics . However , FB 2 did not have a sufficiently sized 20 core so we used the largest core possible ( eg , of about 3000 nodes ) so that seed sets would have minimal or no overlap . For each value of 𝑛𝑠 , we produced 100 different seed sets . We specify uniform ( ie , the same ) thresholds for all nodes in a simulation to make it easier to reason about results ; heterogeneous thresholds can be readily accommodated .
For a given ( 𝑛𝑠 , 𝜃 ) pair , 100 diffusion instances were simulated ; one for each seed set . All diffusion is taken to be deterministic . However , stochasticity enters through the selection of seed node sets , as described above . Simulation results for 𝛽 = 0 are fed into our ECH blocking algorithm to compute blocking edges . We developed an MPI worker pool based implementation such that 100 sets of blocking edges are typically computed in about one minute ( many take about 20 seconds ) using 11 worker processes on Dell 6100 12 core compute nodes with a Qlogic QDR Infiniband interconnect . Simulations are then repeated , but now with the inclusion of blocking edges . We compare final spread sizes with and without blocking edges to determine their effectiveness in thwarting contagion diffusion .
Note that for 𝜃 > 1 , with no blocking edges , it is not a certainty that the contagion will reach all nodes , or that any diffusion will take place at all . Consider 𝑛𝑠 = 𝜃 = 2 . It is possible , and indeed happens , that there is no node in the set 𝑉 − 𝐼 that is adjacent to both seed nodes . In this situation , the contagion will not propagate . Hence , there is a probability of widespread diffusion ( ie , of a cascade ) 𝑝𝑐 that is predicated on the dynamics model , network , and initial conditions . Effective blocking edges will significantly decrease the probability of a cascade compared to 𝛽 = 0 results ; ie , the goal of blocking edges is to make 𝑝𝑐 → 0 . results presented in Sections VI C and VI D apply to the case where a node in state 0 transitions with probability < 1 when a thresholdnumber of neighbors are affected . To see this , simply set the probability of transition to 1.0 , and run this set of procedures . A successful set of blocking nodes will also stop stochastic diffusion .
Finally , we note that our
C . Comparison With Other Heuristics
We first briefly describe the other heuristics that we study along with our own . The epidemic threshold based heuristic ( ETH ) [ 4 ] computes the left and right eigenvectors corresponding to the left and right maximum eigenvalues of the network adjacency matrix . Note that the adjacency matrix may be unweighted ( ie , contain appropriate entries of 1.0 ) , or may be weighted . This yields a left eigenvector 𝑢 and a right eigenvector 𝑤 , and the weight of an edge {𝑖 , 𝑗} is assigned the product 𝑢(𝑖 ) ⋅ 𝑤(𝑗 ) . Edges with the greatest “ eigenproduct ” are selected as blocking edges . The high degree heuristic ( HDH ) [ 8 ] computes the edge weight as the product of the degrees of the two incident nodes . Greatest degree product edges are selected for blocking . Since HDH is not suited for graphs with edge weights , we use instead for these networks a greedy algorithm that selects the blocking set 𝐵 of maximum cardinality such that 𝑐𝐵 ≤ 𝛽 .
Figure 6 provides data for the unweighted MONT VA network . Data for ECH are provided in blue while the those for ETH and HDH are shown in green . The left plot is for 𝑛𝑠 = 2 while the right is for 𝑛𝑠 = 3 , and the dashed ( solid ) curves are for threshold 1 ( 2 ) . The ordinate is computed by noting how many of the 100 diffusion instances result in wide spread diffusion . ( We will demonstrate later that it is clear whether or not widespread diffusion occurs . ) We use small seed sets to represent isolated outbreaks . Clearly , the ECH is more effective at blocking diffusion than ETH and HDH , since it produces lesser 𝑝𝑐 values ( lower curves are better ) . For example , for ( 𝑛𝑠 , 𝜃 ) = ( 2 , 2 ) in the left plot , 𝛽 = 200 with the ECH will completely block all diffusion ( ie , 𝑝𝑐 = 0 ) , while ETH and HDH generate 𝑝𝑐 = 094 ETH and HDH do not reduce the probability of cascade from that for the 𝛽 = 0 case , and hence their data curves coincide .
Analogous data for the unweighted FB 1 network are provided in Figure 7 and again it is apparent that our ECH is more effective in blocking contagion propagation . Data for the weighted MONT VA network and the weighted FB2 networks are provided in Figures 8 and 9 , respectively . Note that the abscissa label accounts for the total cost of blocking , for weighted networks . Once again , we see the same outcome . In all of these cases , ETH and HDH do not reduce the probability of a cascade from that for 𝛽 = 0 , so that 𝑝𝑐 remains close to 1.0 , while ECH , with a moderate number of blocking edges , halts all diffusion . The results in these plots are representative of those for the space of conditions in Table III . e d a c a s a C f o y t i l i b a b o r P
1.0
0.8
0.6
0.4
0.2
0.0 0 dashed : ( 2,1 ) solid : ( 2,2 )
ECH HDH , ETH
200
400
600
800 e d a c a s a C f o y t i l i b a b o r P
1.0
0.8
0.6
0.4
0.2
0.0 0 dashed : ( 3,1 ) solid : ( 3,2 )
ECH HDH , ETH
200
400
600
800
Number of Blocking Edges
Number of Blocking Edges
( a )
( b )
Figure 6 . Data for the unweighted MONT VA network , showing probability of cascade 𝑝𝑐 versus 𝛽 , for the ( 𝑛𝑠 , 𝜃 ) pairs in the plots : ( a ) 𝑛𝑠 = 2 ; ( b ) 𝑛𝑠 = 3 . The threshold 1 data for ETH and HDH are at 𝑝𝑐 = 10
D . Basic Behavior and Parametric Studies
We now turn to investigating the behavior of the ECH blocking method and network dynamics .
Figure 10 is produced by taking the final spread fraction for each diffusion instance of a group of 100 instances— so the instances vary only in the composition of seed sets e d a c a s a C f o y t i l i b a b o r P
1.0
0.8
0.6
0.4
0.2
0.0 0 dashed : ( 2,1 ) solid : ( 2,2 )
ECH HDH , ETH
500
1000
1500 e d a c a s a C f o y t i l i b a b o r P
1.0
0.8
0.6
0.4
0.2
0.0 0 dashed : ( 3,1 ) solid : ( 3,2 )
ECH HDH , ETH
500
1000
1500
Number of Blocking Edges
Number of Blocking Edges
( a )
( b )
Figure 7 . Data for the unweighted FB 1 network , showing probability of cascade versus 𝛽 , for the ( 𝑛𝑠 , 𝜃 ) pairs in the plots : ( a ) 𝑛𝑠 = 2 ; ( b ) 𝑛𝑠 = 3 . The ETH and HDH produce 𝑝𝑐 = 1.0 for all conditions for 𝑛𝑠 = 3 , and for threshold 1 for 𝑛𝑠 = 2 . e d a c a s a C f o y t i l i b a b o r P
1.0
0.8
0.6
0.4
0.2
0.0 0 dashed : ( 2,1 ) solid : ( 2,2 )
ECH LWH , ETH
5
10
15
20 e d a c a s a C f o y t i l i b a b o r P
1.0
0.8
0.6
0.4
0.2
0.0 0 dashed : ( 2,1 ) solid : ( 2,2 )
ECH LWH , ETH
5
10
15
20
Blocking Budget ( in Millions )
Blocking Budget ( in Millions )
( a )
( b )
Figure 8 . Data for the weighted MONT VA network , showing probability of cascade versus 𝛽 , for the ( 𝑛𝑠 , 𝜃 ) pairs in the plots : ( a ) 𝑛𝑠 = 2 ; ( b ) 𝑛𝑠 = 3 . The ETH and HDH give 𝑝𝑐 = 1.0 for threshold 1 . for a fixed 𝑛𝑠—and arranging these spread fractions in nondecreasing numerical order . Sharp transitions in the curves denote a sudden jump in the final spread size . From these data , probabilities of cascades are computed . For example , the probability of cascade for ( 𝑛𝑠 , 𝜃 ) = ( 3 , 3 ) is 0.38 ( because 62 of the 100 diffusion instances produce no diffusion ) . These are the data used to compute 𝑝𝑐 in the previous section .
In Figure 11 , 𝑝𝑐 is plotted against 𝑛𝑠 for 𝜃 = 3 , 5 and 𝛽 = 100 . We converted FB 2 to an unweighted graph to compare with FB 1 and MONT VA . As expected , for a fixed 𝜃 , 𝑝𝑐 increases as 𝑛𝑠 increases . However , there is e d a c a s a C f o y t i l i b a b o r P
1.0
0.8
0.6
0.4
0.2
0.0 0 dashed : ( 2,1 ) solid : ( 2,2 )
ECH LWH , ETH
5
10
15
20 e d a c a s a C f o y t i l i b a b o r P
1.0
0.8
0.6
0.4
0.2
0.0 0 dashed : ( 3,1 ) solid : ( 3,2 )
ECH LWH , ETH
5
10
15
20
Blocking Budget ( in Thousands )
Blocking Budget ( in Thousands )
( a )
( b )
Figure 9 . Data for the weighted FB 2 network , showing probability of cascade versus 𝛽 , for the ( 𝑛𝑠 , 𝜃 ) pairs in the plots : ( a ) 𝑛𝑠 = 2 ; ( b ) 𝑛𝑠 = 3 . The ETH and HDH give 𝑝𝑐 = 1.0 for threshold 1 . ECH stops all diffusion with a 𝛽 < 1000 . d e t c e f f
A n o i t c a r F l a n F i
1.0
0.8
0.6
0.4
0.2 ns=thresh=2 ns=thresh=3 ns=thresh=5
0.0
0.0 0.2 0.4 0.6 0.8 1.0
Fraction Of Instances
Figure 10 . Simulation results for the unweighted MONT VA network for ( 𝑛𝑠 , 𝜃 ) pairs ( 1,1 ) , ( 2,2 ) , and ( 3,3 ) . For each set of conditions , the final fractions of affected nodes are plotted in increasing numerical order . The abscissa value at which each curve rises sharply gives the probability of a cascade . a network structure effect in these data that is seemingly counterintuitive . From inspection of Table II , the average degree and clustering coefficient are roughly twice as great for MONT VA as for FB 1 . Furthermore , for larger 𝑘 cores , in the range of 𝑘 = 20 to 30 , the sizes of the cores for MONT VA are about 5× those of FB 1 , meaning that MONT VA is more well connected . With this information , it is natural to expect that MONT VA more effectively spreads contagion . Yet , Figure 11 shows the opposite result . The explanation , we contend , is contained in Figure 5 . FB 1 has a group of nodes with greater degrees than those in MONT VA , and these nodes can drive contagion through the network . Thus , there are clearly network structure dynamics interactions that complicate making generalizations across networks . e d a c a s a C f o y t i l i b a b o r P
1.0
0.8
0.6
0.4
0.2
0.0 0
MONT−VA FB−1 FB−2
5
10
15
20
Number of Seed Nodes
Figure 11 . Simulation results for three unweighted networks , for fixed values of threshold 3 ( solid ) and 5 ( dashed ) and 𝛽 = 100 . As seed set size increases , the probability of cascade increases .
VII . CONCLUSIONS AND FUTURE DIRECTIONS
We formulated a number of edge blocking problems and contrasted them with node based ones . We devised a heuristic for one of the problems that has no approximation guarantee unless P = NP . We compared our heuristic to other methods from the literature and demonstrated that it provides significantly improved blocking performance . Future work includes additional complexity results for edge based schemes , and formulations of new heuristics .
ACKNOWLEDGMENT
We thank the reviewers for their comments and direction . This work has been partially supported by NSF
PetaApps Grant OCI 0904844 , NSF Netse Grant CNS1011769 , NSF SDCI Grant OCI 1032677 , DTRA R&D Grant HDTRA1 0901 0017 , DTRA , R&D Grant HDTRA111 1 0016 , DTRA CNIMS Grant HDTRA1 07 C 0113 , and DTRA CNIMS Grant HDTRA1 11 D 0016 0001 .
REFERENCES
[ 1 ] Y Y Liu , J J Slotine , and A L Barabasi , “ Controllability of complex networks , ” Nature , vol . 473 , pp . 167–173 , 2011 .
[ 2 ] T . W . Valente , “ Network Interventions , ” Science , vol .
337 , pp . 49–53 , 2012 .
[ 3 ] R . Albert , H . Jeong , and A . Barabasi , “ Error and Attack Tolerance of Complex Networks , ” Nature , vol . 406 , pp . 378–381 , 2000 .
[ 4 ] H . Tong , B . A . Prakash , T . Eliassi Rad , M . Faloutsos , and C . Faloutsos , “ Gelling , and Melting , Large Graphs by Edge Manipulation , ” in Proc . CIKM , 2012 , pp . 245– 254 .
[ 5 ] L . Thompson , A History of South Africa , 3rd ed . New
Haven , CT : Yale University Press , 2001 .
[ 6 ] D . A . Siegel , “ Non disruptive tactics of suppression are superior in countering terrorism , insurgency , and financial panics , ” PLoS ONE , vol . 6 , pp . e18 545–1– e18 545–6 , 2011 .
[ 7 ] B . W . K . Hung , S . E . Kolitz , and A . Ozdaglar , “ Optimization Based Influencing of Village Social Networks in Counterinsurgency , ” in Proc . SBP , 2011 , pp . 10–17 .
[ 8 ] H F Zhang , K Z Li , X C Fu , and B H Wang , “ An efficient control strategy of epidemic spreading on scale free networks , ” Chinese Physical Review Letters , vol . 26 , pp . 068 901–1–068 901–4 , 2009 .
[ 9 ] B . A . Prakash , D . Chakrabarti , M . Faloutsos , N . Valler , and C . Faloutsos , “ Threshold Conditions for Arbitrary Cascade Models on Arbitrary Graphs , ” in Proc . ICDM , 2011 , pp . 537–546 .
[ 10 ] C . J . Kuhlman , V . S . A . Kumar , M . V . Marathe , S . S . Ravi , and D . J . Rosenkrantz , “ Finding Critical Nodes for Inhibiting Diffusion of Complex Contagions in Social Networks , ” in Proc . PKDD , 2010 , pp . 111–127 . [ 11 ] M . Kimura , K . Saito , and H . Motoda , “ Solving the contamination minimization problem on networks for the linear threshold model , ” in Proc . PRICAI , 2008 .
[ 12 ] M . Granovetter , “ Threshold Models of Collective Behavior , ” Am . J . Sociology , vol . 83 , no . 6 , pp . 1420– 1443 , 1978 .
[ 13 ] D . Watts , “ A Simple Model of Global Cascades on Random Networks , ” PNAS , vol . 99 , pp . 5766–5771 , 2002 .
[ 14 ] D . Centola and M . Macy , “ Complex Contagions and the Weakness of Long Ties , ” Am . J . Sociology , vol . 113 , no . 3 , pp . 702–734 , 2007 .
[ 15 ] S . Gonzalez Bailon , J . Borge Holthoefer , A . Rivero , and Y . Moreno , “ The Dynamics of Protest Recruitment Through an Online Network , ” Nature Scientific Reports , pp . 1–7 , 2011 , dOI : 101038/srep00197
[ 16 ] J . Ugander , L . Backstrom , C . Marlow , and J . Kleinberg , “ Structural Diversity in Social Contagion , ” PNAS , vol . 109 , no . 9 , pp . 5962–5966 , 2012 .
[ 17 ] D . Kempe , J . Kleinberg , and E . Tardos , “ Maximizing the Spread of Influence Through a Social Network , ” in Proc . KDD , 2003 , pp . 137–146 .
[ 18 ] S . Eubank , V . S . A . Kumar , M . V . Marathe , A . Srinivasan , and N . Wang , “ Structure of Social Contact Networks and Their Impact on Epidemics , ” in Discrete Methods in Epidemiology , J . Abello and G . Cormode , Eds . American Mathematical Society , Providence , RI , 2006 , pp . 179–200 .
[ 19 ] C . L . Barrett , H . B . H . III , M . V . Marathe , S . S . Ravi , and et al . , “ Predecessor Existence Problems for Finite Discrete Dynamical Systems , ” Theoretical Comp . Sci . , vol . 386 , no . 1 2 , pp . 3–37 , 2007 .
[ 20 ] P . Dreyer and F . Roberts , “ Irreversible 𝑘 Threshold Processes : Graph Theoretical Threshold Models of the Spread of Disease and Opinion , ” Discrete Applied Mathematics , vol . 157 , pp . 1615–1627 , 2009 .
[ 21 ] D . Chakrabarti , Y . Wang , C . Wang , J . Leskovec , and C . Faloutsos , “ Epidemic Thresholds in Real Networks , ” ACM Trans . Inf . Syst . Secur . , vol . 10 , no . 4 , pp . 13–1 – 13–26 , 2008 .
[ 22 ] D . Centola , V . Eguiluz , and M . Macy , “ Cascade Dynamics of Complex Propagation , ” Physica A , vol . 374 , pp . 449–456 , 2006 .
[ 23 ] C . L . Barrett , H . B . H . III , M . V . Marathe , S . S . Ravi , D . J . Rosenkrantz , and R . E . Stearns , “ Complexity of Reachability Problems for Finite Discrete Dynamical Systems , ” J . Comput . Syst . Sci . , vol . 72 , no . 8 , pp . 1317–1345 , 2006 .
[ 24 ] M . R . Garey and D . S . Johnson , Computers and to the Theory of NPSan Francisco , CA : W . H . Freeman
Intractability : A Guide completeness . and Co . , 1979 .
[ 25 ] C . Kuhlman , M . Marathe , S . Swarup , G . Tuli , and S . Ravi , “ Blocking Simple and Complex Contagion Spread by Edge Removal , ” Tech . Rep . , 2013 , NDSSL Technical Report .
[ 26 ] M . Kimura , K . Saito , and H . Motoda , “ Minimizing the spread of contamination by blocking links in a network , ” in Proc . AAAI , 2008 .
[ 27 ] C . Barrett , R . Beckman , M . Khan , and et . al . , “ Generation and Analysis of Large Synthetic Social Contact Networks , ” in Proc . WSC , December 2009 .
[ 28 ] B . Viswanath , A . Mislove , M . Cha , and K . Gummadi , “ On the evolution of user interaction in Facebook , ” in Proc . WOSN , 2009 , pp . 7–12 .
