A Logical Framework for Modeling and Reasoning about
Semantic Web Services Contract
Hai Liu1,2,3 , Qing Li2,3 , Naijie Gu1,2 and An Liu1,2,3 1Department of Computer Science and Technology ,
University of Science and Technology of China , Hefei , China .
2Joint Research Lab of Excellence , CityU USTC Advanced Research Institute , Suzhou , China .
3Department of Computer Science , City University of Hong Kong , Hong Kong , China . hail@mailustceducn , itqli@cityueduhk , gunj@ustceducn , liuan@ustc.edu
ABSTRACT In this paper , we incorporate concrete domain and action theory into a very expressive Description Logic ( DL ) , called ALCQO . Notably , this extension can significantly augment the expressive power for modeling and reasoning about dynamic aspects of services contracting . Meanwhile , the original nature and advantages of classical DLs are also preserved to the extent possible . Categories and Subject Descriptors : I24 [ Knowledge Representation Formalisms and Methods ] : Representation languages General Terms : Languages , Theory Keywords : Semantic Web Services , DLs , Services Contract
1 .
INTRODUCTION
A key aspect in Web services behavior ( described by services choreography ) is contracting them to ( i ) make all parties compatible , ( ii ) guarantee expected QoS parameters , and ( iii ) ensure every participating service to terminate in a correct state . It is generally accepted that semantic Web services ( SWS ) should be based on a formalism with a well defined model theoretic semantics , particularly , on some sort of logics [ 2 ] . Given that DLs are usually considered as the underpinning of many W3C standard languages , it is quite natural and promising to resort to a variant of DLs to model a semantic Web services contract ( SWSc ) . Our present work extends the classical DLs with concrete domain and action theory , which makes it feasible to integrate planning and process modeling into DLs yet still retain decidable reasoning ability .
2 . THE FRAMEWORK
Intuitively , there exist multiple parties constraints of web services in a SWSc , which bring to existing DLs more challenges . In particular , we consider the following aspect(s ) :
A1 . The actions specified by a services contract are required to be coordinated ( eg , ordered ) and all the constraints need to be represented . Meanwhile , the underlying logic should also retain the decidable reasoning ability for all the represented "knowledge" . The case of possessing sufficient expressive power for establishing QoS requirements is also analogous .
Example 1 . Consider the motivation example as in Figure 1 . Apparently , the completion of a deposit by the user should precede the computer delivery , which is followed by the completion of the en
Copyright is held by the author/owner(s ) . WWW 2008 , April 21–25 , 2008 , Beijing , China . ACM 978 1 60558 085 2/08/04 . tire payment . Moreover , the user must complete the entire payment within 12 hours after the computer delivery .
Figure 1 : Motivating Example
Theoretically , combining original DLs with so called "concrete domain" is a sound approach to satisfy the requirements as depicted in A1 . However , [ 3 ] demonstrates that in the context of general TBoxes , if the concrete domain provides a unary predicate for equality with 0 , a binary equality predicate , and a binary predicate for incrementation , then concept satisfiability and subsumption are undecidable . This result actually rules out the possibility of combining general TBoxes with more powerful concrete domains . In the sequel , we disallow general TBoxes in our framework but adopt acyclic TBoxes instead . The concrete domain in our framework sits on the basis of [ 3 ] and [ 4 ] , and is defined as follows :
D = {q
Definition 1 . ( Arithmetic concrete domain Q∗ ff ∈ Q | q ff D = Q , and ⊥Q∗ with ( ⊥Q∗ )
) Our concrete domain is denoted as Q∗ and is a pair ( fiD , ΦD ) , where fiD refers to the rational numbers Q , and ΦD consists of the following predicates : ( 1 ) . unary predicates Pq for each P ∈ { . , < , = , . , > , fi} and each Pq} , two unary predicate Q∗ q ∈ Q where ( Pq ) with ( Q∗ ) D = ∅ ; ( 2 ) . binary predicates Pb = { . , < , = , . , > , fi} ; ( 3 ) . ternary predicates Pt = {+,∓,∗ , '} with ( + ) D = {(q , q ) ∈ ff , q ffff ) ∈ Q3 | q∗q Q3 | q+q D = {(q , q ff = ff , q ff = q ffff ffff} , and ( ' ) q We denote our underlying logic as ALCQO(Q∗ ) with its syntax and Tarski style semantics shown in Table 1 ( f , g and U denote abstract feature , concrete feature , and feature path , respectively ) . ffff} , ( ∓ ) D = Q3 \ ( ∗ )
D = Q3\(+ )
D , ( ∗ )
D
;
Theorem 1 . ( Decidability ) An ALCQO(Q∗
) concept satisfiabil ity is decidable .
Example 1 revisited . At first , we introduce three types of concrete features : atTime , lBound , and rBound , whose intuitive meanings are the occurring time , the left and right bound of occurring time interval . We denote an abstract feature c_Deli as an abbreviation for computer delivery . Similarly , we denote c_Pay and interval as abbreviations for complete payment and the allowed time interval between c_Deli and c_Pay , respectively . Therefore , from the perspective of computer purchase service ( CP ) , the interactions
1057WWW 2008 / Poster PaperApril 21 25 , 2008 · Beijing , China )
Table 1 : Syntax and Semantics of ALCQO(Q∗ Syntax Semantics {o}I ⊆ fiI , .({o}I ) = 1 {o} ( ¬C)I = fiI \ CI ¬C C ff D ( C ff D)I = CI ∩ DI C fl D ( C fl D)I = CI ∪ DI ∃R.C ∀R.C . nR.C fi nR.C n
( ∃R.C)I = {a | ∃b . < a , b >∈ RI , and b ∈ CI} ( ∀R.C)I = {a | ∀b.(< a , b >∈ RI → b ∈ CI)} ( . nR.C)I = {a | .({b |< a , b >∈ RI} ∩ CI ) . n} ( fi nR.C)I = {a | .({b |< a , b >∈ RI} ∩ CI ) fi n} UI = {< a , x >| ∃b1,··· bn ∈ fiI , x ∈ fiID.(< a , b1 > ,··· < bn−1 , bn >∈ f I , and < bn , x >∈ gI)} ∈ f I {a ∈ fiI | ∃x ∈ fiID.(< a , x >∈ UI , and x ∈ P q )} D {a ∈ fiI | ∃x1 , x2 ∈ fiID.(< a , x1 >∈ UI b )} < a , x2 >∈ UI , and < x1 , x2 >∈ P D {a ∈ fiI | ∃x1 , x2 , x3 ∈ fiID.(< a , x1 >∈ UI , < a , x2 > ∈ UI t )} , and < x1 , x2 , x3 >∈ P , < a , x3 >∈ UI D ( g ↑)I = {a ∈ fiI | ¬∃x ∈ fiID.(< a , x >∈ gI)}
1
1
,
1
2
3
2
U = f1 ··· fng
∃U.Pq ∃U1 , U2.Pb ∃U1 , U2 , U3.Pt g ↑ among these services can be specified as follows : CP_Require fi ( ∃deposit ◦ atT ime , c_Deli ◦ lBound . < ) ff ( ∃c_Pay ◦ atT ime , c_Deli ◦ rBound . fi ) ff ( ∃interval , c_Deli ◦ rBound , c_Pay ◦ atT ime.+ ) ff(∃interval . .12 ) ff ( ∃lBound , rBound . . )
3 . ACTION THEORY
In this section , we start with providing some very practical sce narios to illustrate the significance of actions .
A2 . The so called "state of the world" ( SoW ) is generally assumed to be altered through invoking a service operation , viz . the SoW for a services contract is not permanent . If the underlying logic can entail the current state of a contract , the effect produced by an action should also be entailed by the "updated" SoW .
Example 2 . Consider again the CP service . If the computer delivery is executed successfully , it will cause some effect to the other involved parties , eg , the computer ownership will be changed . Therefore , the preconditions of next action should be satisfied , otherwise the entire services contract may be blocked at certain state . Meanwhile , it also needs to ensure that the contract can actually enter into some expected state eventually .
Our action theory is based on [ 1 ] . Considering the main features of semantic Web services , an action is defined as follows :
Definition 2 . ( Action ) : An action is a quadruple ( input , pre , out put , eff ) , where :
( 1 ) . input and output consist of a finite set of concepts , and each concept should have at least one instance in some particular SWSc state , so that the legality of input and output data can be preserved . ( 2 ) . pre consists of a finite set of ABox assertions , representing preconditions for the action ;
( 3 ) . eff consists of a finite set of conditional effect descriptions in the form of ϕ/χ , where ϕ is a set of ABox assertions and χ is a set of assertions in the form of C(a ) , ¬C(a ) , R(a , b ) , ¬R(a , b ) , g(a,x ) , ¬g(a , x ) , Pq(x ) , Pb(x , y ) , and Pt(x , y , z ) with C being a primitive concept , R a role , and g a concrete feature wrt T . Example 3 . Consider an ABox as {user(peter ) , hasDeposit(peter,A1 ) , amount(A1,amt ) , =1000 ( amt ) , computer(L3YG ) , vendor(CP ) , own(CP,L3YG ) , bank(Deutsche ) , affiliated(A1,Deutsche)} , and action computer delivery can be described as follows ( input and out put are omitted for simplicity ) :
∃amount . fi800)(peter ) , user(peter)} pre = {∃hasDeposit.(∀a f f iliated.{Deutsche} ff eff = {(peter)/(own(peter , L3YG),¬own(CP , L3YG)))} Definition 3 . A Semantic Web Services contract ( SWSc ) is represented as a triple SC =< T ,A,ACT > such that : ( 1 ) . T corresponds to a terminology box ( TBox ) in DLs , which describes the skeleton of the contract . ( 2 ) . A stands for an axiom box ( ABox ) . ( 3 ) . ACT describes all the legal actions to be executed in SC . These actions can "drive" a contract ’s state to be transitioned . Intuitively , T plays the role of orchestrating a set of specified actions , A represents the current state of the entire contract , and ACT provides the descriptions of a set of actions . The interplay among them is thus obvious and natural , since TBoxes coordinate the action set , and ABoxes can be updated through the execution of an action . The formal semantics of our SC is defined as follows : Definition 4 . ( State ) A state of a SC is a set of assertions in the form of C(a ) , ¬C(a ) , R(a , b ) , ¬R(a , b ) , g(a,x ) , ¬g(a , x ) , Pq(x ) , Pb(x , y ) , and Pt(x , y , z ) with C being a ( complex ) concept name . ff > , where s and s ff
Definition 5 . ( Model ) . Let α be an action , a transition Tα is a set of pairs < s , s are states . A model M of a services contract is defined as : M =< S , T > , where S is a set of states , and T is a set of transitions of states in S . In our framework , we consider state transition as ABox updates , ie if a SC enforces an action successfully , it is regarded as updating the ABox from the current state to a new state . Based on the above definitions , we can obtain the following lemma .
Lemma 1 . ( Indeterminism ) The update result of an ABox after there may exist more an action is applied is indeterministic , ie than one possible state to be the consequence of an update .
Lemma 2 . The amount of possible consequent states through applying an action to the current state is finite . With the decidability of ALCQO(Q∗ ) itself and the finite consequent states due to ABoxes updating strategy , we can obtain : Theorem 2 . ( Well defined ) Given a services contract SC , check ing its consistency , executability , and projection is decidable .
4 . CONCLUSION AND FUTURE WORK We restrict the underpinning of our framework to a comparatively simple yet quite expressive Description Logic , viz . , ALCQO . Meanwhile , we have incorporated concrete domain and action theory into ALCQO , so as to equip it with the abilities to describe , coordinate , and trace the dynamic behaviors of involved parties .
In future , we will try to work out the tight complexity bounds of action reasoning , and implement some practical algorithms .
5 . REFERENCES [ 1 ] F . Baader , C . Lutz , M . Milicic , U . Sattler , and F . Wolter .
Integrating description logics and action formalisms : First results . In Proc . AAAI 2005 , pages 572–577 , July 2005 .
[ 2 ] H . Davulcu , M . Kifer , and IVRamakrishnan Ctr s : A logic for specifying contracts in semantic web services . In Proc . WWW 2004 , pages 144–153 . ACM , May 2004 .
[ 3 ] C . Lutz . Description logics with concrete domains a survey .
Advances in Modal Logic , 4:265–296 , 2003 .
[ 4 ] C . Lutz . Combining interval based temporal reasoning with general tboxes . Artificial Intelligence , 152(2):235–274 , 2004 .
1058WWW 2008 / Poster PaperApril 21 25 , 2008 · Beijing , China
