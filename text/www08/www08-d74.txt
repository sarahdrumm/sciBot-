Efficient Vectorial Operators for Processing XML Twig
Queries
Guoliang Li , Jianhua Feng , Jianyong Wang , Feng Lin , and Lizhu Zhou
Department of Computer Science and Technology , Tsinghua University , Beijing 100084 , P . R . China {liguoliang,fengjh,jianyong,dcszlz}@tsinghuaeducn ; lin f@mailstsinghuaeducn
ABSTRACT This paper proposes several vectorial operators for processing XML twig queries , which are easy to be performed and inherently efficient for both Ancestor Descendant ( A D ) and Parent Child ( P C ) relationships . We develop optimizations on the vectorial operators to improve the efficiency of answering twig queries in holistic . We propose an algorithm to answer GTP queries based on our vectorial operators .
Categories and Subject Descriptors H28 [ Database Applications ] : Miscellaneous General Terms Algorithms , Performance , Languages Keywords Holistic Twig Join,Vectorial Operators,Subsequence Match 1 .
INTRODUCTION
Approaches based on structural index , numbering scheme and subsequence matching have been studied for processing XML twig queries , among which the most efficient one is holistic twig join based on numbering scheme . However , holistic twig join is suboptimal for those twig queries in which both Ancestor Descendant ( A D ) and Parent Child ( P C ) relationships are included , because it may involve huge even unbounded intermediate results . In addition , most of existing proposals are not efficient for the GTP queries [ 3 , 4 ] , because to answer GTP queries they have to compute the result sets of all the nodes although a part of them will not contribute to the answer , and hence they have to eliminate those redundancies involved in the result . To address these problems , we present some vectorial operators for the P C and A D relationships to avoid redundant intermediate results and demonstrate how to answer twig queries using these vectorial operators efficiently . To accelerate the processing of twig queries , we propose several techniques to optimize these vectorial operators . Although
T wig2Stack[1 ] is proposed to process GTP queries , it is constrained by the fan out of the XML document and thus leads to inefficiency . We discuss how to efficiently answer GTP queries according to our vectorial operators . To the best of our knowledge , this is the first paper that employs vectorial operators to process twig queries and GTP queries .
2 . TJOPERATOR
We employ a sequence to represent an XML document and answer XML queries based on the sequence . For any node u , we construct list Iu , which keeps the elements wrt u and the positions of their occurrences in the corresponding sequence . To check whether element ea∈Ia and element ed∈Id satisfy the A D or P C relationships , we transform Ia and Id into bit vectors and evaluate the A D or P C relationships on the bit vectors . 2.1 Vectorial Operators We begin by introducing three vectorial operators , λτ ,λπ and λ , to transform any input list Ia into bit vectors , Vτa ,Vπa and V a , respectively as illustrated in Table 1 . We propose three corresponding operators , τ , π , , which are similar to λτ , λπ , λ and operate on any bit vector ( eg , an intermediate bit vector ) as shown in Table 1 .
We propose two vectorial operators ρa[d ] and ρa/d to evaluate the P C relationship as shown in Table 1 . The two operators can evaluate whether the elements in Ia and the elements in Id satisfy a/d . In addition , we introduce three vectorial operators σa , ρa[//d ] and ρa//d , to evaluate the A D relationship , as shown in Table 1 . Equations ( 21 1) (21 10 ) formally describe how to evaluate the P C or A D relationships , where P [ i ] denotes the element at the i th position in the sequence and S denotes the corresponding result set .
Ra[d ] = ρa[d](λτ ( Ia ) , λπ ( Id ) ) Ra/d = ρa/d(λτ ( Ia ) , λπ(Id ) ) Sa[d ] = {P [ i]|Ra[d][i ] = 1} Sa/d = {P [ i]|Ra/d[i ] = 1}
S(a,/d ) = {(P [ i + 1 ] , P [ i])|Ra/d[i ] = 1} Ra//d = ρa//d(λ ( Ia ) , λπ(Id ) ) Ra[//d ] = ρa[//d](λπ ( Ia ) , λπ(Id ) )
Sa//d = {P [ i]|Ra//d[i ] = 1} Sa[//d ] = {P [ i]|Ra[//d][i ] = 1}
( 2.1 1 )
( 2.1 2 )
( 2.1 3 )
( 2.1 4 )
( 2.1 5 )
( 2.1 6 )
( 2.1 7 )
( 2.1 8 )
( 2.1 9 )
Copyright is held by the author/owner(s ) . WWW 2008 , April 21–25 , 2008 , Beijing , China . ACM 978 1 60558 085 2/08/04 .
S(a,//d ) = {(P [ i ] , P [ j])|∀i , j , if Ra[//d][i]=1 , P [ i].leftmost ≤ j < i,Ra//d[j ] = 1} .
( 2.1 10 )
1037WWW 2008 / Poster PaperApril 21 25 , 2008 · Beijing , China Operator λτ ( Ia ) λπ ( Ia ) λ ( Ia ) τ ( Va ) π(Va ) ( Va )
ρa[d](Va,Vd ) ρa/d(Va,Vd ) σa(Va , Vd ) ρa//d(Va,Vd ) ρa[//d](Va,Vd )
Table 1 : XML Vectorial Operators for A D and P C relationships ∗
Operand
Result Definition
Ia Ia Ia Va Va Va Va,Vd Va,Vd Va , Vd Va,Vd Va,Vd
Vτa Vπa V a Vτa Vπa V a Va[d ] Va/d Vσa Va//d Va[//d ]
Vτa [ i]=1 if ∃j , k,1≤j≤|Ia|,1≤k≤|Ia[j].occur| and i=Ia[j].occur[k ] ; otherwise , Vτa [ i]=0 . Vπa [ i]=1 if ∃j , k,1≤j≤|Ia| , k=|Ia[j].occur| and i=Ia[j].occur[k ] ; otherwise , Vπa [ i]=0 . V a [ i]=1 if ∃j , k , t,1≤j≤|Ia|,k=|Ia[j]occur|,t=Ia[j]occur[k ] , P [ t].leftmost≤i≤t ; else V a [ i]=0 . Vτa [ i]=1 if ∃j,1≤j≤|Va| , Va[j]=1 and P [ i]=P [ j ] ; otherwise , Vτa [ i]=0 . Vπa [ i]=1 if ∃j≤i , Va[j]=1 and P [ i]=P [ j ] , but '∃k>i , P [ i]=P [ k ] ; otherwise , Vπa [ i]=0 . V a [ i]=1 if ∃j,1≤j≤|Va| , π(Va)[j]=1 and P [ j].leftmost≤i≤j ; otherwise , V a [ i]=0 . Va[d ] = π( τ ( Va ) ∧ ( π(Vd)>>1 ) ) Va/d = ( τ ( Va)<<1 ) ∧ π(Vd ) Vσa [ i]=1 if π(Va)[i ] =1 , ∃j,P [ i].leftmost≤j<i and Vd[j]=1 ; otherwise , Vσa [ i]=0 . Va//d = ( Va ) ∧ π(Vd ) Va[//d ] = π( σa( π(Va ) , ( Va ) ∧ π(Vd ) ) )
2.2 Vectorial Operators for Twig Queries We introduce how to answer twig queries according to our operators . Given a query Q , let Rn denote the bit vector result of node n wrt the sub query rooted at node n , while let Fn denote the bit vector result of node n wrt Q . We first compute Rn from the leaf to the root and then compute Fn from the root to the leaf . Thus , we can get the result set of any query node according to Equations ( 22 1) (22 5 ) n = τ ( ∧c∈c children(n)τ ( λτ ( In ) ∧ ( Rc>> 1) ) ) Rc ( 2.2 1 ) n = τ ( ∧d∈d children(n)τ ( σn(λπ ( In ) , λ ( In ) ∧ Rd) ) ) ( 2.2 2 ) Rd ⎧⎪⎪⎨ ⎪⎪⎩ ⎧⎨ ⎩ if n is a leaf node if n only has c child if n only has d child otherwise
λπ(In ) π(Rc n ) π(Rd n ) n ∧ Rd n ) Rn if n is the root node if n is c child of its parent p if n is d child of its parent p
( τ ( Fp)<<1 ) ∧ Rn
Rn =
( Fp ) ∧ Rn
Fn =
π(Rc
( 2.2 3 )
Sn = {P [ i]|Fn[i ] = 1}
( 2.2 4 ) ( 2.2 5 )
2.3 Optimizations for Vectorial Operators
We introduce several techniques to optimize our vectorial operators . Let c1,c2,,cl be the c children ( P C ) of node n and d1,d2,,dk be the d children ( A D ) , to optimize the computation of Rd n , we extend σa from a binary operator to a multiple operator σn : Vσn =σn(Vn,Vd1 ,Vd2 ,,Vdk )|=Vσn [ i]=1 , if π(Vn)[i]=1,∀1≤j≤k , ∃bj , P [ i].leftmost≤bj <i and Vdj [ bj]=1 ; otherwise , Vσn [ i]=0 . optimize the construction of Rc n ≡ τ ( τ ( τ ( τ ( λτ ( In)∧(Rc1 >> 1))∧(Rc2 >> 1))∧)∧(Rcl >> 1 ) ) Rc Rd n ≡ τ ( σn(λπ ( In ) , λ ( In ) ∧ Rd1 , , λ ( In ) ∧ Rdk ) ) ( 2.3 2 )
We introduce the following Equations ( 23 1) (23 4 ) to n , Rn and Fn . n , Rd
( 2.3 1 )
π(Rc n ∧ Rd n ) ≡ π(Rc n ) ∧ π(Rd n )
( 2.3 3 )
π(Rd n ) ≡ σn(λπ ( In ) , λ ( In ) ∧ Rd1 , , λ ( In ) ∧ Rdk ) ( 2.3 4 )
To answer twig queries in holistic and process GTP queries effectively , we propose an effective algorithm T JOperator by employing the vectorial operators . T JOperator directly computes the results and does not require a post processing to eliminate the irrelevant elements . T JOperator only maintains several bit vectors and the number of these bit vectors is no more than the number of result nodes , thus T JOperator will not involve large intermediate results . ∗ occur keeps the positions of e ’s occurrences in the sequence and leftmost is the position of the occurrence of e ’s leftmost descendant . i
) s ( e m T d e s p a l E
20 18 16 14 12 10 8 6 4 2 0
TJOperator Twig2Stack iTwigJoin PRIX
Q1
Q2
Q3
Q4
Q5
Q6
Twig and GTP Queries on XMark i
) s ( e m T d e s p a l E
30
20
10
0
TJOperator Twig2Stack iTwigJoin PRIX
Q8
Q7 Q12 Twig and GTP Queries on TreeBank
Q10
Q11
Q9
Figure 1 : Experimental results
3 . EXPERIMENTAL STUDY
We compared T JOperator with state of the art methods , PRIX [ 5 ] , iTwigJoin [ 2 ] and Twig2Stack [ 1 ] . All the algorithms were coded in C++ and all the experiments were conducted on a 2.4 GHz Pentium IV processor with 1GB RAM , running Microsoft Windows XP . We used the realworld dataset DBLP and the dataset TreeBank with deep recursive structures , and employed twelve queries for our experiments . Figure 1 shows the experimental results . We can observe that T JOperator outperforms PRIX , iTwigJoin and Twig2Stack on various queries and datasets significantly . 4 . CONCLUSION
We propose several vectorial operators to evaluate the AD and P C relationships and present how to process twig queries in holistic by employing these operators . We demonstrate several effective techniques to optimize these operators for processing XML twig queries and GTP queries . 5 . ACKNOWLEDGEMENT
This work is partly supported by the National Natural Science Foundation of China under Grant No.60573094 , the National High Technology Development 863 Program of China under Grant No.2007AA01Z152 and 2006AA01A101 , the National Grand Fundamental Research 973 Program of China under Grant No2006CB303103 6 . REFERENCES [ 1 ] S . Chen , H G Li , J . Tatemura , W P Hsiung , D . Agrawal , and K . S . Candan . Twig2stack : Bottom up processing of generalized tree pattern queries over xml documents . In VLDB , 2006 .
[ 2 ] T . Chen , J . Lu , and T . Ling . On boosting holism in xml twig pattern matching using structural indexing techniques . In SIGMOD , pages 455–466 , 2005 .
[ 3 ] Z . Chen , H . V . Jagadish , L . V . S . Lakshmanan , and S . Paparizos . From tree patterns to generalized tree patterns : On efficient evaluation of xquery . In VLDB , pages 237–248 , 2003 .
[ 4 ] G . Li , J . Feng , and L . Zhou . Efficient Holistic Twig Joins in
Leaf to Root Combining with Root to Leaf Way . In DASFAA , 2007 .
[ 5 ] P . Rao and B . Moon . Prix : Indexing and querying xml using prufer sequences . In ICDE , pages 288–299 , 2004 .
1038WWW 2008 / Poster PaperApril 21 25 , 2008 · Beijing , China
