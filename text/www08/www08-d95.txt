Algorithm for Stochastic Multiple Choice Knapsack
Problem and Application to Keywords Bidding
∗
Yunhong Zhou
HP Labs
1501 Page Mill Rd Palo Alto , CA 94304 yunhongzhou@hpcom
ABSTRACT We model budget constrained keyword bidding in sponsored search auctions as a stochastic multiple choice knapsack problem ( S MCKP ) and design an algorithm to solve S MCKP and the corresponding bidding optimization problem . Our algorithm selects items online based on a threshold function which can be built/updated using historical data . Our algorithm achieved about 99 % performance compared to the offline optimum when applied to a real bidding dataset . With synthetic dataset and iid item sets , its performance ratio against the offline optimum converges to one empirically with increasing number of periods .
Categories and Subject Descriptors : G16 [ Mathematics of Computing ] : Numerical Analysis Optimization ( stochastic programming )
General Terms : Algorithms , Economics
Keywords : Sponsored search auction , keyword bidding , multiple choice knapsack problem , stochastic optimization
1 .
INTRODUCTION
Sponsored search auction is an effective way of monetizing search activities where advertisers pay to place their ads on search results pages for specific user keyword queries . In this work we focus on the bidding optimization problem for an advertiser with budget constraints . Formally , we address the following problem : for each keyword and each time period , how much should the advertiser bid ( ie , which position to obtain ) , so as to maximize ROI of the ads given a fixed budget and a fixed time horizon ?
We can view each ad position as an item with associated weight ( cost ) and value ( either revenue or profit ) . The advertiser has a budget constraint , and it naturally corresponds to the knapsack capacity . Furthermore each advertiser can have at most one ad appear on each keyword results page . This corresponds to the constraint that at most one item from each item set can be taken in the multiplechoice knapsack problem ( MCKP ) , a well known variation of the knapsack problem ( KP ) . The following model of the bidding problem is proposed : given multiple keywords k ∈ K , multiple time periods when the advertiser places bids t ∈ {1 , . . . , T} , and multiple positions s ∈ {1 , . . . , S} , the item set N k ts ) for all ad positions ∗ t consists of items ( wk
Work was done while the author was an intern at HP Labs . ts , vk
Copyright is held by the author/owner(s ) . WWW 2008 , April 21–25 , 2008 , Beijing , China . ACM 978 1 60558 085 2/08/04 .
Victor Naroditskiy
Department of Computer Science
Brown University
Providence , RI 02912 victor@brown.edu s . Formally wk w ts and vk ts are defined as follows : k k tsα k − p
( t ) , k k ts)α k ts = p k ts = ( V v
( t ) , ∀ s , t , k . k k
( s)X
( s)X
( 1 ) Here V k denotes the expected value per click for keyword k , X k(t ) denotes the number of user queries for keyword k at time period t , αk(s ) denotes the click through rate ( CTR ) of position s and keyword k ( the ratio between total user clicks on the ad at s th slot and the total number of impressions ) , and pk ts denotes the cost per click for ads in position s for keyword k at time t .
The bidding optimization problem has a strong stochastic flavor as bidding prices and click traffic change all the time . The online and stochastic variant of MCKP ( S MCKP ) where item sets are received one at a time , allows us to explicitly incorporate this uncertainty in the distribution of future itemsets . Although , decisions are made assuming that the itemsets are independent and identically distributed ( iid ) , the algorithm performs well even when items in different time periods do not follow the same distribution as evidenced by experimental results for the “ auto insurance ” dataset . 1.1 Related Work
In the last few years , a number of papers addressed the problem of revenue maximization or bidding optimization in sponsored search auctions [ 1 , 4 , 2 , 3 , 7 ] . None of the previous work proposed a solution that employs distributional information about prices and solves the bidding problem with multiple ad position , keywords , and time periods . Zhou et al . [ 8 ] attack a very similar problem and model it as Online MCKP ; however their work focuses on competitive algorithms with worst case performance guarantees while this work focuses on average case performance with stochastic input . The threshold function we develop for SMCKP is based on the threshold function for the stochastic knapsack problem by Lueker [ 6 ] . 2 . APPROXIMATING S MCKP
Our algorithm for the S MCKP is based on Lueker ’s Algorithm for Online KP and an approximation for MCKP [ 5 ] . At a high level , we use a technique from the approximation for MCKP to convert each MCKP item set into KP items and apply Lueker ’s threshold function to selected KP items . We now describe the algorithm in detail .
We first apply a technique for converting items from a MCKP item set into incremental items with the following property : taking multiple incremental items with decreasing efficiency ( value/weight ) is equivalent to taking exactly one original item . The technique consists of two steps : ( i ) removing dominated and LP dominated items from the item
1175WWW 2008 / Poster PaperApril 21 25 , 2008 · Beijing , China set and ( ii ) creating incremental items items . For details , see Kellerer et al . [ 5 ] , p320 from undominated
After obtaining incremental items , we use a threshold function to decide which incremental items to take . Lueker [ 6 ] proposed solving Online KP using an adaptive threshold : only items that meet the threshold efficiency are put in the knapsack . The threshold function ( which we call g ) maps the average remaining capacity per time period to the threshold efficiency e . The threshold efficiency is such that the expected weight of the remaining items ( all items are iid ) with efficiency at least e is equal to the remaining capacity :
∗
∗
'
. nfi
C = Ew,v wi 1{ vi wi
≥e∗} i=1
= n Ew,v
∗ f ( e
) =
C n while f ( e ) ≡ Ew,v ff
≥e∗} w 1{ v w w 1{ v w
≥e}
( 2 ) ff
We need the distribution of incremental items to calculate the threshold function ( Eq 2 ) , however such information may not be known or have a closed form representation . Alternatively , we can approximate the threshold function of incremental items using item sets received in the past . Formally , given a sample set of m incremental items , we can use ˜f to approximate f where mfi
˜f ( e ) ≡ 1 m wi 1{ vi wi
≥e} i=1
( 3 )
˜f is a piecewise constant function with at most m pieces , and it can be computed in time O(m log m ) based on sorting of item efficiency .
The algorithm for S MCKP is in Figure 1 .
It consists of two phases : the first phase ( optional ) is to generate the threshold function if training item sets are available . In the second phase , at each time period the algorithm converts the current item set to incremental items , checks which incremental items meet the threshold , and takes the corresponding item from the item set . The threshold function can be updated in step 2 by incorporating information from the current item set . In the case when no training itemsets are available in step 1 , the first real item set is used to generate the initial threshold function . Input : item set Nt at time t , for t = 1 , . . . , n ; knapsack capacity C ; ( optional ) training item sets ;
Output : items to take at each time 1 . create incremental items from training item sets r is the average number of incremental items per set generate ˜f using incremental items for t from 1 to n
2 . create incremental items from item set Nt update ˜f and r based on incremental items ∗ e /** r(n − t + 1 ) is the expected number of remaining incremental items **/ r(n−t+1 ) )
−1(
= ˜f
C select incremental items with efficiency at least e ( w , v ) is the corresponding item of these selected incremental items if w ≤ C take item ( w , v ) , update C := C − w Figure 1 : Algorithm for S MCKP .
∗
3 . EXPERIMENTAL RESULTS
We run two sets of experiments . In the first set of experiments , we generate items with weights and values drawn independently from one of the following distributions : Uniform with support between 1 and 10 , Normal with mean 10 , and Exponential with mean 10 . The number of items per set received each time period is 5 . We express the budget ( capacity ) as a fraction of the mean weight of an item times the total number of time periods , ie , C = λ× n× mean(w ) , where n is the number of time periods , mean(w ) is the mean weight of a random item . The value of λ indicates whether the budget is large compared to the expected overall spending if you pick random items each time without any optimization . We tested the algorithms on problem instances with the budget level λ ∈ {0.05 , 0.2 , 0.5 , 0.9 , 11}
We evaluate the performance of the algorithm based on the ratio of the value obtained by the algorithm and an upper bound on the optimal solution to offline MCKP . Figure 2 shows experimenal results with no training item sets for generating the threshold function in step 1 of Alg 1 . The performance of the algorithm is almost always within 10 % of the optimal when n ≥ 20 and approaches the optimal as n goes to ∞ . A graph for the performance of Alg 1 with the Uniform distribution is shown below . Graphs with the other distributions look very similar , and are omitted due to space constraints .
1
0.95 o i t a r
0.9
0.85
0.8
10
20
λ 0.05 λ 0.20 λ 0.50 λ 0.90 λ 1.10 640 1280
40
80
160
320 number of periods
Figure 2 : Performance with U(1,10 ) .
The second set of experiments uses a real dataset for the “ auto insurance ” keyword described in [ 8 ] . The performance of our algorithm is around 99 % while the algorithm in [ 8 ] achieves around 90% 95 % .
4 . REFERENCES [ 1 ] Z . Abrams . Revenue maximization when bidders have budgets . In SODA , pages 1074–1082 . ACM Press , 2006 . [ 2 ] Z . Abrams , O . Mendelevitch , and J . A . Tomlin . Optimal delivery of sponsored search advertisements subject to budget constraints . In ACM EC , pages 272–278 , 2007 .
[ 3 ] C . Borgs , J . Chayes , O . Etesami , N . Immorlica , K . Jain , and
M . Mahdian . Dynamics of bid optimization in online advertisement auctions . In Proc . WWW , pp 531–540 , 2007 . [ 4 ] N . Buchbinder , K . Jain , and J . S . Naor . Online primal dual algorithms for maximizing ad auctions revenue . In Proc . ESA , pages 253–264 , 2007 .
[ 5 ] H . Kellerer , U . Pferschy , and D . Pisinger . Knapsack
Problems . Springer , 2004 .
[ 6 ] G . S . Lueker . Average case analysis of off line and on line knapsack problems . J . of Algorithms , 29(2):277–305 , 1998 .
[ 7 ] S . Muthukrishnan , M . P´al , and Z . Svitkina . Stochastic models for budget optimization in search based advertising . In Proc . WINE , LNCS 4858 , pages 131–142 , 2007 . [ 8 ] Y . Zhou , D . Chakrabarty , and R . Lukose . Budget constrained bidding in keyword auctions and online knapsack problems . In Proc . WWW ( poster ) , 2008 .
1176WWW 2008 / Poster PaperApril 21 25 , 2008 · Beijing , China
