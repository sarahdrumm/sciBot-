Style Mining of Electronic Messages for Multiple
Authorship Discrimination : First Results
Shlomo Argamon
Dept . of Computer Science Illinois Institute of Technology
10 W . 31st Street
Chicago , IL
Marin ˇSari´cfi
Sterling S . Stein
Dept . of Computer Science Illinois Institute of Technology
Dept . of Computer Science Illinois Institute of Technology
10 W . 31st Street
Chicago , IL
10 W . 31st Street
Chicago , IL argamon@iit.edu marin@google.com stein@iriitedu
ABSTRACT This paper considers the use of computational stylistics for performing authorship attribution of electronic messages , addressing categorization problems with as many as 20 different classes ( authors ) . Effective stylistic characterization of text is potentially useful for a variety of tasks , as language style contains cues regarding the authorship , purpose , and mood of the text , all of which would be useful adjuncts to information retrieval or knowledge management tasks . We focus here on the problem of determining the author of an anonymous message , based only on the message text . Several multiclass variants of the Winnow algorithm were applied to a vector representation of the message texts to learn models for discriminating different authors . We present results comparing the classification accuracy of the different approaches . The results show that stylistic models can be accurately learned to determine an author ’s identity .
Categories and Subject Descriptors I26 [ Artificial Intelligence ] : Learning ; H33 [ Information Search and Retrieval ] : Selection process
Keywords Text mining , Text categorization , Authorship attribution , Computational stylistics , Electronic communication
1 .
INTRODUCTION
As electronic communication increasingly occupies a central role in the global business , political , and intelligence communities , it has become increasingly important to be able to accurately identify the authors of an electronic mesFor example , it may be important to know which sages . fiCurrent affiliation : Google , Inc . , 1505 Salado Drive , Mountain View , CA 94043 intercepted documents discuss terrorist attack plans , but it is equally important to pick out those messages known to be from major enemy players . However , a message author who wishes to remain unidentified currently has many ways to do so .
We consider the use of computational stylistics for authorship attribution of electronic messages , addressing categorization problems with as many as 20 different classes ( authors ) . We compare results using several multi class generalizations of the Exponentiated Gradient learning algorithm ( EG ) ; we have shown in previous work [ 12 ] that the EG algorithm outperforms other popular learning methods for stylistic classification .
Author attribution of electronic messages constitutes an important and difficult testbed for computational stylistics techniques , for two main reasons . First is the fact that such messages are typically quite short ( tens or perhaps hundreds of words compared with thousands for articles or books ) . Thus there is less information in any given text to go on . Second , since e mail is an informal and fast paced medium , individuals’ writing styles adapt quickly to different contexts or correspondents , and so even messages by the same individual may vary greatly in style .
The usual goal in text mining and analysis is to gain an understanding or summary of the topic , or topics , covered in the text ( see [ 17 ] for an excellent survey ) . However , the meaning of a text is more than the topic it describes or represents . Textual meaning , broadly construed , includes also dimensions of : affect ( what feeling is conveyed by the text? ) , genre ( in what community of discourse does the text function? ) , register ( what is the function of the text as a whole? ) , and personality ( what sort of person , or who , wrote the text? ) . These aspects of meaning are largely captured by the text ’s style of writing , which may be roughly defined as how the author chose to express her topic , from among a very large space of possible ways of doing so . This contrasts , thus , the how of a text ( style ) from the what ( topic ) .
Due to the focus on topic based text analysis , little work to date has been done on text mining using style . However , while topic is the most easily accessible aspect of a text ’s meaning , since content words carry much of a text ’s topical meaning , the complementary problem of understanding textual style is also crucial to understanding a text in its context . Therefore stylistic text analysis is a critical component of effective processing for the growing and increasingly complex text collections available today .
474475
2 . COMPUTATIONAL STYLISTICS
The problem considered in this paper concerns categorization by style and thus may be viewed in the context of the stylometric research which has been vigorously pursued for decades , mostly in the context of authorship attribution [ 9 , 14 ] . Although some crossover work between stylometrics and text categorization has been done , the bulk of stylometric research has differed from the more recent work in text categorization in a few important ways .
While categorization by topic is typically based on keywords which reflect a document ’s content , categorization by author style uses precisely those features which are independent of content . Most generally , style is carried by features that indicate the author ’s choice of one mode of expression from among a set of equivalent modes . This may be expressed through lexical choice , choice of syntactic structure , or of discourse strategy .
In order to practically approach the problem , stylometric models for categorization have typically been based on hand selected sets of content independent , lexical [ 16 ] , syntactic [ 18 ] , or complexity based [ 21 ] features . Researchers in text categorization by topic typically use much larger feature sets , often in conjunction with automated feature selection methods ; some work in the stylometric community has also considered automated methods for selecting features [ 7 ] . Moreover , stylometric research has tended to use statistical methods such as multivariate analysis [ 2 ] , rather than machine learning algorithms , for categorization .
Computational stylistics comprises a growing body of work in which machine learning techniques are used to address problems of document stylistic analysis . Multilayer perceptron networks were applied to frequencies of a small set of function words as features by Matthews and Merriam [ 13 ] and Tweedie et al . [ 19 ] . Wolters and Kirsten [ 20 ] compared nearest neighbor learning algorithms with part of speech tag frequencies and demonstrated effective classification based on genre . More complex syntactic features were used by Stamatatos et al . [ 18 ] in conjunction with a discriminant analysis to classify Greek newspaper articles by genre . Argamon et al . [ 1 ] have used the EG algorithm [ 11 ] to learn classification models for distinguishing male from female authorship , using function words and shallow syntactic features . The problem of authorship identification for e mail has been previously addressed by de Vel [ 6 ] , who used a comparatively small number of features with SVMs [ 4 ] for binary authorship classification . His results indicate ( inter alia ) the potential importance of orthographic text features , such as capitalization and word length , in style analysis .
3 . THE CORPUS
Unfortunately , there are not yet any publically available benchmark collections for experimentation on author attribution of electronic messages . We have therefore built such a collection , which we are making available to the research community at large . Due to privacy considerations , we could not use a corpus of personal e mail messages . Instead , we used messages culled from several Usenet newsgroups1 on a variety of topics . The groups we chose are not edited , and hence individual messages may drift from time to time from the nominal topic , though we expect the topic of the group to set a general tenor . For this initial work , we chose sev
1See http://groupsgooglecom
Table 1 : Summary of statistics of the Usenet post corpora used in the study : maximum , minimum , and average number of posts for any author , percentage of posts by the maximum author , and maximum , minimum , and average length ( in word tokens ) of each post . tokens/post Subcorpus min/max/avg max % min/max/avg books(2 ) books(5 ) books(20 ) books(10/ ) theory(2 ) theory(5 ) theory(20 ) theory(10/ ) lang.c(2 ) lang.c(5 ) lang.c(20 ) lang.c(10/ )
9/409/61 53 % 9/1250/95 24 % 3/4142/102 10 % 3/1250/85 13 % 12/584/167 55 % 11/584/155 26 % 13 % 6/3111/150 15 % 11/3111/151 65 % 34 % 15 % 20 %
12/287/85 7/399/75 7/445/79 7/445/79 posts/author
116/131/124 89/131/111 33/131/67 10/131/52 84/102/93 51/102/79 15/102/40 10/102/34 162/300/231 128/300/175 55/300/101 10/300/74 eral newsgroups on a range of topics : recartsbooks ( abbreviated books ) , comp.theory ( theory ) , and complangc ( langc ) Posts in complangc often contain code snippets which we could not easily reliably filter out .
From each newsgroup we downloaded the 500 most recent discussions ( threads ) , each thread consisting of many individual postings . Each posting was then processed to remove any material quoted from previous posts as well as extraneous header material , the newsgroup and author of the post was recorded . Each set of newsgroup posts was then used to compose several subcorpora with different numbers of authors for attribution : all posts by the ( i ) 2 most frequent authors , ( ii ) 5 most frequent authors , ( iii ) 20 most frequent authors , and ( iv ) 10 most frequent and 10 least frequent authors ( minimum of 10 posts each in the corpus ) , denoted \10/" . Table 1 gives details regarding the sizes of these subcorpora .
4 . TEXT FEATURES
We use here lexical/orthographic features as indicator variables for stylistic choice at multiple levels of linguistic structure . The kinds of features that may be reliable stylistic indicators are somewhat dependent on the domain of text being considered . The corpus considered in this study consists of informal messages in a variety of Internet newsgroups , a medium which allows fairly wide stylistic latitude , but which also has its own conventions ( observed by different individuals to differing extents ) . Thus the features that we considered are a combination of generic and newsgroupspecific ones .
Most basic is a list of 303 generic function words ( taken from [ 15]2 ) , which generally serve as proxies for choice in the syntactic ( eg , preposition phrase modifiers vs . adjectives or adverbs ) , semantic ( eg , usage of passive voice indicated by auxiliary verbs ) , and pragmatic ( eg , first person pronouns indicating personalization of a text ) planes . Function words have been shown to be effective style markers in previous
2Available on line at http://wwwcseunsweduau/min /ILLDATA/Function word.htm
475476 studies [ 1 , 10 , 19 ] . We add to the list of function words also lexical items special to the newsgroup domain : net abbreviations ( netabbrevs ) . Netabbrevs are typically acronyms for commonly used locutions , such as \BTW" ( by the way ) or \N2S" ( needless to say ) . Informal observation suggests that different user communities often use somewhat different sets of netabbrevs . We took as features a list of 190 netabbrevs taken from a webpage listing3 .
In addition , we also considered a parallel set of orthographic and placement features , both individually and in combination with the above lexical features ( where applicable ) : Capitalization ( Uppercase , lowercase , ALL UPPERCASE , MiXeD CaSe , punctuation , number ) , Placement ( Subject , beginning of line , beginning of paragraph , other ) , Word length , and Line length .
5 . LEARNING ALGORITHMS
The primary task we address here is to learn a model to classify electronic messages according to their author , based on stylistic features as above . We examine here multiclass variants of the Exponentiated Gradient ( EG ) algorithm [ 11 ] . The EG algorithm has nice theoretical mistake bound properties and variants have previously been shown to be effective for text categorization by topic ( eg [ 5] ) . In fact , in our previous work on stylistic text categorization [ 12 ] , a variant of EG considerably outperformed both Naive Bayes and Ripper , other algorithms commonly used for text categorization . 5.1 Multiplicative update learning
The basic EG algorithm learns linear classifiers for twoclass problems . Briefly , the balanced EG variant upon which we base our work is as follows . We initialize two component weight vectors w+ = f1 ; 1 ; : : : ; 1g and w , = f,1 ; : : : ; ,1g , defining w = w+ + w , . We then calibrate the vectors using the following iterative procedure . The training examples are randomly ordered . For each training example x , we define c(x ) 2 f0 ; 1g to be the class indicator function . Let s(w ; x ) = 1 if w x > 0 and s(w ; x ) = 0 otherwise , where w is the weight vector at the time that example x is encountered , and let wi and xi be the ith element in w and x , respectively . Then we take the examples one at a time in a random order and iteratively update the weights after each example using the formulas : w+ w , i w+ i w , i ( 1 + fi)xi(c(x),s(w;x ) ) i ( 1 + fi)xi(s(w;x),c(x ) ) fi is a learning constant greater than 0 ; in all our experiments we used fi = 2 . Thus weights that improperly reduce the dot product are increased , and vice versa . If ( c(x),s(w ; x ) ) > 0 , and so w+ is increased , the update is termed promotion , and conversely if ( c(x ) , s(w ; x ) ) < 0 the update is termed demotion . Note that as in EG , but unlike Balanced Winnow , we allow xi to take on non binary values . However , like Balanced Winnow , but unlike EG , we restrict s(w ; x ) to binary values . A computationally similar variant of this update rule which we have found to work somewhat better than the above rule for stylistic classification , is : w+ w , i w+ i w , i ( 1 + fixi)(c(x),s(w;x ) ) i ( 1 + fixi)(s(w;x),c(x ) )
3http://wwwgeocitiescom/TheTropics/Shores/1224 /Netiquette.html
476477
Once all the examples have been used for training , they are randomly reordered and another cycle of updates is run . ( Convergence is usually reached within 20 or 30 iterations . ) Along the way , any element of w+ or w , that drops below some threshold ( 0.000001 of the sum of all the weights ) is set to zero .
The intuition behind the update rule is that weights of features that appear most prominently in misclassified documents are changed most dramatically . A well known advantage of multiplicative update rules such as we use is that the weights of irrelevant features tend quickly to zero . This is important for problems such as stylistic classification , where determining relevant features in advance is particularly difficult . 5.2 Multiclass learning
The usual way to extend a two class learning algorithm for multiclass problems is to learn a set of two class models , and then to combine their binary classifications and confidences thereof to give a final class for an example . This combination is usually performed using a type of \winner take all" strategy . A widely used paradigm is one vs . all ( OvA ) , in which , for a learning problem with n classes c1 ; : : : ; cn , the system learns n models for the binary problems : \c1 vs . everything else" , \c2 vs . everything else" , and so on . Learning will thus output an array M of models , M1 through Mn . Then , to classify a test example x , that class is chosen whose model gives the highest confidence in its classification ( for linear classifiers , confidence for model m on example x is easily measured as m x ) . While this method is reasonably efficient , it can be shown that there are concepts that cannot be represented by OvA models , even though they can be learned by ensembles of linear classifiers .
A second combination method is all vs . all ( AvA ) in which n(n , 1 ) models are learned , for the problems \c1 vs . c2" , \c1 vs . c3" , and so on through \cn,1 vs . cn" . Here the output will be a 2 dimensional array of models ( with empty diagonal ) , Mi;j , i ; j n ; i 6= j . To classify a test example x , then , for each possible class ci , the confidences of the n , 1 classifiers indicating ci are combined , usually by summing them ( weighted voting ) . We consider here also two other variants : using the minimum confidence for a class , and using the maximum confidence for a class . Once the combined confidence for each class is computed , the class with the highest combined confidence is chosen .
The naive implementation of the above schemes ( given in Fig 2 ) has each component model calibrating its weight vector independently of all other component models . However , this can lead to inefficiencies and even inaccuracies in learning , as the final classification may depend on interactions between the component models . A recent technique which addresses this issue has been termed \ultraconservative algorithms" [ 3 ] . Consider that , in the multi class case , a given component model Mi is only \correct" or \incorrect" for a given training example ( x ; c(x ) ) in relation to the confidences given by the other component models for that example . For the OvA case , we have then :
Mi=c(x ) is correct Mi6=c(x ) is correct iff 8j 6= i ; Mi x > Mj x iff Mi x Mcx x
Thus all models for an incorrect class with confidence higher than the model for the correct class c(x ) should be demoted for x , and the model for the correct class should be promoted
MultiClassLearn(X ; c ; niter ) :
OneVsAllUpdate(x ; c ; Mn ) :
1 . Initialize model array M ( variant dependent )
1 . For each i n , i 6= c :
2 . For i 0 to niter , do :
( a ) Reorder X randomly
( b ) For each x 2 X , Update(x ; c(x ) ; M )
( c ) For each m 2 M , Normalize(m )
3 . Output M
Normalize(m ) :
1 . Let m = ( w+ ; w , )
2 . For each i :
( a ) w+ ( b ) w , i w+ i w , i =(Pi w+ i ) i =(Pi w , i )
( a ) If Mi x Mc x , then : i . Demote(Mi ; x ) ii . Promote(Mc ; x )
AllVsAllUpdate(x ; c ; Mn;n ) :
1 . For each i ; j n , i ; j 6= c :
( a ) If Mi;c x Mc;j x , then : i . Demote(Mi;c ; x ) ii . Promote(Mc;j ; x )
RowVsRowUpdate(x ; c ; Mn;n ) :
1 . For each i n , i 6= c :
Figure 1 : Generic update based multi class learning algorithm for example set X , class indicator function c , and number of iterations niter . Regarding Update , see text and Figures 2 and 3 .
NaiveOneVsAllUpdate(x ; c ; Mn ) :
1 . For each i n :
( a ) If i 6= c and Mi x > 0 , then : Demote(Mi ; x )
( b ) If i = c and Mi x 0 , then : Promote(Mi ; x )
NaiveAllVsAllUpdate(x ; c ; Mn ) :
1 . For each i n , i 6= c :
( a ) If Mi;c x > 0 , then : Demote(Mi;c ; x )
( b ) If Mc;i x 0 , then : Promote(Mc;i ; x )
( a ) If Pj Mi;j x Pj Mc;j x , then : i . For each j n , Demote(Mi;j ; x ) ii . For each j n , Promote(Mc;j ; x )
Figure 3 : Ultraconservative update variants for example x , correct class c , and model array M . See text for details . then all models in both rows are updated . Details of the update algorithms are given in Fig 3 .
In order to ensure proper convergence , balance must be maintained between the various weight vectors . In the present work we use a simple method of normalizing the weight vectors after each pass through the training set ( see Fig 1 ) . While we have as yet no convergence proof , our experiments ( below ) show that this normalization scheme gives reliable convergence .
Figure 2 : Naive update variants for example x , correct class c , and model array M . See text for details .
6 . EXPERIMENTS
6.1 Setup for x exactly when it does not give the highest confidence . This schema we implement in three variants , one for the OvA classification paradigm , and two for the AvA paradigm ( refer to Fig 3 ) . For OneVsAll update , we compare the model confidence for each incorrect class to that for the correct class . If the incorrect class scores higher than the correct class , we update both models appropriately . In the straightforward update for the AvA case , which we call AllVsAll update , we compare all models Mc;j whose confidence indicates the correct class c over some other class j to all models Mi;c whose confidence indicates an incorrect class i over the correct class c . For each such pair wise comparison , if the ‘incorrect’ model has a higher confidence than the ‘correct’ model , the models are appropriately updated . This ‘model by model’ updating rule , however , does not take into account the fact that model confidences are combined in the eventual classification . Hence we also propose the RowVsRow update rule , in which the combined confidence for each incorrect class is compared to the combined confidence for the correct class . If the incorrect class ’s confidence is higher ,
For each subcorpus of a newsgroup and a selection of authors therefrom , we evaluated the authorship attribution performance of different learning methods using 10 fold crossvalidation . We measured classification accuracy , and in addition examined the precision recall behavior by examining average Ffi=1 over the individual authors in each dataset , as well as average precision over the authors in each dataset . Comparing these numbers allows us to roughly evaluate the stability of each method over the different authors in each dataset .
The primary choice of learning method is between \one vs . all" ( OvA ) and \all vs . all" ( AvA ) . Within OvA there are two variants , the naive and the ultraconservative ( denoted \Cons" in the tables ) . Within AvA , there are three combination methods ( vote , min , and max ) , and three modes of ultraconservative update ( none , all model pairs , and by rows ) . Results are given in Tables 2 , 3 , 4 , and 5 . 6.2 Classification Results
Due to the lack of a standard testbed for author attribution in this domain , we evaluate efficacy of the approached
477478
Table 2 : Summary of classification results for One vs . All learning , with overall accuracy , min , max , and average Ffi=1 with standard deviation , and average precision with standard deviation . ‘Group’ is the newsgroup . ‘N’ is the number of authors , either the 2 , 5 , or 20 most frequent or 10/ , the 10 most and least frequent authors . ‘Con’ is whether or not learning was ultraconservative .
Group N 2 books 2 books 5 books 5 books 10/ books 10/ books 20 books 20 books 2 theory 2 theory 5 theory 5 theory 10/ theory 10/ theory 20 theory 20 theory 2 lang.c 2 lang.c 5 lang.c 5 lang.c 10/ lang.c 10/ lang.c 20 lang.c 20 lang.c
Con Acc Fmin 0.65 66 % no 0.63 yes 67 % 0.29 40 % no 43 % yes 0.21 22 % 0 ( 4 ) no 21 % 0 ( 4 ) yes no 20 % 0.03 0.10 24 % yes 0.69 73 % no 0.65 70 % yes 0.24 42 % no 41 % yes 0.27 no 18 % 0 ( 12 ) 29 % 0 ( 5 ) yes 19 % 0 ( 8 ) no 26 % 0 ( 4 ) yes 0.99 99 % no yes 99 % 0.99 0.46 73 % no 68 % yes 0.33 47 % 0 ( 4 ) no 53 % 0 ( 5 ) yes 33 % 0.026 no yes 43 % 0 ( 1 )
Fmax 0.67 0.71 0.52 0.56 0.44 0.44 0.55 0.60 0.76 0.74 0.77 0.78 0.40 0.74 0.42 0.78 0.99 0.99 0.96 0.95 0.85 0.89 0.72 0.94
F 0.66 0.67 0.39 0.41 0.17 0.16 0.19 0.24 0.73 0.70 0.43 0.45 0.066 0.19 0.096 0.19 0.99 0.99 0.68 0.61 0.25 0.31 0.23 0.30
P 0.67 0.70 0.42 0.45 0.26 0.24 0.24 0.29 0.73 0.70 0.56 0.40 0.13 0.29 0.17 0.27 0.99 0.99 0.78 0.67 0.35 0.34 0.40 0.76 described here both comparatively , and against the simplest baseline of always classifying according to the majority class in each dataset ( see Table 1 ) .
We first examine OvA learning , in Table 2 . First note that in all cases , we obtained classification accuracies noticeably higher than the baseline , establishing the validity of the method . Furthermore , in most cases ultraconservative learning gives a slight improvement , and never significantly reduces accuracy . This empirically confirms the usefulness of ultraconservative updating . Significantly , all metrics examined give qualitatively similar results . ( Note that for twoclasses , all algorithms examined are theoretically identical , so some results are omitted due to lack of space . )
If results for AvA learning are now compared to those for OvA , a distinct pattern emerges which is consistent in all datasets . Apparently , \ultraconservative update by rows" is usually preferred to other AvA variants as well as to OvA learning , usually with either voting or maximum combination . These strategies sometimes give results nearly 30 % higher than the baseline . Also , the Ffi=1 range for these variants is usually narrow , indicating both overall reliability and consistency for each author . To our knowledge , the row based variant of ultraconservative updating has not previously been examined , so it bears further scrutiny ( perhaps in the framework of \constraint classification" [ 8] ) .
Table 3 : Summary of classification results for All vs . All learning , for newsgroup recartsbooks ‘Com’ is the combination method : ‘vote’ , ‘min’ , or ‘max’ . ‘Con’ is how ultraconservative learning was applied : ‘none’ , ‘all’ , or ‘by rows’ .
Com Con Acc N Fmin 0.29 38 % vote 5 0.18 33 % vote 5 0.38 46 % vote 5 0.32 40 % min 5 0.25 36 % min 5 0.13 min 34 % 5 0.14 29 % max 5 0.11 29 % max 5 45 % max 0.35 5 30 % 0 ( 10 ) vote 10/ vote 23 % 0 ( 6 ) 10/ 21 % 0 ( 6 ) 10/ vote 24 % 0 ( 3 ) 10/ min 25 % 0 ( 4 ) 10/ min 16 % 0 ( 7 ) 10/ min 17 % 0 ( 10 ) 10/ max 10/ max 14 % 0 ( 10 ) 23 % 0 ( 4 ) 10/ max 25 % 0 ( 4 ) vote 20 21 % 0 ( 2 ) vote 20 23 % 0 ( 2 ) vote 20 26 % min 20 0.08 20 min 23 % 0 ( 2 ) 14 % 0 ( 5 ) min 20 11 % 0 ( 6 ) max 20 9.5 % 0 ( 5 ) max 20 20 max 24 % 0 ( 1 ) none all rows none all rows none all rows none all rows none all rows none all rows none all rows none all rows none all rows
Fmax 0.44 0.43 0.58 0.49 0.44 0.48 0.41 0.40 0.51 0.46 0.38 0.35 0.43 0.52 0.27 0.24 0.25 0.37 0.47 0.35 0.56 0.41 0.55 0.26 0.28 0.20 0.47
F 0.35 0.30 0.46 0.38 0.34 0.29 0.23 0.24 0.46 0.13 0.15 0.14 0.17 0.18 0.10 0.082 0.071 0.17 0.18 0.17 0.21 0.24 0.20 0.091 0.072 0.067 0.18
P 0.46 0.41 0.48 0.45 0.43 0.37 0.33 0.35 0.46 0.12 0.22 0.23 0.20 0.24 0.17 0.086 0.073 0.21 0.26 0.30 0.25 0.30 0.28 0.23 0.098 0.11 0.27
Table 4 : Summary of classification results for All vs . All learning , for comp.theory ; columns as in Table 3 .
Com Con Acc N Fmin 0.28 43 % vote 5 0.25 37 % vote 5 0.27 vote 41 % 5 0.27 40 % min 5 0.26 39 % min 5 0.15 39 % min 5 0.10 31 % max 5 0.16 max 28 % 5 43 % max 0.24 5 28 % 0 ( 11 ) vote 10/ 0 ( 7 ) 29 % vote 10/ 0 ( 4 ) 23 % 10/ vote 24 % 10/ min 0 ( 2 ) 10/ min 21 % 0 ( 5 ) 18 % 0 ( 12 ) 10/ min 17 % 0 ( 11 ) 10/ max 11 % 0 ( 10 ) 10/ max 0 ( 6 ) 26 % 10/ max 20 vote 24 % 0 ( 8 ) 0 ( 9 ) 20 % vote 20 0 ( 3 ) 24 % vote 20 0 ( 3 ) 23 % min 20 20 % min 20 0 ( 8 ) 15 % 0 ( 16)4 min 20 20 max 13 % 0 ( 8 ) 11 % 0 ( 10 ) max 20 20 max 22 % 0 ( 2 ) none all rows none all rows none all rows none all rows none all rows none all rows none all rows none all rows none all rows
Fmax 0.67 0.66 0.86 0.64 0.73 0.47 0.52 0.44 0.83 0.57 0.67 0.67 0.61 0.60 0.25 0.31 0.23 0.70 0.67 0.34 0.74 0.35 0.46 0.24 0.39 0.27 0.73
F 0.44 0.38 0.43 0.42 0.41 0.36 0.31 0.26 0.44 0.11 0.17 0.17 0.16 0.14 0.072 0.063 0.050 0.18 0.17 0.10 0.20 0.15 0.11 0.03 0.075 0.056 0.18
P 0.55 0.50 0.55 0.51 0.47 0.44 0.44 0.41 0.51 0.13 0.31 0.27 0.25 0.20 0.094 0.096 0.070 0.23 0.21 0.20 0.24 0.24 0.20 0.11 0.12 0.080 0.23
478479
Table 5 : Summary of classification results for All vs . All learning , for complangc ; columns as in Table 3 .
Com Con Acc N Fmin 65 % vote 0.45 5 62 % vote 0.42 5 vote 64 % 0.47 5 71 % min 0.42 5 66 % min 0.26 5 62 % min 0.32 5 48 % max 0.32 5 35 % max 0.32 5 max 59 % 0.26 5 43 % 0 ( 10 ) vote 10/ 29 % 0 ( 9 ) vote 10/ 55 % 0 ( 2 ) 10/ vote 47 % 0 ( 2 ) 10/ min 10/ min 46 % 0 ( 3 ) 47 % 0 ( 5 ) 10/ min 20 % 0 ( 10 ) 10/ max 16 % 0 ( 9 ) 10/ max 53 % 0 ( 1 ) 10/ max 29 % 0 ( 1 ) vote 20 20 vote 27 % 0 ( 2 ) 45 % 0.063 vote 20 43 % 0.042 min 20 35 % 0 ( 1 ) min 20 40 % 0 ( 1 ) min 20 20 max 13 % 0 ( 4 ) 11 % 0 ( 3 ) max 20 20 max 39 % 0.028 none all rows none all rows none all rows none all rows none all rows none all rows none all rows none all rows none all rows
Fmax 0.88 0.83 0.89 0.96 0.95 0.90 0.76 0.39 0.90 0.85 0.47 0.89 0.94 0.92 0.83 0.31 0.57 0.84 0.75 0.80 0.87 0.88 0.89 0.83 0.28 0.31 0.83
F 0.62 0.60 0.59 0.65 0.58 0.58 0.45 0.36 0.53 0.19 0.15 0.35 0.29 0.29 0.24 0.093 0.093 0.32 0.22 0.25 0.38 0.37 0.29 0.31 0.086 0.086 0.30
P 0.67 0.68 0.67 0.71 0.68 0.68 0.58 0.58 0.66 0.25 0.21 0.40 0.33 0.34 0.27 0.13 0.11 0.38 0.38 0.39 0.42 0.41 0.38 0.33 0.20 0.23 0.34
7 . CONCLUSIONS
This paper presents initial results for authorship attribution on electronic messages , using linear separator learning and lexical/orthographic features . We tested a variety of learning algorithms based on EG , using a test corpus which we are making publically available . It will constitute a first benchmark collection for research on stylistic attribution .
Generally speaking , our results are quite promising and bear witness to the validity of the approach . The major limitation of the current work is the simplicity of its feature set|though large , the set of features considered here is comparatively simple . Future work will include expanding the feature set to include other types of style markers , such as parts of speech and complexity metrics . As well , we intend to investigate the use of automatic feature generation techniques to search the space of compound features in order to improve learning accuracy . We believe that this will be necessary , due to the unavoidable idiosyncracy of style .
Among other methods for multiclass linear separator learning , we presented the novel technique of \ultraconservative updating by rows" . Our results suggest the possible preference of this new technique for electronic message authorship attribution . The technique therefore merits further study , both for authorship attribution and for other applications . Acknowledgements Thanks to Ophir Frieder and Steven Beitzel for their careful readings of early drafts of this paper , as well as to the anonymous reviewers for their helpful comments .
8 . REFERENCES [ 1 ] S . Argamon , M . Koppel , J . Fine , and A . R . Shimony .
Gender , genre , and writing style in formal written texts . Text , 23(3 ) , 2003 .
[ 2 ] J . F . Burrows . Computers and the study of literature .
In Computers and Written Texts , pages 167{204 . Oxford : Blackwell , 1992 .
[ 3 ] K . Crammer and Y . Singer . Ultraconservative online algorithms for multiclass problems . In Proc . COLT/EuroCOLT , pages 99{115 , Amsterdam , 2001 . [ 4 ] N . Cristianini and J . Shawe Taylor . An Introduction
To Support Vector Machines . Cambridge U . Press , 2000 .
[ 5 ] I . Dagan , Y . Karov , and D . Roth . Mistake driven learning in text categorization . In Proc . EMNLP 97 , Providence , RI .
[ 6 ] O . de Vel . Mining e mail authorship . In KDD 2000
Workshop on Text Mining , Boston , MA , 2000 .
[ 7 ] R . S . Forsyth and D . I . Holmes . Feature finding for text classification . Lit . and Ling . Comp . , 11(4):163{174 , 1996 .
[ 8 ] S . Har Peled , D . Roth , and D . Zimak . Constraint classification for multiclass classification and ranking . In NIPS 15 , 2002 .
[ 9 ] D . I . Holmes . The evolution of stylometry in humanities scholarship . Lit . and Ling . Comp . , 13(3):111{117 , 1998 .
[ 10 ] J . Karlgren . Stylistic Experiments for Information
Retrieval . PhD thesis , SICS , 2000 .
[ 11 ] J . Kivinen and M . Warmuth . Exponentiated gradient versus gradient descent for linear predictors . Information and Computation , 132(1):1{63 , 1997 .
[ 12 ] M . Koppel , S . Argamon , and A . R . Shimoni .
Automatically categorizing written texts by author gender . Lit . and Ling . Comp . , 17(4 ) , 2003 .
[ 13 ] R . A . J . Matthews and T . V . N . Merriam . Neural computation in stylometry I : An application to the works of Shakespeare and Fletcher . Lit . and Ling . Comp . , 8:103{209 , 1993 .
[ 14 ] A . McEnery and M . Oakes . Authorship studies/textual statistics , pages 234{248 . Marcel Dekker , 2000 .
[ 15 ] R . Mitton . Spelling checkers , spelling correctors and the misspellings of poor spellers . Information Processing and Management , 23(5):495{505 , 1987 .
[ 16 ] F . Mosteller and D . Wallace . Inference and Disputed
Authorship : The Federalist . Addison Wesley , Reading , Massachusetts , 1964 .
[ 17 ] F . Sebastiani . Machine learning in automated text categorization . ACM Computing Surveys , 34(1 ) , 2002 .
[ 18 ] E . Stamatatos , N . Fakotakis , and G . Kokkinakis .
Automatic text categorisation in terms of genre and author . Comp . Ling . , 26(4):471{495 , 2001 .
[ 19 ] F . Tweedie , S . Singh , and D . Holmes . Neural network applications in stylometry : The federalist papers . Computers and the Humanities , 30(1):1{10 , 1996 . [ 20 ] M . Wolters and M . Kirsten . Exploring the use of linguistic features in domain and genre classication . In Proc . EACL ’99 , pages 142{149 , 1999 .
[ 21 ] G . U . Yule . Statistical Study of Literary Vocabulary .
Cambridge U . Press , 1944 .
479480
