A Game Theoretic Formulation of the Service Provisioning
Problem in Cloud Systems
Danilo Ardagna∗ , Barbara Panicucci∗ , Mauro Passacantando∗∗
∗Politecnico di Milano , ∗∗Università di Pisa
ABSTRACT Cloud computing is an emerging paradigm which allows the on demand delivering of software , hardware , and data as services . As cloud based services are more numerous and dynamic , the development of efficient service provisioning policies become increasingly challenging . Game theoretic approaches have shown to gain a thorough analytical understanding of the service provisioning problem .
In this paper we take the perspective of Software as a Service ( SaaS ) providers which host their applications at an Infrastructure as a Service ( IaaS ) provider . Each SaaS needs to comply with quality of service requirements , specified in Service Level Agreement ( SLA ) contracts with the end users , which determine the revenues and penalties on the basis of the achieved performance level . SaaS providers want to maximize their revenues from SLAs , while minimizing the cost of use of resources supplied by the IaaS provider . Moreover , SaaS providers compete and bid for the use of infrastructural resources . On the other hand , the IaaS wants to maximize the revenues obtained providing virtualized resources . In this paper we model the service provisioning problem as a Generalized Nash game , and we propose an efficient algorithm for the run time management and allocation of IaaS resources to competing SaaSs .
1 .
INTRODUCTION
Cloud Computing has been a dominant IT news topic over the past few years . It is essentially a way for IT companies to deliver software/hardware on demand and for costumers to store and access data over the Internet . Cloud computing applications are generally priced on a subscription model , so end users may pay a yearly usage fee , for example , rather than the more familiar model of purchasing software to run on desktop . The Cloud based services are not only restricted to software applications ( Software as a Service – SaaS ) , but could also be the platform for the development and deployment of cloud applications ( Platform as a Service – PaaS ) and the hardware infrastructure ( Infrastructure as a Service
– IaaS ) . In the SaaS paradigm applications are available over the Web and provide Quality of Service ( QoS ) guarantees to end users . The SaaS provider hosts both the application and the data , hence the end user is able to use and access the service from all over the world . With PaaS , applications are developed and deployed on platforms transparently managed by the Cloud provider . The platform typically includes databases , middleware and development tools , all delivered as a service through the Internet . In IaaS systems , virtual computer environments are provided as services and servers , storage , and network equipment can be outsourced by customers without the expertise to operate them .
Many Companies , eg Google and Amazon , are offering Cloud computing services such as Google ’s App Engine and Amazon ’s Elastic Compute Cloud ( EC2 ) or Elastic Block Store ( EBS ) . Large data centers provide the infrastructure behind the Cloud and virtualization technology makes Cloud computing resources more efficient and cost effective both for providers and customers . Indeed , end users obtain the benefits of the infrastructure without the need to implement and administer it directly adding or removing capacity almost instantaneously on a “ pay as you use ” basis . Cloud providers can , on the other hand , maximize the utilization of their physical resources also obtaining economies of scale . The development of efficient service provisioning policies is among the major issues in Cloud research . Indeed , modern Clouds live in an open world characterized by continuous changes which occur autonomously and unpredictably . In this context , game theoretic methods and approaches allows to gain a in depth analytical understanding of the service provisioning problem . Game Theory has been successfully applied to diverse problems such as Internet pricing , flow and congestion control , routing , and networking [ 7 ] . One of the most widely used “ solution concept ” in Game Theory is the Nash Equilibrium approach : A set of strategies for the players constitute a Nash Equilibrium if no player can benefit by changing his/her strategy while the other players keep their strategies unchanged or , in other words , every player is playing a best response to the strategy choices of his/her opponents .
In this paper we take the perspective of SaaS providers which host their applications at an IaaS provider . Each SaaS provider want to maximize its profit while complying with QoS requirements , specified in Service Level Agreement ( SLA ) contracts with the end users , which determine the revenues and penalties on the basis of the achieved performance level . The profit of the SaaS is given by the revenues from SLAs minus the cost sustained for using the re sources supplied by the IaaS . However , each SaaS competes with others SaaS and bid for the use of infrastructural resources supplied by the IaaS . The IaaS , in his turn , wants to maximize the revenues obtained providing the resources . To capture the behavior of SaaSs and IaaS in this conflicting situation in which the best choice for one depends on the choices of the others , we recur to the Generalized Nash equilibrium concept [ 16 ] , which is an extension of the classical Nash equilibrium [ 34 ] . In this paper the service provisioning problem will be modelled as a Generalized Nash game . We then use Game Theory results for developing an efficient algorithm for the run time management and allocation of IaaS resources to competing SaaSs .
The remainder of the paper is organized as follows . Section 2 introduces the reference system under study . In Section 3 we introduce our model based on the concept of Generalized Nash equilibrium and we prove existence . In Section 4 we provide analytical results for a simple case study , while a general solution method is proposed in Section 5 . The experimental results discussed in Section 6 demonstrate the efficiency of our method . Other approaches proposed in the literature are discussed in Section 7 . Conclusions are finally drawn in Section 8 .
2 . PROBLEM STATEMENT AND
ASSUMPTIONS
As stated in the previous section , we consider SaaS providers using Cloud computing facilities to offer services , according to the IaaS paradigm . We assume that a SaaS provider offers multiple transactional Web services ( WSs ) and each service represents a different application .
The hosted WSs can be heterogeneous with respect to resource demands , workload intensities and QoS requirements . The set of WS applications offered by the p th SaaS provider are denoted with Ap .
An SLA contract , associated with each WS application , is established between the SaaS provider and its end users . In particular , as in other approaches [ 9 , 10 , 38 ] , for each WS application k ∈ Ap , a linear utility function specifies the per request revenue ( or penalty ) Vk = νk +mk Rk incurred when the end to end response time Rk assumes a given value . The slope of the utility function is mk = −νk/Rk < 0 and Rk is the threshold that identifies the revenue/penalty region , that is , if Rk > Rk the SLA is violated and the SaaS incurs in penalties .
Linear utility functions are a flexible mechanism to rank different applications ( eg , assigning higher slopes to more important applications ) , and allow also to implement soft constraints on response times since the SaaS goal is to keep the infrastructure working in a profitability region , ie , to provide an average response time lower than Rk looking for the trade off between the SLA revenues and infrastructural costs [ 9 ] .
Applications are hosted in virtual machines ( VMs ) which are dynamically instantiated by the IaaS provider . We make the simplifying assumption that each VM hosts a single WS application . Multiple VMs implementing the same WS application can also run in parallel . In that case , we further assume that the running VMs are homogeneous in terms of RAM and CPU capacity C and evenly share the incoming workload .
IaaS providers usually charge software providers on an hourly basis [ 8 ] . Hence , the SaaS has to face the problem of determining every hour the optimal number of VMs for each WS class in order to maximize the net revenues .
The SaaS performs resource allocation on the basis of a prediction of future WS workloads [ 1 , 10 ] . The SaaS needs also an estimate of the future performance of each VM in order to determine application average response time . In the following we model each WS class hosted in a VM as an M/G/1 queue [ 11 ] , as done in [ 32 , 30 , 2 ] and we assume , as common among Web service containers , that requests are served according to the processor sharing scheduling discipline . Multiple VMs can run in parallel to support the same application . In that case , the workload is evenly shared among multiple instances .
For the IaaS provider we consider a model similar to Amazon EC2 [ 8 ] and we assume that the IaaS provider offers : ( i ) flat VMs , for which SaaS providers applies for a one time payment ( currently every one or three years ) for each instance they want to reserve , ( ii ) on demand VMs , which allows SaaS to access computing capacity with no longterm commitments , and ( iii ) on spot VMs , for which SaaS providers bid and compete for unused infrastructure provider capacity .
The VM instances are charged with the on spot cost σk for application k , which is set by the IaaS and fluctuates periodically depending on the IaaS provider time of the day energy costs and also on the supply and demand from SaaS for on spot VMs [ 8 , 23 ] . Indeed , SaaS providers compete among them for the use of on spot VMs and specify the maximum cost σU k for each application k they are willing to pay per instance hour . The on spot cost σk is fixed by the IaaS provider which can also decide to do not allocate any spot instance to a SaaS . On the other hand , each SaaS provider is guaranteed to have access up to f U p flat VMs he reserved by applying to the one time payment . The number of on spot VMs available at the IaaS cloud service center is denoted by sU .
For example in the Amazon case on spot costs are available via the EC2 API [ 8 ] or by third party sites [ 36 ] . On spot costs fluctuate according to the time of the day and on the Cloud site region , and could be less or greater than the time unit cost ϕ for flat VMs . Finally , we denote with δ the cost for on demand instances . With the current pricing models , δ is strictly greater than ϕ and we assume δ > σU k for all k . Indeed , since the IaaS provider can arbitrarily terminate on spot instances from a SaaS resource pool [ 8 ] , no one is willing to pay for a less reliable resource a time unit cost higher than on demand instances which provide a higher availability level .
On spot instances have been traditionally adopted to support batch computing intensive workloads [ 8 ] . However , since nowadays IaaS providers allow specifying autonomic policies which can dynamically allocate VM instances in few minutes as a reaction to failures , we advocate the use of on spot instances also to support the execution of traditional WS applications .
3 . GENERALIZED NASH EQUILIBRIUM
APPROACH
Hereafter we introduce the Generalized Nash Equilibrium Problem arising in the Cloud computing system under study and we prove the existence of at least an equilibrium .
3.1 Problem Formulation
The goal of SaaS provider p is to determine every hour the number of flat fk , on demand dk and on spot sk VMs to be devoted for the execution of all WS applications k ∈ Ap , in order to maximize its profits and , at the same time , so as to to satisfy the prediction Λk for the arrival rate of the WS application k . Let us denote with µk the maximum service rate for the requests of application k on a VM of capacity one . If the workload is evenly shared among the VMs , then the average response time for the execution of application k requests is given by :
E[Rk ] =
Cµk −
1
Λk fk+dk+sk
,
( 1 ) under the assumption that VMs are not saturated , ie guaranteeing the equilibrium conditions for the M/G/1 queues C µk ( fk + dk + sk ) − Λk > 0 .
The average per time unit revenues for application k re quests are given by Vk Λk = ( νk + mk E[Rk ] ) Λk .
Considering the infrastructural costs to access flat , on demand , and on spot VM instances the goal of a SaaS provider is to maximize its profits given by : k∈Ap
νk Λk + mk Λk(fk + dk + sk )
C µk ( fk + dk + sk ) − Λk
+
−ϕ fk − δ dk − σk sk ) .
With this setting in mind , the problem of the generic SaaS provider p becomes : max Θp = mk Λk(fk + dk + sk )
C µk ( fk + dk + sk ) − Λk
+
− k∈Ap k∈Ap
ϕ fk − k∈Ap
δ dk − fk ≤ f U k∈Ap p k∈Ap k∈A
∀ k ∈ Ap sk ≤ sU ∀ k ∈ Ap .
σk sk
( 2 )
( 3 )
( 4 )
( 5 ) fk + dk + sk >
Λk C µk
Note that the terms fk , dk , sk ≥ 0 k∈A
νk Λk can be dropped in the SaaS objective function since they are independent of the decision variables .
Constraint ( 2 ) entails that the flat VMs allocated to applications are less or equal to the one available , while constraint ( 3 ) guarantees that resources are not saturated . Finally constraint ( 4 ) guarantees than the on spot VMs allocated to competing SaaS providers are lower than the one available at the IaaS cloud service center sU .
We would like to remark that , in the formulation of the problem , we have not imposed variables fk , dk , sk to be integer , as in reality they are . In fact , requiring variables to be integer makes the solution much more difficult . However , preliminary experimental results have shown that if the optimal values of the variables are fractional and they are rounded to the closest integer solution , the gap between the solution of the real integer problem and the relaxed one is very small , justifying the use of a relaxed model . We therefore decide to deal with continuous variables , actually considering a relaxation of the real problem .
On the other side , the IaaS provider ’s goal is to determine the time unit cost σk for on spot VM instances for all applications k ∈ Ap and every SaaS provider p , in order to maximize its total revenue : max ΘI =
( ϕ fk + δ dk + σk sk ) k∈A k ≤ σk ≤ σU σL k
∀ k ∈ A ,
( 6 ) where A denotes the set of indexes of all WS applications
( ie , A = ∪pAp , Ap1 ∩ Ap2 = ff if p1 = p2 ) .
Note that the on spot instance lower bound σL k is fixed according to the time of the day and includes the energy costs for running a single VM instance for one hour and the amortized cost of the hosting physical machine [ 23 ] . For the sake of clarity , the notation adopted in this paper is summarized in Table 1 . k < σL
If the maximum time unit costs of an application is lower than the minimum set by the IaaS , ie σU k , formally the SaaSs and IaaS problems have no solution . In that case we can set sk = 0 and consider a simplified problem where the capacity allocation for application k is limited to determine the number of flat and on demand instances . Hence in the following we will always assume that σL k for all k . Note that , if the on spot instances are terminated by the IaaS provider , then the SaaS can dynamically start the execution of an equal number of on demand instances . k ≤ σU
In this framework , SaaS providers and the IaaS provider are making decisions at the same time , and the decisions of a SaaS depend on those of the others SaaS and the IaaS . Vice versa , IaaS objective function depends on SaaS decisions . In this setting , we can not analyze decision in isolation , but we must ask what a SaaS would do , taking into account the decision of the IaaS and other SaaSs . To capture the behavior of SaaSs and IaaS in this conflicting situation ( game ) in which what a SaaS or the IaaS ( the players of the game ) does directly affects what others do , we consider the Generalized Nash equilibrium concept [ 16 ] , which is broadly used in Game Theory and other fields . We remind the reader that the generalized Nash equilibrium problem ( GNEP ) differs from the classical Nash equilibrium problem ( NEP ) since , not only the objective functions of each player ( called payoff functions ) depend upon the strategies chosen by all the other players , but also each player ’s strategy set may depend on the rival players’ strategies . In our setting the constraint of each problem involving other player ’s variables ( joint constraint ) comes from ( 4 ) .
Following the Nash equilibrium concept , SaaS and IaaS providers adopt a strategy such that none of them can improve its revenue by changing its strategy unilaterally ( ie , while the other players keep their strategies unchanged ) . The service provisioning problem results therefore in a GNEP where the players are the SaaS providers and the IaaS provider , the strategy variables of SaaS provider p are fk , dk , and sk , for k ∈ Ap , while the strategy variables of the IaaS are the costs for on spot VMs , σk , for all k ∈ A . Within this setting , the IaaS ’s strategy is simple . In fact , if SaaS provider decide not to use on spot VMs for application k , that is sk = 0 , the value of the IaaS payoff does not depend on the choice for σk , that can be any feasible value . Whereas , if sk = 0 , regardless its value , the best response of the IaaS is to play σk = σU k . When one player has a strategy that yields a higher revenue , no matter which choice the other players makes , that player is said to have a dominant strategy , and he will play that strategy in each of the Nash equilibria . Therefore , whenever sk = 0 , the IaaS will play its dominant strategy σk = σU k .
Another important feature of the derived GNEP is that it satisfies the Convexity Assumption : the payoff functions of both SaaS providers and IaaS , are concave in its own variables ( Θp is concave being the sum of linear and concave function1 , and ΘI is linear ) and the set of strategies are convex . Moreover , even if the decision of a SaaS depends on the decisions of the other SaaSs and the IaaS , the only constraint of each problem involving other player ’s variables ( coming from ( 4 ) in each SaaS problem ) , is the same for all players : we refer to this special class of GNEP as jointly convex GNEP [ 18 ] . 3.2 Existence of equilibria
Using the model introduced in the previous sections , we now prove that there exists an equilibrium for service provisioning on the Cloud . The proof is based on the equivalence between generalized Nash equilibria and fixed points of the best response mapping , and on the Kakutani ’s fixed point theorem [ 24 ] .
To simplify the discussion we introduce the following notations . Let xp = ( fk , dk , sk)k∈Ap denotes the strategies vecp=1 , x−p the vector formed tor of SaaS provider p , x = ( xp)n by the strategies of all SaaS providers different from p and σ = ( σk)k∈A . Moreover we indicate by Xp(x−p ) the set of strategies for provider p , and XI the set of strategies of the IaaS provider .
Theorem 1 There exists at least one generalized Nash equilibrium for the game . Proof Let consider any SaaS provider p . For any feasible strategy x−p of the other SaaS providers we have that Xp(x−p ) contains the set : p := {xp ≥ 0 :
X L fk ≤ f U p , sk = 0 ∀ k ∈ Ap k∈Ap fk + dk > Λk/(C µk ) ∀ k ∈ Ap} .
Moreover , for any feasible strategy σ of IaaS provider we have the following relations : p ( xp ) ≤ Θp(xp , σ ) ≤ ΘU ΘL p ( xp ) ,
− ϕ fk − δ dk − σU k sk
− ϕ fk − δ dk − σL k sk
. where ΘL k∈Ap k∈Ap and ΘU p ( xp ) is : p ( xp ) is :
C µk ( fk + dk + sk ) − Λk mk Λk(fk + dk + sk ) mk Λk(fk + dk + sk ) 1 1 1
C µk ( fk + dk + sk ) − Λk
2 m Λ C µ Λ
( C µ ( f +d+s)−Λ)3
1 1 1 1 1 1
1Each summand is like cavity follows by direct m Λ(f +d+s ) C µ ( f +d+s)−Λ and its evaluation of conthe Hessian :
. The eigenvalues are zero and
6 m Λ C µ Λ
( C µ ( f +d+s)−Λ)3 , which is negative since m < 0 and f + d + s > Λ
C µ .
We remark that if fk + dk + sk → Λk p ( xp ) → −∞ and if dk → +∞ then ΘU
C µk for some k ∈ Ap , p ( xp ) → −∞ then ΘU as well .
If we denote by M p := max xp∈XL
( cid:102)Xp := {xp : ΘU p p ( xp ) ≥ M p}
ΘL p ( xp ) , then the set : is nonempty , convex and compact . Therefore , for any feasible x−p and σ we obtain that : Θp(xp , σ ) ≥ max xp∈XL
Θp(xp , σ ) ≥ max xp∈XL xp∈Xp(x−p ) max
ΘL p ( xp ) = M p p p thus : arg max xp∈Xp(x−p )
Θp(xp , σ ) ⊆ ( cid:102)Xp , of the rivals are uniformly bounded by ( cid:102)Xp . X := ( cid:102)X1 × . . .(cid:102)Xn × XI
Finally , we consider the convex compact set that is the sets of best responses of player p to the strategies and the best response set valued mapping B defined as follows :
×
B(x , σ ) := arg max y1∈X1(x−1 )
Θ1(y1 , σ ) arg max yn∈Xn(x−n )
Θn(yn , σ )
× arg max σ∈XI
× . . .
ΘI ( x , σ
) .
From the above discussion it follows that the set valued map
B : X ⇒ X has nonempty and convex values , and its graph is closed by continuity of payoff functions . Therefore , by Kakutani ’s theorem there exists a fixed point of B , that is a strategy ( x , σ ) ∈ B(x , σ ) , which is a generalized Nash equilibrium of the game .
4 . A SINGLE APPLICATION CASE STUDY In order to gain insight into the properties of the equilibria in our setting , let us focus on the case of a single SaaS provider with a single application class .
In the following we will also assume that the IaaS is overprovisioned and there is no an upper bound sU on the number of on spot VM instances available and , hence , the constraint ( 4 ) is relaxed . Indeed , it is not reasonable that a single SaaS will be able to saturate the on spot instances capacity available in a real system . In that case , each player ’s strategy ( SaaS and IaaS ) belong to a set which is fixed and does not depend on the rival players’ strategies : hence the GNEP reduces to a NEP which is much more simple to solve . The aim of the SaaS provider , given the IaaS strategy σ , is to choose f , d , and s that maximize the payoff : m Λ ( f + d + s )
− ϕ f − δ d − σ s ,
ΘS =
C µ ( f + d + s ) − Λ C µ , f ≤ over the set XS = {(f , d , s ) ∈ R3 f U} . The aim of the IaaS provider , given the SaaS strategies ( f , d , s ) , is to choose σ that maximize the payoff :
+ : f + d + s > Λ
ΘI = ϕ f + δ d + σ s , over the set XI = {σ ∈ R : σL ≤ σ ≤ σU} .
An analytic study can be obtained , as shown in Appendix A , writing down the KKT conditions for the SaaS and the IaaS optimization problems and concatenating them . We
Decision Variables fk Number of flat VMs used for application k dk Number of on demand VMs used for application k sk Number of on spot VMs used for application k σk Time unit cost for on spot VMs used for application k
System Parameters number of SaaS providers Set of applications of the p SaaS provider Set of applications of all the SaaS providers
Capacity of computational resources n Ap A f U p Maximum number of flat computational resources IaaS can provide for provider p sU Maximum number of on spot computational resources IaaS can provide for all the SaaS providers C Λk Prediction of the arrival rate for application k µk Maximum service rate of a capacity 1 server for executing class k application mk Application k utility function slope ϕ δ σL σU k Minimum time unit cost for on spot VMs used for application k , set by the IaaS provider k Maximum time unit cost for on spot VMs used for application k , set by the SaaS provider
Time unit cost for flat VMs Time unit cost for on demand VMs
Table 1 : Parameters and decision variables . can observe that the Nash equilibria depend on the application workload conditions and on the relation between the cost ϕ of the flat VMs and the upper bound σU for on spot instances cost . The obtained equilibria and the corresponding value of the payoff functions ΘS and ΘI are reported in Table 2 .
The first important remark we get is that , in general , there is no a unique Nash equilibrium ( eg , when ϕ = σU ) . However , if multiple equilibria exist they are equivalent , that is they are characterized by the same values of the payoffs . Furthermore , assuming δ > σU k for all k we always have d = 0 ( ie , the SaaS provider always adopt flat or on spot VMs which are always cheaper than on demand instances ) . When ϕ ≥ σU ( Table 2 , first and second rows ) then it is more convenient for the SaaS provider to use only on spot instances which number can be obtained by a closed formula under any workload conditions . Remind that the value of σL is set by the IaaS provider , and SaaS provider can not set the value of σU too low otherwise the IaaS will not provide on spot resources . Let us now examine the case ϕ < σU and assume initially that f U ≤ Λ C µ . In these hypotheses , the SaaS provider is under heavy load conditions and requests cannot be executed by using only the flat VMs . The SaaS provider will use all of its flat VMs and will buy on spot VMs at the maximum cost . Again , the number of on spot VMs can be determined by a closed formula ( see Table 2 , third row ) . Since ϕ < σU , in these conditions the payoff ΘS is greater than the value obtained when ϕ ≥ σU ( Table 2 first and second rows ) . Hence these conditions are more profitable for the SaaS provider which determines the optimal trade off between the cost of the flat and on spot VMs and the revenues which can be achieved by the SLA contract . With the same arguments we can derive that , vice versa , the payoff ΘI is lower than the value obtained when ϕ ≥ σU , hence these conditions are less profitable from the IaaS point of view even if on spot instances are sold at the maximum cost .
Let us now examine the case when ϕ < σU and f U > Λ
C µ .
The SaaS provider is under light load conditions and , therefore , the incoming requests could be executed by using only the flat VMs . Under these hypotheses , the equilibria are set according to the marginal value of the payoff function of the SaaS player evaluated in f = f U and s = 0 , that is ( C µ f U −Λ)2 . This marginal value represents the change in the revenues of SaaS per unit change in s , ie , the increase in the SaaS provider revenues deriving from SLA contracts obtained providing better performance to end users by adopting an additional on spot VM . We identify two cases :
−m Λ2
• if ϕ < σU < −m Λ2
( C µ f U −Λ)2 ( see Table 2 , fourth row ) , the marginal value is greater than the cost of individual on spot instance sold at the maximum cost ( σ = σU ) , therefore it is convenient for the SaaS provider to buy on spot instances . Note that under these conditions , the payoff ΘS is greater than the value obtained when ϕ ≥ σU as in the previous case . Vice versa , for the IaaS provider these circumstances are less profitable .
• if ϕ < σU and
−m Λ2
( C µ f U −Λ)2 ≤ σU ( see Table 2 , fifth and sixth row ) , then the marginal value is less or equal to the cost of on spot VMs and hence the SaaS provider has no incentives to buy additional on spot VMs . Also in these cases , the equilibrium value of the payoff of SaaS provider is greater than the one obtained when ϕ ≥ σU , while this again does not happen for the IaaS provider . Finally , it is worth noticing that if ( C µ f U −Λ)2 < ϕ the SaaS provider adopts a number of VMs lower than f U . Hence , in that case the costs incurred by using a larger number of flat VMs cannot be counterbalanced by the revenues which can be obtained by improving application performance .
−σ Λ2
5 . GENERAL SOLUTION METHOD
In the previous sections , we showed that the service provisioning problem in a Cloud Computing environment rep
Conditions
ϕ > σU
ϕ = σU
ϕ < σU f U ≤ Λ
C µ
ϕ < σU f U > Λ C µ σU < −m Λ2 ϕ < σU
( C µ f U −Λ)2 f U > Λ C µ −m Λ2
( C µ f U −Λ)2 < ϕ
ϕ < σU f U > Λ C µ ϕ ≤ −m Λ2
( C µ f U −Λ)2 ≤ σU
SaaS Equilibrium and value f = 0 d = 0 s = Λ C µ ΘS = − Λ
√ σU + 0 ≤ f ≤ f U
C µ (
1 + √ C µ ( f + s = Λ C µ ΘS = − Λ d = 0 s = Λ C µ
C µ (
σU + d = 0 s = Λ C µ
σU
C µ (
σU +
σU
σU
1 +
σU +
−m
√−m)2 −m d = 0 s ≥ 0 −m
√−m)2 −m
− f U √−m)2 + f U ( σU − ϕ ) − f U √−m)2 + f U ( σU − ϕ )
−m √−m)2 d = 0 s = 0
1 +
1 +
σU f = f U ΘS = − Λ f = f U ΘS = − Λ
√
√ f = Λ C µ ΘS = − Λ
1 + √ ϕ +
C µ (
ϕ
IaaS Equilibrium and value
σ = σU ΘI = Λ
C µ (
√−m σU + σU )
σ = σU
ΘI = Λ
C µ (
√−m σU + σU )
σ = σU ΘI = Λ
C µ (
√−mσU + σU ) + f U ( ϕ − σU )
σ = σU ΘI = Λ
C µ (
√−mσU + σU ) + f U ( ϕ − σU ) max{σL , ϕ} ≤ σ ≤ σU √−m ϕ + ϕ )
ΘI = Λ
C µ ( f = f U d = 0 s = 0
ΘS = m Λ f U
C µ f U −Λ − ϕ f U max{σL ,
−m Λ2
( C µ f U −Λ)2 } ≤ σ ≤ σU
ΘI = ϕ f U
Table 2 : Single Application Single SaaS Equilibria . resents a GNEP and more precisely a jointly convex GNEP . Concerning solution algorithms for general GNEPs , the literature is still very limited . More interesting results have been obtained for GNEPs with a jointly convex structure as our model is . In fact , a jointly convex GNEP can be solved introducing a variational inequality ( VI ) problem2 reformulation : given a jointly convex GNEP with N players , whose payoffs Θi are continuously differentiable and convex with respect to xi , then every solution of the VI , where F = −(∇xi Θi(x))N i=1 and X is the set of individual and joint constraints , is also a solution of the jointly convex GNEP ( see , eg , [ 18] ) .
We remark that the GNEP has usually multiple or even infinitely many solutions and it is not true that any solution of the jointly convex GNEP is also a solution of the VI . A solution of the jointly convex GNEP which is also a solution of the VI is called a variational equilibrium . Our approach is to calculate , among all the equilibria , a variational equilibrium . In fact , a variational equilibrium is more socially stable than other equilibria ( see [ 14 ] ) and it is a valuable target for an algorithm : there are plenty of methods for solving VI problems . In our setting we have :
2Given X ⊆ Rn and F : Rn → Rn , the VI problem consists in finding a vector x∗ ∈ X such that F ( x∗ ) , x − x∗ ≥ 0 , for all x ∈ X .

F = m1 Λ2 1 m1 Λ2 1
( C µ1 ( f1 + d1 + s1 ) − Λ1)2 + ϕ ( C µ1 ( f1 + d1 + s1 ) − Λ1)2 + δ ( C µ1 ( f1 + d1 + s1 ) − Λ1)2 + σ1 m1 Λ2 1 ··· ··· −s1···

, whose Jacobian is :
a1 a1 a1 a1 a1 a1 a1 a1 a1

0

JF =
0
a|A| a|A| a|A| a|A| a|A| a|A| a|A| a|A| a|A|

. . .
−BT

,
B
0 where the generic term ai = − 2 mi Λ2 and B is a matrix of dimension 3|A| × |A| .
( C µi ( fi+di+si)−Λi)3 > 0 , i C µi
Its symmetric part is :
a1 a1 a1 a1 a1 a1 a1 a1 a1

0

0
a|A| a|A| a|A| a|A| a|A| a|A| a|A| a|A| a|A|

. . .
0

0
0
Therefore , in the feasible set X , its non zero eigenvalues ( ie , 3 a1 , ··· , 3 a|A| ) are positive ( being m < 0 and f + C µ ) , and hence F results to be monotone3 ( not d + s > Λ strictly ) . Hence we can calculate a variational equilibrium of the GNEP associated to the service provisioning problem by solving a monotone VI . Concerning the solution methods for monotone VI , among the simplest ones , there are the projection type methods . These methods found on the well known fixed point reformulation of a VI :
∗ ∈ X solves V I(X , F ) iff x
∗ x
= ProjX ( x
∗ − α F ( x
∗
) ) for any α > 0 , where ProjX denotes the orthogonal projection onto X.4
The important feature of these methods is that there is not need of using derivative of F and they do not involve any computation besides the function evaluation and the projection onto X . When the projection is easily computable , as is our case , projection methods are extremely simple and cheap . Among the projection type methods we consider the hyperplane projection method [ 22 ] , where two projection per iteration are executed . The method is simple and admits a geometric interpretation . Given the current point ( xt , σt ) , first we compute ProjX ( (xt , σt ) − βt F ( xt , σt ) ) and then we search on the line segment between those points , for ( yt , δt ) such that the hyperplane
{(x , σ ) : F ( yt , δt ) , ( x , σ ) − ( yt , δt ) = 0} strictly separates ( xt , σt ) for any solution of the problem . The next iterate ( xt+1 , σt+1 ) is computed by projecting ( xt , σt ) onto the hyperplane and then onto X . The scheme is formally stated in Figure 1 . We set as initial solution of the algorithm x0 the one obtained by the best reply among SaaS according to the Gauss Siedel scheme [ 18 ] and setting σ0 = σU k for all k .
We emphasize that constructing the hyperplane requires a single projection onto the feasible set and employs an Armijo type line search . During the line search , moreover , no projection onto X are required , but only function evaluations . Regarding the choice of the parameters , following [ 22 ] we take βt+1 = median( ˆβ , θ αt βt , ˜β ) , where θ > 1 but not too large , eg θ = 2 .
The algorithm for the VI solution can be executed efficiently by the IaaS , under the assumption that the SaaSs provide to the IaaS also the prediction ofr the incoming workload Λk for the next hour . Indeed , for the problem under analysis the SaaS utility function slopes are advertised to the cloud end user and hence are known and every SaaS has to state its bit σU 3F is monotone on X if , for any x , y ∈ X , it holds that F ( x ) − F ( y ) , x − y ≥ 0 4ProjX ( z ) = argmin{w − z , w ∈ X} ∀ z ∈ Rn . k to the IaaS .
STEP 0 . Select parameters ξ ∈ ( 0 , 1 ) , ˆβ , ˜β st 0 < ˆβ ≤ ˜β and a sequence {βt} ⊂ [ ˆβ , ˜β ] . Let ( x0 , σ0 ) ∈ X and set t = 0 .
STEP 1 . Compute ( xt , σt ) = ( xt , σt ) − βt F ( xt , σt ) STEP 2 . If ( xt , σt ) = ProjX ( xt , σt ) then STOP STEP 3 . Set j(t ) the minimum j ≥ 0 :
−jProjX ( xt , σt ) + ( 1 − 2
−j)(xt , σt ) ) ( xt , σt ) − ProjX ( xt , σt)2 .
( xt , σt ) , F ( 2
≥ ξ βt
Let αt = 2−j(t ) and
( yt , δt ) = αt ProjX ( xt , σt ) + ( 1 − αt ) ( xt , σt ) ,
γk =
F ( yt , δt ) , ( xt , σt ) − ( yt , δt )
F ( yt , δt)2
,
( xt+1 , σt+1 ) = ProjX ( (xt , σt ) − γt F ( yt , δt ) )
STEP 4 . Set t = t + 1 and go to STEP 1 .
Figure 1 : Algorithm for VI .
6 . EXPERIMENTAL RESULTS
The resource management algorithm proposed has been evaluated for a variety of system and workload configurations . The application performance parameters have been varied as considered in the literature ( see eg [ 29 , 2 , 9 ] and references therein ) . Cloud providers time unit costs have been varied according to the commercial fees currently adopted [ 8 ] . Section 6.1 is devoted to quantitatively analyse the single application case study presented in Section 4 . Section 6.2 illustrates the variational equilibria properties on a medium size system . Finally , the scalability of the algorithm reported in Figure 1 is discussed in Section 63
6.1 Single Application Analysis For the numerical analysis reported in this Section we set Λ = 10 req/sec , C = 1 , µ = 1 req/sec , and m = −1 . Figures 2 and 3 report the plots of the SaaS and IaaS payoff functions ΘS an ΘI where we set σU = 0.09$ , and we varied ϕ and f U under the assumption that f U ≤ Λ/(C µ ) ( ie , which corresponds to rows 1 3 of Table 2 ) . Under this hypothesis the SaaS provider is under heavy load conditions since he cannot serve the overall incoming workload by using only his flat resources . The plots show that under the condition ϕ > σU the payoff functions are constant , while when ϕ ≤ σU ΘS ( ΘI ) increases ( decreases ) linearly with f U .
−m Λ
Figures 4 and 5 plot ΘS and ΘI as function of σU ( Table 2 rows 4 6 ) under light workload conditions for the SaaS ( Λ < C µ f U ) where we set ϕ = 0.03$ and f U = 50 . In this case the behaviour of the payoff functions changes crossing ( C µ f U −Λ)2 which with the considered the marginal value setting is equal to 0.0625$ : When σU is greater than the marginal value both ΘS and ΘI are constant , while increase for lower values of σU . Indeed , the SaaS provider acquires additional on spot instances to profitably serve incoming end users requests , while the IaaS obtains higher revenues selling on spot instances .
Figure 2 : SaaS payoff function for f U ≤ Λ/(C µ ) .
Figure 4 : SaaS payoff function for Λ < C µ f U .
Figure 3 : IaaS payoff function for f U ≤ Λ/(C µ ) .
Figure 5 : IaaS payoff function for Λ < C µ f U .
6.2 Equilibria Sharing Analysis
The aim of this Section is to analyse how the on spot VMs are shared among competing SaaS changing the game parameters . The analysis results have been obtained by the algorithm described in Section 5 . In particular we considered two SaaS offering five heterogeneous applications each . If not differently stated we set sU = 40 , C = 1 , ϕ = 0.1$ , p = 20 ( p ∈ {1 , 2} ) , Λk = 1 req/s , µk = k req/s , δ := 0.11$ , f U k = 0.09 for all k ∈ {1 , 10} . In mk = −1 , σL k = 0.03$ , and σU the following we will vary one parameter at the time for the first application k = 1 , while the parameters of the remaining ones will be held fixed . Figures 6 9 show how the number of resources devoted to the first application ( in terms of flat , on demand , and on spot instances ) and the overall capacity allocated to the remaining classes change as a function of the varying parameter . In particular , in Figure 6 the incoming workload Λ1 varies between 1 and 14 req/s . As the Figure shows , all of the on spot instances ( sU = 40 ) available at the IaaS are always used but , as the workload increases , they are migrated from the other applications to application 1 . In order to profitably sustain the workload , the number of flat instances used is also increased , but on demand VMs are not used until Λ1 reaches 11 req/s . When Λ1 is further increased the system starts allocating on demand VMs which are more expensive but are needed to serve the incoming requests . In general the resource allocation trends are linear with Λ1 , the discontinuities in the plots are due to the fact that the equilibrium is not unique and hence the same performance and revenues can be obtained with multiple values of ( fk , dk , sk ) .
Figure 7 shows the resource sharing at the equilibrium changing the slope of application 1 utility function ( which has been varied in the range [ −15,−1] ) . As in the previous analysis , the on spot capacity is migrated to application 1 which becomes more sensible to response time variations and hence requires additional capacity . However , in this case the adoption of on demand instances is never profitable .
Figure 8 analyses how the variational equilibrium changes by varying application 1 maximum service rate ( the range [ 0.05 , 1 ] req/s has been considered ) . If the maximum service rate increases the service time required to process each application 1 request decreases and the overall capacity required to process application 1 decreases accordingly . Hence , in this case on spot instances are migrated from application 1 to the other classes and on demand instances are used only when application 1 requests are very CPU intensive ( µ1 < 0.1 req/s ) .
Finally , Figure 9 shows how the equilibrium changes by varying the maximum time unit cost for application 1 ( σU 1 has been varied in the range [ 0.1 , 1]$ ; we set ϕ = 0.03$ , while for the remaining classes σL k = 002$ ) As σU 1 increases the number of on spot VMs allocated to k = 0.01$ and σU application 1 decreases since the IaaS set σ1 = σU 1 and the SaaS provider can use in a more cost efficient way the on spot VMs to serve his remaining applications , while application 1 is supported by flat instances . Also in this scenario on demand VMs are never used and the trends are linear . This is very unintuitive , since increasing the maximum time unit cost one is willing to pay for a given application implies that the number of on spot instances devoted to the same application is reduced .
Figure 6 : Resource allocation with varying application 1 incoming workload .
Figure 8 : Resource allocation with varying application 1 maximum service rate .
Figure 7 : Resource allocation with varying application 1 utility function slope . 6.3 Scalability Analysis
To evaluate the scalability of our resource allocation algorithm we have considered a very large set of randomly generated instances . All tests have been performed on VMWare virtual machine based on Ubuntu 9.10 server running on an Intel Nehalem dual socket quad core system with 32 GB of RAM . The virtual machine has a physical core dedicated with guaranteed performance and 4 GB of memory reserved . MINOS 5.51 has been use as non linear optimization solver . The number of SaaS provider has been varied between 10 and 80 , the number of applications ( evenly shared among SaaSs ) between 100 and 800 .
The performance parameters of Web applications and infrastructural resources costs have been randomly generated uniformly in the ranges reported in Table 3 as in other literature approaches [ 29 , 2 , 9 ] and according to commercial fees applied by IaaS cloud providers [ 8 ] .
Table 4 reports , for problem instances of different sizes , the average computational time in seconds as well as the average number of iterations performed by the algorithm reported in Figure 1 from the initial best reply solution ( the means are computed on ten different runs ) . Since problems
Figure 9 : Resource allocation with varying application 1 on spot maximum time unit cost . with a size comparable with real systems [ 35 ] including thousands of VM instances and hundreds of SaaS providers can be solved in less than one hour , our approach can be used to support the run time management of real cloud infrastructures .
7 . RELATED WORK
The recent development of Cloud systems and the rapid growth of the Internet have led to a remarkable development in the use of the Game Theory tools . Problems arising in the ICT industry , such as resource or quality of service allocation problem , pricing , and load shedding , can not be handled with classical optimization approaches . Indeed , in a pure optimization approach the goal of , in general , a complex system does not depend on the interrelationships among different users , or players [ 7 ] . However , interaction across different players is non negligible : each player can be affected by the actions of all players , not only her own action . In this setting , a natural modelling framework involves seeking an equilibrium , or stable operating point for the system . More precisely , each player seeks to optimize his own goal , which depends on the strategies of the other players upon his own , and this optimization is performed simultaneously by different players . An equilibrium ( in the sense of Nash ) is reached when no player can decrease his objective function by changing unilaterally its strategy .
A survey of different modelling and solution concepts of networking games , as well as a number of different appli sU Λk mk ϕ σL k
[ 100,1000 ] [ 1,100 ] req/s [ 10, 1 ] req/s [ 003,024]$ [ 002,008]$
C µk
δ σU k
[ 1,3 ] [ 1,10 ] req/s
[ 008,124]$ [ 009,030]$
Table 3 : Performance parameters and time unit cost ranges .
N SaaS,N Appl . Exe . Time ( s ) N It .
10,100 20,200 30,300 40,400 50,500 60,600 70,700 80,800
322 748 1051 1627 1922 2127 2966 3450
20 32 47 51 37 42 53 38
Table 4 : VI algorithm average execution time and number of iterations . cations in telecommunications and wireless networks , based on Game Theory , can be found in [ 39 , 7 ] .
With respect to telecommunication applications , a rich literature exists which includes solutions for flow and congestion control [ 31 , 4 , 15 ] , network routing [ 5 , 6 , 12 ] , file allocation [ 28 ] , load balancing [ 26 , 25 ] , multi commodity flow [ 40 ] , resource allocation [ 41 , 20 ] and quality of service provisioning [ 41 , 17 ] . In [ 21 ] a Markovian queueing network model is used to derive decentralized flow control mechanisms in computer communication networks with multiple controllers . The problem is investigated under two different criteria : ( i ) The network optimization criterion , leading to a team decision problem for maximizing the average network throughput under an average network delay bound ; ( ii ) The user optimization criterion , where each individual user maximizes its average throughput subject to a constraint on its average time delay . Finding the optimal decentralized flow control results in a multiple objective optimization problem and leads to a game theoretic formulation . The Nash equilibrium solution under the game theoretic formulation is demonstrated to be a set of window type mechanisms .
In the setting of optimal routing strategies , [ 27 ] investigates the existence of Nash equilibria in noncooperative flow control in a general product form network shared by multiple end users introduced in [ 21 ] . The goal is to study the existence of Nash equilibria for decentralized control schemes : This approach is based on directly proving the existence of a fixed point of the best response correspondence of the underlying game .
In [ 33 ] the authors examine the problem of communication delays for two main types of heterogeneous systems : ( i ) systems where all the nodes have the same processing rates and capabilities but the arrival rate of local jobs at nodes may not be the same , and ( ii ) systems where different nodes may process jobs at different rates . In this context two algorithms ( Forward and Reverse ) are proposed under the assumption that the job arrival process at each node is Poisson and the service times and job transfer times are exponentially distributed . The resulting Markov processes from these algorithms is solved using the Matrix Geometric solution technique .
In [ 19 ] the static load balancing problem in heterogeneous distributed systems is formulated as a noncooperative game among users . Based on the Nash equilibrium concept , the authors derive a distributed load balancing algorithm , whose performance are compared with that of other existing schemes . The main advantages of the proposed scheme are the distributed structure , low complexity and optimality of allocation for each user .
Regarding Cloud computing , the use of Game Theory for the resource allocation problem in Cloud environment is investigated in [ 37 ] . Here , the authors start from the bid proportional auction resource allocation model proposed in [ 13 ] , and evolve the model from perfect information to an incomplete common information where one bidder does not know how much the others would like to pay for the computing resource . To this end a Bayesian learning mechanism is introduced , and it is shown that a Nash equilibrium solution exists among all the possibilities prices , which means that no one can get a better benefit without damaging others .
In [ 3 ] , the authors consider centralized and decentralized load balancing strategies in a system with multiple and heterogeneous processor sharing servers . Each server has an associated service capacity and a holding cost per unit time . The requests arrive as a Poisson process , and the service time of incoming jobs is assumed to be know . For such system , the load balancing problem is investigated in two different scenarios : ( i ) a centralized setting leading to a global optimization problem , in which a dispatcher decides where each job will get service so as to minimize the weighted mean number of jobs in the system , and ( ii ) a distributed noncooperative setting leading to a non cooperative game transformed into a standard convex optimization problem . The paper studies structural properties of both strategies , and the efficiency loss ( or price of anarchy , PoA , which measures the inefficiency of a decentralized scheme ) of the decentralized scheme relative to the global optimal ( centralized ) one . In [ 42 ] the authors propose a pricing mechanism for allocation capacity in a utility computing system among competing end users requests . The fixed available service capacity is allocated among the different flows proportionally to their monetary bids . The paper studies the resulting equilibrium point , establishes convergence of a best response algorithm , and bounds the efficiency loss ( PoA ) of this distributed mechanism . More precisely : end users requests are represented as job flows in a controlled queueing system . These jobs arrive to the system through a fixed , random process , are stored in a buffer , and then are serviced by the resource in a first come , first served manner . The service rate is set through a proportional share mechanism . Within this framework , the interactions between end users are modelled as a game . Then , using ideas from Game Theory , authors show that the equilibrium can be reached in a distributed , asynchronous manner . The paper also reports the sensitivity analysis with respect to the variation of problem ’s parameters ( eg , load intensity and relative importance of the competing user requests ) . Differently from our point of view , in [ 42 ] the problem of the capacity allocation is considered for a single virtualized server among competing user requests , while in this paper we consider the infrastructure data center at a higher granulrity ( ie , VMs ) .
8 . CONCLUSIONS
We proposed a game theory based approach for the run time management of a IaaS provider capacity among multiple competing SaaSs . The model includes infrastructural costs and revenues deriving form cloud end users which depend on the achieved level of performance of individual requests . Future work will validate of our solution by performing experiments in real cloud environments . Furthermore , a comparison with the heuristic solutions adopted by SaaS and IaaS providers for the run time cloud management will be also performed . 9 . REFERENCES [ 1 ] B . Abraham and J . Ledolter . Statistical Methods for
Forecasting . John Wiley and Sons , 1983 .
[ 2 ] J . M . Almeida , V . A . F . Almeida , D . Ardagna , I . S .
Cunha , C . Francalanci , and M . Trubian . Joint admission control and resource allocation in virtualized servers . J . Parallel Distrib . Comput . , 70(4):344–362 , 2010 .
[ 3 ] E . Altman , U . Ayesta , and B . Prabhu . Load balancing in processor sharing systems . In ValueTools ’08 Proc . , pages 1–10 , ICST , Brussels , Belgium , Belgium , 2008 . [ 4 ] E . Altman and T . Basar . Multi user rate based flow control . IEEE Trans . on Communications , 46(7):940–949 , 1998 .
[ 5 ] E . Altman , T . Basar , T . Jimenez , and N . Shimkin .
Routing into two parallel links : game theoretic distributed algorithms . J . Parallel Distrib . Comput . , 61(9):1367–1381 , 2001 .
[ 6 ] E . Altman , T . Basar , T . Jimenez , and N . Shimkin .
Competitive routing in networks with polynomial cost . IEEE Trans . on Automatic Control , 47(1):92–96 , 2002 .
[ 7 ] E . Altman , T . Boulogne , R . El Azouzi , T . Jim´enez , and L . Wynter . A survey on networking games in telecommunications . Comput . Oper . Res . , 33(2):286–311 , 2006 .
[ 8 ] Amazon Inc . Amazon Elastic Cloud . http://awsamazoncom/ec2/
[ 9 ] D . Ardagna , B . Panicucci , M . Trubian , and L . Zhang .
Energy Aware Autonomic Resource Allocation in Multi tier Virtualized Environments . IEEE Trans . on Services Computing . To appear , available on line .
[ 10 ] M . Bennani and D . Menasc´e . Resource Allocation for Autonomic Data Centers Using Analytic Performance Models . In IEEE Int’l Conf . Autonomic Computing Proc . , 2005 .
[ 11 ] G . Bolch , S . Greiner , H . de Meer , and K . Trivedi . Queueing Networks and Markov Chains . J . Wiley , 1998 .
[ 12 ] T . Boulogne , E . Altman , H . Kameda , and
O . Pourtallier . Mixed equilibrium in multiclass routing games . IEEE Trans . on Automatic Control , 47(6):903–916 , 2002 .
[ 13 ] J . Bredin , D . Kotz , D . Rus , R . Maheswaran , C . .Imer , and T . Basar : . Computational markets to regulate mobile agent systems . Autonomous Agents and Multi Agent Systems .
[ 14 ] E . Cavazzuti , M . Pappalardo , and M . Passacantando .
Nash equilibria , variational inequalities , and dynamical systems . J . of Optimization Theory and Applications , 114(3):491–506 , 2002 .
[ 15 ] W . Chink . On convergence of asynchronous greedy algorithm with relaxation in multiclass queuing environment . IEEE Communication Letters , 3:34–36 , 1999 .
[ 16 ] G . Debreu . A social equilibrium existence theorem .
Proc . of the National Academy of Sciences of the USA , 38:886–893 , 1952 .
[ 17 ] R . El Azouzi and E . Altman . Constrained traffic equilibrium in routing . IEEE/ACM Trans . on Automatic Control , 48(9):1656–1660 , 2003 .
[ 18 ] F . Facchinei and C . Kanzow . Generalized Nash equilibrium problems . Ann . Oper . Res . , 175:177–211 , 2010 .
[ 19 ] D . Grosu and A . Chronopoulos . Noncooperative load balancing in distributed systems . J . Parallel Distrib . Comput . , 65(9):1022–1034 , 2005 .
[ 20 ] M . Haviv . The aumann shapely pricing mechanism for allocating congestion costs . Operations Research Letters , 29(5):211–215 , 2001 .
[ 21 ] T . Hsiao and A . Lazar . Optimal decentralized flow control of markovian queueing networks with multiple controllers . Performance Evaluation , 13(3):181–204 , 1991 .
[ 22 ] A . N . Iusem and B . F . Svaiter . A variant of korpelevich ’s method for variational inequalities with a new search strategy . Optimization , 42(4):309–321 , 1997 .
[ 23 ] J . Hamilton . Using a Market Economy . http://perspectivesmvdironacom/2010/03/23/Using AMarketEconomyaspx
[ 24 ] S . Kakutani . A generalization of Brouwer ’s fixed point theorem . Duke Mathematical Journal , 8:457–459 , 1941 . [ 25 ] H . Kameda , E . Altman , T . Kozawa , and Y . Hosokawa .
Braess like paradoxes in distributed computer systems . IEEE Trans . on Automatic Control , 45(9):1687–1691 , 2000 .
[ 26 ] H . Kameda , J . Li , C . Kim , and Y . Zhang . Optimal load balancing in distributed computer systems . Berlin : Springer , 1997 .
[ 27 ] A . Korilis and A . Lazar . On the existence of equilibria in noncooperative optimal flow control . J . ACM , 42(3):584–613 , 1995 .
[ 28 ] J . Kurose and R . Simha . A microeconomic approach to optimal resource allocation in distributed computer systems . IEEE Trans . on Computers , 38(5):705–717 , 1989 .
[ 29 ] D . Kusic , J . O . Kephart , N . Kandasamy , and
G . Jiang . Power and Performance Management of Virtualized Computing Environments Via Lookahead Control . In ICAC 2008 Proc . , 2008 .
[ 30 ] Z . Liu , M . S . Squillante , and J . Wolf . On maximizing service level agreement profits . In Proc . 3d ACM Conf . on Electronic Commerce , 2001 .
[ 31 ] R . Mazumdar , L . Mason , and C . Douligeris . Fairness in network optimal flow control : optimality of product forms . IEEE Trans . on Communications , 39(5):775–782 , 1991 .
[ 32 ] D . A . Menasc´e and V . Dubey . Utility based QoS
Brokering in Service Oriented Architectures . In IEEE ICWS Proc . , pages 422–430 , 2007 .
[ 33 ] R . Mirchandaney , D . Towsley , and J . Stankovic .
Adaptive load sharing in heterogeneous distributed systems . J . Parallel Distrib . Comput . , 9(4):331–346 , 1990 .
[ 34 ] J . Nash . Non cooperative games . Annals of
Mathematics . Second Series , 54:286–295 , 1951 .
[ 35 ] A . Qureshi , R . Weber , H . Balakrishnan , J . Guttag , and B . Maggs . Cutting the electric bill for internet scale systems . In SIGCOMM ’09 Proc . , pages 123–134 , New York , NY , USA , 2009 . ACM .
[ 36 ] SpotHistorycom Spot Instance Price History Graphs . http://wwwspothistorycom/
[ 37 ] F . Teng and F . Magoules . A new game theoretical resource allocation algorithm for cloud computing . In Advances in Grid and Pervasive Computing , pages 321–330 , 2010 .
[ 38 ] B . Urgaonkar and P . Shenoy . Sharc : Managing CPU and Network Bandwidth in Shared Clusters . IEEE Trans . on Parallel and Distr . Systems , 15(1):2–17 , 2004 .
[ 39 ] A . van den Nouweland , P . Borm , W . van
Golstein Brouwers , R . Bruinderink , and S . Tijs . A game theoretic approach to problems in telecommunication . Manage . Sci . , 42(2):294–303 , 1996 .
[ 40 ] M . Wellman . A market oriented programming environment and its application to distributed multicommodity flow problems . Journal of Artificial Intelligence Research , 1:1–23 , 1993 .
[ 41 ] H . Yaiche , R . Mazumdar , and C . Rosenberg . A game theoretic framework for bandwidth allocation and pricing of elastic connections in broadband networks . IEEE/ACM Trans . on Networking , 8(5):667–678 , 2000 .
[ 42 ] B . Yolken and N . Bambos . Game based capacity allocation for utility computing environments . In ValueTools ’08 Proc . , pages 1–8 , ICST , Brussels , Belgium , Belgium , 2008 .
Appendix A Since each player has to solve a convex optimization problems , we know that Nash equilibria of the game are the solutions of the KKT system associated to the game . If we denote with αd , αL σ the multipliers relative to constraints d ≥ 0 , 0 ≤ f ≤ f U , s ≥ 0 , and σL ≤ σ ≤ σU , respectively , then the KKT system of the game is as follows :
σ , and αU f , αs , αL f , αU
−δ − m Λ2
( C µ ( d + f + s ) − Λ)2 + αd = 0
−ϕ − m Λ2
( C µ ( d + f + s ) − Λ)2 + αL −σ − m Λ2 f − αU f = 0 s + αL
σ − αU
( C µ ( d + f + s ) − Λ)2 + αs = 0 σ = 0 αd d = 0 αL f f = 0 f ( f U − f ) = 0 αU αs s = 0 σ ( σ − σL ) = 0 αL σ ( σU − σ ) = 0 αU σ ≥ 0 f , αs , αL σ ∈ XI
αd , αL ( d , f , s ) ∈ XS ,
σ , αU f , αU
σ = 0 and αU
σ and αU σ , we obtain αL
σ can not be both positive , and αU
Since αL σ = s + σ ≥ αL αL σ = s . Moreover from the first and third equation we obtain αd ≥ αd − αs = δ − σ ≥ δ − σU > 0 , thus d = 0 . From the second and third equation we have : f ≤ −ϕ+σU +αL 0 = −ϕ+σ−αs+αL Let us consider three cases : ϕ > σU , ϕ = σU , and ϕ < σU . f ≤ −ϕ+σ+αL f −αU f −αU f −αU f .
1 . If ϕ > σU , then αL f > αU f . Hence we deduce that f > 0 , f = 0 , s > 0 , σ = σU , αs = 0 . f = 0 , αL
αU Moreover we find s = Λ C µ
,1 − m
σU
.
2 . If ϕ = σU , then we prove by contradiction that αL f > 0 , then we obtain αU
In fact , if αL αs = 0 , σ = σU , αL Since αL f + s = Λ C µ f ≥ αU f , we have αU 1 + f = 0 . f = 0 , f = 0 , s > 0 , f = ϕ − σU = 0 which is impossible . f = 0 . Therefore we find
−m ( C µ ( f + s ) − Λ)2 = σ − αs ≤ σ ≤ σU ,
. Moreover , we have :
σU = ϕ =
−m Λ2
σU thus αs = 0 and σ = σU .
3 . If ϕ < σU , then similarly to the previous case we obtain C µ and f = 0 . We now consider two cases : f U ≤ Λ αL f U > Λ • If f U ≤ Λ
C µ , then we have s > 0 , hence σ = σU f = σU − ϕ > 0 , thus
C µ . and αs = 0 . Moreover , αU f = f U and s = Λ C µ
1 +
−m
σU
− f U .
• If f U > Λ – If σU <
C µ we have to distinguish three cases :
−m Λ2
( C µ f U −Λ)2 , then we can prove that s > 0 . In fact , if s = 0 then
−m Λ2
( C µ f − Λ)2 ≥
−m Λ2
( C µ f U − Λ)2 > σU ,
−m Λ2
( C µ f − Λ)2 +αs ≥ −m − f U .
1 +
σU
σ =
C µ which is impossible . Hence we have αs = 0 , f = σU − ϕ > 0 , f = f U , s = σ = σU , αU Λ
−m Λ2
– If αU f = f U and
( C µ f U −Λ)2 < ϕ , then we can prove that f > 0 then f = 0 and s = 0 .
In fact , if αU
ϕ =
−m Λ2
( C µ ( f U + s ) − Λ)2 −αU f <
– If ϕ ≤
1 + which is impossible . Moreover , if s > 0 then σ = σU and 0 = αs = σU − ϕ > 0 which is impossible . Hence we obtain f = Λ C µ and σ = ϕ + αs ≥ ϕ .
−m ( C µ f U −Λ)2 ≤ σU , then we can prove that s = 0 and f = f U . In fact , if s > 0 then αs = 0 , σ = σU , and −m Λ2
( C µ ( f + s ) − Λ)2 − ϕ = σU − ϕ > 0 ,
−m Λ2 f =
αU
ϕ
−m Λ2
( C µ f U − Λ)2 ,
−m Λ2
( C µ ( f U + s ) − Λ)2 ≤ hence f = f U and −m Λ2 σU ≥
( C µ f U − Λ)2 >
−m Λ2
( C µ ( f U + s ) − Λ)2 = σU , which is impossible . Moreover , if f < f U then αU f = 0 and
−m Λ2
ϕ =
( C µ f − Λ)2 >
−m Λ2
( C µ f U − Λ)2 ≥ ϕ , which is impossible . Finally , we have σ = αs − ( C µ f U −Λ)2 ≥ −m Λ2
( C µ f U −Λ)2 . m Λ2
