!
,/ , .
From : KDD 97 Proceedings . Copyright © 1997 , AAAI ( wwwaaaiorg ) All rights reserved .
New Algorithms for Fast Discovery of Association
Rules
*
:
“ 8 ’
‘ ,
M . J . Zaki , S . Parthasarathy ,
M . Ogihara , and W . Li
Computer Science Department
University of Rochester Rochester NY 14627 {zaki,srini,ogihara,wei}@csrochesteredu
Abstract
Discovery of association rules is an important In this paper we problem in database mining . present new algorithms for fast association mining , which scan the database only once , addressing the open question whether all the rules can be efficiently extracted in a single database pass . The algorithms use novel itemset clustering techniques to approximate the set of potentially maximal frequent itemsets . The algorithms then make use of efficient lattice traversal techniques to generate the frequent itemsets contained in each cluster . We propose two clustering schemes based on equivalence classes and maximal hypergraph cliques , and study two traversal techniques based on bottom up and hybrid search . We also use a vertical database layout to cluster related transactions together . Experimental results show improvements of over an order of magnitude compared to previous algorithms .
Introduction application
{i&y* . rules . The prototypical tasks is the discovery of assoOne of the central KDD is the analciation sales or basket data ( Agrawal et ysis of supermarket al . 1996 ) , which can be formally stated as follows : Let ,&} be the set of database items . Each z= transaction , T , in the database , 2 ) , has a unique identifier , and contains a set of items , called an itemset . An itemset with k items is called a k itemset . The support of an itemset is the percentage of transactions in 2 ) that contain the itemset . An association rule is a conditional implication among itemsets , A + B . The data mining task for association rules can be broken into two steps . itemsets , The first step consists of finding all frequent ie , itemsets that occur in the database with a certain user specified frequency , called minimum support . The second step consists of forming the rules among the frequent itemsets . This step is relatively easy ( Agrawal in part by an NSF Research Initiation Award ( CCR 9409120 ) and ARPA contract ( F19628 94 C 0057 ) . Copyright 1997 , American Association for Artificial ( www,aaaiorg ) All rights reserved .
*This work was supported
Intelligence et al . 1996 ) , compared to the computationally intensive first step . Given m items , there are potentially 2 ” frequent itemsets , which form a lattice of subsets over Z . However , only a small fraction of the whole lattice space is frequent . This paper presents efficient methods to discover these frequent itemsets . Related Work Among the extant solutions , the Apriori algorithm ( Agrawal et aE . 1996 ) was shown to be superior to earlier approaches ( Park et al . 1995 ; Holsheimer et al . 1995 ) . It uses the downward closure property of itemset support to prune the itemset lattice the property that all subsets of a frequent itemset must themselves be frequent . Thus only the frequent k itemsets are used to construct candidate ( k $ 1) itemsets . A pass over the database is made at each level to find the frequent itemsets . The Partition algorithm ( Savasere et aE . 1995 ) minimizes I/O by scanning the database only twice . Once for genitemsets , and once erating a set of potential for gathering to minimize the I/O overhead is to work with only a small sample of the database ( Toivonen 1996 ; Zaki et aE . 1997a ) . A number of parallel algorithms have also been proposed ( Agrawal & Shafer 1996 ; Zaki et al . 1996 ; 1997c ) . their support .
Another way frequent
Itemset
Clustering
Consider the lattice shown in figure 1 . Due to the downward closure property of itemset support the frequent itemsets ( dashed circles ) form a border ( bold line ) , such that all frequent itemsets lie below it . The border is induced by the precisely determined by the sub lattices maximal frequent itemsets ( bold circles ) . If we are given the maximal frequent itemsets we can design an optimal algorithm that gathers the support of all their subsets in a single database pass . In general we cannot precisely determine the maximal itemsets a priori . We can however use intermediate results to obtain their approximations , called the potential maximal frequent itemsets . For any lc 1 2 , we Equivalence can generate the set of potential maximal itemsets from the set of frequent itemsets , Lk . We partition Lk into
Class Clustering
Z&i
283
Lattice of Subsets of { L2345 )
Sublattices Induced by Maximal Itemsets
Lattice of Subsets of {1,2,3,4 )
Lattice of Subsets of [ 3,4,5 )
Figure 1 : Lattice of Subsets and Maximal Itemset Induced Sub lattices
: k equivalence classes based on their common Ic 1 length prefix , given as , [ a ] = {b[k]la[l l ] = b[l : k 11 ) . For example , consider the Lz and the resulting equivalence classes shown in figure 2 . Any frequent itemset with the prefix 1 , must consist of items in [ ll , making 12345678 a potential maximal itemset . Each equivalence class can thus be considered as a potential maximal frequent itemset . Note that for lc = 1 we end up with YYl ” ll However , for any Ic 2 2 , we can extract more precise knowledge , with increasing precision as k increases . r~nivorna +ho “ &At . , ,LA ” AIb LUtiLII UIAI ” c.I ” ~ sa W ” Y11 , .IIu,ILIILIWI thn mavimal itnmrat I ” YIIIUU ” . ontirn itom
Frequent 2 Itemsets
I
( 12 , 13,14,15 , 16,17,18,23,25,27,28,34,35,36,45,46,56,58,68,78 )
Equivalence
Classes Maximal Cliques per Class Equivalence
Class Graph vertex sets of the cliques in C . Then for all maximal frequent itemsets f , 3t E M , such that f C t .
An example of maximal hypergraph clique clustering is given in figure 2 . The figure shows all the equivalence classes , the maximal cliques per class , and the hypergraph for class [ l ] . It can be seen immediately that clique clustering is more precise than equivalence class clustering . For example , for the class [ l ] , the former generated the maximal element 12345678 , while the latter a more refined set {1235,1258,1278,13456,1568} . The maximal cliques are discovered using a dynamic programming algorithm ; see ( Zaki et al . 199713 ) for details . As the edge density of the equivalence class graph increases the cost for generating the cliques may increase . Some of the factors affecting the edge density include decreasing support and increasing transaction size .
Lattice
Traversal
Traversal
Each potential maximal itemset generated by the above clustering schemes , induces a sublattice on 1 . We now have to traverse each of these sub lattices to determine the true frequent itemsets . A pure bottom up lattice Bottom up traversal proceeds in a breadth first manner generating all frequent itemsets of length Ic , before generating those of length k + 1 . Figure 3 shows an example of this scheme , with the potential maximal itemset , 123456 , and the true maximal frequent itemsets 1235 and 13456 . Most current algorithms use this approach ( Agrawal et al . 1996 ; Savasere et al . 1995 ; Park et al . 1995 ) . The Hybrid bottom up search may generate spurious candidates in the dl SiibSeiS of an itemset are frequent doesn’t guarantee that the itemset is frequent . We can envision other traversal techniques which quickly identify the set of true maximal frequent itemsets . If we are interested in all frequent itemsets , we can then gather the support of all their subsets as well . We rule out a pure top down ap
Top down/Bottom up
Stieps , SiiiCe
Traversal iiiteiimedi& fact the ihd
Figure 2 : Clustering Schemes
Hypergraph
Clique Clustering
From Maximal Lk , it is possible to generate a more refined set of potential maximal itemsets . The key observation is that given any frequent m itemset , for m > Ic , all its Lsubsets must be frequent . In graph theoretic terms , if each item is a vertex in a hypergraph , and each ksubset an edge , then the frequent m itemset must form a L uniform hypergraph clique . Furthermore , the set of maximal hypergraph cliques represents an approximatinn nr nnner hmmrl ~~*Y ” v . v tial frequent itemsets . All the true maximal frequent itemsets are contained in the vertex set of the maximal cliques , as stated formally in the lemma below . 1 Let HL~ be the t uniform hypergraph with Lemma vertex set 1 , and edge set Lk . Let C be the set of maximal hypergraph cliques in H , and let M be the set of gpA t,b,e sp,f ; of m+&md
YY p&p
284
KDD 97
Cluster :
Potential
Itemset
SUPPO Maximal
True
Maximal 1 13
12 150~300~200
1 14
Frequent 1 15 400~500
1 16
Itemset
( 123456 )
Frequent
Itemsets :
1235 ,
13456
HYBRID Sort
ItemSetS G3cacacsG3 Top Down
J VERSAL by support
Phase
BOTTOM UP
TRAVERSAL
Figure 3 : Bottom up and Hybrid Lattice Traversal preach due to the inaccuracies in the clusters ( Zaki et al . 1997b ) , and propose a hybrid top down/bottom up scheme that works well in practice . The basic idea is to start with a single element from the itemset cluster , and extend this by one more element till we generate an infrequent itemset . This comprises the top down phase . In the bottom up phase , the remaining elements are combined with the elements in the first set to generate all the additional frequent itemsets . For the top down phase , we sort the cluster elements in descending order of their support . We start with the element with maximum support , and extend it with the next element in the sorted order . This is based on the intuition that the larger the support the more likely is the itemset to be part of a larger itemset . Figure 3 shows an example of the hybrid scheme .
Transaction
Clustering
There are two possible layouts of the database for association mining . The horizontal layout ( Agrawal et al . 1996 ) consists of a list of transactions . Each transaction has an identifier followed by a list of items . The vertical layout ( Holsheimer et aE . 1995 ) consists of a list of items . Each item has a tid list the list of all the transactions containing the item . The vertical format seems more suitable for association mining since the support of a candidate k itemset can be computed by simple tidlist intersections . No complicated data structures need to be maintained . The tid lists cluster relevant transactions , and avoid scanning the whole database to compute support , and the larger the itemset , the shorter the tid lists , resulting in faster intersections . Furthermore , the horizontal layout seems suitable only for the bottom up traversal . The inverted layout , however , has a drawback . Intersecting 1 itemset tid lists to determine Ls can be very expensive ( Zaki et al . 199710 ) . This can be solved by using sampling(Toivonen 1996 ; Zaki et al . 1997a ) , or by using a preprocessing step to gather the support all 2 itemsets . Since this information is invariant , the pre processing has to be performed once initially , and the cost can be amortized over the number of times the data is mined . Our current implementation uses the pre processing approach due to its simplicity . Sampling requires an extra database pass , while pre processing requires extra storage . For m items , O(m2 ) disk space is required , which can be quite large for large m . However , for m = 1000 used in our experiments this adds only a very small extra storage overhead . Note that the database itself requires the same amount of space in both the horizontal and vertical formats .
New Association
Algorithms
We present four new algorithms , depending on the clustering and lattice traversal scheme used : l Edat : equivalence class & bottom up l MaxEclat : equivalence class & hybrid l Clique : maximal hypergraph clique & bottom up l MaxClique : maximal hypergraph clique & hybrid
The new algorithms use one of the itemset clustering schemes to generate potential maximal itemsets . Each such cluster induces a sublattice , which is traversed using bottom up search to generate all frequent itemsets , or using hybrid scheme to generate only the maximal frequent itemsets . Each cluster is processed in its entirety before moving on to the next cluster . Since the transactions are clustered using the vertical format , this involves a single database scan , resulting in huge I/O savings . Frequent itemsets are determined using simple tid list intersections . No complex hash structures need to be built or searched . The algorithms have low memory utilization , since only the frequent k itemsets within a single cluster need be kept in memory at any point . The use of simple intersection operations also makes the new algorithms an attractive option for direct implementation on general purpose database systems .
Experiment al Results
Our experiments used a 1OOMHz MIPS processor with 256MB main memory , with different benchmark databases ( Agrawal et al . 1996 ) . For fair comparison , all algorithms use 2 itemset supports from the preprocessing step . See ( Zaki et aE . 199713 ) for detailed ex
Z&i
285
T20l6DiOOK T20.l&D100~
1000 1000
100 100
P
1000 1000
0.25 % 0.25 %
Apriori Apriori Partition Partition Edat Edat Clique Clique MaxEcht MaxEclat MaxClique Maxclique
’ ’
TlO.14 , Min suppcni Tl0.14 , Min support c c + + 0 n _ , x , w w
0.1 0.1
2 % 2 %
L
1.5 % 1.5 %
‘1 % 1 %
0.75 % 0.75 % Minimum Minimum
Support Support
0.5 % 0.5 %
0.25 % 0.25 %
0.1 0.1
0.5 0.25 0.25 0.5 Transac&k NuKber NuC.ber of Transactiok of
( millions ) ( millions )
2.5 2.5
5 5
[ a ) ‘Ibtal Execution ‘I’ime
( b ) Number or ‘lransactions Scale up
Figure 4 : Performance Comparison periments . In figure 4 a ) , we compare our new algorithms against Apriori and Partition ( with 10 partitions ) on T2016DlOOK database . E&t outperforms Apriori by a factor of 10 , and Partition by a factor of 5 . As the support decreases , the size and the number of frequent itemsets increases . Apriori has to make multiple passes over the database , and performs poorly . Partition saves some I/O costs , but it spends time computing redundant frequent itemsets in common among different partitions . Among the new algorithms , CZique provides a finer level of clustering , reducing the number of candidates considered , and performs better than Eclat . Both the hybrid algorithms , MaxEcEat and MaxClique , outperform the bottom up ones , since they only find maximal itemsets , and thus perform fewer joins . Table 1 gives the number of joins performed by the difthe hypergraph ferent algorithms . Compared to E&t , clique clustering is able to cut down the joins by 25 % for Clique . Combined with the hybrid search , there is a 75 % reduction for MaxCZique , making it the best algorithm . It outperforms Apriori by a factor of 40 , Partition by a factor of 20 , and Eclat by a factor of 25
# Joins Time ( set )
Eclat 83606 46.7
Clique MaxEclat MaxClique 61968 42.1
20322 18.5
56908 28.5
Table 1 : Number of Joins : T2016DlOOK ( 0.25 % )
Figure 4 b ) shows how the different algorithms scale up as the number of transactions increases from 0.1 to 5 million ( M ) . The times are normalized against the execution time for MaxClique on O.lM transactions . The number of partitions for Partition was varied from 1 to 50 . While all the algorithms scale linearly , the slope is much smaller for the new algorithms . The new algorithms also scale well with transaction size , and have very low memory utilization ( Zaki et al . 199713 ) .
Conclusions
We proposed new algorithms for fast association mining , using three main techniques . We first cluster item
286
KDD 97 sets using equivalence classes or maximal hypergraph cliques . We then generate the frequent itemsets from each cluster using bottom up or hybrid traversal . A vertical database layout is used to cluster transactions , enabling us to make only one database scan . Experimental results indicate more than an order of magnitude improvements over previous algorithms .
References
J . mining
R & &&r ,
1996 . P~allel
Avmiwn.l of 0 “ ‘ ) _association rules . In IEEE Knowledge & Data Engg . , 8(6):962 969 . Agrawal , R . ; Mannila , H . ; Srikant , R . ; Toivonen , H . ; & Verkamo , A . 1996 . Fast discovery of association rules . In Advances in KDD . MIT Press . Holsheimer , M . ; Kersten , M . ; Mannila , H . ; & Toivonen , H . 1995 . A perspective on databases and data mining . In 1st KDD Conf . Park , J . ; Chen , M . ; & Yu , P . 1995 . An effective hash based algorithm for mining association rules . In SIGMOD Conf . Savasere , A . ; Omiecinski , E . ; and Navathe , S . 1995 . An efficient algorithm for mining association rules in large databases . In 2ist VLDB Conf Toivonen , H . 1996 . Sampling large databases for association rules . In 22nd VLDB Conf Zaki , M . ; Ogihara , M . ; Parthasarathy , S . ; & Li , W . 1996 . Parallel data mining for association rules on shared memory multi processors . In Supercomputing . Zaki , M . ; Parthasarathy , S . ; Li , W . ; & Ogihara , M . 1997a . Evaluation of sampling for data mining of association rules . In 7th Wlcshp . Resrch . Iss . Data Engg . Zaki , M . ; Parthasarathy , S . ; Ogihara , M . ; & Li , W . 199713 . New algorithms for fast discovery of association ntlw~ TR . 651 . cs I . Zaki , M . ; Parthasarathy , S . ; & Li , W . 1997c . A localized algorithm for parallel association mining . In 9th ACM Symp . Parallel Algorithms & Architectures .
TJniy , of ~ &&erG
”
* ,
Ihnt , . r 7
