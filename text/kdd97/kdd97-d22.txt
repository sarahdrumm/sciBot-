From : KDD 97 Proceedings . Copyright © 1997 , AAAI ( wwwaaaiorg ) All rights reserved . Improving
Scalability in a Scientific Discovery System by Exploiting
Parallelism
Gehad Galal , Diane
J . Cook and Lawrence
University of Texas at Arlington {galal,cook,holder}@cseutaedu
B . Holder
Abstract
Qhilitinc u , “ #ll ” lY ”
. “ ‘Lx , “ Y’1’& rocolrrhara’ ‘~UCW~II~I,~ intornrot tn U ” ‘I~ “ ~~‘y ” .‘ ”
The large amount of data collected today is quickly rwrcm.mrhnlminn the “ “ l.l data and discover interesting patterns . Knowledge discovery and data mining approaches hold the potential to automate the interpretation process , but these approaches frequently utilize computationally expensive algorithms . This research outlines a general approach for scaling KDD systems using parallel and clistribut,erl resources and applies the suggested strategies to the has SUBDUE been used to discover interesting and repetitive concepts in graph based databases from a variety of dom~;nn nf n,,\,~occ~ h+ LYcLLlll ” , VU ” ing time . Experiments that demonstrate scalability of parallel versions of the SUBDUE system are performed using CAD circuit databases and artificially generated databases , and potential achievements and obstacles are discussed . knowledge discovery system . SUBDUE camnrrnt C ” LAA ” UI.Y “ I yL\‘.A ” m
.a nrrhct~nt;al u cJ ” “ O ” ‘WI ” aw rom,;wx r,yulrs , ”
Introduction dJ
M;l.nv scimt,ifir
L
J _. _ _1
1ark of srAnhilitv
One of the barriers to the integration of scientific discovery methods into practical data mining approaches ic : their 1 systems are motivated from the desire to evaluate the correctness of a discovery method without regard to the method ’s scalability . As an example , our SIJBDIJE system was developed to evaluate the effectiveness of the minimum description length principle to discover regularities in a variety of scientific domains ( Cook , Holder , & Djoko 1996 ) .
&XXXT~
Another factor is that some scientific discovery aysterns deal with richer data representations that only degrade scalability . A number of attribute value based approaches have been deveioped that discover concepts and can address issues of data relevance , missing data , noise , and utilization of domain knowledge . However ,
‘Copyright @ 1997 , American Association for Artificial
Intelligence ( www,aaaiorg ) All rights reserved . much of the data being collected is structural in nature , requiring tools for the analysis and discovery of concepts in structural data ( Fayyad et a ? . 1996 ) . For ~~~ I L,._ cl I__,n __^ L __^^^ ^ ____ I . L,,J __ _ example , r;ne JUBUVB system uses i* g~apn ~c13~‘~ ~r;p~rjsentation of the input data that captures the structural information . Although the subgraph isomorphism procedure needed to deal with this data has been polynomially constrained within SUBDUE , the system still spends a considerable amount of computation performing this task .
The goal of this research is to demonstrate that KDD systems can be made scalable through efficient use of parallel and distributed hardware . To accomplish this goal , we introduce a general approach to parallelizing KDD systems and apply the proposed techniques to the SIJBDUE discovery system .
Related approaches to scaling data mining and discovery systems have been pursued . Parallel MIMD approaches to concept learning have included partitioning the data set among processors and partitioning the search space among available processors ( Provost & Hennessy 1996 ; Chan & Stolfo 1993 ) . Data partitioning approaches have also been effective for certain limited approaches to data mining and knowledge discovery on 3nvru architectures . T _ re LL I I_:,:A. unprovmg ~nl : acitlaun~y of scientific discovery systems will help break down the barrier excluding these techniques from practical data mining approaches .
“ 71 In
Overview of SUBDUE
We have developed a method for discovering substructures in databases using the minimum description length principle . SUBDUE discovers substructures that compress the original data and represent structural concepts in the data . Once a substructure is discovered , the substructure is used to simplify the data by replacing instances of the substructure with a pointer to the newly discovered substructure .
The substructure discovery system represents structural data as a labeled graph . Objects in the data
G&l
171 structure definition . A scientist can direct the search with background knowledge in the form of known substructure models that may potentially appear in the database! or graph match rules to adjust the cost of SUBDUE has been each inexact graph match test . successfully applied to databases in domains including image analysis , CAD circuit analysis , Chinese character databases , program source code , chemical reaction chains , Brookhaven protein databases , and artificiallygenerated databases ( Cook , Holder , & Djoko 1996 ) .
The results of the scalability study in this paper are demonstrated on databases in two different domains . The first type of database is a graph representation of CAD A to D converer circuit provided by National Semiconductor containing 8,441 edges and 19,206 edges . The second type of database is an artificially constructed graph with 1,000 vertices and 2,500 edges in which instances of a predefined substructure are embedded in a random graph . To test scalability on larger databases while maintaining the characteristics of these two domains , we generate multiple copies of the CAD and ART graphs and merge the copies together by arbitrarily connecting the indithus vidual graphs . The terms “ n CAD ” and “ n ART ” rofnr thn nf I.II ” I “ I Loll.2 CAD or ART graphs . rrranh.a mwtcictinrr “ “ 111,1 ” “ 111~ rrf m marmwl “ L IU lllcll6t.,U fn “ V w bly,L ” > c rm;on c , “ yrb ”
I
Scaling KDD
Systems hmrintirn 11 “ 1 m mrnn.chh Rnth ~~ ^ . 1 1
Making use of parallel and distributed resources can significantly affect the scalability of a KDD system . Parallelizing a knowledge discovery system is not easy because many KDD systems rely upon heuristics and inherent greedy algorithms to avoid the intractability irk a>~! t&al.&iye nnrl cwma lv o “ ~ ~ * algorithms share the potential of finding a suboptimal solution and , on closer inspection , a sequentially oriented solution . In many cases KDD algorithms can perform better if they are provided with enough history of the problem being solved , thus they will perform better in a sequential approach . In addition , the knowledge discovered in each step by KDD systems depends heavily on what has been discovered in previous steps . Thus , we cannot decompose the work without increasing the synchronization and communication between the paraiiei processors .
Two main MIMD distributed memory approaches to designing parallel algorithms are the functional parallel approach and the data parallel approach . In the functional parallel approach the algorithm steps are assigned to different processors , while in a data parallel approach each processor applies the same algorithm to different parts of the input data .
Figure 1 : Sample results of Subdue on a protein sequence . map to vertices or small subgraphs in the graph , and relationships between objects map to directed or undirected edges in the graph . A substructure is a conthe graphical representation . nected subgraph within This graphical repretientation serves as input to the of a subsubstructure discovery system . An instance in an input graph is a set of vertices and structure L Al L _^_I L L LL ; I ? . 1 ,%A* , , ” c,, , , CL , . : I ~;uE;~;D LLUI~I tdt : III~UL ~;1ap11 brm III~CCII we grdpmcd representation of the substructure .
Figure 1 shows a sample input database containing a portion of a DNA sequence . In this case , atoms and small molecules in the sequence are represented with labeled vertices in the graph , and the single and donble bonds between atoms are represented with labeled edges in the graph . SUBDUE discovers substructure S1 from the input database . After compressing the original database using ,!?I , SIJBDIJE finds substructure 4 , which when used to compress the database further allows SUBDUE to find substructure 5 ’s . Such repeated application of SUBDUE generates a hierarchical description of the structures in the database .
The substructure discovery algorithm used by SIJBDUE is a beam search . The algorithm begins with the substructure matching a single vertex in the graph . Each iteration the algorithm selects the best substructure and incrementally expands the instances of the substructure . The algorithm searches for the best substructure until all possible substructures have been considered or the totai amount of computation exceeds a given limit . Evaluation of each substructure is determined by how well the substructure cornpresses the description length of the database .
Because instances of a substructure can appear in the database , an inexact different forms throughout graph match is used to identify substructure instances from the suhwith a bounded amount of variation
172
KDD 97
SUBDUE
Partitioning
Dynamic the first data partitioning approach , DynamicIn Partitioning SUBDUE , each processor starts evaluating a disjoint set of the input data . When DP SUBDUE is run , processor i begins processing a candidate substructure corresponding to the ith unique label in the graph . Each processor receives a copy of the entire input graph and processes a portion of the possible substructures . To prevent work replication , DP SUBDUE constrains processors expanding a substructure to only include vertices with a label index greater than the processor ID . Load balancing is permitted between processors to prevent excessiving processor idling . The partitions here are logical : the set of all instances of all the candidate substructures discovered by a processor constitutes its partition . Quality control is imposed on the processors in the DP SUBDUE system by periodically pruning all substructure candidates with values less than the global average . Results from the DP SUBDUE system indicate that very limited speedup can be achieved by distributing the substructure expansion and evaluation . The work done to limit duplicate work and to load balance the system consumes considerable time in processing and communication . In addition , the memory requirements of this data partitioning approach are excessive because the entire database is copied on each processor . The speedup achieved is very limited and the results are not included in this paper .
SUBDUE
Static Partitioning approach was not successAlthough the DP SUBDUE ful , the data partitioning idea itself is very appealing in terms of both memory usage and speedup . Here we introduce a static partitioning parallel approach .
In SP STJBDUE we partition the input graph into n partitions for n processors . Each processor performs sequential SUBDUE on its local graph partition and broadcasts its best substructures to the other processors . Each processor then evaluates the communicated substructures on its own local partition . Once all evaluations are complete , a master processor gathers the results and determines the global best discoveries .
In partitioning the graph we want to balance the work load equally between processors while retaining as much information as possible ( edges along which the graph is partitioned may represent important information ) . The Metis graph partitioning package tries to the graph so that the sum of the cut edges partition is minimized . The run time of Metis to partition the databases is very small ( ten seconds on average ) and is thus not included in the parallel run time .
Figures 4 and 5 graph the run time of SP SUBDUE
G&i
173
4
6
10
8 12 # processors
14
16
Figure 2 : Discovery time of 60 substructures in ART .
1 CAD 2 CAD . 3 CAD __ 4 CAD . __
4
6
10
8 12 # processors
14
16
Figure 3 : Discovery time of 60 substructures in CAD .
F’unctional Parallel
SUBDUE
The main idea behind this algorithm is to divide S~JBDUE’S search for candidate substructures among processors . The search queue is maintained by one master processor which keeps track of the best discovered substructures . The master decides whether to keep expanded substructures based on a global evaluation of discovered substructures . If a slave processor does not have any substructures then the master asks another processor to transfer a substructure to the requesting processor .
Figures 2 through 3 graph the decrease in runtime of FP SUBDUE as the number of processors increases using an nCUBE 2 . The amount of compression achieved may also sometimes increase as the number of processors increases . This is due to the fact that the beam width combined over all processors is greater than a single beam width on the serial machine , and thus a greater number of substructures can be considered .
2500
2
4
6
8
10
12 # processors
14
16
Figure 4 : CAD database evaluation time .
2
4
6
8
10
12 # Processors
14
16
Figure 5 : ART database evaluation time . on the CAD and artificial databases as the number of processors increases . The speedup achieved with the ART database is always superlinear . This is because the run time of sequential SUBDUE is nonlinear with respect to the size of the database . Each processor essentially executes a serial version of SUBDUE on a small portion of the overall database , so the combined run time is less than that of serial SUBDUE .
Increasing the number of processors for the nCAD and nART databases results in similar quality discovered substructures . As the number of partitions becomes large , the quality of the discovered substructures will decrease because some of the edges are cut . However , with a small number of partitions superior compression to that of the sequential version can he realized because the combined beam length is larger over several processors than for the one processor used in the serial version of the algorithm .
DA , . , , Ah 1L^ 2 ^ LlL : ^___ A ^^_ Ll . ~.~~ 6116 : ~lWCW
~Ji3,~LlLlWlW tl,IIlC,Il~ sors , SP SUBDUE can also utilize the increased mern
UW,c1USt :
‘,CM,il , bllt :
IS
174
KDD 97 ory resources of a network of workstations using communication software such as PVM . The performance of SP SUBDUE on a network of 14 PCs also improves close to linearly in the number of processors .
Conclusions component of increasing structural
The today ’s databases requires data mining algorithms capable of handling structural information . The SUBDUE system is specifically designed to discover knowledge in structural databases . However , the computational expense of a discovery system such as SUBDUE can deter widespread application of the algorithms .
, lsa+r,h~o,,o uca~aL,al,~ , ,
In this paper , we investigate methods for improving the scalability of scientific discovery methods using parallel resources . When comparing the benefits of the three parallel applied to SUBDUE , approaches , DP SUBDUE is discarded because of poor run time and heavy memory requirements . FP SUBDUE can prove effective in discovering substructures in very l~rmn ‘aL~.z SP SIJBDUE is the most interesting approach of all by partitioning the database effectively , SP SUBDUE proves to be a highly scalable system . One of our databases contains 2 million vertices and 5 million is able to process the database edges , yet SP SUBDUE in less than three hours . The minimal amount of communication and synchronization that is required make ideal for distributed environments . We SP SUBDIJE have demonstrated the scalability of one KDD system using these techniques , and will continue to apply the described methodology to other systems . nl n,w.:+hcu~ “ IICIIIII .
,:c,r , UluyuG or\nvnh 3~aAbll
A , , uuc
:+n llrU
+A IJ ”
Acknowledgements
This research is supported by NASA 32337 and NSF grant IRI 9502260 . grant NAS5
References
Chan , P . , and Stolfo , S . 1993 . Toward parallel and distributed learning by meta learning . In Working notes of the AAAI 93 workshop on Knowledge Discovery in n La,n^ ” or)?7 .?A* uucu ” ust;s , AL I Le ” . Cook , D . J . ; Holder , L . B . ; and Djoko , S . 1996 . Scalable discovery of informative structural concepts using domain knowledge . IEEE Expert 11(5):59 68 . Fayyad , U . M . ; Piatetsky Shapiro , G . ; Smyth , P . ; and Uthurusamy , R . 1996 . Advances in Knowledge Discovery and Data Mining . Menlo Park , CA : AAAI Press . Provost , F . J . , and Hennessy , D . 1996 . Scaling up : Distributed machine learning with cooperation . In Proceedings of AAAI ,
74 79 .
